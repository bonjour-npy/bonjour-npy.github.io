[{"documents":[{"i":888,"t":"鸣谢","u":"/en/docs/Acknowledgement/intro","b":["🍺 饮水思源"]},{"i":893,"t":"反序输出","u":"/en/docs/Algorithms/题解/反序输出","b":["题解"]},{"i":899,"t":"排列组合（求30的倍数）","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","b":["题解"]},{"i":905,"t":"编译原理笔记","u":"/en/docs/Curriculum/编译原理/Note","b":["编译原理"]},{"i":963,"t":"一维前缀和（刷出一道墙）","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","b":["题解"]},{"i":969,"t":"GeekOS project 0的实现","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","b":["操作系统课设"]},{"i":975,"t":"Welcome","u":"/en/docs/Curriculum/intro","b":["📖 课程学习"]},{"i":979,"t":"Welcome","u":"/en/docs/Algorithms/intro","b":["🎰 算法"]},{"i":983,"t":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","b":["大模型基础"]},{"i":991,"t":"生成式对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型基础/GAN","b":["大模型基础"]},{"i":1008,"t":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","b":["大模型基础"]},{"i":1031,"t":"数字图像处理复习笔记","u":"/en/docs/Curriculum/数字图像处理/Note","b":["数字图像处理"]},{"i":1084,"t":"生成模型中的采样技巧","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","b":["大模型基础"]},{"i":1102,"t":"图像生成模型","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","b":["大模型基础"]},{"i":1129,"t":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","b":["大模型基础","Prompt Learning"]},{"i":1164,"t":"自监督学习（Self-Supervised Learning）","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","b":["大模型基础"]},{"i":1180,"t":"Speaker Classification","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","b":["代码实现"]},{"i":1188,"t":"Stable Diffusion 与 Stable Cascade","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","b":["代码实现"]},{"i":1193,"t":"Visdom可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","b":["代码实现"]},{"i":1204,"t":"自注意力（Self-Attention）","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","b":["大模型基础"]},{"i":1234,"t":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","b":["代码实现"]},{"i":1269,"t":"深度可分离卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","b":["基础知识"]},{"i":1277,"t":"激活函数与Loss的梯度","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","b":["基础知识"]},{"i":1288,"t":"AlexNet","u":"/en/docs/Deep-Learning/基础知识/AlexNet","b":["基础知识"]},{"i":1295,"t":"正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","b":["基础知识"]},{"i":1303,"t":"K-fold cross-validation","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","b":["基础知识"]},{"i":1310,"t":"卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","b":["基础知识"]},{"i":1315,"t":"从全连接到卷积","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","b":["基础知识"]},{"i":1322,"t":"关于Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","b":["基础知识"]},{"i":1331,"t":"Perceptron","u":"/en/docs/Deep-Learning/基础知识/Perceptron","b":["基础知识"]},{"i":1338,"t":"池化层","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","b":["基础知识"]},{"i":1345,"t":"PyTorch基础","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","b":["基础知识"]},{"i":1348,"t":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","b":["论文笔记"]},{"i":1371,"t":"LeNet","u":"/en/docs/Deep-Learning/基础知识/LeNet","b":["基础知识"]},{"i":1378,"t":"Autoregressive Image Generation without Vector Quantization","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","b":["论文笔记"]},{"i":1400,"t":"Autoregressive Model Beats Diffusion: Llama for Scalable Image Generation","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","b":["论文笔记"]},{"i":1411,"t":"MARS: Mixture of Auto-Regressive Models for  Fine-grained Text-to-image Synthesis","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","b":["论文笔记"]},{"i":1420,"t":"CVPR 2022: High-Resolution Image Synthesis with Latent Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","b":["论文笔记"]},{"i":1439,"t":"NeurIPS 2020: Denoising Diffusion Probabilistic Models","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","b":["论文笔记"]},{"i":1450,"t":"Movie Gen: A Cast of Media Foundation Models","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","b":["论文笔记"]},{"i":1470,"t":"CVPR 2023: Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","b":["论文笔记"]},{"i":1483,"t":"Visual Autoregressive Modeling: Scalable Image Generation via Next-Scale Prediction","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","b":["论文笔记"]},{"i":1497,"t":"Understanding Diffusion Models: A Unified Perspective","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","b":["论文笔记"]},{"i":1525,"t":"自回归模型：LlamaGen","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","b":["生成模型总结"]},{"i":1536,"t":"自回归模型：MAR","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","b":["生成模型总结"]},{"i":1558,"t":"图像生成：自回归模型","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","b":["生成模型总结"]},{"i":1579,"t":"图像生成和视频生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","b":["生成模型总结"]},{"i":1588,"t":"主要技术简记","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","b":["生成模型总结"]},{"i":1600,"t":"查漏补缺","u":"/en/docs/Deep-Learning/Fill-The-Gaps","b":[]},{"i":1610,"t":"自回归模型：VAR","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","b":["生成模型总结"]},{"i":1627,"t":"图像生成：扩散模型","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","b":["生成模型总结"]},{"i":1639,"t":"Welcome","u":"/en/docs/Deep-Learning/intro","b":["🤖 深度学习"]},{"i":1643,"t":"告示栏","u":"/en/docs/Others/博客搭建/announcement_bar","b":["博客搭建"]},{"i":1645,"t":"更新至 Docusaurus V3","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","b":["博客搭建"]},{"i":1655,"t":"Welcome","u":"/en/docs/Others/intro","b":["☃️ 其他"]},{"i":1659,"t":"如何让你的Kde Plasma看起来更像macOS","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","b":["Linux","客制化"]},{"i":1664,"t":"挂载Windows磁盘为只读文件","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","b":["Linux","问题解决"]},{"i":1669,"t":"数据结构","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","b":["计算机基础综合"]},{"i":1674,"t":"终端代理","u":"/en/docs/Others/Linux/实用工具/终端代理","b":["Linux","实用工具"]},{"i":1682,"t":"大数除法","u":"/en/docs/Tui-Mian/机试/大数除法","b":["机试"]},{"i":1690,"t":"概率论","u":"/en/docs/Tui-Mian/数学/概率论","b":["数学"]},{"i":1693,"t":"Welcome","u":"/en/docs/Tui-Mian/intro","b":["🤡 推免"]},{"i":1697,"t":"夏令营面试数学部分复习","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","b":["数学"]},{"i":1702,"t":"线性代数","u":"/en/docs/Tui-Mian/数学/线性代数","b":["数学"]},{"i":1708,"t":"经验贴：2023年双非计算机保研经历","u":"/en/docs/Tui-Mian/Summary","b":[]},{"i":1719,"t":"简历面试准备","u":"/en/docs/Tui-Mian/简历/简历面试准备","b":["简历"]},{"i":1761,"t":"Linux 系统下 GeekOS 的环境配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","b":["操作系统课设"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/888",[0,1.059]],["t/893",[0,1.059]],["t/899",[1,5.038]],["t/905",[0,1.059]],["t/963",[0,1.059]],["t/969",[2,3.033,3,3.502,4,3.502]],["t/975",[5,3.322]],["t/979",[5,3.322]],["t/983",[6,2.543,7,2.132]],["t/991",[8,5.038]],["t/1008",[9,2.363,10,2.631,11,2.363,12,2.631]],["t/1031",[0,1.059]],["t/1084",[0,1.059]],["t/1102",[0,1.059]],["t/1129",[0,1.032,13,2.087,14,1.91]],["t/1164",[14,2.493,15,3.033,16,3.502]],["t/1180",[17,4.132,18,4.132]],["t/1188",[0,0.564,6,1.652,19,4.066,20,2.683]],["t/1193",[21,5.038]],["t/1204",[11,3.214,15,3.578]],["t/1234",[0,1.032,13,2.087,14,1.91]],["t/1269",[0,1.059]],["t/1277",[22,5.038]],["t/1288",[23,5.038]],["t/1295",[0,1.059]],["t/1303",[24,3.038,25,3.038,26,3.038,27,3.038]],["t/1310",[0,1.059]],["t/1315",[0,1.059]],["t/1322",[28,4.132,29,3.578]],["t/1331",[30,5.038]],["t/1338",[0,1.059]],["t/1345",[31,5.038]],["t/1348",[9,2.363,10,2.631,11,2.363,12,2.631]],["t/1371",[32,5.038]],["t/1378",[33,1.869,34,1.479,35,1.71,36,2.402,37,2.402,38,2.402]],["t/1400",[6,1.223,7,1.025,33,1.545,34,1.223,35,1.414,39,1.987,40,1.987,41,1.721]],["t/1411",[7,0.874,29,1.467,34,1.042,42,1.467,43,1.694,44,1.694,45,1.694,46,1.694,47,1.694,48,1.467]],["t/1420",[6,1.125,7,0.944,34,1.125,48,1.584,49,1.584,50,1.828,51,1.828,52,1.828,53,1.828]],["t/1439",[6,1.479,7,1.24,9,1.869,54,2.402,55,2.402,56,2.402]],["t/1450",[7,1.24,57,2.402,58,2.402,59,2.402,60,2.402,61,2.402]],["t/1470",[7,0.762,13,1.148,14,1.051,34,0.908,35,1.051,49,1.278,62,1.278,63,1.476,64,1.476,65,1.476,66,1.278,67,1.476]],["t/1483",[7,0.874,33,1.317,34,1.042,35,1.206,41,1.467,66,1.467,68,1.694,69,1.694,70,1.694,71,1.694]],["t/1497",[6,1.652,7,1.385,72,2.683,73,2.683,74,2.683]],["t/1525",[75,5.038]],["t/1536",[42,4.363]],["t/1558",[0,1.059]],["t/1579",[0,1.059]],["t/1588",[0,1.059]],["t/1600",[0,1.059]],["t/1610",[76,5.038]],["t/1627",[0,1.059]],["t/1639",[5,3.322]],["t/1643",[0,1.059]],["t/1645",[0,0.736,77,3.502,78,3.502]],["t/1655",[5,3.322]],["t/1659",[79,4.132,80,4.132]],["t/1664",[81,5.038]],["t/1669",[0,1.059]],["t/1674",[0,1.059]],["t/1682",[0,1.059]],["t/1690",[0,1.059]],["t/1693",[5,3.322]],["t/1697",[0,1.059]],["t/1702",[0,1.059]],["t/1708",[62,4.363]],["t/1719",[0,1.059]],["t/1761",[0,0.938,2,2.631,82,3.038]]],"invertedIndex":[["",{"_index":0,"t":{"888":{"position":[[0,2]]},"893":{"position":[[0,4]]},"905":{"position":[[0,6]]},"963":{"position":[[0,12]]},"1031":{"position":[[0,10]]},"1084":{"position":[[0,10]]},"1102":{"position":[[0,6]]},"1129":{"position":[[0,9],[26,3],[30,17]]},"1188":{"position":[[17,1]]},"1234":{"position":[[0,9],[26,3],[30,17]]},"1269":{"position":[[0,7]]},"1295":{"position":[[0,8]]},"1310":{"position":[[0,3]]},"1315":{"position":[[0,7]]},"1338":{"position":[[0,3]]},"1558":{"position":[[0,10]]},"1579":{"position":[[0,13]]},"1588":{"position":[[0,6]]},"1600":{"position":[[0,4]]},"1627":{"position":[[0,9]]},"1643":{"position":[[0,3]]},"1645":{"position":[[0,3]]},"1669":{"position":[[0,4]]},"1674":{"position":[[0,4]]},"1682":{"position":[[0,4]]},"1690":{"position":[[0,3]]},"1697":{"position":[[0,11]]},"1702":{"position":[[0,4]]},"1719":{"position":[[0,6]]},"1761":{"position":[[6,3],[17,5]]}}}],["0",{"_index":4,"t":{"969":{"position":[[15,4]]}}}],["2017",{"_index":10,"t":{"1008":{"position":[[8,5]]},"1348":{"position":[[8,5]]}}}],["2020",{"_index":54,"t":{"1439":{"position":[[8,5]]}}}],["2022",{"_index":50,"t":{"1420":{"position":[[5,5]]}}}],["2023",{"_index":62,"t":{"1470":{"position":[[5,5]]},"1708":{"position":[[0,18]]}}}],["30",{"_index":1,"t":{"899":{"position":[[0,12]]}}}],["adapt",{"_index":65,"t":{"1470":{"position":[[38,10]]}}}],["alexnet",{"_index":23,"t":{"1288":{"position":[[0,7]]}}}],["attent",{"_index":11,"t":{"1008":{"position":[[14,9]]},"1204":{"position":[[10,10]]},"1348":{"position":[[14,9]]}}}],["auto",{"_index":44,"t":{"1411":{"position":[[17,4]]}}}],["autoregress",{"_index":33,"t":{"1378":{"position":[[0,14]]},"1400":{"position":[[0,14]]},"1483":{"position":[[7,14]]}}}],["beat",{"_index":39,"t":{"1400":{"position":[[21,5]]}}}],["cascad",{"_index":20,"t":{"1188":{"position":[[26,7]]}}}],["cast",{"_index":59,"t":{"1450":{"position":[[13,4]]}}}],["classif",{"_index":18,"t":{"1180":{"position":[[8,14]]}}}],["cross",{"_index":26,"t":{"1303":{"position":[[7,5]]}}}],["cvpr",{"_index":49,"t":{"1420":{"position":[[0,4]]},"1470":{"position":[[0,4]]}}}],["denois",{"_index":55,"t":{"1439":{"position":[[14,9]]}}}],["diffus",{"_index":6,"t":{"983":{"position":[[0,14]]},"1188":{"position":[[7,9]]},"1400":{"position":[[27,10]]},"1420":{"position":[[55,9]]},"1439":{"position":[[24,9]]},"1497":{"position":[[14,9]]}}}],["docusauru",{"_index":77,"t":{"1645":{"position":[[4,10]]}}}],["fine",{"_index":45,"t":{"1411":{"position":[[45,4]]}}}],["fold",{"_index":25,"t":{"1303":{"position":[[2,4]]}}}],["foundat",{"_index":61,"t":{"1450":{"position":[[27,10]]}}}],["gan",{"_index":8,"t":{"991":{"position":[[0,12]]}}}],["geeko",{"_index":2,"t":{"969":{"position":[[0,6]]},"1761":{"position":[[10,6]]}}}],["gen",{"_index":58,"t":{"1450":{"position":[[6,4]]}}}],["gener",{"_index":35,"t":{"1378":{"position":[[21,10]]},"1400":{"position":[[63,10]]},"1470":{"position":[[21,10]]},"1483":{"position":[[47,10]]}}}],["grain",{"_index":46,"t":{"1411":{"position":[[50,7]]}}}],["high",{"_index":51,"t":{"1420":{"position":[[11,4]]}}}],["imag",{"_index":34,"t":{"1378":{"position":[[15,5]]},"1400":{"position":[[57,5]]},"1411":{"position":[[66,5]]},"1420":{"position":[[27,5]]},"1470":{"position":[[53,5]]},"1483":{"position":[[41,5]]}}}],["k",{"_index":24,"t":{"1303":{"position":[[0,1]]}}}],["kde",{"_index":79,"t":{"1659":{"position":[[0,8]]}}}],["latent",{"_index":53,"t":{"1420":{"position":[[48,6]]}}}],["learn",{"_index":14,"t":{"1129":{"position":[[17,8]]},"1164":{"position":[[22,9]]},"1234":{"position":[[17,8]]},"1470":{"position":[[75,8]]}}}],["lenet",{"_index":32,"t":{"1371":{"position":[[0,5]]}}}],["linux",{"_index":82,"t":{"1761":{"position":[[0,5]]}}}],["llama",{"_index":40,"t":{"1400":{"position":[[38,5]]}}}],["llamagen",{"_index":75,"t":{"1525":{"position":[[0,14]]}}}],["logist",{"_index":28,"t":{"1322":{"position":[[0,10]]}}}],["loss",{"_index":22,"t":{"1277":{"position":[[0,12]]}}}],["mar",{"_index":42,"t":{"1411":{"position":[[0,5]]},"1536":{"position":[[0,9]]}}}],["media",{"_index":60,"t":{"1450":{"position":[[21,5]]}}}],["mixtur",{"_index":43,"t":{"1411":{"position":[[6,7]]}}}],["model",{"_index":7,"t":{"983":{"position":[[15,6]]},"1400":{"position":[[15,5]]},"1411":{"position":[[33,6]]},"1420":{"position":[[65,6]]},"1439":{"position":[[48,6]]},"1450":{"position":[[38,6]]},"1470":{"position":[[32,5]]},"1483":{"position":[[22,9]]},"1497":{"position":[[24,7]]}}}],["movi",{"_index":57,"t":{"1450":{"position":[[0,5]]}}}],["need",{"_index":12,"t":{"1008":{"position":[[35,4]]},"1348":{"position":[[35,4]]}}}],["neurip",{"_index":9,"t":{"1008":{"position":[[0,7]]},"1348":{"position":[[0,7]]},"1439":{"position":[[0,7]]}}}],["next",{"_index":69,"t":{"1483":{"position":[[62,4]]}}}],["perceptron",{"_index":30,"t":{"1331":{"position":[[0,10]]}}}],["perspect",{"_index":74,"t":{"1497":{"position":[[42,11]]}}}],["plasma看起来更像maco",{"_index":80,"t":{"1659":{"position":[[9,16]]}}}],["predict",{"_index":71,"t":{"1483":{"position":[[73,10]]}}}],["probabilist",{"_index":56,"t":{"1439":{"position":[[34,13]]}}}],["project",{"_index":3,"t":{"969":{"position":[[7,7]]}}}],["prompt",{"_index":13,"t":{"1129":{"position":[[10,6]]},"1234":{"position":[[10,6]]},"1470":{"position":[[68,6]]}}}],["pytorch",{"_index":31,"t":{"1345":{"position":[[0,9]]}}}],["quantiz",{"_index":38,"t":{"1378":{"position":[[47,12]]}}}],["regress",{"_index":29,"t":{"1322":{"position":[[11,10]]},"1411":{"position":[[22,10]]}}}],["resolut",{"_index":52,"t":{"1420":{"position":[[16,10]]}}}],["scalabl",{"_index":41,"t":{"1400":{"position":[[48,8]]},"1483":{"position":[[32,8]]}}}],["scale",{"_index":70,"t":{"1483":{"position":[[67,5]]}}}],["self",{"_index":15,"t":{"1164":{"position":[[0,10]]},"1204":{"position":[[0,9]]}}}],["shot",{"_index":64,"t":{"1470":{"position":[[16,4]]}}}],["speaker",{"_index":17,"t":{"1180":{"position":[[0,7]]}}}],["specif",{"_index":67,"t":{"1470":{"position":[[59,8]]}}}],["stabl",{"_index":19,"t":{"1188":{"position":[[0,6],[19,6]]}}}],["supervis",{"_index":16,"t":{"1164":{"position":[[11,10]]}}}],["synthesi",{"_index":48,"t":{"1411":{"position":[[72,9]]},"1420":{"position":[[33,9]]}}}],["text",{"_index":47,"t":{"1411":{"position":[[58,4]]}}}],["understand",{"_index":72,"t":{"1497":{"position":[[0,13]]}}}],["unifi",{"_index":73,"t":{"1497":{"position":[[34,7]]}}}],["v3",{"_index":78,"t":{"1645":{"position":[[15,2]]}}}],["valid",{"_index":27,"t":{"1303":{"position":[[13,10]]}}}],["var",{"_index":76,"t":{"1610":{"position":[[0,9]]}}}],["vector",{"_index":37,"t":{"1378":{"position":[[40,6]]}}}],["via",{"_index":66,"t":{"1470":{"position":[[49,3]]},"1483":{"position":[[58,3]]}}}],["visdom",{"_index":21,"t":{"1193":{"position":[[0,9]]}}}],["visual",{"_index":68,"t":{"1483":{"position":[[0,6]]}}}],["welcom",{"_index":5,"t":{"975":{"position":[[0,7]]},"979":{"position":[[0,7]]},"1639":{"position":[[0,7]]},"1655":{"position":[[0,7]]},"1693":{"position":[[0,7]]}}}],["window",{"_index":81,"t":{"1664":{"position":[[0,16]]}}}],["without",{"_index":36,"t":{"1378":{"position":[[32,7]]}}}],["zero",{"_index":63,"t":{"1470":{"position":[[11,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":889,"t":"饮水思源","u":"/en/docs/Acknowledgement/intro","h":"#饮水思源","p":888},{"i":891,"t":"Disclaimer","u":"/en/docs/Acknowledgement/intro","h":"#disclaimer","p":888},{"i":895,"t":"参考代码","u":"/en/docs/Algorithms/题解/反序输出","h":"#参考代码","p":893},{"i":897,"t":"题解","u":"/en/docs/Algorithms/题解/反序输出","h":"#题解","p":893},{"i":901,"t":"参考代码","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#参考代码","p":899},{"i":903,"t":"题解","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#题解","p":899},{"i":906,"t":"第一章：前言","u":"/en/docs/Curriculum/编译原理/Note","h":"#第一章前言","p":905},{"i":907,"t":"1.1 编译程序的逻辑结构","u":"/en/docs/Curriculum/编译原理/Note","h":"#11-编译程序的逻辑结构","p":905},{"i":909,"t":"1.2 前端和后端","u":"/en/docs/Curriculum/编译原理/Note","h":"#12-前端和后端","p":905},{"i":911,"t":"1.3 遍的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#13-遍的概念","p":905},{"i":913,"t":"第二章：文法和语言","u":"/en/docs/Curriculum/编译原理/Note","h":"#第二章文法和语言","p":905},{"i":914,"t":"2.1 句型","u":"/en/docs/Curriculum/编译原理/Note","h":"#21-句型","p":905},{"i":916,"t":"2.2 句子：","u":"/en/docs/Curriculum/编译原理/Note","h":"#22-句子","p":905},{"i":918,"t":"2.3 文法的分类：","u":"/en/docs/Curriculum/编译原理/Note","h":"#23-文法的分类","p":905},{"i":920,"t":"2.4 最左/右推导：","u":"/en/docs/Curriculum/编译原理/Note","h":"#24-最左右推导","p":905},{"i":922,"t":"第三章：词法分析","u":"/en/docs/Curriculum/编译原理/Note","h":"#第三章词法分析","p":905},{"i":923,"t":"3.1 正规文法转换成正规式","u":"/en/docs/Curriculum/编译原理/Note","h":"#31-正规文法转换成正规式","p":905},{"i":924,"t":"3.2 有穷自动机（FA）","u":"/en/docs/Curriculum/编译原理/Note","h":"#32-有穷自动机fa","p":905},{"i":926,"t":"3.3 正规式RE与有穷自动机FA的互相转化","u":"/en/docs/Curriculum/编译原理/Note","h":"#33-正规式re与有穷自动机fa的互相转化","p":905},{"i":927,"t":"3.4 正规文法RM与有穷自动机FA的互相转化","u":"/en/docs/Curriculum/编译原理/Note","h":"#34-正规文法rm与有穷自动机fa的互相转化","p":905},{"i":928,"t":"第四章：自顶向下语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第四章自顶向下语法分析方法","p":905},{"i":930,"t":"1. FIRST集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-first集的定义","p":905},{"i":931,"t":"2. Follow集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-follow集的定义","p":905},{"i":933,"t":"3. SELECT集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-select集的定义","p":905},{"i":935,"t":"4. LL(1)文法的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-ll1文法的定义","p":905},{"i":936,"t":"5. LL(1)文法的判别","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-ll1文法的判别","p":905},{"i":938,"t":"6. 预测分析表","u":"/en/docs/Curriculum/编译原理/Note","h":"#6-预测分析表","p":905},{"i":940,"t":"7. 非LL(1)文法到LL(1)文法的等价变换","u":"/en/docs/Curriculum/编译原理/Note","h":"#7-非ll1文法到ll1文法的等价变换","p":905},{"i":942,"t":"第五章：自底向上语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第五章自底向上语法分析方法","p":905},{"i":943,"t":"5.1 概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#51-概念","p":905},{"i":945,"t":"5.2 方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#52-方法","p":905},{"i":947,"t":"5.3 工作过程","u":"/en/docs/Curriculum/编译原理/Note","h":"#53-工作过程","p":905},{"i":948,"t":"5.4 移入-归约分析器的4种动作","u":"/en/docs/Curriculum/编译原理/Note","h":"#54-移入-归约分析器的4种动作","p":905},{"i":950,"t":"5.5 重要题型","u":"/en/docs/Curriculum/编译原理/Note","h":"#55-重要题型","p":905},{"i":952,"t":"概念总结","u":"/en/docs/Curriculum/编译原理/Note","h":"#概念总结","p":905},{"i":953,"t":"1 编译程序各阶段功能","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-编译程序各阶段功能","p":905},{"i":955,"t":"2 语法分析方法的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-语法分析方法的概念","p":905},{"i":957,"t":"3 翻译模式","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-翻译模式","p":905},{"i":959,"t":"4 属性文法","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-属性文法","p":905},{"i":961,"t":"5 符号表","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-符号表","p":905},{"i":965,"t":"参考代码","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#参考代码","p":963},{"i":967,"t":"题解","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#题解","p":963},{"i":971,"t":"编写C语言代码","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#编写c语言代码","p":969},{"i":973,"t":"使用Linux的编译系统对C语言代码进行编译","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#使用linux的编译系统对c语言代码进行编译","p":969},{"i":977,"t":"支持我！","u":"/en/docs/Curriculum/intro","h":"#支持我","p":975},{"i":981,"t":"支持我！","u":"/en/docs/Algorithms/intro","h":"#支持我","p":979},{"i":985,"t":"基本概念","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#基本概念","p":983},{"i":987,"t":"训练过程","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#训练过程","p":983},{"i":989,"t":"推理过程","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#推理过程","p":983},{"i":993,"t":"引言","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#引言","p":991},{"i":994,"t":"将随机分布作为输入","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#将随机分布作为输入","p":991},{"i":996,"t":"为什么要添加分布","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#为什么要添加分布","p":991},{"i":998,"t":"核心思想","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#核心思想","p":991},{"i":1000,"t":"具体结构与作用","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#具体结构与作用","p":991},{"i":1002,"t":"生成器（Generator）","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#生成器generator","p":991},{"i":1004,"t":"判别器（Discriminator）","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#判别器discriminator","p":991},{"i":1006,"t":"训练算法","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#训练算法","p":991},{"i":1010,"t":"整体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#整体结构","p":1008},{"i":1012,"t":"Encoder","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#encoder","p":1008},{"i":1013,"t":"整体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#整体结构-1","p":1008},{"i":1015,"t":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":1008},{"i":1017,"t":"具体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#具体结构","p":1008},{"i":1019,"t":"Decoder","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#decoder","p":1008},{"i":1021,"t":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":1008},{"i":1023,"t":"Non-Autoregressive Decoder（NAT）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#non-autoregressive-decodernat","p":1008},{"i":1024,"t":"训练（Training）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#训练training","p":1008},{"i":1025,"t":"损失函数","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#损失函数","p":1008},{"i":1027,"t":"Teacher Forcing","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#teacher-forcing","p":1008},{"i":1029,"t":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1008},{"i":1033,"t":"第2章 数字图像处理基础","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第2章-数字图像处理基础","p":1031},{"i":1034,"t":"图像的采样与量化","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像的采样与量化","p":1031},{"i":1036,"t":"距离度量","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#距离度量","p":1031},{"i":1038,"t":"图像质量评价","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像质量评价","p":1031},{"i":1040,"t":"灰度直方图","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度直方图","p":1031},{"i":1041,"t":"第3章 图像变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第3章-图像变换","p":1031},{"i":1042,"t":"傅里叶变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#傅里叶变换","p":1031},{"i":1044,"t":"第4章 图像处理的基本运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第4章-图像处理的基本运算","p":1031},{"i":1045,"t":"点运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#点运算","p":1031},{"i":1047,"t":"比例缩放","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#比例缩放","p":1031},{"i":1049,"t":"灰度级插值","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度级插值","p":1031},{"i":1051,"t":"第5章 图像空域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第5章-图像空域增强","p":1031},{"i":1052,"t":"直接灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直接灰度变换","p":1031},{"i":1054,"t":"直方图灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直方图灰度变换","p":1031},{"i":1056,"t":"空域滤波增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#空域滤波增强","p":1031},{"i":1058,"t":"第6章 图像频域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第6章-图像频域增强","p":1031},{"i":1060,"t":"低通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#低通滤波","p":1031},{"i":1062,"t":"高通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#高通滤波","p":1031},{"i":1064,"t":"带通和带阻滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#带通和带阻滤波","p":1031},{"i":1066,"t":"第7章 彩色图像处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第7章-彩色图像处理","p":1031},{"i":1067,"t":"伪彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#伪彩色图像的处理","p":1031},{"i":1069,"t":"全彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#全彩色图像的处理","p":1031},{"i":1070,"t":"第8章 图像复原","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第8章-图像复原","p":1031},{"i":1071,"t":"图像退化机理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化机理","p":1031},{"i":1073,"t":"图像退化模型","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化模型","p":1031},{"i":1075,"t":"第11章 图像分割","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第11章-图像分割","p":1031},{"i":1076,"t":"阈值分割法","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#阈值分割法","p":1031},{"i":1078,"t":"边缘检测的基本原理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测的基本原理","p":1031},{"i":1080,"t":"边缘检测算子","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测算子","p":1031},{"i":1082,"t":"课后习题中的问答题","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#课后习题中的问答题","p":1031},{"i":1086,"t":"引言","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#引言","p":1084},{"i":1088,"t":"为什么需要采样？","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#为什么需要采样","p":1084},{"i":1090,"t":"长尾效应","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#长尾效应","p":1084},{"i":1092,"t":"采样技巧","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#采样技巧","p":1084},{"i":1094,"t":"温度（Temperature）","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#温度temperature","p":1084},{"i":1096,"t":"Top-k 采样","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#top-k-采样","p":1084},{"i":1098,"t":"Top-p 采样（Nucleus Sampling）","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#top-p-采样nucleus-sampling","p":1084},{"i":1100,"t":"结论","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#结论","p":1084},{"i":1103,"t":"回顾文字生成的两种方法","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#回顾文字生成的两种方法","p":1102},{"i":1105,"t":"自回归方法（AR）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#自回归方法ar","p":1102},{"i":1107,"t":"非自回归方法（NAR）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#非自回归方法nar","p":1102},{"i":1109,"t":"目前图像生成模型的共同点","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#目前图像生成模型的共同点","p":1102},{"i":1111,"t":"生成模型的共同结构","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#生成模型的共同结构","p":1102},{"i":1113,"t":"通用框架概览","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#通用框架概览","p":1102},{"i":1115,"t":"Benchmark","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#benchmark","p":1102},{"i":1117,"t":"通用框架解析","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#通用框架解析","p":1102},{"i":1119,"t":"常见图像生成模型速览","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#常见图像生成模型速览","p":1102},{"i":1121,"t":"变分自编码器（VAE）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#变分自编码器vae","p":1102},{"i":1123,"t":"基于流的生成模型（Flow-Based Generative Model）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#基于流的生成模型flow-based-generative-model","p":1102},{"i":1125,"t":"生成对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#生成对抗网络gan","p":1102},{"i":1127,"t":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#扩散模型diffusion-model","p":1102},{"i":1131,"t":"依赖","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#依赖","p":1129},{"i":1132,"t":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1129},{"i":1134,"t":"安装依赖","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#安装依赖","p":1129},{"i":1136,"t":"下载预训练生成器","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1129},{"i":1138,"t":"概述","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#概述","p":1129},{"i":1139,"t":"技术细节","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#技术细节","p":1129},{"i":1140,"t":"prompts 的初始化","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1129},{"i":1142,"t":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1129},{"i":1144,"t":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1129},{"i":1146,"t":"训练 stage 1","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-1","p":1129},{"i":1148,"t":"训练 stage 2","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-2","p":1129},{"i":1150,"t":"定量分析指标","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#定量分析指标","p":1129},{"i":1152,"t":"新增功能","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#新增功能","p":1129},{"i":1153,"t":"支持自定义图像的风格迁移","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#支持自定义图像的风格迁移","p":1129},{"i":1155,"t":"Web UI","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#web-ui","p":1129},{"i":1157,"t":"问题提出与改进","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#问题提出与改进","p":1129},{"i":1158,"t":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1129},{"i":1160,"t":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1129},{"i":1162,"t":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1129},{"i":1166,"t":"介绍","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#介绍","p":1164},{"i":1168,"t":"BERT（Bidirectional Encoder Representation from Transformers）","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#bertbidirectional-encoder-representation-from-transformers","p":1164},{"i":1170,"t":"结构","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#结构","p":1164},{"i":1172,"t":"Self-Supervised Pretraining","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#self-supervised-pretraining","p":1164},{"i":1174,"t":"Fine-tuning","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#fine-tuning","p":1164},{"i":1176,"t":"Why does BERT work?","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#why-does-bert-work","p":1164},{"i":1178,"t":"GPT: Generative Pre-trained Transformer","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#gpt-generative-pre-trained-transformer","p":1164},{"i":1182,"t":"Overview","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#overview","p":1180},{"i":1184,"t":"Dataset","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#dataset","p":1180},{"i":1186,"t":"Related","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#related","p":1180},{"i":1189,"t":"Stable Diffusion","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","h":"#stable-diffusion","p":1188},{"i":1191,"t":"Stable Cascade","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","h":"#stable-cascade","p":1188},{"i":1195,"t":"安装Visdom","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#安装visdom","p":1193},{"i":1197,"t":"Visdom的使用","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#visdom的使用","p":1193},{"i":1198,"t":"Visdom的启动","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#visdom的启动","p":1193},{"i":1200,"t":"单窗口单曲线的可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#单窗口单曲线的可视化","p":1193},{"i":1202,"t":"单窗口多曲线的可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#单窗口多曲线的可视化","p":1193},{"i":1206,"t":"认识CNN的局限性","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#认识cnn的局限性","p":1204},{"i":1207,"t":"输入与输出的局限性","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#输入与输出的局限性","p":1204},{"i":1209,"t":"关联上下文信息的局限性","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#关联上下文信息的局限性","p":1204},{"i":1211,"t":"Self-Attention的原理","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention的原理","p":1204},{"i":1212,"t":"什么是Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#什么是self-attention","p":1204},{"i":1214,"t":"Self-Attention的核心思想","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention的核心思想","p":1204},{"i":1216,"t":"Self-Attention的实现","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention的实现","p":1204},{"i":1218,"t":"Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#multi-head-self-attention","p":1204},{"i":1220,"t":"Self-Attention与CNN的对比","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention与cnn的对比","p":1204},{"i":1222,"t":"Self Attention 的计算","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention-的计算","p":1204},{"i":1224,"t":"输入形状","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#输入形状","p":1204},{"i":1226,"t":"自注意力机制的计算步骤","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#自注意力机制的计算步骤","p":1204},{"i":1228,"t":"多头自注意力","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#多头自注意力","p":1204},{"i":1230,"t":"示例","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#示例","p":1204},{"i":1232,"t":"自注意力中的掩码 Mask","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#自注意力中的掩码-mask","p":1204},{"i":1236,"t":"依赖","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#依赖","p":1234},{"i":1237,"t":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1234},{"i":1239,"t":"安装依赖","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#安装依赖","p":1234},{"i":1241,"t":"下载预训练生成器","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1234},{"i":1243,"t":"概述","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#概述","p":1234},{"i":1244,"t":"技术细节","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#技术细节","p":1234},{"i":1245,"t":"prompts 的初始化","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1234},{"i":1247,"t":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1234},{"i":1249,"t":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1234},{"i":1251,"t":"训练 stage 1","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#训练-stage-1","p":1234},{"i":1253,"t":"训练 stage 2","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#训练-stage-2","p":1234},{"i":1255,"t":"定量分析指标","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#定量分析指标","p":1234},{"i":1257,"t":"新增功能","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#新增功能","p":1234},{"i":1258,"t":"支持自定义图像的风格迁移","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#支持自定义图像的风格迁移","p":1234},{"i":1260,"t":"Web UI","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#web-ui","p":1234},{"i":1262,"t":"问题提出与改进","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#问题提出与改进","p":1234},{"i":1263,"t":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1234},{"i":1265,"t":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1234},{"i":1267,"t":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1234},{"i":1271,"t":"常规卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#常规卷积","p":1269},{"i":1273,"t":"逐通道卷积-Depthwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#逐通道卷积-depthwise-convolution","p":1269},{"i":1275,"t":"逐点卷积-Pointwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#逐点卷积-pointwise-convolution","p":1269},{"i":1278,"t":"激活函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#激活函数","p":1277},{"i":1279,"t":"Sigmoid函数 / Logistic函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#sigmoid函数--logistic函数","p":1277},{"i":1281,"t":"线性整流单元（Rectified Linear Unit, ReLU）","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#线性整流单元rectified-linear-unit-relu","p":1277},{"i":1283,"t":"损失函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#损失函数","p":1277},{"i":1284,"t":"Mean Squared Error 均方误差","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#mean-squared-error-均方误差","p":1277},{"i":1286,"t":"Cross Entropy Loss 交叉熵损失","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#cross-entropy-loss-交叉熵损失","p":1277},{"i":1289,"t":"背景","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#背景","p":1288},{"i":1291,"t":"新的概念和技术","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#新的概念和技术","p":1288},{"i":1293,"t":"与LeNet比较","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#与lenet比较","p":1288},{"i":1297,"t":"什么是正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#什么是正则化","p":1295},{"i":1299,"t":"L1正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#l1正则化","p":1295},{"i":1301,"t":"L2正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#l2正则化与权重衰退","p":1295},{"i":1304,"t":"What is k-fold cross-validation?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#what-is-k-fold-cross-validation","p":1303},{"i":1306,"t":"How does k-fold cross-validation work?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#how-does-k-fold-cross-validation-work","p":1303},{"i":1308,"t":"Summary","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#summary","p":1303},{"i":1311,"t":"1x1 卷积","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#1x1-卷积","p":1310},{"i":1313,"t":"二维卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#二维卷积层","p":1310},{"i":1316,"t":"卷积的诞生&核心特征","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#卷积的诞生核心特征","p":1315},{"i":1318,"t":"重新考察全连接层","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#重新考察全连接层","p":1315},{"i":1320,"t":"总结","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#总结","p":1315},{"i":1323,"t":"什么是Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#什么是logistic-regression","p":1322},{"i":1325,"t":"逻辑回归（Logistic Regression）和线性回归（Linear Regression）","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#逻辑回归logistic-regression和线性回归linear-regression","p":1322},{"i":1327,"t":"逻辑回归到底是回归任务（Regression）还是分类任务（Classification）？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#逻辑回归到底是回归任务regression还是分类任务classification","p":1322},{"i":1329,"t":"为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数","p":1322},{"i":1332,"t":"什么是感知机","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#什么是感知机","p":1331},{"i":1334,"t":"详细原理","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#详细原理","p":1331},{"i":1336,"t":"总结","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#总结","p":1331},{"i":1339,"t":"卷积对像素位置信息是敏感的","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#卷积对像素位置信息是敏感的","p":1338},{"i":1341,"t":"池化层的作用","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#池化层的作用","p":1338},{"i":1343,"t":"池化的实现","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#池化的实现","p":1338},{"i":1346,"t":"常用函数部分","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","h":"#常用函数部分","p":1345},{"i":1350,"t":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#整体结构","p":1348},{"i":1352,"t":"Encoder","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#encoder","p":1348},{"i":1353,"t":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#整体结构-1","p":1348},{"i":1355,"t":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":1348},{"i":1357,"t":"具体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#具体结构","p":1348},{"i":1359,"t":"Decoder","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#decoder","p":1348},{"i":1361,"t":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":1348},{"i":1363,"t":"Non-Autoregressive Decoder（NAT）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#non-autoregressive-decodernat","p":1348},{"i":1364,"t":"训练（Training）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#训练training","p":1348},{"i":1365,"t":"损失函数","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#损失函数","p":1348},{"i":1367,"t":"Teacher Forcing","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#teacher-forcing","p":1348},{"i":1369,"t":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1348},{"i":1372,"t":"背景","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#背景","p":1371},{"i":1374,"t":"代码实现","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#代码实现","p":1371},{"i":1376,"t":"问题","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#问题","p":1371},{"i":1380,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#摘要","p":1378},{"i":1382,"t":"研究动机","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#研究动机","p":1378},{"i":1384,"t":"主要方法与实现","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#主要方法与实现","p":1378},{"i":1386,"t":"Diffusion Loss","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#diffusion-loss","p":1378},{"i":1388,"t":"采样","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#采样","p":1378},{"i":1390,"t":"双向注意力机制","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#双向注意力机制","p":1378},{"i":1391,"t":"结合掩码生成模型的思想 MAR","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#结合掩码生成模型的思想-mar","p":1378},{"i":1393,"t":"实验与结论","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#实验与结论","p":1378},{"i":1394,"t":"对比离散与连续、单向与双向注意力、逐 token 或逐 patch 预测","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#对比离散与连续单向与双向注意力逐-token-或逐-patch-预测","p":1378},{"i":1395,"t":"扩散过程 MLP 参数对性能的影响","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#扩散过程-mlp-参数对性能的影响","p":1378},{"i":1396,"t":"扩散过程采样步数对性能的影响","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#扩散过程采样步数对性能的影响","p":1378},{"i":1397,"t":"温度对多样性和准确性的控制","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#温度对多样性和准确性的控制","p":1378},{"i":1398,"t":"MAR 模型速度与效果的 trade-off","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#mar-模型速度与效果的-trade-off","p":1378},{"i":1402,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#摘要","p":1400},{"i":1404,"t":"Motivation 与主要贡献","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#motivation-与主要贡献","p":1400},{"i":1406,"t":"模型结构","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#模型结构","p":1400},{"i":1407,"t":"Image Tokenizer","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-tokenizer","p":1400},{"i":1409,"t":"Image Generation Autoregressive Model","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-generation-autoregressive-model","p":1400},{"i":1413,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#摘要","p":1411},{"i":1415,"t":"主要方法与模型结构","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#主要方法与模型结构","p":1411},{"i":1416,"t":"总体结构","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#总体结构","p":1411},{"i":1418,"t":"语义视觉-语言集成专家","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#语义视觉-语言集成专家","p":1411},{"i":1422,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#摘要","p":1420},{"i":1424,"t":"研究动机与主要贡献","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#研究动机与主要贡献","p":1420},{"i":1425,"t":"主要问题","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#主要问题","p":1420},{"i":1427,"t":"主要贡献","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#主要贡献","p":1420},{"i":1429,"t":"主要方法与模型结构","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#主要方法与模型结构","p":1420},{"i":1430,"t":"图像压缩模型（感知压缩）","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#图像压缩模型感知压缩","p":1420},{"i":1432,"t":"隐空间的扩散模型","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#隐空间的扩散模型","p":1420},{"i":1434,"t":"条件机制：Cross Attention","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#条件机制cross-attention","p":1420},{"i":1436,"t":"实验","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#实验","p":1420},{"i":1437,"t":"感知压缩","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#感知压缩","p":1420},{"i":1441,"t":"数学原理（Mathematical Preliminary）","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#数学原理mathematical-preliminary","p":1439},{"i":1442,"t":"先验概率与后验概率","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#先验概率与后验概率","p":1439},{"i":1444,"t":"条件概率与高斯分布的KL散度","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#条件概率与高斯分布的kl散度","p":1439},{"i":1446,"t":"马尔科夫链条件概率形式","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#马尔科夫链条件概率形式","p":1439},{"i":1448,"t":"参数重整化技巧","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#参数重整化技巧","p":1439},{"i":1452,"t":"主要功能展示","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#主要功能展示","p":1450},{"i":1454,"t":"Text-to-Video 视频生成","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#text-to-video-视频生成","p":1450},{"i":1455,"t":"个性化视频","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#个性化视频","p":1450},{"i":1456,"t":"视频精确编辑","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#视频精确编辑","p":1450},{"i":1457,"t":"音频生成","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#音频生成","p":1450},{"i":1458,"t":"Movie Gen Video","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#movie-gen-video","p":1450},{"i":1459,"t":"Joint Image and Video Generation（图像视频联合生成）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#joint-image-and-video-generation图像视频联合生成","p":1450},{"i":1461,"t":"多阶段训练策略","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#多阶段训练策略","p":1450},{"i":1463,"t":"TAE（Temporal AutoEncoder）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#taetemporal-autoencoder","p":1450},{"i":1465,"t":"Training Objective（训练目标与损失函数）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#training-objective训练目标与损失函数","p":1450},{"i":1466,"t":"Joint Image and Video Generation Backbone Architecture（骨干网络）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#joint-image-and-video-generation-backbone-architecture骨干网络","p":1450},{"i":1467,"t":"Rich Text Embedding and Visual-text Generation（丰富的文本嵌入以及视觉文本生成）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#rich-text-embedding-and-visual-text-generation丰富的文本嵌入以及视觉文本生成","p":1450},{"i":1468,"t":"Spatial Upsampling（空间上采样）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#spatial-upsampling空间上采样","p":1450},{"i":1469,"t":"Movie Gen Audio","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#movie-gen-audio","p":1450},{"i":1472,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#摘要","p":1470},{"i":1474,"t":"相关工作","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#相关工作","p":1470},{"i":1475,"t":"Generative Model Adaption","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#generative-model-adaption","p":1470},{"i":1477,"t":"Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#prompt-learning","p":1470},{"i":1479,"t":"主要方法","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#主要方法","p":1470},{"i":1480,"t":"概述","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#概述","p":1470},{"i":1482,"t":"Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#image-specific-prompt-learning","p":1470},{"i":1484,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#摘要","p":1483},{"i":1486,"t":"研究背景与动机","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#研究背景与动机","p":1483},{"i":1488,"t":"问题发现与提出","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#问题发现与提出","p":1483},{"i":1490,"t":"主要方法与贡献","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法与贡献","p":1483},{"i":1491,"t":"主要方法","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法","p":1483},{"i":1493,"t":"模型主要结构","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#模型主要结构","p":1483},{"i":1495,"t":"总结","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#总结","p":1483},{"i":1499,"t":"简介 Introduction","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#简介-introduction","p":1497},{"i":1501,"t":"背景 Background","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#背景-background","p":1497},{"i":1503,"t":"证据下界 Evidence Lower Bound","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#证据下界-evidence-lower-bound","p":1497},{"i":1505,"t":"变分自编码器 Variational Autoencoders","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#变分自编码器-variational-autoencoders","p":1497},{"i":1507,"t":"多层变分自编码器 Hierachical Variational Autoencoders","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#多层变分自编码器-hierachical-variational-autoencoders","p":1497},{"i":1509,"t":"变分扩散模型 Variational Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#变分扩散模型-variational-diffusion-models","p":1497},{"i":1511,"t":"引入 Noise Schedule","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#引入-noise-schedule","p":1497},{"i":1513,"t":"确定的扩散过程","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#确定的扩散过程","p":1497},{"i":1515,"t":"三种等价的解释","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#三种等价的解释","p":1497},{"i":1517,"t":"基于分数的生成模型 Score-based Generative Models","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#基于分数的生成模型-score-based-generative-models","p":1497},{"i":1519,"t":"引导 Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#引导-guidance","p":1497},{"i":1521,"t":"Classifier Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#classifier-guidance","p":1497},{"i":1523,"t":"Classifier-Free Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#classifier-free-guidance","p":1497},{"i":1527,"t":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#摘要","p":1525},{"i":1529,"t":"Motivation 与主要贡献","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#motivation-与主要贡献","p":1525},{"i":1531,"t":"模型结构","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#模型结构","p":1525},{"i":1532,"t":"Image Tokenizer","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-tokenizer","p":1525},{"i":1534,"t":"Image Generation Autoregressive Model","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-generation-autoregressive-model","p":1525},{"i":1538,"t":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#摘要","p":1536},{"i":1540,"t":"研究动机","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#研究动机","p":1536},{"i":1542,"t":"主要方法与实现","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#主要方法与实现","p":1536},{"i":1544,"t":"Diffusion Loss","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#diffusion-loss","p":1536},{"i":1546,"t":"采样","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#采样","p":1536},{"i":1548,"t":"双向注意力机制","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#双向注意力机制","p":1536},{"i":1549,"t":"结合掩码生成模型的思想 MAR","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#结合掩码生成模型的思想-mar","p":1536},{"i":1551,"t":"实验与结论","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#实验与结论","p":1536},{"i":1552,"t":"对比离散与连续、单向与双向注意力、逐 token 或逐 patch 预测","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#对比离散与连续单向与双向注意力逐-token-或逐-patch-预测","p":1536},{"i":1553,"t":"扩散过程 MLP 参数对性能的影响","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#扩散过程-mlp-参数对性能的影响","p":1536},{"i":1554,"t":"扩散过程采样步数对性能的影响","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#扩散过程采样步数对性能的影响","p":1536},{"i":1555,"t":"温度对多样性和准确性的控制","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#温度对多样性和准确性的控制","p":1536},{"i":1556,"t":"MAR 模型速度与效果的 trade-off","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#mar-模型速度与效果的-trade-off","p":1536},{"i":1560,"t":"自回归模型的数学定义","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#自回归模型的数学定义","p":1558},{"i":1562,"t":"Autoregressive 模型时间线","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#autoregressive-模型时间线","p":1558},{"i":1563,"t":"PixelRNN（2016）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#pixelrnn2016","p":1558},{"i":1565,"t":"PixelCNN（2016）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#pixelcnn2016","p":1558},{"i":1567,"t":"VQ-VAE（2017）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vq-vae2017","p":1558},{"i":1569,"t":"VQVAE-2（2019）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vqvae-22019","p":1558},{"i":1571,"t":"VQGAN（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vqgan2021","p":1558},{"i":1573,"t":"RQTransformer（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#rqtransformer2021","p":1558},{"i":1575,"t":"DALL-E（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#dall-e2021","p":1558},{"i":1577,"t":"Parti（2022）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#parti2022","p":1558},{"i":1580,"t":"图像生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#图像生成基座模型","p":1579},{"i":1582,"t":"四种生成范式","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#四种生成范式","p":1579},{"i":1584,"t":"如何训练优秀的生成基座模型？","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#如何训练优秀的生成基座模型","p":1579},{"i":1586,"t":"视频生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#视频生成基座模型","p":1579},{"i":1589,"t":"Llama 3","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#llama-3","p":1588},{"i":1591,"t":"整体结构","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#整体结构","p":1588},{"i":1593,"t":"均方根层归一化（RMS Layer Normalization）","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#均方根层归一化rms-layer-normalization","p":1588},{"i":1594,"t":"SwiGLU 激活函数","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#swiglu-激活函数","p":1588},{"i":1596,"t":"旋转位置编码（Rotary Positional Embedding）","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#旋转位置编码rotary-positional-embedding","p":1588},{"i":1598,"t":"新的字节对编码（Tiktoken BPE）","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#新的字节对编码tiktoken-bpe","p":1588},{"i":1602,"t":"Python的广播机制","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#python的广播机制","p":1600},{"i":1604,"t":"点积（dot product）与矩阵乘法（matmul product）","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#点积dot-product与矩阵乘法matmul-product","p":1600},{"i":1606,"t":"zip函数与解压操作*","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#zip函数与解压操作","p":1600},{"i":1608,"t":"对batch_first参数的理解","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#对batch_first参数的理解","p":1600},{"i":1612,"t":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#摘要","p":1610},{"i":1614,"t":"研究背景与动机","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#研究背景与动机","p":1610},{"i":1616,"t":"问题发现与提出","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#问题发现与提出","p":1610},{"i":1618,"t":"主要方法与贡献","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法与贡献","p":1610},{"i":1619,"t":"主要方法","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法","p":1610},{"i":1621,"t":"模型主要结构","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#模型主要结构","p":1610},{"i":1623,"t":"局限性与展望","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#局限性与展望","p":1610},{"i":1625,"t":"总结","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#总结","p":1610},{"i":1629,"t":"Denoising Diffusion Models 在图像中的应用","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#denoising-diffusion-models-在图像中的应用","p":1627},{"i":1630,"t":"Diffusion Model 的结构","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#diffusion-model-的结构","p":1627},{"i":1632,"t":"使用 Diffusion Model 对图像进行编辑和定制","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#使用-diffusion-model-对图像进行编辑和定制","p":1627},{"i":1634,"t":"Diffusion Models 在视频中的应用","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#diffusion-models-在视频中的应用","p":1627},{"i":1635,"t":"视频生成模型","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#视频生成模型","p":1627},{"i":1637,"t":"视频的风格转换（Style Transfer）和编辑（editing）方法","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#视频的风格转换style-transfer和编辑editing方法","p":1627},{"i":1641,"t":"支持我！","u":"/en/docs/Deep-Learning/intro","h":"#支持我","p":1639},{"i":1647,"t":"MDX 升级后的大量渲染报错","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#mdx-升级后的大量渲染报错","p":1645},{"i":1649,"t":"升级后的数学公式渲染问题","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#升级后的数学公式渲染问题","p":1645},{"i":1651,"t":"Admonitions 无法正常渲染","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#admonitions-无�法正常渲染","p":1645},{"i":1653,"t":"更新方式","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#更新方式","p":1645},{"i":1657,"t":"支持我！","u":"/en/docs/Others/intro","h":"#支持我","p":1655},{"i":1660,"t":"一、latte-dock","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#一latte-dock","p":1659},{"i":1662,"t":"二、Kde Plasmoids","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#二kde-plasmoids","p":1659},{"i":1665,"t":"一、发生原因","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#一发生原因","p":1664},{"i":1667,"t":"二、解决方案","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#二解决方案","p":1664},{"i":1670,"t":"树","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#树","p":1669},{"i":1672,"t":"图","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#图","p":1669},{"i":1676,"t":"一、编写脚本","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#一编写脚本","p":1674},{"i":1678,"t":"二、关联终端配置文件","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#二关联终端配置文件","p":1674},{"i":1680,"t":"三、使用","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#三使用","p":1674},{"i":1684,"t":"思路","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#思路","p":1682},{"i":1686,"t":"参考代码","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#参考代码","p":1682},{"i":1688,"t":"扩展","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#扩展","p":1682},{"i":1691,"t":"面试常考问题","u":"/en/docs/Tui-Mian/数学/概率论","h":"#面试常考问题","p":1690},{"i":1695,"t":"支持我！","u":"/en/docs/Tui-Mian/intro","h":"#支持我","p":1693},{"i":1698,"t":"一、线性代数","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#一线性代数","p":1697},{"i":1700,"t":"二、概率论","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#二概率论","p":1697},{"i":1704,"t":"一、基础知识","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#一基础知识","p":1702},{"i":1706,"t":"二、面试常考问题","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#二面试常考问题","p":1702},{"i":1709,"t":"前言","u":"/en/docs/Tui-Mian/Summary","h":"#前言","p":1708},{"i":1711,"t":"扫盲","u":"/en/docs/Tui-Mian/Summary","h":"#扫盲","p":1708},{"i":1713,"t":"个人情况","u":"/en/docs/Tui-Mian/Summary","h":"#个人情况","p":1708},{"i":1715,"t":"前期准备","u":"/en/docs/Tui-Mian/Summary","h":"#前期准备","p":1708},{"i":1716,"t":"夏令营","u":"/en/docs/Tui-Mian/Summary","h":"#夏令营","p":1708},{"i":1717,"t":"预推免","u":"/en/docs/Tui-Mian/Summary","h":"#预推免","p":1708},{"i":1718,"t":"后序","u":"/en/docs/Tui-Mian/Summary","h":"#后序","p":1708},{"i":1720,"t":"一、U-2-Net","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一u-2-net","p":1719},{"i":1721,"t":"（一）SOD任务","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一sod任务","p":1719},{"i":1723,"t":"（二）网络结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二网络结构","p":1719},{"i":1725,"t":"（三）损失函数","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三损失函数","p":1719},{"i":1727,"t":"（四）深度可分离卷积","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四深度可分离卷积","p":1719},{"i":1729,"t":"二、YOLO","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolo","p":1719},{"i":1730,"t":"（一）mAP","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一map","p":1719},{"i":1732,"t":"（二）YOLOv1","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov1","p":1719},{"i":1734,"t":"（二）YOLOv2","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov2","p":1719},{"i":1736,"t":"（三）YOLOv5","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三yolov5","p":1719},{"i":1738,"t":"三、CBAM","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三cbam","p":1719},{"i":1740,"t":"（一）总体结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一总体结构","p":1719},{"i":1742,"t":"（二）通道注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二通道注意力","p":1719},{"i":1744,"t":"（三）空间注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三空间注意力","p":1719},{"i":1746,"t":"（四）其他注意事项","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四其他注意事项","p":1719},{"i":1748,"t":"四、Focal Loss","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四focal-loss","p":1719},{"i":1750,"t":"五、SENet","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#五senet","p":1719},{"i":1752,"t":"六、自注意力机制","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#六自注意力机制","p":1719},{"i":1754,"t":"七、自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#七自我介绍","p":1719},{"i":1755,"t":"（一）英文自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一英文自我介绍","p":1719},{"i":1757,"t":"（二）西电广研院自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二西电广研院自我介绍","p":1719},{"i":1759,"t":"（三）电子科技大学自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三电子科技大学自我介绍","p":1719},{"i":1762,"t":"必须要知道的原理","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#必须要知道的原理","p":1761},{"i":1763,"t":"GeekOS:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#geekos","p":1761},{"i":1765,"t":"bochs:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#bochs","p":1761},{"i":1767,"t":"二者之间的关系","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#二者之间的关系","p":1761},{"i":1769,"t":"安装与配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#安装与配置","p":1761},{"i":1771,"t":"安装","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#安装","p":1761},{"i":1773,"t":"配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#配置","p":1761}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/889",[0,0.401]],["t/891",[1,6.727]],["t/895",[0,0.401]],["t/897",[0,0.401]],["t/901",[0,0.401]],["t/903",[0,0.401]],["t/906",[0,0.401]],["t/907",[0,0.309,2,5.18]],["t/909",[0,0.309,3,5.18]],["t/911",[0,0.309,4,5.18]],["t/913",[0,0.401]],["t/914",[0,0.309,5,5.18]],["t/916",[0,0.309,6,5.18]],["t/918",[0,0.309,7,5.18]],["t/920",[0,0.309,8,5.18]],["t/922",[0,0.401]],["t/923",[0,0.309,9,5.18]],["t/924",[10,5.18,11,5.18]],["t/926",[12,5.18,13,5.18]],["t/927",[14,5.18,15,5.18]],["t/928",[0,0.401]],["t/930",[16,4.176,17,5.18]],["t/931",[18,3.84,19,5.18]],["t/933",[20,4.176,21,5.18]],["t/935",[22,4.176,23,4.713]],["t/936",[23,4.713,24,4.406]],["t/938",[0,0.309,25,4.713]],["t/940",[26,4.713,27,5.18]],["t/942",[0,0.401]],["t/943",[0,0.309,28,5.18]],["t/945",[0,0.309,29,5.18]],["t/947",[0,0.309,30,5.18]],["t/948",[0,0.251,22,3.395,31,4.211]],["t/950",[0,0.309,32,5.18]],["t/952",[0,0.401]],["t/953",[0,0.309,16,4.176]],["t/955",[0,0.309,18,3.84]],["t/957",[0,0.309,20,4.176]],["t/959",[0,0.309,22,4.176]],["t/961",[0,0.309,24,4.406]],["t/965",[0,0.401]],["t/967",[0,0.401]],["t/971",[33,6.727]],["t/973",[34,6.727]],["t/977",[0,0.401]],["t/981",[0,0.401]],["t/985",[0,0.401]],["t/987",[0,0.401]],["t/989",[0,0.401]],["t/993",[0,0.401]],["t/994",[0,0.401]],["t/996",[0,0.401]],["t/998",[0,0.401]],["t/1000",[0,0.401]],["t/1002",[35,4.417]],["t/1004",[36,6.727]],["t/1006",[0,0.401]],["t/1010",[0,0.401]],["t/1012",[37,5.185]],["t/1013",[0,0.401]],["t/1015",[37,3.992,38,4.406]],["t/1017",[0,0.401]],["t/1019",[39,6.121]],["t/1021",[40,3.709,41,4.713]],["t/1023",[40,3.016,42,3.832,43,3.832]],["t/1024",[44,5.423]],["t/1025",[0,0.401]],["t/1027",[45,4.176,46,4.713]],["t/1029",[45,2.175,47,2.455,48,2.295,49,2.295,50,1.772,51,1.819]],["t/1033",[0,0.309,18,3.84]],["t/1034",[0,0.401]],["t/1036",[0,0.401]],["t/1038",[0,0.401]],["t/1040",[0,0.401]],["t/1041",[0,0.309,20,4.176]],["t/1042",[0,0.401]],["t/1044",[0,0.309,22,4.176]],["t/1045",[0,0.401]],["t/1047",[0,0.401]],["t/1049",[0,0.401]],["t/1051",[0,0.309,24,4.406]],["t/1052",[0,0.401]],["t/1054",[0,0.401]],["t/1056",[0,0.401]],["t/1058",[0,0.309,25,4.713]],["t/1060",[0,0.401]],["t/1062",[0,0.401]],["t/1064",[0,0.401]],["t/1066",[0,0.309,26,4.713]],["t/1067",[0,0.401]],["t/1069",[0,0.401]],["t/1070",[0,0.309,52,5.18]],["t/1071",[0,0.401]],["t/1073",[0,0.401]],["t/1075",[0,0.309,53,5.18]],["t/1076",[0,0.401]],["t/1078",[0,0.401]],["t/1080",[0,0.401]],["t/1082",[0,0.401]],["t/1086",[0,0.401]],["t/1088",[0,0.401]],["t/1090",[0,0.401]],["t/1092",[0,0.401]],["t/1094",[54,6.727]],["t/1096",[0,0.251,55,3.832,56,3.582]],["t/1098",[55,3.228,57,3.548,58,3.548,59,3.548]],["t/1100",[0,0.401]],["t/1103",[0,0.401]],["t/1105",[60,6.727]],["t/1107",[61,6.727]],["t/1109",[0,0.401]],["t/1111",[0,0.401]],["t/1113",[0,0.401]],["t/1115",[62,6.727]],["t/1117",[0,0.401]],["t/1119",[0,0.401]],["t/1121",[63,6.727]],["t/1123",[35,2.33,64,3.548,65,3.228,66,2.273]],["t/1125",[67,6.727]],["t/1127",[66,3.318,68,3.493]],["t/1131",[0,0.401]],["t/1132",[0,0.376,69,3.832]],["t/1134",[0,0.401]],["t/1136",[0,0.401]],["t/1138",[0,0.401]],["t/1139",[0,0.401]],["t/1140",[0,0.309,70,3.401]],["t/1142",[0,0.294,70,2.013,71,2.272,72,2.471]],["t/1144",[0,0.309,73,4.713]],["t/1146",[0,0.251,16,3.395,74,3.395]],["t/1148",[0,0.251,18,3.122,74,3.395]],["t/1150",[0,0.401]],["t/1152",[0,0.401]],["t/1153",[0,0.401]],["t/1155",[75,4.713,76,4.713]],["t/1157",[0,0.401]],["t/1158",[0,0.309,77,4.713]],["t/1160",[0,0.376,70,2.765]],["t/1162",[0,0.368,70,3.231]],["t/1166",[0,0.401]],["t/1168",[37,2.735,78,3.548,79,3.548,80,3.228]],["t/1170",[0,0.401]],["t/1172",[50,2.765,81,4.211,82,4.211]],["t/1174",[83,5.18,84,5.18]],["t/1176",[85,5.18,86,4.713]],["t/1178",[35,2.013,44,2.471,80,2.789,87,3.065,88,3.065]],["t/1182",[89,6.727]],["t/1184",[90,6.727]],["t/1186",[91,6.727]],["t/1189",[68,3.493,92,4.713]],["t/1191",[92,4.713,93,5.18]],["t/1195",[94,5.721]],["t/1197",[94,5.721]],["t/1198",[94,5.721]],["t/1200",[0,0.401]],["t/1202",[0,0.401]],["t/1206",[95,6.727]],["t/1207",[0,0.401]],["t/1209",[0,0.401]],["t/1211",[50,3.401,51,3.493]],["t/1212",[50,3.401,51,3.493]],["t/1214",[50,3.401,51,3.493]],["t/1216",[50,3.401,51,3.493]],["t/1218",[48,3.018,49,3.018,50,2.33,51,2.393]],["t/1220",[50,3.401,96,5.18]],["t/1222",[0,0.251,50,2.765,51,2.84]],["t/1224",[0,0.401]],["t/1226",[0,0.401]],["t/1228",[0,0.401]],["t/1230",[0,0.401]],["t/1232",[0,0.309,97,5.18]],["t/1236",[0,0.401]],["t/1237",[0,0.376,69,3.832]],["t/1239",[0,0.401]],["t/1241",[0,0.401]],["t/1243",[0,0.401]],["t/1244",[0,0.401]],["t/1245",[0,0.309,70,3.401]],["t/1247",[0,0.294,70,2.013,71,2.272,72,2.471]],["t/1249",[0,0.309,73,4.713]],["t/1251",[0,0.251,16,3.395,74,3.395]],["t/1253",[0,0.251,18,3.122,74,3.395]],["t/1255",[0,0.401]],["t/1257",[0,0.401]],["t/1258",[0,0.401]],["t/1260",[75,4.713,76,4.713]],["t/1262",[0,0.401]],["t/1263",[0,0.309,77,4.713]],["t/1265",[0,0.376,70,2.765]],["t/1267",[0,0.368,70,3.231]],["t/1271",[0,0.401]],["t/1273",[0,0.251,98,4.211,99,3.832]],["t/1275",[0,0.251,99,3.832,100,4.211]],["t/1278",[0,0.401]],["t/1279",[0,0.251,101,4.211,102,3.582]],["t/1281",[103,3.548,104,3.548,105,3.548,106,3.548]],["t/1283",[0,0.401]],["t/1284",[0,0.212,107,3.548,108,3.548,109,3.548]],["t/1286",[0,0.212,110,2.86,111,3.548,112,2.86]],["t/1289",[0,0.401]],["t/1291",[0,0.401]],["t/1293",[113,6.727]],["t/1297",[0,0.401]],["t/1299",[114,6.727]],["t/1301",[115,6.727]],["t/1304",[56,3.018,110,2.86,116,3.228,117,3.228]],["t/1306",[56,2.607,86,2.789,110,2.471,116,2.789,117,2.789]],["t/1308",[118,6.727]],["t/1311",[0,0.309,119,5.18]],["t/1313",[0,0.401]],["t/1316",[0,0.401]],["t/1318",[0,0.401]],["t/1320",[0,0.401]],["t/1323",[102,4.406,120,4.713]],["t/1325",[102,3.582,120,3.832,121,4.211]],["t/1327",[122,6.727]],["t/1329",[0,0.401]],["t/1332",[0,0.401]],["t/1334",[0,0.401]],["t/1336",[0,0.401]],["t/1339",[0,0.401]],["t/1341",[0,0.401]],["t/1343",[0,0.401]],["t/1346",[0,0.401]],["t/1350",[0,0.401]],["t/1352",[37,5.185]],["t/1353",[0,0.401]],["t/1355",[37,3.992,38,4.406]],["t/1357",[0,0.401]],["t/1359",[39,6.121]],["t/1361",[40,3.709,41,4.713]],["t/1363",[40,3.016,42,3.832,43,3.832]],["t/1364",[44,5.423]],["t/1365",[0,0.401]],["t/1367",[45,4.176,46,4.713]],["t/1369",[45,2.175,47,2.455,48,2.295,49,2.295,50,1.772,51,1.819]],["t/1372",[0,0.401]],["t/1374",[0,0.401]],["t/1376",[0,0.401]],["t/1380",[0,0.401]],["t/1382",[0,0.401]],["t/1384",[0,0.401]],["t/1386",[68,3.493,112,4.176]],["t/1388",[0,0.401]],["t/1390",[0,0.401]],["t/1391",[0,0.309,123,4.176]],["t/1393",[0,0.401]],["t/1394",[0,0.368,71,2.272,124,2.789]],["t/1395",[0,0.376,125,3.832]],["t/1396",[0,0.401]],["t/1397",[0,0.401]],["t/1398",[0,0.251,123,3.395,126,3.832]],["t/1402",[0,0.401]],["t/1404",[0,0.309,127,4.713]],["t/1406",[0,0.401]],["t/1407",[71,3.84,128,3.709]],["t/1409",[35,2.33,40,2.541,66,2.273,128,2.541]],["t/1413",[0,0.401]],["t/1415",[0,0.401]],["t/1416",[0,0.401]],["t/1418",[0,0.437]],["t/1422",[0,0.401]],["t/1424",[0,0.401]],["t/1425",[0,0.401]],["t/1427",[0,0.401]],["t/1429",[0,0.401]],["t/1430",[0,0.401]],["t/1432",[0,0.401]],["t/1434",[51,3.493,110,4.176]],["t/1436",[0,0.401]],["t/1437",[0,0.401]],["t/1441",[129,5.18,130,5.18]],["t/1442",[0,0.401]],["t/1444",[131,6.727]],["t/1446",[0,0.401]],["t/1448",[0,0.401]],["t/1452",[0,0.401]],["t/1454",[0,0.251,132,3.832,133,3.395]],["t/1455",[0,0.401]],["t/1456",[0,0.401]],["t/1457",[0,0.401]],["t/1458",[133,3.395,134,3.832,135,3.832]],["t/1459",[35,2.33,128,2.541,133,2.86,136,3.228]],["t/1461",[0,0.401]],["t/1463",[137,5.18,138,4.406]],["t/1465",[44,4.176,139,5.18]],["t/1466",[35,1.772,128,1.932,133,2.175,136,2.455,140,2.698,141,2.698]],["t/1467",[35,1.772,72,2.175,132,4.036,142,2.698,143,2.698]],["t/1468",[144,5.18,145,5.18]],["t/1469",[134,3.832,135,3.832,146,4.211]],["t/1472",[0,0.401]],["t/1474",[0,0.401]],["t/1475",[35,2.765,66,2.698,147,4.211]],["t/1477",[70,3.401,148,4.713]],["t/1479",[0,0.401]],["t/1480",[0,0.401]],["t/1482",[70,2.33,128,2.541,148,3.228,149,3.548]],["t/1484",[0,0.401]],["t/1486",[0,0.401]],["t/1488",[0,0.401]],["t/1490",[0,0.401]],["t/1491",[0,0.401]],["t/1493",[0,0.401]],["t/1495",[0,0.401]],["t/1499",[0,0.309,150,5.18]],["t/1501",[0,0.309,151,5.18]],["t/1503",[0,0.212,152,3.548,153,3.548,154,3.548]],["t/1505",[0,0.251,138,3.582,155,3.582]],["t/1507",[0,0.212,138,3.018,155,3.018,156,3.548]],["t/1509",[0,0.212,66,2.273,68,2.393,155,3.018]],["t/1511",[0,0.251,157,4.211,158,4.211]],["t/1513",[0,0.401]],["t/1515",[0,0.401]],["t/1517",[0,0.183,35,2.013,65,2.789,66,1.964,159,3.065]],["t/1519",[0,0.309,160,4.406]],["t/1521",[160,4.406,161,4.713]],["t/1523",[160,3.582,161,3.832,162,4.211]],["t/1527",[0,0.401]],["t/1529",[0,0.309,127,4.713]],["t/1531",[0,0.401]],["t/1532",[71,3.84,128,3.709]],["t/1534",[35,2.33,40,2.541,66,2.273,128,2.541]],["t/1538",[0,0.401]],["t/1540",[0,0.401]],["t/1542",[0,0.401]],["t/1544",[68,3.493,112,4.176]],["t/1546",[0,0.401]],["t/1548",[0,0.401]],["t/1549",[0,0.309,123,4.176]],["t/1551",[0,0.401]],["t/1552",[0,0.368,71,2.272,124,2.789]],["t/1553",[0,0.376,125,3.832]],["t/1554",[0,0.401]],["t/1555",[0,0.401]],["t/1556",[0,0.251,123,3.395,126,3.832]],["t/1560",[0,0.401]],["t/1562",[0,0.309,40,3.709]],["t/1563",[163,6.727]],["t/1565",[164,6.727]],["t/1567",[165,5.18,166,5.18]],["t/1569",[167,5.18,168,5.18]],["t/1571",[169,6.727]],["t/1573",[170,6.727]],["t/1575",[171,5.18,172,5.18]],["t/1577",[173,6.727]],["t/1580",[0,0.401]],["t/1582",[0,0.401]],["t/1584",[0,0.401]],["t/1586",[0,0.401]],["t/1589",[20,4.176,174,5.18]],["t/1591",[0,0.401]],["t/1593",[175,4.211,176,4.211,177,4.211]],["t/1594",[0,0.309,178,5.18]],["t/1596",[38,3.582,72,3.395,179,4.211]],["t/1598",[180,5.18,181,5.18]],["t/1602",[182,6.727]],["t/1604",[183,4.211,184,4.211,185,4.211]],["t/1606",[186,6.727]],["t/1608",[187,6.727]],["t/1612",[0,0.401]],["t/1614",[0,0.401]],["t/1616",[0,0.401]],["t/1618",[0,0.401]],["t/1619",[0,0.401]],["t/1621",[0,0.401]],["t/1623",[0,0.401]],["t/1625",[0,0.401]],["t/1629",[0,0.212,66,2.273,68,2.393,188,3.548]],["t/1630",[0,0.251,66,2.698,68,2.84]],["t/1632",[0,0.33,66,2.273,68,2.393]],["t/1634",[0,0.251,66,2.698,68,2.84]],["t/1635",[0,0.401]],["t/1637",[189,5.18,190,5.18]],["t/1641",[0,0.401]],["t/1647",[0,0.309,191,5.18]],["t/1649",[0,0.401]],["t/1651",[0,0.309,192,5.18]],["t/1653",[0,0.401]],["t/1657",[0,0.401]],["t/1660",[193,5.18,194,5.18]],["t/1662",[195,5.18,196,5.18]],["t/1665",[0,0.401]],["t/1667",[0,0.401]],["t/1670",[0,0.401]],["t/1672",[0,0.401]],["t/1676",[0,0.401]],["t/1678",[0,0.401]],["t/1680",[0,0.401]],["t/1684",[0,0.401]],["t/1686",[0,0.401]],["t/1688",[0,0.401]],["t/1691",[0,0.401]],["t/1695",[0,0.401]],["t/1698",[0,0.401]],["t/1700",[0,0.401]],["t/1704",[0,0.401]],["t/1706",[0,0.401]],["t/1709",[0,0.401]],["t/1711",[0,0.401]],["t/1713",[0,0.401]],["t/1715",[0,0.401]],["t/1716",[0,0.401]],["t/1717",[0,0.401]],["t/1718",[0,0.401]],["t/1720",[18,3.122,197,4.211,198,4.211]],["t/1721",[199,6.727]],["t/1723",[0,0.401]],["t/1725",[0,0.401]],["t/1727",[0,0.401]],["t/1729",[200,6.727]],["t/1730",[201,6.727]],["t/1732",[202,6.727]],["t/1734",[203,6.727]],["t/1736",[204,6.727]],["t/1738",[205,6.727]],["t/1740",[0,0.401]],["t/1742",[0,0.401]],["t/1744",[0,0.401]],["t/1746",[0,0.401]],["t/1748",[112,4.176,206,5.18]],["t/1750",[207,6.727]],["t/1752",[0,0.401]],["t/1754",[0,0.401]],["t/1755",[0,0.401]],["t/1757",[0,0.401]],["t/1759",[0,0.401]],["t/1762",[0,0.401]],["t/1763",[208,6.727]],["t/1765",[209,6.727]],["t/1767",[0,0.401]],["t/1769",[0,0.401]],["t/1771",[0,0.401]],["t/1773",[0,0.401]]],"invertedIndex":[["",{"_index":0,"t":{"889":{"position":[[0,4]]},"895":{"position":[[0,4]]},"897":{"position":[[0,2]]},"901":{"position":[[0,4]]},"903":{"position":[[0,2]]},"906":{"position":[[0,6]]},"907":{"position":[[4,9]]},"909":{"position":[[4,5]]},"911":{"position":[[4,4]]},"913":{"position":[[0,9]]},"914":{"position":[[4,2]]},"916":{"position":[[4,3]]},"918":{"position":[[4,6]]},"920":{"position":[[4,7]]},"922":{"position":[[0,8]]},"923":{"position":[[4,10]]},"928":{"position":[[0,14]]},"938":{"position":[[3,5]]},"942":{"position":[[0,14]]},"943":{"position":[[4,2]]},"945":{"position":[[4,2]]},"947":{"position":[[4,4]]},"948":{"position":[[4,2]]},"950":{"position":[[4,4]]},"952":{"position":[[0,4]]},"953":{"position":[[2,9]]},"955":{"position":[[2,9]]},"957":{"position":[[2,4]]},"959":{"position":[[2,4]]},"961":{"position":[[2,3]]},"965":{"position":[[0,4]]},"967":{"position":[[0,2]]},"977":{"position":[[0,4]]},"981":{"position":[[0,4]]},"985":{"position":[[0,4]]},"987":{"position":[[0,4]]},"989":{"position":[[0,4]]},"993":{"position":[[0,2]]},"994":{"position":[[0,9]]},"996":{"position":[[0,8]]},"998":{"position":[[0,4]]},"1000":{"position":[[0,7]]},"1006":{"position":[[0,4]]},"1010":{"position":[[0,4]]},"1013":{"position":[[0,4]]},"1017":{"position":[[0,4]]},"1025":{"position":[[0,4]]},"1033":{"position":[[4,8]]},"1034":{"position":[[0,8]]},"1036":{"position":[[0,4]]},"1038":{"position":[[0,6]]},"1040":{"position":[[0,5]]},"1041":{"position":[[4,4]]},"1042":{"position":[[0,5]]},"1044":{"position":[[4,9]]},"1045":{"position":[[0,3]]},"1047":{"position":[[0,4]]},"1049":{"position":[[0,5]]},"1051":{"position":[[4,6]]},"1052":{"position":[[0,6]]},"1054":{"position":[[0,7]]},"1056":{"position":[[0,6]]},"1058":{"position":[[4,6]]},"1060":{"position":[[0,4]]},"1062":{"position":[[0,4]]},"1064":{"position":[[0,7]]},"1066":{"position":[[4,6]]},"1067":{"position":[[0,8]]},"1069":{"position":[[0,8]]},"1070":{"position":[[4,4]]},"1071":{"position":[[0,6]]},"1073":{"position":[[0,6]]},"1075":{"position":[[5,4]]},"1076":{"position":[[0,5]]},"1078":{"position":[[0,9]]},"1080":{"position":[[0,6]]},"1082":{"position":[[0,9]]},"1086":{"position":[[0,2]]},"1088":{"position":[[0,8]]},"1090":{"position":[[0,4]]},"1092":{"position":[[0,4]]},"1096":{"position":[[6,2]]},"1100":{"position":[[0,2]]},"1103":{"position":[[0,11]]},"1109":{"position":[[0,12]]},"1111":{"position":[[0,9]]},"1113":{"position":[[0,6]]},"1117":{"position":[[0,6]]},"1119":{"position":[[0,10]]},"1131":{"position":[[0,2]]},"1132":{"position":[[0,2],[12,4]]},"1134":{"position":[[0,4]]},"1136":{"position":[[0,8]]},"1138":{"position":[[0,2]]},"1139":{"position":[[0,4]]},"1140":{"position":[[8,4]]},"1142":{"position":[[8,1],[19,1]]},"1144":{"position":[[22,5]]},"1146":{"position":[[0,2]]},"1148":{"position":[[0,2]]},"1150":{"position":[[0,6]]},"1152":{"position":[[0,4]]},"1153":{"position":[[0,12]]},"1157":{"position":[[0,7]]},"1158":{"position":[[10,5]]},"1160":{"position":[[0,9],[18,7]]},"1162":{"position":[[0,8],[17,8],[34,4]]},"1166":{"position":[[0,2]]},"1170":{"position":[[0,2]]},"1200":{"position":[[0,10]]},"1202":{"position":[[0,10]]},"1207":{"position":[[0,9]]},"1209":{"position":[[0,11]]},"1222":{"position":[[15,3]]},"1224":{"position":[[0,4]]},"1226":{"position":[[0,11]]},"1228":{"position":[[0,6]]},"1230":{"position":[[0,2]]},"1232":{"position":[[0,8]]},"1236":{"position":[[0,2]]},"1237":{"position":[[0,2],[12,4]]},"1239":{"position":[[0,4]]},"1241":{"position":[[0,8]]},"1243":{"position":[[0,2]]},"1244":{"position":[[0,4]]},"1245":{"position":[[8,4]]},"1247":{"position":[[8,1],[19,1]]},"1249":{"position":[[22,5]]},"1251":{"position":[[0,2]]},"1253":{"position":[[0,2]]},"1255":{"position":[[0,6]]},"1257":{"position":[[0,4]]},"1258":{"position":[[0,12]]},"1262":{"position":[[0,7]]},"1263":{"position":[[10,5]]},"1265":{"position":[[0,9],[18,7]]},"1267":{"position":[[0,8],[17,8],[34,4]]},"1271":{"position":[[0,4]]},"1273":{"position":[[0,5]]},"1275":{"position":[[0,4]]},"1278":{"position":[[0,4]]},"1279":{"position":[[10,1]]},"1283":{"position":[[0,4]]},"1284":{"position":[[19,4]]},"1286":{"position":[[19,5]]},"1289":{"position":[[0,2]]},"1291":{"position":[[0,7]]},"1297":{"position":[[0,6]]},"1311":{"position":[[4,2]]},"1313":{"position":[[0,5]]},"1316":{"position":[[0,10]]},"1318":{"position":[[0,8]]},"1320":{"position":[[0,2]]},"1329":{"position":[[0,29]]},"1332":{"position":[[0,6]]},"1334":{"position":[[0,4]]},"1336":{"position":[[0,2]]},"1339":{"position":[[0,13]]},"1341":{"position":[[0,6]]},"1343":{"position":[[0,5]]},"1346":{"position":[[0,6]]},"1350":{"position":[[0,4]]},"1353":{"position":[[0,4]]},"1357":{"position":[[0,4]]},"1365":{"position":[[0,4]]},"1372":{"position":[[0,2]]},"1374":{"position":[[0,4]]},"1376":{"position":[[0,2]]},"1380":{"position":[[0,2]]},"1382":{"position":[[0,4]]},"1384":{"position":[[0,7]]},"1388":{"position":[[0,2]]},"1390":{"position":[[0,7]]},"1391":{"position":[[0,11]]},"1393":{"position":[[0,5]]},"1394":{"position":[[0,18],[25,2],[34,2]]},"1395":{"position":[[0,4],[9,8]]},"1396":{"position":[[0,14]]},"1397":{"position":[[0,13]]},"1398":{"position":[[4,8]]},"1402":{"position":[[0,2]]},"1404":{"position":[[11,5]]},"1406":{"position":[[0,4]]},"1413":{"position":[[0,2]]},"1415":{"position":[[0,9]]},"1416":{"position":[[0,4]]},"1418":{"position":[[0,4],[5,6]]},"1422":{"position":[[0,2]]},"1424":{"position":[[0,9]]},"1425":{"position":[[0,4]]},"1427":{"position":[[0,4]]},"1429":{"position":[[0,9]]},"1430":{"position":[[0,12]]},"1432":{"position":[[0,8]]},"1436":{"position":[[0,2]]},"1437":{"position":[[0,4]]},"1442":{"position":[[0,9]]},"1446":{"position":[[0,11]]},"1448":{"position":[[0,7]]},"1452":{"position":[[0,6]]},"1454":{"position":[[14,4]]},"1455":{"position":[[0,5]]},"1456":{"position":[[0,6]]},"1457":{"position":[[0,4]]},"1461":{"position":[[0,7]]},"1472":{"position":[[0,2]]},"1474":{"position":[[0,4]]},"1479":{"position":[[0,4]]},"1480":{"position":[[0,2]]},"1484":{"position":[[0,2]]},"1486":{"position":[[0,7]]},"1488":{"position":[[0,7]]},"1490":{"position":[[0,7]]},"1491":{"position":[[0,4]]},"1493":{"position":[[0,6]]},"1495":{"position":[[0,2]]},"1499":{"position":[[0,2]]},"1501":{"position":[[0,2]]},"1503":{"position":[[0,4]]},"1505":{"position":[[0,6]]},"1507":{"position":[[0,8]]},"1509":{"position":[[0,6]]},"1511":{"position":[[0,2]]},"1513":{"position":[[0,7]]},"1515":{"position":[[0,7]]},"1517":{"position":[[0,9]]},"1519":{"position":[[0,2]]},"1527":{"position":[[0,2]]},"1529":{"position":[[11,5]]},"1531":{"position":[[0,4]]},"1538":{"position":[[0,2]]},"1540":{"position":[[0,4]]},"1542":{"position":[[0,7]]},"1546":{"position":[[0,2]]},"1548":{"position":[[0,7]]},"1549":{"position":[[0,11]]},"1551":{"position":[[0,5]]},"1552":{"position":[[0,18],[25,2],[34,2]]},"1553":{"position":[[0,4],[9,8]]},"1554":{"position":[[0,14]]},"1555":{"position":[[0,13]]},"1556":{"position":[[4,8]]},"1560":{"position":[[0,10]]},"1562":{"position":[[15,5]]},"1580":{"position":[[0,8]]},"1582":{"position":[[0,6]]},"1584":{"position":[[0,14]]},"1586":{"position":[[0,8]]},"1591":{"position":[[0,4]]},"1594":{"position":[[7,4]]},"1612":{"position":[[0,2]]},"1614":{"position":[[0,7]]},"1616":{"position":[[0,7]]},"1618":{"position":[[0,7]]},"1619":{"position":[[0,4]]},"1621":{"position":[[0,6]]},"1623":{"position":[[0,6]]},"1625":{"position":[[0,2]]},"1629":{"position":[[27,7]]},"1630":{"position":[[16,3]]},"1632":{"position":[[0,2],[19,10]]},"1634":{"position":[[17,7]]},"1635":{"position":[[0,6]]},"1641":{"position":[[0,4]]},"1647":{"position":[[4,10]]},"1649":{"position":[[0,12]]},"1651":{"position":[[12,6]]},"1653":{"position":[[0,4]]},"1657":{"position":[[0,4]]},"1665":{"position":[[0,6]]},"1667":{"position":[[0,6]]},"1670":{"position":[[0,1]]},"1672":{"position":[[0,1]]},"1676":{"position":[[0,6]]},"1678":{"position":[[0,10]]},"1680":{"position":[[0,4]]},"1684":{"position":[[0,2]]},"1686":{"position":[[0,4]]},"1688":{"position":[[0,2]]},"1691":{"position":[[0,6]]},"1695":{"position":[[0,4]]},"1698":{"position":[[0,6]]},"1700":{"position":[[0,5]]},"1704":{"position":[[0,6]]},"1706":{"position":[[0,8]]},"1709":{"position":[[0,2]]},"1711":{"position":[[0,2]]},"1713":{"position":[[0,4]]},"1715":{"position":[[0,4]]},"1716":{"position":[[0,3]]},"1717":{"position":[[0,3]]},"1718":{"position":[[0,2]]},"1723":{"position":[[0,7]]},"1725":{"position":[[0,7]]},"1727":{"position":[[0,10]]},"1740":{"position":[[0,7]]},"1742":{"position":[[0,8]]},"1744":{"position":[[0,8]]},"1746":{"position":[[0,9]]},"1752":{"position":[[0,8]]},"1754":{"position":[[0,6]]},"1755":{"position":[[0,9]]},"1757":{"position":[[0,12]]},"1759":{"position":[[0,13]]},"1762":{"position":[[0,8]]},"1767":{"position":[[0,7]]},"1769":{"position":[[0,5]]},"1771":{"position":[[0,2]]},"1773":{"position":[[0,2]]}}}],["1",{"_index":16,"t":{"930":{"position":[[0,2]]},"953":{"position":[[0,1]]},"1146":{"position":[[9,1]]},"1251":{"position":[[9,1]]}}}],["1.1",{"_index":2,"t":{"907":{"position":[[0,3]]}}}],["1.2",{"_index":3,"t":{"909":{"position":[[0,3]]}}}],["1.3",{"_index":4,"t":{"911":{"position":[[0,3]]}}}],["11",{"_index":53,"t":{"1075":{"position":[[0,4]]}}}],["1x1",{"_index":119,"t":{"1311":{"position":[[0,3]]}}}],["2",{"_index":18,"t":{"931":{"position":[[0,2]]},"955":{"position":[[0,1]]},"1033":{"position":[[0,3]]},"1148":{"position":[[9,1]]},"1253":{"position":[[9,1]]},"1720":{"position":[[4,1]]}}}],["2.1",{"_index":5,"t":{"914":{"position":[[0,3]]}}}],["2.2",{"_index":6,"t":{"916":{"position":[[0,3]]}}}],["2.3",{"_index":7,"t":{"918":{"position":[[0,3]]}}}],["2.4",{"_index":8,"t":{"920":{"position":[[0,3]]}}}],["2（2019",{"_index":168,"t":{"1569":{"position":[[6,7]]}}}],["3",{"_index":20,"t":{"933":{"position":[[0,2]]},"957":{"position":[[0,1]]},"1041":{"position":[[0,3]]},"1589":{"position":[[6,1]]}}}],["3.1",{"_index":9,"t":{"923":{"position":[[0,3]]}}}],["3.2",{"_index":10,"t":{"924":{"position":[[0,3]]}}}],["3.3",{"_index":12,"t":{"926":{"position":[[0,3]]}}}],["3.4",{"_index":14,"t":{"927":{"position":[[0,3]]}}}],["4",{"_index":22,"t":{"935":{"position":[[0,2]]},"948":{"position":[[7,10]]},"959":{"position":[[0,1]]},"1044":{"position":[[0,3]]}}}],["5",{"_index":24,"t":{"936":{"position":[[0,2]]},"961":{"position":[[0,1]]},"1051":{"position":[[0,3]]}}}],["5.1",{"_index":28,"t":{"943":{"position":[[0,3]]}}}],["5.2",{"_index":29,"t":{"945":{"position":[[0,3]]}}}],["5.3",{"_index":30,"t":{"947":{"position":[[0,3]]}}}],["5.4",{"_index":31,"t":{"948":{"position":[[0,3]]}}}],["5.5",{"_index":32,"t":{"950":{"position":[[0,3]]}}}],["6",{"_index":25,"t":{"938":{"position":[[0,2]]},"1058":{"position":[[0,3]]}}}],["7",{"_index":26,"t":{"940":{"position":[[0,2]]},"1066":{"position":[[0,3]]}}}],["8",{"_index":52,"t":{"1070":{"position":[[0,3]]}}}],["adapt",{"_index":147,"t":{"1475":{"position":[[17,8]]}}}],["admonit",{"_index":192,"t":{"1651":{"position":[[0,11]]}}}],["anaconda",{"_index":69,"t":{"1132":{"position":[[3,8]]},"1237":{"position":[[3,8]]}}}],["ar",{"_index":60,"t":{"1105":{"position":[[0,9]]}}}],["architectur",{"_index":141,"t":{"1466":{"position":[[42,18]]}}}],["attent",{"_index":51,"t":{"1029":{"position":[[39,9]]},"1211":{"position":[[5,12]]},"1212":{"position":[[8,9]]},"1214":{"position":[[5,14]]},"1216":{"position":[[5,12]]},"1218":{"position":[[16,9]]},"1222":{"position":[[5,9]]},"1369":{"position":[[39,9]]},"1434":{"position":[[11,9]]}}}],["attention与cnn",{"_index":96,"t":{"1220":{"position":[[5,16]]}}}],["audio",{"_index":146,"t":{"1469":{"position":[[10,5]]}}}],["autoencod",{"_index":138,"t":{"1463":{"position":[[13,12]]},"1505":{"position":[[19,12]]},"1507":{"position":[[33,12]]}}}],["autoregress",{"_index":40,"t":{"1021":{"position":[[0,14]]},"1023":{"position":[[4,14]]},"1361":{"position":[[0,14]]},"1363":{"position":[[4,14]]},"1409":{"position":[[17,14]]},"1534":{"position":[[17,14]]},"1562":{"position":[[0,14]]}}}],["backbon",{"_index":140,"t":{"1466":{"position":[[33,8]]}}}],["background",{"_index":151,"t":{"1501":{"position":[[3,10]]}}}],["base",{"_index":65,"t":{"1123":{"position":[[14,5]]},"1517":{"position":[[16,5]]}}}],["batch_first",{"_index":187,"t":{"1608":{"position":[[0,17]]}}}],["benchmark",{"_index":62,"t":{"1115":{"position":[[0,9]]}}}],["bert",{"_index":85,"t":{"1176":{"position":[[9,4]]}}}],["bert（bidirect",{"_index":78,"t":{"1168":{"position":[[0,18]]}}}],["boch",{"_index":209,"t":{"1765":{"position":[[0,6]]}}}],["bound",{"_index":154,"t":{"1503":{"position":[[20,5]]}}}],["bpe",{"_index":181,"t":{"1598":{"position":[[17,4]]}}}],["c",{"_index":33,"t":{"971":{"position":[[0,7]]}}}],["cascad",{"_index":93,"t":{"1191":{"position":[[7,7]]}}}],["cbam",{"_index":205,"t":{"1738":{"position":[[0,6]]}}}],["classifi",{"_index":161,"t":{"1521":{"position":[[0,10]]},"1523":{"position":[[0,10]]}}}],["cnn",{"_index":95,"t":{"1206":{"position":[[0,9]]}}}],["compute_text_featur",{"_index":73,"t":{"1144":{"position":[[0,21]]},"1249":{"position":[[0,21]]}}}],["convolut",{"_index":99,"t":{"1273":{"position":[[16,11]]},"1275":{"position":[[15,11]]}}}],["cross",{"_index":110,"t":{"1286":{"position":[[0,5]]},"1304":{"position":[[15,5]]},"1306":{"position":[[16,5]]},"1434":{"position":[[0,10]]}}}],["dall",{"_index":171,"t":{"1575":{"position":[[0,4]]}}}],["dataset",{"_index":90,"t":{"1184":{"position":[[0,7]]}}}],["decod",{"_index":39,"t":{"1019":{"position":[[0,7]]},"1359":{"position":[[0,7]]}}}],["decoder（at",{"_index":41,"t":{"1021":{"position":[[15,11]]},"1361":{"position":[[15,11]]}}}],["decoder（nat",{"_index":43,"t":{"1023":{"position":[[19,12]]},"1363":{"position":[[19,12]]}}}],["denois",{"_index":188,"t":{"1629":{"position":[[0,9]]}}}],["depthwis",{"_index":98,"t":{"1273":{"position":[[6,9]]}}}],["diffus",{"_index":68,"t":{"1127":{"position":[[0,14]]},"1189":{"position":[[7,9]]},"1386":{"position":[[0,9]]},"1509":{"position":[[19,9]]},"1544":{"position":[[0,9]]},"1629":{"position":[[10,9]]},"1630":{"position":[[0,9]]},"1632":{"position":[[3,9]]},"1634":{"position":[[0,9]]}}}],["disclaim",{"_index":1,"t":{"891":{"position":[[0,10]]}}}],["discrimin",{"_index":36,"t":{"1004":{"position":[[0,18]]}}}],["dock",{"_index":194,"t":{"1660":{"position":[[8,4]]}}}],["dot",{"_index":183,"t":{"1604":{"position":[[0,6]]}}}],["embed",{"_index":72,"t":{"1142":{"position":[[21,9]]},"1247":{"position":[[21,9]]},"1467":{"position":[[10,9]]},"1596":{"position":[[25,10]]}}}],["encod",{"_index":37,"t":{"1012":{"position":[[0,7]]},"1015":{"position":[[16,9]]},"1168":{"position":[[19,7]]},"1352":{"position":[[0,7]]},"1355":{"position":[[16,9]]}}}],["entropi",{"_index":111,"t":{"1286":{"position":[[6,7]]}}}],["error",{"_index":109,"t":{"1284":{"position":[[13,5]]}}}],["evid",{"_index":152,"t":{"1503":{"position":[[5,8]]}}}],["e（2021",{"_index":172,"t":{"1575":{"position":[[5,7]]}}}],["fa",{"_index":11,"t":{"924":{"position":[[4,9]]}}}],["fine",{"_index":83,"t":{"1174":{"position":[[0,4]]}}}],["first",{"_index":17,"t":{"930":{"position":[[3,9]]}}}],["flow",{"_index":64,"t":{"1123":{"position":[[0,13]]}}}],["focal",{"_index":206,"t":{"1748":{"position":[[0,7]]}}}],["fold",{"_index":116,"t":{"1304":{"position":[[10,4]]},"1306":{"position":[[11,4]]}}}],["follow",{"_index":19,"t":{"931":{"position":[[3,10]]}}}],["forc",{"_index":46,"t":{"1027":{"position":[[8,7]]},"1367":{"position":[[8,7]]}}}],["forcing与mask",{"_index":47,"t":{"1029":{"position":[[8,14]]},"1369":{"position":[[8,14]]}}}],["free",{"_index":162,"t":{"1523":{"position":[[11,4]]}}}],["gan",{"_index":67,"t":{"1125":{"position":[[0,11]]}}}],["geeko",{"_index":208,"t":{"1763":{"position":[[0,7]]}}}],["gen",{"_index":135,"t":{"1458":{"position":[[6,3]]},"1469":{"position":[[6,3]]}}}],["gener",{"_index":35,"t":{"1002":{"position":[[0,14]]},"1123":{"position":[[20,10]]},"1178":{"position":[[5,10]]},"1409":{"position":[[6,10]]},"1459":{"position":[[22,20]]},"1466":{"position":[[22,10]]},"1467":{"position":[[36,27]]},"1475":{"position":[[0,10]]},"1517":{"position":[[22,10]]},"1534":{"position":[[6,10]]}}}],["gpt",{"_index":87,"t":{"1178":{"position":[[0,4]]}}}],["guidanc",{"_index":160,"t":{"1519":{"position":[[3,8]]},"1521":{"position":[[11,8]]},"1523":{"position":[[16,8]]}}}],["head",{"_index":49,"t":{"1029":{"position":[[29,4]]},"1218":{"position":[[6,4]]},"1369":{"position":[[29,4]]}}}],["hierach",{"_index":156,"t":{"1507":{"position":[[9,11]]}}}],["imag",{"_index":128,"t":{"1407":{"position":[[0,5]]},"1409":{"position":[[0,5]]},"1459":{"position":[[6,5]]},"1466":{"position":[[6,5]]},"1482":{"position":[[0,5]]},"1532":{"position":[[0,5]]},"1534":{"position":[[0,5]]}}}],["introduct",{"_index":150,"t":{"1499":{"position":[[3,12]]}}}],["joint",{"_index":136,"t":{"1459":{"position":[[0,5]]},"1466":{"position":[[0,5]]}}}],["k",{"_index":56,"t":{"1096":{"position":[[4,1]]},"1304":{"position":[[8,1]]},"1306":{"position":[[9,1]]}}}],["kde",{"_index":195,"t":{"1662":{"position":[[0,5]]}}}],["kl",{"_index":131,"t":{"1444":{"position":[[0,14]]}}}],["l1",{"_index":114,"t":{"1299":{"position":[[0,5]]}}}],["l2",{"_index":115,"t":{"1301":{"position":[[0,10]]}}}],["latt",{"_index":193,"t":{"1660":{"position":[[0,7]]}}}],["layer",{"_index":176,"t":{"1593":{"position":[[12,5]]}}}],["learn",{"_index":148,"t":{"1477":{"position":[[7,8]]},"1482":{"position":[[22,8]]}}}],["lenet",{"_index":113,"t":{"1293":{"position":[[0,8]]}}}],["linear",{"_index":104,"t":{"1281":{"position":[[17,6]]}}}],["linux的编译系统对c",{"_index":34,"t":{"973":{"position":[[0,22]]}}}],["ll(1",{"_index":23,"t":{"935":{"position":[[3,10]]},"936":{"position":[[3,10]]}}}],["ll(1)文法到ll(1",{"_index":27,"t":{"940":{"position":[[3,21]]}}}],["llama",{"_index":174,"t":{"1589":{"position":[[0,5]]}}}],["logist",{"_index":102,"t":{"1279":{"position":[[12,10]]},"1323":{"position":[[0,11]]},"1325":{"position":[[0,13]]}}}],["loss",{"_index":112,"t":{"1286":{"position":[[14,4]]},"1386":{"position":[[10,4]]},"1544":{"position":[[10,4]]},"1748":{"position":[[8,4]]}}}],["lower",{"_index":153,"t":{"1503":{"position":[[14,5]]}}}],["map",{"_index":201,"t":{"1730":{"position":[[0,6]]}}}],["mapper",{"_index":77,"t":{"1158":{"position":[[0,9]]},"1263":{"position":[[0,9]]}}}],["mar",{"_index":123,"t":{"1391":{"position":[[12,3]]},"1398":{"position":[[0,3]]},"1549":{"position":[[12,3]]},"1556":{"position":[[0,3]]}}}],["mask",{"_index":97,"t":{"1232":{"position":[[9,4]]}}}],["mathemat",{"_index":129,"t":{"1441":{"position":[[0,17]]}}}],["mdx",{"_index":191,"t":{"1647":{"position":[[0,3]]}}}],["mean",{"_index":107,"t":{"1284":{"position":[[0,4]]}}}],["mlp",{"_index":125,"t":{"1395":{"position":[[5,3]]},"1553":{"position":[[5,3]]}}}],["model",{"_index":66,"t":{"1123":{"position":[[31,6]]},"1127":{"position":[[15,6]]},"1409":{"position":[[32,5]]},"1475":{"position":[[11,5]]},"1509":{"position":[[29,6]]},"1517":{"position":[[33,6]]},"1534":{"position":[[32,5]]},"1629":{"position":[[20,6]]},"1630":{"position":[[10,5]]},"1632":{"position":[[13,5]]},"1634":{"position":[[10,6]]}}}],["motiv",{"_index":127,"t":{"1404":{"position":[[0,10]]},"1529":{"position":[[0,10]]}}}],["movi",{"_index":134,"t":{"1458":{"position":[[0,5]]},"1469":{"position":[[0,5]]}}}],["multi",{"_index":48,"t":{"1029":{"position":[[23,5]]},"1218":{"position":[[0,5]]},"1369":{"position":[[23,5]]}}}],["nar",{"_index":61,"t":{"1107":{"position":[[0,11]]}}}],["net",{"_index":198,"t":{"1720":{"position":[[6,3]]}}}],["nois",{"_index":157,"t":{"1511":{"position":[[3,5]]}}}],["non",{"_index":42,"t":{"1023":{"position":[[0,3]]},"1363":{"position":[[0,3]]}}}],["normal",{"_index":177,"t":{"1593":{"position":[[18,14]]}}}],["nucleu",{"_index":58,"t":{"1098":{"position":[[6,10]]}}}],["object",{"_index":139,"t":{"1465":{"position":[[9,20]]}}}],["overview",{"_index":89,"t":{"1182":{"position":[[0,8]]}}}],["p",{"_index":57,"t":{"1098":{"position":[[4,1]]}}}],["parti（2022",{"_index":173,"t":{"1577":{"position":[[0,11]]}}}],["patch",{"_index":124,"t":{"1394":{"position":[[28,5]]},"1552":{"position":[[28,5]]}}}],["pixelcnn（2016",{"_index":164,"t":{"1565":{"position":[[0,14]]}}}],["pixelrnn（2016",{"_index":163,"t":{"1563":{"position":[[0,14]]}}}],["plasmoid",{"_index":196,"t":{"1662":{"position":[[6,9]]}}}],["pointwis",{"_index":100,"t":{"1275":{"position":[[5,9]]}}}],["posit",{"_index":38,"t":{"1015":{"position":[[0,15]]},"1355":{"position":[[0,15]]},"1596":{"position":[[14,10]]}}}],["pre",{"_index":88,"t":{"1178":{"position":[[16,3]]}}}],["preliminari",{"_index":130,"t":{"1441":{"position":[[18,12]]}}}],["pretrain",{"_index":82,"t":{"1172":{"position":[[16,11]]}}}],["product",{"_index":185,"t":{"1604":{"position":[[28,8]]}}}],["product）与矩阵乘法（matmul",{"_index":184,"t":{"1604":{"position":[[7,20]]}}}],["prompt",{"_index":70,"t":{"1140":{"position":[[0,7]]},"1142":{"position":[[0,7]]},"1160":{"position":[[10,7]]},"1162":{"position":[[9,7],[26,7]]},"1245":{"position":[[0,7]]},"1247":{"position":[[0,7]]},"1265":{"position":[[10,7]]},"1267":{"position":[[9,7],[26,7]]},"1477":{"position":[[0,6]]},"1482":{"position":[[15,6]]}}}],["python",{"_index":182,"t":{"1602":{"position":[[0,11]]}}}],["rectifi",{"_index":103,"t":{"1281":{"position":[[0,16]]}}}],["regress",{"_index":120,"t":{"1323":{"position":[[12,10]]},"1325":{"position":[[38,11]]}}}],["regression）和线性回归（linear",{"_index":121,"t":{"1325":{"position":[[14,23]]}}}],["regression）还是分类任务（classif",{"_index":122,"t":{"1327":{"position":[[0,46]]}}}],["relat",{"_index":91,"t":{"1186":{"position":[[0,7]]}}}],["relu",{"_index":106,"t":{"1281":{"position":[[30,5]]}}}],["represent",{"_index":79,"t":{"1168":{"position":[[27,14]]}}}],["re与有穷自动机fa",{"_index":13,"t":{"926":{"position":[[4,18]]}}}],["rich",{"_index":142,"t":{"1467":{"position":[[0,4]]}}}],["rm",{"_index":175,"t":{"1593":{"position":[[0,11]]}}}],["rm与有穷自动机fa",{"_index":15,"t":{"927":{"position":[[4,19]]}}}],["rotari",{"_index":179,"t":{"1596":{"position":[[0,13]]}}}],["rqtransformer（2021",{"_index":170,"t":{"1573":{"position":[[0,19]]}}}],["sampl",{"_index":59,"t":{"1098":{"position":[[17,9]]}}}],["schedul",{"_index":158,"t":{"1511":{"position":[[9,8]]}}}],["score",{"_index":159,"t":{"1517":{"position":[[10,5]]}}}],["select",{"_index":21,"t":{"933":{"position":[[3,10]]}}}],["self",{"_index":50,"t":{"1029":{"position":[[34,4]]},"1172":{"position":[[0,4]]},"1211":{"position":[[0,4]]},"1212":{"position":[[0,7]]},"1214":{"position":[[0,4]]},"1216":{"position":[[0,4]]},"1218":{"position":[[11,4]]},"1220":{"position":[[0,4]]},"1222":{"position":[[0,4]]},"1369":{"position":[[34,4]]}}}],["senet",{"_index":207,"t":{"1750":{"position":[[0,7]]}}}],["sigmoid",{"_index":101,"t":{"1279":{"position":[[0,9]]}}}],["sod",{"_index":199,"t":{"1721":{"position":[[0,8]]}}}],["spatial",{"_index":144,"t":{"1468":{"position":[[0,7]]}}}],["specif",{"_index":149,"t":{"1482":{"position":[[6,8]]}}}],["squar",{"_index":108,"t":{"1284":{"position":[[5,7]]}}}],["stabl",{"_index":92,"t":{"1189":{"position":[[0,6]]},"1191":{"position":[[0,6]]}}}],["stage",{"_index":74,"t":{"1146":{"position":[[3,5]]},"1148":{"position":[[3,5]]},"1251":{"position":[[3,5]]},"1253":{"position":[[3,5]]}}}],["style",{"_index":189,"t":{"1637":{"position":[[0,13]]}}}],["summari",{"_index":118,"t":{"1308":{"position":[[0,7]]}}}],["supervis",{"_index":81,"t":{"1172":{"position":[[5,10]]}}}],["swiglu",{"_index":178,"t":{"1594":{"position":[[0,6]]}}}],["tae（tempor",{"_index":137,"t":{"1463":{"position":[[0,12]]}}}],["teacher",{"_index":45,"t":{"1027":{"position":[[0,7]]},"1029":{"position":[[0,7]]},"1367":{"position":[[0,7]]},"1369":{"position":[[0,7]]}}}],["temperatur",{"_index":54,"t":{"1094":{"position":[[0,15]]}}}],["text",{"_index":132,"t":{"1454":{"position":[[0,4]]},"1467":{"position":[[5,4],[31,4]]}}}],["tiktoken",{"_index":180,"t":{"1598":{"position":[[0,16]]}}}],["token",{"_index":71,"t":{"1142":{"position":[[10,8]]},"1247":{"position":[[10,8]]},"1394":{"position":[[19,5]]},"1407":{"position":[[6,9]]},"1532":{"position":[[6,9]]},"1552":{"position":[[19,5]]}}}],["top",{"_index":55,"t":{"1096":{"position":[[0,3]]},"1098":{"position":[[0,3]]}}}],["trade",{"_index":126,"t":{"1398":{"position":[[13,5]]},"1556":{"position":[[13,5]]}}}],["train",{"_index":44,"t":{"1024":{"position":[[0,12]]},"1178":{"position":[[20,7]]},"1364":{"position":[[0,12]]},"1465":{"position":[[0,8]]}}}],["transfer）和编辑（edit",{"_index":190,"t":{"1637":{"position":[[14,23]]}}}],["transform",{"_index":80,"t":{"1168":{"position":[[47,13]]},"1178":{"position":[[28,11]]}}}],["tune",{"_index":84,"t":{"1174":{"position":[[5,6]]}}}],["u",{"_index":197,"t":{"1720":{"position":[[0,3]]}}}],["ui",{"_index":76,"t":{"1155":{"position":[[4,2]]},"1260":{"position":[[4,2]]}}}],["unit",{"_index":105,"t":{"1281":{"position":[[24,5]]}}}],["upsampl",{"_index":145,"t":{"1468":{"position":[[8,17]]}}}],["vae",{"_index":63,"t":{"1121":{"position":[[0,11]]}}}],["vae（2017",{"_index":166,"t":{"1567":{"position":[[3,9]]}}}],["valid",{"_index":117,"t":{"1304":{"position":[[21,11]]},"1306":{"position":[[22,10]]}}}],["variat",{"_index":155,"t":{"1505":{"position":[[7,11]]},"1507":{"position":[[21,11]]},"1509":{"position":[[7,11]]}}}],["video",{"_index":133,"t":{"1454":{"position":[[8,5]]},"1458":{"position":[[10,5]]},"1459":{"position":[[16,5]]},"1466":{"position":[[16,5]]}}}],["visdom",{"_index":94,"t":{"1195":{"position":[[0,8]]},"1197":{"position":[[0,9]]},"1198":{"position":[[0,9]]}}}],["visual",{"_index":143,"t":{"1467":{"position":[[24,6]]}}}],["vq",{"_index":165,"t":{"1567":{"position":[[0,2]]}}}],["vqgan（2021",{"_index":169,"t":{"1571":{"position":[[0,11]]}}}],["vqvae",{"_index":167,"t":{"1569":{"position":[[0,5]]}}}],["web",{"_index":75,"t":{"1155":{"position":[[0,3]]},"1260":{"position":[[0,3]]}}}],["work",{"_index":86,"t":{"1176":{"position":[[14,5]]},"1306":{"position":[[33,5]]}}}],["yolo",{"_index":200,"t":{"1729":{"position":[[0,6]]}}}],["yolov1",{"_index":202,"t":{"1732":{"position":[[0,9]]}}}],["yolov2",{"_index":203,"t":{"1734":{"position":[[0,9]]}}}],["yolov5",{"_index":204,"t":{"1736":{"position":[[0,9]]}}}],["zip",{"_index":186,"t":{"1606":{"position":[[0,11]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":888,"t":"饮水思源","s":"鸣谢","u":"/en/docs/Acknowledgement/intro","p":888},{"i":893,"t":"设N是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求N的值","s":"反序输出","u":"/en/docs/Algorithms/题解/反序输出","p":893},{"i":899,"t":"输入一个数，比如201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30的倍数，就输出最大的倍数，不能就输出-1","s":"排列组合（求30的倍数）","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","p":899},{"i":905,"t":"第一章：前言","s":"编译原理笔记","u":"/en/docs/Curriculum/编译原理/Note","p":905},{"i":963,"t":"在一面很长的墙壁上，工人们用不同的油漆去刷墙，然而可能有些地方刷过以后觉得不好看，他们会重新刷一下。有些部分因为重复刷了很多次覆盖了很多层油漆，小诺很好奇那些地方被刷过多少种颜色的油漆。","s":"一维前缀和（刷出一道墙）","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","p":963},{"i":969,"t":"在上一篇博客中我们完成了GeekOS环境的配置，下面我们来验证环境配置的成功与否以及project 0的实现。","s":"GeekOS project 0的实现","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","p":969},{"i":975,"t":"欢迎来到笔记本的课程学习部分","s":"Welcome","u":"/en/docs/Curriculum/intro","p":975},{"i":979,"t":"欢迎来到笔记本的算法部分","s":"Welcome","u":"/en/docs/Algorithms/intro","p":979},{"i":983,"t":"在以前的文章图像生成模型中已经大概介绍了目前SOTA的图像生成模型的共同点，并初步了解了Diffusion Model，在这篇文章中将详细讲解扩散模型的数学原理等。","s":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","p":983},{"i":991,"t":"How to pronounce Adversarial?","s":"生成式对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型基础/GAN","p":991},{"i":1008,"t":"论文：arXiv","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","p":1008},{"i":1031,"t":"本笔记使用的教材是陈天华所著、清华大学出版社的《数字图像处理及应用：使用MATLAB分析与实现》。","s":"数字图像处理复习笔记","u":"/en/docs/Curriculum/数字图像处理/Note","p":1031},{"i":1084,"t":"参考资料：Sampling for Text Generation","s":"生成模型中的采样技巧","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","p":1084},{"i":1102,"t":"回顾文字生成的两种方法","s":"图像生成模型","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","p":1102},{"i":1129,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","p":1129},{"i":1164,"t":"在自监督学习的模型中，出现了很多以芝麻街任务命名的经典模型和论文。","s":"自监督学习（Self-Supervised Learning）","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","p":1164},{"i":1180,"t":"Transformer实战练习，代码见Github仓库。","s":"Speaker Classification","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","p":1180},{"i":1188,"t":"Stable Diffusion","s":"Stable Diffusion 与 Stable Cascade","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","p":1188},{"i":1193,"t":"对于TensorFlow框架，可以使用TensorBoard实现可视化。","s":"Visdom可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","p":1193},{"i":1204,"t":"参考链接:","s":"自注意力（Self-Attention）","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","p":1204},{"i":1234,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","p":1234},{"i":1269,"t":"输入：shape为$[5, 5, 3]$的图像","s":"深度可分离卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","p":1269},{"i":1277,"t":"激活函数","s":"激活函数与Loss的梯度","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","p":1277},{"i":1288,"t":"背景","s":"AlexNet","u":"/en/docs/Deep-Learning/基础知识/AlexNet","p":1288},{"i":1295,"t":"正则化与权重衰退","s":"正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","p":1295},{"i":1303,"t":"What is k-fold cross-validation?","s":"K-fold cross-validation","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","p":1303},{"i":1310,"t":"1x1 卷积","s":"卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","p":1310},{"i":1315,"t":"卷积的诞生&核心特征","s":"从全连接到卷积","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","p":1315},{"i":1322,"t":"什么是Logistic Regression","s":"关于Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","p":1322},{"i":1331,"t":"什么是感知机","s":"Perceptron","u":"/en/docs/Deep-Learning/基础知识/Perceptron","p":1331},{"i":1338,"t":"卷积对像素位置信息是敏感的","s":"池化层","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","p":1338},{"i":1345,"t":"常用函数部分","s":"PyTorch基础","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","p":1345},{"i":1348,"t":"论文：arXiv","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","p":1348},{"i":1371,"t":"背景","s":"LeNet","u":"/en/docs/Deep-Learning/基础知识/LeNet","p":1371},{"i":1378,"t":"原文链接：https://arxiv.org/pdf/2406.11838","s":"Autoregressive Image Generation without Vector Quantization","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","p":1378},{"i":1400,"t":"原文链接：https://arxiv.org/pdf/2406.06525","s":"Autoregressive Model Beats Diffusion: Llama for Scalable Image Generation","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","p":1400},{"i":1411,"t":"原文链接：https://arxiv.org/abs/2407.07614","s":"MARS: Mixture of Auto-Regressive Models for  Fine-grained Text-to-image Synthesis","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","p":1411},{"i":1420,"t":"原文链接：https://arxiv.org/pdf/2112.10752","s":"CVPR 2022: High-Resolution Image Synthesis with Latent Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","p":1420},{"i":1439,"t":"论文：arXiv","s":"NeurIPS 2020: Denoising Diffusion Probabilistic Models","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","p":1439},{"i":1450,"t":"Meta 官方博客：https://ai.meta.com/blog/movie-gen-media-foundation-models-generative-ai-video/","s":"Movie Gen: A Cast of Media Foundation Models","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","p":1450},{"i":1470,"t":"论文：CVPR 2023 open access","s":"CVPR 2023: Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","p":1470},{"i":1483,"t":"摘要","s":"Visual Autoregressive Modeling: Scalable Image Generation via Next-Scale Prediction","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","p":1483},{"i":1497,"t":"论文原文：https://arxiv.org/pdf/2208.11970","s":"Understanding Diffusion Models: A Unified Perspective","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","p":1497},{"i":1525,"t":"原文链接：https://arxiv.org/pdf/2406.06525","s":"自回归模型：LlamaGen","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","p":1525},{"i":1536,"t":"原文链接：https://arxiv.org/pdf/2406.11838","s":"自回归模型：MAR","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","p":1536},{"i":1558,"t":"自回归模型（Autoregressive Models）在图像生成领域扮演着重要角色，它们基于一个核心假设：当前像素值依赖于之前的像素值。这种依赖关系可以通过条件概率来表达，其中每一个像素的生成都是基于之前已经生成的像素的条件分布。在传统的视觉自回归图像生成任务中，这通常意味着从左到右和从上到下的顺序生成每个像素。","s":"图像生成：自回归模型","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","p":1558},{"i":1579,"t":"图像生成基座模型","s":"图像生成和视频生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","p":1579},{"i":1588,"t":"Llama 3","s":"主要技术简记","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","p":1588},{"i":1600,"t":"这里记录着在学习过程中发现的理解或操作方面出现的错误，温故知新。","s":"查漏补缺","u":"/en/docs/Deep-Learning/Fill-The-Gaps","p":1600},{"i":1610,"t":"原文链接：https://arxiv.org/pdf/2404.02905","s":"自回归模型：VAR","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","p":1610},{"i":1627,"t":"参考资料：","s":"图像生成：扩散模型","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","p":1627},{"i":1639,"t":"欢迎来到笔记本的深度学习部分","s":"Welcome","u":"/en/docs/Deep-Learning/intro","p":1639},{"i":1643,"t":"1. 告示栏的启用","s":"告示栏","u":"/en/docs/Others/博客搭建/announcement_bar","p":1643},{"i":1645,"t":"按照官方文档将 Docusaurus 从 V2.4.3 升级至 V3.5.2，记录以下主要问题。","s":"更新至 Docusaurus V3","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","p":1645},{"i":1655,"t":"欢迎来到笔记本的其他部分","s":"Welcome","u":"/en/docs/Others/intro","p":1655},{"i":1659,"t":"一、latte-dock","s":"如何让你的Kde Plasma看起来更像macOS","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","p":1659},{"i":1664,"t":"一、发生原因","s":"挂载Windows磁盘为只读文件","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","p":1664},{"i":1669,"t":"树","s":"数据结构","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","p":1669},{"i":1674,"t":"通过编写脚本函数的方式，手动开启代理","s":"终端代理","u":"/en/docs/Others/Linux/实用工具/终端代理","p":1674},{"i":1682,"t":"大数除法是指被除数大小超出long long范围，而导致必须使用字符串存储的除法，属于简单模拟的范畴","s":"大数除法","u":"/en/docs/Tui-Mian/机试/大数除法","p":1682},{"i":1690,"t":"面试常考问题","s":"概率论","u":"/en/docs/Tui-Mian/数学/概率论","p":1690},{"i":1693,"t":"欢迎来到笔记本的推免复习部分","s":"Welcome","u":"/en/docs/Tui-Mian/intro","p":1693},{"i":1697,"t":"一、线性代数","s":"夏令营面试数学部分复习","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","p":1697},{"i":1702,"t":"参考链接：","s":"线性代数","u":"/en/docs/Tui-Mian/数学/线性代数","p":1702},{"i":1708,"t":"前言","s":"经验贴：2023年双非计算机保研经历","u":"/en/docs/Tui-Mian/Summary","p":1708},{"i":1719,"t":"一、U-2-Net","s":"简历面试准备","u":"/en/docs/Tui-Mian/简历/简历面试准备","p":1719},{"i":1761,"t":"必须要知道的原理","s":"Linux 系统下 GeekOS 的环境配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","p":1761}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/888",[0,0.766]],["t/893",[1,4.697]],["t/899",[2,3.692,3,3.198]],["t/905",[0,0.766]],["t/963",[0,0.766]],["t/969",[4,3.692,5,3.692]],["t/975",[0,0.766]],["t/979",[0,0.766]],["t/983",[6,3.692,7,2.434]],["t/991",[8,3.692,9,3.692]],["t/1008",[10,3.654]],["t/1031",[11,4.697]],["t/1084",[12,3.041,13,3.041,14,2.165]],["t/1102",[0,0.766]],["t/1129",[0,0.475,7,0.832,14,0.898,15,1.9,16,1.093,17,1.093,18,1.093,19,1.093]],["t/1164",[0,0.766]],["t/1180",[20,4.697]],["t/1188",[21,3.692,22,3.692]],["t/1193",[23,4.697]],["t/1204",[0,0.766]],["t/1234",[0,0.475,7,0.832,14,0.898,15,1.9,16,1.093,17,1.093,18,1.093,19,1.093]],["t/1269",[24,3.041,25,3.041,26,2.634]],["t/1277",[0,0.766]],["t/1288",[0,0.766]],["t/1295",[0,0.766]],["t/1303",[27,2.586,28,2.586,29,2.586,30,2.586]],["t/1310",[0,0.602,31,3.692]],["t/1315",[0,0.766]],["t/1322",[32,3.692,33,3.692]],["t/1331",[0,0.766]],["t/1338",[0,0.766]],["t/1345",[0,0.766]],["t/1348",[10,3.654]],["t/1371",[0,0.766]],["t/1378",[34,4.068]],["t/1400",[35,4.068]],["t/1411",[36,4.697]],["t/1420",[37,4.697]],["t/1439",[10,3.654]],["t/1450",[7,0.975,14,1.052,38,1.478,39,1.478,40,1.478,41,1.478,42,1.478,43,1.478,44,1.478]],["t/1470",[45,2.586,46,2.586,47,2.586,48,2.586]],["t/1483",[0,0.766]],["t/1497",[49,4.697]],["t/1525",[35,4.068]],["t/1536",[34,4.068]],["t/1558",[7,2.434,50,3.692]],["t/1579",[0,0.766]],["t/1588",[26,3.198,51,3.692]],["t/1600",[0,0.766]],["t/1610",[52,4.697]],["t/1627",[0,0.766]],["t/1639",[0,0.766]],["t/1643",[0,0.602,3,3.198]],["t/1645",[0,0.66,53,1.989,54,1.989,55,1.989]],["t/1655",[0,0.766]],["t/1659",[56,3.692,57,3.692]],["t/1664",[0,0.766]],["t/1669",[0,0.766]],["t/1674",[0,0.766]],["t/1682",[58,5.128]],["t/1690",[0,0.766]],["t/1693",[0,0.766]],["t/1697",[0,0.766]],["t/1702",[0,0.766]],["t/1708",[0,0.766]],["t/1719",[59,3.041,60,3.041,61,3.041]],["t/1761",[0,0.766]]],"invertedIndex":[["",{"_index":0,"t":{"888":{"position":[[0,4]]},"905":{"position":[[0,6]]},"963":{"position":[[0,93]]},"975":{"position":[[0,14]]},"979":{"position":[[0,12]]},"1102":{"position":[[0,11]]},"1129":{"position":[[0,8],[13,13],[74,11]]},"1164":{"position":[[0,33]]},"1204":{"position":[[0,5]]},"1234":{"position":[[0,8],[13,13],[74,11]]},"1277":{"position":[[0,4]]},"1288":{"position":[[0,2]]},"1295":{"position":[[0,8]]},"1310":{"position":[[4,2]]},"1315":{"position":[[0,10]]},"1331":{"position":[[0,6]]},"1338":{"position":[[0,13]]},"1345":{"position":[[0,6]]},"1371":{"position":[[0,2]]},"1483":{"position":[[0,2]]},"1579":{"position":[[0,8]]},"1600":{"position":[[0,32]]},"1627":{"position":[[0,5]]},"1639":{"position":[[0,14]]},"1643":{"position":[[3,6]]},"1645":{"position":[[0,7],[19,1],[28,3]]},"1655":{"position":[[0,12]]},"1664":{"position":[[0,6]]},"1669":{"position":[[0,1]]},"1674":{"position":[[0,18]]},"1690":{"position":[[0,6]]},"1693":{"position":[[0,14]]},"1697":{"position":[[0,6]]},"1702":{"position":[[0,5]]},"1708":{"position":[[0,2]]},"1761":{"position":[[0,8]]}}}],["0",{"_index":5,"t":{"969":{"position":[[50,5]]}}}],["1",{"_index":3,"t":{"899":{"position":[[60,1]]},"1643":{"position":[[0,2]]}}}],["1x1",{"_index":31,"t":{"1310":{"position":[[0,3]]}}}],["2",{"_index":60,"t":{"1719":{"position":[[4,1]]}}}],["201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30",{"_index":2,"t":{"899":{"position":[[0,59]]}}}],["2023",{"_index":46,"t":{"1470":{"position":[[8,4]]}}}],["3",{"_index":26,"t":{"1269":{"position":[[17,6]]},"1588":{"position":[[6,1]]}}}],["5",{"_index":25,"t":{"1269":{"position":[[14,2]]}}}],["access",{"_index":48,"t":{"1470":{"position":[[18,6]]}}}],["adapt",{"_index":18,"t":{"1129":{"position":[[58,10]]},"1234":{"position":[[58,10]]}}}],["adversari",{"_index":9,"t":{"991":{"position":[[17,12]]}}}],["ai",{"_index":43,"t":{"1450":{"position":[[80,2]]}}}],["arxiv",{"_index":10,"t":{"1008":{"position":[[0,8]]},"1348":{"position":[[0,8]]},"1439":{"position":[[0,8]]}}}],["autoregress",{"_index":50,"t":{"1558":{"position":[[0,20]]}}}],["cross",{"_index":29,"t":{"1303":{"position":[[15,5]]}}}],["cvpr",{"_index":45,"t":{"1470":{"position":[[0,7]]}}}],["diffus",{"_index":22,"t":{"1188":{"position":[[7,9]]}}}],["dock",{"_index":57,"t":{"1659":{"position":[[8,4]]}}}],["docusauru",{"_index":53,"t":{"1645":{"position":[[8,10]]}}}],["fold",{"_index":28,"t":{"1303":{"position":[[10,4]]}}}],["fork",{"_index":19,"t":{"1129":{"position":[[69,4]]},"1234":{"position":[[69,4]]}}}],["foundat",{"_index":42,"t":{"1450":{"position":[[51,10]]}}}],["geekos环境的配置，下面我们来验证环境配置的成功与否以及project",{"_index":4,"t":{"969":{"position":[[0,49]]}}}],["gen",{"_index":40,"t":{"1450":{"position":[[41,3]]}}}],["gener",{"_index":14,"t":{"1084":{"position":[[23,10]]},"1129":{"position":[[41,10]]},"1234":{"position":[[41,10]]},"1450":{"position":[[69,10]]}}}],["https://ai.meta.com/blog/movi",{"_index":39,"t":{"1450":{"position":[[5,35]]}}}],["https://arxiv.org/abs/2407.07614",{"_index":36,"t":{"1411":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2112.10752",{"_index":37,"t":{"1420":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2208.11970",{"_index":49,"t":{"1497":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2404.02905",{"_index":52,"t":{"1610":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2406.06525",{"_index":35,"t":{"1400":{"position":[[0,37]]},"1525":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2406.11838",{"_index":34,"t":{"1378":{"position":[[0,37]]},"1536":{"position":[[0,37]]}}}],["ipl",{"_index":15,"t":{"1129":{"position":[[9,3],[27,3]]},"1234":{"position":[[9,3],[27,3]]}}}],["k",{"_index":27,"t":{"1303":{"position":[[8,1]]}}}],["latt",{"_index":56,"t":{"1659":{"position":[[0,7]]}}}],["llama",{"_index":51,"t":{"1588":{"position":[[0,5]]}}}],["logist",{"_index":32,"t":{"1322":{"position":[[0,11]]}}}],["long",{"_index":58,"t":{"1682":{"position":[[0,17],[18,32]]}}}],["matlab",{"_index":11,"t":{"1031":{"position":[[0,49]]}}}],["media",{"_index":41,"t":{"1450":{"position":[[45,5]]}}}],["meta",{"_index":38,"t":{"1450":{"position":[[0,4]]}}}],["model",{"_index":7,"t":{"983":{"position":[[54,28]]},"1129":{"position":[[52,5]]},"1234":{"position":[[52,5]]},"1450":{"position":[[62,6]]},"1558":{"position":[[21,137]]}}}],["net",{"_index":61,"t":{"1719":{"position":[[6,3]]}}}],["n是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求n",{"_index":1,"t":{"893":{"position":[[0,43]]}}}],["open",{"_index":47,"t":{"1470":{"position":[[13,4]]}}}],["pronounc",{"_index":8,"t":{"991":{"position":[[7,9]]}}}],["regress",{"_index":33,"t":{"1322":{"position":[[12,10]]}}}],["sampl",{"_index":12,"t":{"1084":{"position":[[0,13]]}}}],["shape为$[5",{"_index":24,"t":{"1269":{"position":[[0,13]]}}}],["shot",{"_index":17,"t":{"1129":{"position":[[36,4]]},"1234":{"position":[[36,4]]}}}],["sota的图像生成模型的共同点，并初步了解了diffus",{"_index":6,"t":{"983":{"position":[[0,53]]}}}],["stabl",{"_index":21,"t":{"1188":{"position":[[0,6]]}}}],["tensorflow框架，可以使用tensorboard",{"_index":23,"t":{"1193":{"position":[[0,36]]}}}],["text",{"_index":13,"t":{"1084":{"position":[[18,4]]}}}],["transformer实战练习，代码见github",{"_index":20,"t":{"1180":{"position":[[0,28]]}}}],["u",{"_index":59,"t":{"1719":{"position":[[0,3]]}}}],["v2.4.3",{"_index":54,"t":{"1645":{"position":[[21,6]]}}}],["v3.5.2",{"_index":55,"t":{"1645":{"position":[[32,16]]}}}],["valid",{"_index":30,"t":{"1303":{"position":[[21,11]]}}}],["video",{"_index":44,"t":{"1450":{"position":[[83,6]]}}}],["zero",{"_index":16,"t":{"1129":{"position":[[31,4]]},"1234":{"position":[[31,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[],"invertedIndex":[],"pipeline":["stemmer"]}},{"documents":[{"i":890,"t":"该网站的搭建离不开 Docusaurus 的支持以及对 Sonder的宝藏笔记本 的参考。","s":"饮水思源","u":"/en/docs/Acknowledgement/intro","h":"#饮水思源","p":888},{"i":892,"t":"本网站展示的所有标识和链接仅属于个人喜好，不代表国家的立场或企业、组织的行为。 本网站的所有信息仅供参考，不构成法律或商业建议。","s":"Disclaimer","u":"/en/docs/Acknowledgement/intro","h":"#disclaimer","p":888},{"i":894,"t":"tip 设N是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求N的值","s":"反序输出","u":"/en/docs/Algorithms/题解/反序输出","h":"","p":893},{"i":896,"t":"#include <bits/stdc++.h> using namespace std; int main() { for (int i = 1000; i <= 9999; i++) { int x = i * 9, y = 0; while (x > 0) { y = y * 10 + x % 10; x /= 10; } if (i == y) { cout << i << endl; } } return 0; }","s":"参考代码","u":"/en/docs/Algorithms/题解/反序输出","h":"#参考代码","p":893},{"i":898,"t":"反序输出可以分为两部分：拆分以及反序拼接 拆分：n位整数求余10可以得到最后一位，再除以10可以得到除去上述最后一位之后的n-1位整数，循环得到每一个最后一位，完成拆分 while (x > 0) { y = y * 10 + x % 10; // 拼接与拆分 x /= 10; } 拼接：将s中的数字拼接成整数 int sum = 0; for (int i = 0; i < s.size(); i++) { sum = sum * 10 + s[i]; }","s":"题解","u":"/en/docs/Algorithms/题解/反序输出","h":"#题解","p":893},{"i":900,"t":"tip 输入一个数，比如201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30的倍数，就输出最大的倍数，不能就输出-1 例如输入201可以随意组合成 201，210，012，021，102，120等数字 其中120，210都是30的倍数，由于要找最大的，所以答案是210 输入样例：201 输出样例：210","s":"排列组合（求30的倍数）","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"","p":899},{"i":902,"t":"#include <bits/stdc++.h> using namespace std; int main() { string s; cin >> s; int maxx = 0, flag = 0; sort(s.begin(), s.end()); do { int now = 0; for (int i = 0; i < s.size(); i++) { now = now * 10 + s[i] - '0'; } if (now % 30 == 0) { flag = 1; maxx = max(maxx, now); } } while (next_permutation(s.begin(), s.end())); if (flag == 1) { cout << maxx << endl; return 0; } else { cout << -1 << endl; } }","s":"参考代码","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#参考代码","p":899},{"i":904,"t":"使用C++ STL提供的排列组合模版 首先将代排列组合的字符串或数组进行排序 sort(list.begin(), list.end()); 使用排列组合模版 do { something(); } while (next_permutation(list.begin(), list.end())); 此时，在每一个do循环中，list按从小到大的顺序进行排列组合遍历","s":"题解","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#题解","p":899},{"i":908,"t":"词法分析：分析输入串如何构成句子，得到单词序列 语法分析：分析单词序列如何构成程序，构造语法分析树 语义分析：审查语义错误，为代码生成收集类型信息 中间代码生成 代码优化 目标代码生成 表管理、错误检查和处理贯穿整个过程","s":"1.1 编译程序的逻辑结构","u":"/en/docs/Curriculum/编译原理/Note","h":"#11-编译程序的逻辑结构","p":905},{"i":910,"t":"前端是指与源语言有关、与目标机无关的部分 如词法分析、语法分析、语义分析、中间代码生成、代码优化中与机器无关的部分 后端是指与目标机有关的部分 如代码优化中与机器有关的部分、目标代码的生成","s":"1.2 前端和后端","u":"/en/docs/Curriculum/编译原理/Note","h":"#12-前端和后端","p":905},{"i":912,"t":"遍是指从头到尾扫描一遍源程序","s":"1.3 遍的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#13-遍的概念","p":905},{"i":915,"t":"若从文法的开始符号开始存在以下推导，则称α\\alphaα为该文法的一个句型，句型中既可以包含终结符，也可以包含非终结符，也可以是空串 S⇒∗α, α∈(VT∪VN)∗(1) S \\Rightarrow^* \\alpha,\\space \\alpha \\in (V_T \\cup V_N)^* \\tag{1}S⇒∗α, α∈(VT​∪VN​)∗(1)","s":"2.1 句型","u":"/en/docs/Curriculum/编译原理/Note","h":"#21-句型","p":905},{"i":917,"t":"S⇒∗β, β∈VT∗(2)S \\Rightarrow^* \\beta,\\space \\beta \\in V_T^* \\tag{2}S⇒∗β, β∈VT∗​(2) 则称β\\betaβ是该文法的句子","s":"2.2 句子：","u":"/en/docs/Curriculum/编译原理/Note","h":"#22-句子","p":905},{"i":919,"t":"0型文法，又称无限制文法、短语文法 1型文法，又称文有关文法 2型文法，又称上下文无关文法（Context-Free Grammar，CFG） 可用来构建语法树，语法树是上下文无关文法推导和规约的图形化表示 A→β, A∈VN, β∈(VT∪VN)∗(3)\\Alpha \\rightarrow \\beta,\\space \\Alpha \\in V_N, \\space \\beta \\in (V_T \\cup V_N)^* \\tag{3}A→β, A∈VN​, β∈(VT​∪VN​)∗(3) 3型文法，又称正规文法（Regular Grammar，RG） 左线性文法 右线性文法","s":"2.3 文法的分类：","u":"/en/docs/Curriculum/编译原理/Note","h":"#23-文法的分类","p":905},{"i":921,"t":"如果在推导的任何一步都是对产生式左部中的最左/右非终结符进行替换，则称为最左/右推导，其中最右推导也被成为规范推导","s":"2.4 最左/右推导：","u":"/en/docs/Curriculum/编译原理/Note","h":"#24-最左右推导","p":905},{"i":925,"t":"确定的有穷自动机（DFA） DFA的定义及组成 确定的含义：在状态转换的每一步，FA根据当前的状态及扫描的输入字符，便能唯一地知道FA的下一状态。 tip 在状态转换图中的直观体现就是，在确定行表示的当前状态以及列确定的路径后，得到的目的状态不会是元素个数大于1的集合。 DFA的可接受以及接受集的定义：从开始状态开始，经过该符号串表示的路径，若能到达终态则称该符号串可被改DFA接受。 不确定的有穷自动机（NFA） NFA的确定化，即将NFA转换为DFA（子集法） 步骤： 画出DFA转换表 tip 转换表中在状态一列中，状态包含原NFA终态的集合要标*，代表其为等价DFA的终态 计算move(T,a)move(T, a)move(T,a) 计算ϵ−closure(T)\\epsilon -closure(T)ϵ−closure(T) 为转换表中的状态重命名 确定初态和终态 DFA的最小化（分割法） 步骤如下： tip 考试时注意过程怎么写，下面使用需要三轮分割的列子演示步骤 在分割完成后，对可以化简的集合选出一个状态作为代表，删除其他多余状态，重新画图","s":"3.2 有穷自动机（FA）","u":"/en/docs/Curriculum/编译原理/Note","h":"#32-有穷自动机fa","p":905},{"i":929,"t":"描述程序语法结构的规则可以使用2型文法（上下文无关语法，CFG） 语法分析方法包含确定的和不确定的分析方法，确定的语法分析方法根据输入符号，唯一选择产生式 确定的自顶向下分析方法：根据当前的输入符号唯一地确定选用哪个产生式替换相应的非终结符以往下推导","s":"第四章：自顶向下语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第四章自顶向下语法分析方法","p":905},{"i":932,"t":"tip FOLLOW集的求法可以按照下图技巧进行 若要求的非终结符是开始符号，则直接将#插入FOLLOW集中 在所有产生式的右部中找到要求的非终结符 看非终结符的右侧是什么元素 若无元素，则直接将该产生式左部的FOLLOW集加入到该非终结符的FOLLOW集中 若为终结符，直接将该终结符加入到FOLLOW集中 若为非终结符，将FIRST(该非终结符)减去ϵ\\epsilonϵ的所有终结符元素都加入至FOLLOW集中","s":"2. Follow集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-follow集的定义","p":905},{"i":934,"t":"tip 需要注意的是FIRST集、FOLLOW集是针对于符号串而言的，而SELECT集是针对于产生式而言的","s":"3. SELECT集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-select集的定义","p":905},{"i":937,"t":"tip 考试时注意书写过程，需要画出以下两张表","s":"5. LL(1)文法的判别","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-ll1文法的判别","p":905},{"i":939,"t":"预测分析表通过计算SELECT集得到，形如下表 行标为各非终结符，列标为输入符号，若从某一非终结符开始的产生式的SELECT集包含某一输入符号，则对应产生式就是行列确定的元素值。","s":"6. 预测分析表","u":"/en/docs/Curriculum/编译原理/Note","h":"#6-预测分析表","p":905},{"i":941,"t":"消除左公因子（回溯） caution 同一非终结符的多个产生式存在共同前缀，会导致回溯现象，需要消除 消除左递归 caution 左递归文法会使递归下降分析器陷入无限循环 消除直接左递归 消除间接左递归 通过代入法变成直接左递归再消除","s":"7. 非LL(1)文法到LL(1)文法的等价变换","u":"/en/docs/Curriculum/编译原理/Note","h":"#7-非ll1文法到ll1文法的等价变换","p":905},{"i":944,"t":"从的底部向顶部的方向构造语法分析树，采用最左归约的方式，即最右推导的逆过程 tip 注意辨别：自顶向下的语法分析采用最左推导的方式 最右推导是规范推导，最左归约是最右推导的逆过程，又称规范归约","s":"5.1 概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#51-概念","p":905},{"i":946,"t":"算符优先分析法 按照算符的优先关系和结合性质进行语法分析 LR分析法（重点） 规范规约：句柄作为可归约串","s":"5.2 方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#52-方法","p":905},{"i":949,"t":"移入：将下一个输入符号移到栈顶 归约：被归约的符号串的右端处于栈顶，语法分析器在栈中确定这个串的左端非终结符来替换该串 接受：宣布语法分析过程成功完成 报错：发现一个语法错误，并调用错误恢复子程序","s":"5.4 移入-归约分析器的4种动作","u":"/en/docs/Curriculum/编译原理/Note","h":"#54-移入-归约分析器的4种动作","p":905},{"i":951,"t":"前导知识：4种项目状态 归约项目：·在最后 接受项目：拓广文法的开始符号的产生式，且·在最后 移进项目：·后面是终结符VTV_TVT​ 待约项目：·后面是非终结符VNV_NVN​ 移入-归约分析 LR(0)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV1pL4y1E7RE/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在写预测分析表的reduce项时，action的每一列都要写 SLR(1)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV12u411S7Us/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在写预测分析表的reduce项时，只写产生式左部的FOLLOW集对应的action列 LR(1)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV1Vm4y1Q7XB/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在构造项目集时，要加入前向搜索符；并且，在写预测分析表的reduce项时只写前向搜索符对应的action列 LALR(1)分析表 / 构造其识别活前缀DFA 在构造项目集时，要加入前向搜索符，但是要合并同心集，把相同表达式但是不同前向搜索符的前向搜索符合并，并且在写预测分析表的reduce项时只写前向搜索符集对应的action列 https://www.bilibili.com/video/BV13r4y1m7sQ/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533","s":"5.5 重要题型","u":"/en/docs/Curriculum/编译原理/Note","h":"#55-重要题型","p":905},{"i":954,"t":"词法分析：从左到右扫描源程序，识别出各个单词，确定单词类型并形成单词序列，进行词法错误检查，对标识符进行登记，即符号表管理 语法分析：从词法分析输出的单词序列识别出各类短语，构造语法分析树，并进行语法错误检查 语义分析：审查程序是否具有语义错误，为代码生成阶段收集类型信息，不符合规范时报错（符号表是语义正确性检查的依据） 中间代码生成：生成中间代码，如三地址指令、四元式、波兰式、逆波兰式、树形结构等 代码优化：对代码进行等价变换以求提高执行效率，提高速度或节省空间 目标代码生成：将中间代码转化成目标机上的机器指令代码或汇编代码（符号表是对符号分配地址的依据）","s":"1 编译程序各阶段功能","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-编译程序各阶段功能","p":905},{"i":956,"t":"就产生语法树的方向而言，可大致分为自顶向下的语法分析和自底向上的语法分析两大类。 自顶向下的语法分析方法：主流方法为递归下降分析法。根据当前的输入符号唯一地确定选用哪个产生式替换相应的非终结符以往下推导。 自底向上的语法分析方法：将输入串w归约为文法开始符号S的过程。 tip LR(0), SLR(1), LR(1) LR(0)文法可能存在移进-归约冲突、归约-归约冲突 SLR(1)文法在构造的过程中不存在归约-归约冲突，但有可能出现移进-归约冲突，可以由FOLLOW集解决的话则是SLR(1)文法 tip 3 翻译模式​ 翻译模式是适合语法制导语义计算的另一种描述形式，可以体现一种合理调用语义动作的算法。 S-翻译模式： 仅涉及综合属性的翻译模式，通常将语义动作集合置于产生式右端末尾。 L-翻译模式： 既可以包含综合属性，也可以包含继承属性。 4 属性文法​ 在文法基础上，为文法符号关联有特定意义的属性，并为产生式关联相应的语义动作，称之为属性文法。 S-属性文法： 只包含综合属性的属性文法成为S-属性文法 L-属性文法： 可以包含综合属性，也可以包含继承属性，但要求产生式右部的文法符号的继承属性的计算只取决于该符号左边符号的属性 5 符号表​ 符号表是编译程序中用于收集标识符的属性信息的数据结构。 各阶段作用： 语义分析阶段：语义合法性检查的依据 目标代码生成阶段：对符号名进行地址分配的依据","s":"2 语法分析方法的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-语法分析方法的概念","p":905},{"i":958,"t":"翻译模式是适合语法制导语义计算的另一种描述形式，可以体现一种合理调用语义动作的算法。 S-翻译模式： 仅涉及综合属性的翻译模式，通常将语义动作集合置于产生式右端末尾。 L-翻译模式： 既可以包含综合属性，也可以包含继承属性。","s":"3 翻译模式","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-翻译模式","p":905},{"i":960,"t":"在文法基础上，为文法符号关联有特定意义的属性，并为产生式关联相应的语义动作，称之为属性文法。 S-属性文法： 只包含综合属性的属性文法成为S-属性文法 L-属性文法： 可以包含综合属性，也可以包含继承属性，但要求产生式右部的文法符号的继承属性的计算只取决于该符号左边符号的属性","s":"4 属性文法","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-属性文法","p":905},{"i":962,"t":"符号表是编译程序中用于收集标识符的属性信息的数据结构。 各阶段作用： 语义分析阶段：语义合法性检查的依据 目标代码生成阶段：对符号名进行地址分配的依据","s":"5 符号表","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-符号表","p":905},{"i":964,"t":"tip 在一面很长的墙壁上，工人们用不同的油漆去刷墙，然而可能有些地方刷过以后觉得不好看，他们会重新刷一下。有些部分因为重复刷了很多次覆盖了很多层油漆，小诺很好奇那些地方被刷过多少种颜色的油漆。 输入描述： 若干行输入，每行两个数字B[i],E[i](0<=B[i]<=E[i]<=200000)表示这次刷的墙壁是哪一段 （假设每次刷的时候油漆颜色都和之前的不同），以0 0结束 又若干行输入，每行两个数字begin[i],end[i]（0<=begin[i]<=end[i]<=200000）表示小诺询问的段， 以0 0结束 输出描述: 对于每个小诺的询问输出(end[i]-begin[i]+1)行,表示对应询问段的每个点被多少种颜色的油漆覆盖过。","s":"一维前缀和（刷出一道墙）","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"","p":963},{"i":966,"t":"#include <bits/stdc++.h> using namespace std; int main() { vector<int> colors(200001, 0); int B, E; while (scanf(\"%d %d\", &B, &E)) { if (B == 0 && E == 0) { break; } colors[B]++; // 刷墙起点标记 colors[E + 1]--; // 刷墙终点标记 } // 计算前缀和 for (int i = 1; i < colors.size(); i++) { colors[i] += colors[i - 1]; } int begin, end; while (scanf(\"%d %d\", &begin, &end)) { if (begin == 0 && end == 0) { break; } for (int i = begin; i <= end; i++) { printf(\"%d\\n\", colors[i]); } } return 0; }","s":"参考代码","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#参考代码","p":963},{"i":968,"t":"使用前缀和思想简化时间复杂度，设计前缀和数组，使输出的数组中元素的值代表其对应节点被刷的次数。 首先初始化前缀和数组，使每一个元素等于为0。 该题的巧妙之处就在于：对于每一个输入的索引B与E，B作为开始刷的节点索引令前缀和数组中对应元素的值+1+1+1，E+1作为刷墙结束的下一个节点的索引令对应的值−1-1−1。这样在所有输入结束后的计算前缀和阶段，在每一个值为[1,−1)[1, -1)[1,−1)的索引区间中的元素值都会加1，而对于某次刷漆终点E的下一个索引为E+1的元素值由于−1-1−1而抵消影响（自身值为−1-1−1加上之前元素所累积的1而归零），此时数组中元素的值才代表其对应节点被刷的次数。 关于超时，可以在函数中加入以下代码消除流操作的缓冲区，并使用\"\\n\"代替endl。 ios::sync_with_stdio(false);","s":"题解","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#题解","p":963},{"i":970,"t":"在上一篇博客中我们完成了GeekOS环境的配置，下面我们来验证环境配置的成功与否以及project 0的实现。","s":"GeekOS project 0的实现","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"","p":969},{"i":972,"t":"编写geekos-version/src/projecti/src/geekos/main.c文件 编写函数project0实现检测键盘输入Ctrl+d结束线程。 void project0(){ Print(\"To Exit hit Ctrl + d.\\n\"); Keycode keycode; while(1) { if(Read_Key(&keycode)) { if(!((keycode & KEY_SPECIAL_FLAG) || (keycode & KEY_RELEASE_FLAG)))// 不是特殊键或者弹起 { int asciiCode = keycode & 0xff;//d if((keycode & KEY_CTRL_FLAG)==KEY_CTRL_FLAG && asciiCode=='d')//ctrl+d { Print(\"\\n---------Adios!---------\\n\"); # 这里需要注意素质 Exit(1); }else { Print(\"%c\",(asciiCode=='\\r') ? '\\n' : asciiCode); } } } } } 在main函数中添加以下代码，实现自定义函数的调用，创建线程。 struct Kernel_Thread *thread; thread = Start_Kernel_Thread(&project0,0,PRIORITY_NORMAL,false); 总体代码 /* * GeekOS C code entry point * Copyright (c) 2001,2003,2004 David H. Hovemeyer <daveho@cs.umd.edu> * Copyright (c) 2003, Jeffrey K. Hollingsworth <hollings@cs.umd.edu> * Copyright (c) 2004, Iulian Neamtiu <neamtiu@cs.umd.edu> * $Revision: 1.51 $ * * This is free software. You are permitted to use, * redistribute, and modify it as specified in the file \"COPYING\". */ #include <geekos/bootinfo.h> #include <geekos/string.h> #include <geekos/screen.h> #include <geekos/mem.h> #include <geekos/crc32.h> #include <geekos/tss.h> #include <geekos/int.h> #include <geekos/kthread.h> #include <geekos/trap.h> #include <geekos/timer.h> #include <geekos/keyboard.h> void project0(){ Print(\"To Exit hit Ctrl + d.\\n\"); Keycode keycode; while(1) { if(Read_Key(&keycode)) { if(!((keycode & KEY_SPECIAL_FLAG) || (keycode & KEY_RELEASE_FLAG)))// 不是特殊键或者弹起 { int asciiCode = keycode & 0xff;//d if((keycode & KEY_CTRL_FLAG)==KEY_CTRL_FLAG && asciiCode=='d')//ctrl+d { Print(\"\\n---------Adios! Motherfucker!---------\\n\"); Exit(1); }else { Print(\"%c\",(asciiCode=='\\r') ? '\\n' : asciiCode); } } } } } /* * Kernel C code entry point. * Initializes kernel subsystems, mounts filesystems, * and spawns init process. */ void Main(struct Boot_Info* bootInfo) { Init_BSS(); Init_Screen(); Init_Mem(bootInfo); Init_CRC32(); Init_TSS(); Init_Interrupts(); Init_Scheduler(); Init_Traps(); Init_Timer(); Init_Keyboard(); Set_Current_Attr(ATTRIB(BLACK, GREEN|BRIGHT)); Print(\"Welcome to GeekOS!\\n\"); Set_Current_Attr(ATTRIB(BLACK, GRAY)); // TODO(\"Start a kernel thread to echo pressed keys and print counts\"); struct Kernel_Thread *thread; thread = Start_Kernel_Thread(&project0,0,PRIORITY_NORMAL,false); /* Now this thread is done. */ Exit(0); }","s":"编写C语言代码","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#编写c语言代码","p":969},{"i":974,"t":"每一个项目的编译都在geekos-version/src/projecti/build文件夹下进行，即要在终端中通过cd进入该目录。 执行 make depend make 此时，该目录下会生成bochs.out、depend.mak以及fd.img文件，bochs.out文件是日志输出文件，depend.mak是编译中间生成的文件，最终生成的fd.img是最重要的GeekOS映像文件，有了它才能使用bochs运行GeekOS操作系统。感恩它！ 目录下的文件应该是这样的结构： 下面就可以使用bochs运行GeekOS系统了，可以说bochs的运行依赖两个文件，一个是配置文件.bochsrc，一个是映像文件fd.img，映像文件的加载路径需要在.bochsrc文件中定义，在环境配置的博客中已经介绍过了。这里再贴一下内容。 # An example .bochsrc file. # You will need to edit these lines to reflect your system. vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # 请根据自己的实际安装路径更改 romimage: file=/usr/local/share/bochs/BIOS-bochs-latest # 请根据自己的实际安装路径更改 megs: 8 boot: a floppya: 1_44=fd.img, status=inserted #floppya: 1_44=fd_aug.img, status=inserted log: ./bochs.out # keyboard_serial_delay: 200 # vga_update_interval: 300000 mouse: enabled=0 private_colormap: enabled=0 # i440fxsupport: enabled=0 # Uncomment this to write all bochs debugging messages to # bochs.out. This produces a lot of output, but can be very # useful for debugging the kernel. #debug: action=report 在这个目录下打开终端，执行 bochs 选择6，按下回车 可能会出现黑屏情况，这是因为进入了调试模式，终端正在等待命令，在终端输入 c 即可完成bochs的正式启动，最终的效果","s":"使用Linux的编译系统对C语言代码进行编译","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#使用linux的编译系统对c语言代码进行编译","p":969},{"i":976,"t":"tip 欢迎来到笔记本的课程学习部分","s":"Welcome","u":"/en/docs/Curriculum/intro","h":"","p":975},{"i":978,"t":"如果可以帮到你的话就给个免费的 Star 吧！","s":"支持我！","u":"/en/docs/Curriculum/intro","h":"#支持我","p":975},{"i":980,"t":"tip 欢迎来到笔记本的算法部分","s":"Welcome","u":"/en/docs/Algorithms/intro","h":"","p":979},{"i":982,"t":"如果可以帮到你的话就给个免费的 Star 吧！","s":"支持我！","u":"/en/docs/Algorithms/intro","h":"#支持我","p":979},{"i":984,"t":"tip 在以前的文章图像生成模型中已经大概介绍了目前SOTA的图像生成模型的共同点，并初步了解了Diffusion Model，在这篇文章中将详细讲解扩散模型的数学原理等。","s":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"","p":983},{"i":986,"t":"首先回顾一下扩散模型的基本概念和生成过程，可以大概分为两步： Forward Process：对训练集中的图片不断加入与图片shape相同的、从某随机分布中sample出的噪声，直至图片可以被认为是从该随机分布中sample出的矩阵。 Forward Process又叫做Diffusion Process，在这一步中产生的噪声-加入噪声的图像对可以用来训练Noise Predictor，即从有噪声的图像中预测出其中的噪声，再从输入中减去噪声得到降噪后的图片。 图像生成的原理 这一步的目的也同样在之前的文章图像生成模型中提到过：由于根据文字prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（Target Domain）符合某种分布。因此目前的SOTA模型除了将文字prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（Source Domain）输入的随机向量映射到目标域的分布，生成对应的图片。 Reverse Process：使用Diffusion Process训练的Noise Predictor，根据文字Prompt对从随机分布中sample出的图片大小的噪声图片进行降噪，得到原图。 值得注意的是，变分自编码器（Variational Auto-Encoder, abbr. VAE）与Diffusion Model非常相似：VAE对训练集中的原始图像使用Encoder将其变换为某种Latent Representation，这种Latent Representation的分布也是符合某种随机分布的，VAE再通过Decoder将期待生成的目标域图像还原出来。 在下面的文章中我们也会学习一下VAE的数学原理，从VAE到Diffusion Model的具体数学推导，可以参考胡老师推荐的论文Understanding Diffusion Models: A Unified Perspective。 下面我们以DDPM论文中的原图来分析DDPM的训练与推理过程。","s":"基本概念","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#基本概念","p":983},{"i":988,"t":"循环开始，重复以下步骤； 首先从数据集中sample出原始图像x0\\mathbf{x}_0x0​； ttt是从1,…,T1,\\ldots,T1,…,T范围中sample出的一个integer； ϵ\\epsilonϵ是从Normal Distribution中sample出的与x0\\mathbf{x}_0x0​相同大小的噪声； 根据如下规则进行梯度下降，训练Noise Predictor： ∇θ∥ϵ−ϵθ(αˉtx0+1−αˉtϵ,t)∥2(1)\\nabla_{\\theta}\\left\\|\\boldsymbol{\\epsilon}-\\boldsymbol{\\epsilon}_{\\theta}(\\sqrt{\\bar{\\alpha}_{t}}\\mathbf{x}_{0}+\\sqrt{1-\\bar{\\alpha}_{t}}\\boldsymbol{\\epsilon},t)\\right\\|^{2}\\tag{1}∇θ​​ϵ−ϵθ​(αˉt​​x0​+1−αˉt​​ϵ,t)​2(1) 首先对x0\\mathbf{x}_0x0​和ϵ\\epsilonϵ根据权重αˉ1,αˉ2,...αˉT\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_Tαˉ1​,αˉ2​,...αˉT​做weighted sum产生加入噪声后的图像。通常来说，αˉ1\\bar{\\alpha}_1αˉ1​至αˉT\\bar{\\alpha}_TαˉT​是递减的，当在第2步中sample到的ttt越大，则原始图像x0\\mathbf{x}_0x0​对新图像的贡献越大。 ϵθ\\epsilon_{\\theta}ϵθ​是Noise Predictor，其输入是加入噪声的图像以及sample出的ttt，而ϵθ\\epsilon_\\thetaϵθ​训练的Ground Truth就是第3步中sample出的噪声ϵ\\epsilonϵ； 直至噪声预测模型ϵθ\\epsilon_\\thetaϵθ​训练至收敛。","s":"训练过程","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#训练过程","p":983},{"i":990,"t":"从Normal Distribution中sample出图片大小的噪声xT\\mathbf{x}_TxT​； ttt从T,…,1T,\\ldots,1T,…,1范围循环TTT次； 对与每一次以ttt计数的循环，若t>1t>1t>1，则从Normal Distribution中sample出z\\mathbf{z}z，否则z=0\\mathbf{z}=\\mathbf{0}z=0； 根据如下公式得到降噪后的图像： xt−1=1αt(xt−1−αt1−αˉtϵθ(xt,t))+σtz(2)\\mathbf{x}_{t-1}=\\frac{1}{\\sqrt{\\alpha_{t}}}\\left(\\mathbf{x}_{t}-\\frac{1-\\alpha_{t}}{\\sqrt{1-\\bar{\\alpha}_{t}}}\\boldsymbol{\\epsilon}_{\\theta}(\\mathbf{x}_{t},t)\\right)+\\sigma_{t}\\mathbf{z}\\tag{2}xt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​,t))+σt​z(2) 其中，xt\\mathbf{x}_txt​代表上一步骤中输出的降噪后的图像，xt−1\\mathbf{x}_{t-1}xt−1​代表当前步骤即将输出的降噪后的图像，ϵθ\\epsilon_\\thetaϵθ​代表Noise Predictor预测出的噪声，αˉ1,αˉ2,...αˉT\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_Tαˉ1​,αˉ2​,...αˉT​以及α1,α2,...αT\\alpha_1,\\alpha_2,...\\alpha_Tα1​,α2​,...αT​是两组权重序列； 结束本次for循环； 当t=1t=1t=1时，得到x0\\mathbf{x}_0x0​，即最终降噪后的图像。","s":"推理过程","u":"/en/docs/Deep-Learning/大模型基础/Diffusion-Model","h":"#推理过程","p":983},{"i":992,"t":"正确发音 How to pronounce Adversarial? /ˌædvərˈseriəl/","s":"生成式对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"","p":991},{"i":995,"t":"生成器（Generator）通常接收一个来自潜在空间（latent space）的随机向量作为输入。这个潜在空间通常是一个随机分布，比如均匀分布或正态分布。生成器的任务是将这个随机向量映射成与训练数据相似的样本。","s":"将随机分布作为输入","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#将随机分布作为输入","p":991},{"i":997,"t":"当需要解决的任务需要富有“创造力”时，即根据不同的输入，可以产生多个不一样且正确的输出时。这样的设计使得生成器能够生成多样性的样本，因为每个不同的随机向量都可能导致生成器输出不同的样本。在训练过程中，通过不断调整生成器的参数，使得生成器的输出在数据分布中更难以被判别器区分。","s":"为什么要添加分布","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#为什么要添加分布","p":991},{"i":999,"t":"GAN的工作原理： 生成器生成数据： 生成器从潜在空间中采样并生成一些数据。 真实数据与生成数据进入判别器： 真实数据和生成器生成的数据一起输入判别器。 判别器训练： 判别器被训练来正确分类真实数据和生成数据。 生成器训练： 生成器被训练来生成能够欺骗判别器的数据。生成器的目标是生成足够逼真的数据，以至于判别器无法准确区分真假。 迭代： 生成器和判别器交替训练，迭代进行，直到生成器生成的数据足够逼真。 训练的目标： 生成器目标： 生成更逼真的数据，以欺骗判别器。 判别器目标： 区分真实数据和生成数据，提高对真实数据的分类准确性。 GAN的训练是一个博弈过程，生成器和判别器相互竞争，最终达到平衡，生成器生成的数据足够逼真，判别器也无法准确判别真伪。这种模型在图像生成、风格转换等任务中取得了显著的成功。","s":"核心思想","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#核心思想","p":991},{"i":1001,"t":"GAN（Generative Adversarial Network，生成对抗网络）包括两个主要的组件：生成器（Generator）和判别器（Discriminator）。这两个组件通过对抗训练的方式一起学习。 生成器（Generator）： 它负责生成与训练数据相似的新样本。生成器接收来自潜在空间（latent space）的随机向量作为输入，并输出一个与训练数据类似的样本。生成器的目标是欺骗判别器，使其无法区分生成的样本和真实的训练数据。 判别器（Discriminator）： 它负责判别输入的样本是真实的训练数据还是生成器生成的假样本。判别器的目标是尽可能准确地分类输入的样本。 GAN的核心思想是通过对抗过程训练生成器和判别器，不断提高它们的性能。生成器试图生成逼真的样本，而判别器试图正确地区分真实样本和生成样本。这个对抗的训练过程可以被视为在两个分布之间进行的最优控制。","s":"具体结构与作用","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#具体结构与作用","p":991},{"i":1003,"t":"结构： 生成器是一个神经网络，通常是一个反卷积神经网络（Generator Network），其输入通常是一个随机噪声（潜在空间中的点），输出是与训练数据相似的图像或数据。 作用： 生成器的目标是学习生成与真实数据相似的数据。通过迭代训练，生成器的参数被调整，使其生成的数据能够愈发逼真。 Unconditional Generation​ Unconditional generation（无条件生成）指的是在生成模型中生成样本时，不受任何条件的约束。在这种情况下，生成器仅根据其学到的分布生成数据，而无需关注特定的输入条件或上下文。 对于生成对抗网络（GAN）或变分自动编码器（VAE）等生成模型，unconditional generation通常表现为从潜在空间中采样，然后将这些样本输入生成器，以生成新的、与训练数据相似的样本。这种生成方式是随机的，因为每次从潜在空间中采样都会导致生成不同的样本。 Conditional Generation​","s":"生成器（Generator）","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#生成器generator","p":991},{"i":1005,"t":"结构： 判别器是一个二元分类器，通常是一个卷积神经网络（Discriminator Network）。它的输入可以是真实数据或生成器生成的数据，输出是一个概率，表示输入数据是真实数据的概率。 作用： 判别器的目标是学习区分真实数据和生成器生成的数据。它被训练成对真实数据给出高概率，对生成的数据给出低概率。","s":"判别器（Discriminator）","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#判别器discriminator","p":991},{"i":1007,"t":"首先随机初始化生成器和判别器，接下来在每一轮训练中重复以下策略。 第一步，在生成器通过随机噪声神生成样本后，固定生成器的参数，将生成器产生的输出与训练资料中的标签作为判别器的输入，判别器为每个输入样本打分，代表其为真实样本的概率。 为了最小化损失函数使得判别器为真实样本赋分更高，为生成样本赋分更低，设计以下损失函数： Lossreal=−Ex∼pdata(x)[log⁡D(x)](1)Loss_{real}=-E_{x\\sim p_\\text{data}{(x)}}[\\log D(x)]\\tag{1}Lossreal​=−Ex∼pdata​(x)​[logD(x)](1) 其中，D(x)D(x)D(x)是判别器的输出，xxx是真实样本，EEE是数学期望。 Lossfake=−Ez∼pz(z)[log(1−D(G(z)))](2)Loss_{fake}=-E_{z\\sim p_z(z)}[log(1-D(G(z)))]\\tag{2}Lossfake​=−Ez∼pz​(z)​[log(1−D(G(z)))](2) 其中，G(z)G(z)G(z)是生成器的输出，zzz是随机噪声，EEE是数学期望。 将真实样本和生成样本的损失相加，形成判别器的总体损失。 Lossdiscriminator=Lossreal+Lossfake(3)Loss_{discriminator}=Loss_{real}+Loss_{fake}\\tag{3}Lossdiscriminator​=Lossreal​+Lossfake​(3) 最小化损失函数，更新判别器的参数。 第二步，在判别器参数更新后，固定判别器的参数，随机分布的向量再次输入至生成器中，得到生成样本，此时生成样本被送入参数固定的判别器中得到生成样本属于真实样本的概率。在生成器的训练过程中，我们的目的是让生成器生成的样本尽可能的接近真实样本。 LG=−Ez∼pz(z)[log⁡D(G(z))](4)L_G=-E_{z\\sim p_z(z)}[\\log D(G(z))]\\tag{4}LG​=−Ez∼pz​(z)​[logD(G(z))](4) 其中，G(z)G(z)G(z)是生成器的输出，D(G(z))D(G(z))D(G(z))是生成样本输入到判别器后的输出，zzz是随机噪声，EEE是数学期望。","s":"训练算法","u":"/en/docs/Deep-Learning/大模型基础/GAN","h":"#训练算法","p":991},{"i":1009,"t":"相关链接 论文：arXiv 参考资料： Transformer模型详解（图解最完整版） 【機器學習2021】Transformer (下) Transformer是Sequence-to-Sequence (Seq2Seq) 模型，模型的输入是向量序列，输出同样是向量序列，且输出的长度由模型经过学习决定。","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"","p":1008},{"i":1011,"t":"Transformer由Encoder和Decoder组成，编码器和解码器都包含6个Block，整体结构如下图所示。","s":"整体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#整体结构","p":1008},{"i":1014,"t":"Transformer Encoder结构如下图所示。其中，Add指的是残差连接Residual Connection，Norm指的是Layer Normalization。","s":"整体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#整体结构-1","p":1008},{"i":1016,"t":"对于输入的句子，对一个词汇的嵌入向量的奇数维度使用sine函数进行编码，对偶数维度使用cosine函数计算编码。 公式如下所示，其中pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel​次位置编码。 PE(pos,2i)=sin(pos100002i/dmodel)(1)PE_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{1}PE(pos,2i)​=sin(100002i/dmodel​pos​)(1)PE(pos,2i+1)=cos(pos100002i/dmodel)(2)PE_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{2}PE(pos,2i+1)​=cos(100002i/dmodel​pos​)(2) 根据三角函数的性质，对于pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1维度的线性组合，使得位置向量中蕴含了相对位置的信息。 PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)(3)\\begin{array}{l}PE(pos+k,2i)=PE(pos,2i)\\times PE(k,2i+1)+PE(pos,2i+1)\\times PE(k,2i)\\\\PE(pos+k,2i+1)=PE(pos,2i+1)\\times PE(k,2i+1)-PE(pos,2i)\\times PE(k,2i)\\end{array} \\tag{3}PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)​(3) 最终，位置编码向量的维度与词汇的嵌入维度相同，进行element-wise的相加操作。 InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i) \\tag{4}InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)","s":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":1008},{"i":1018,"t":"输入向量由Word Embedding和Positional Embedding相加得到。输入序列经过Mutil-Head Self-Attention之后，通过Residual Connection加上自身的输入向量，再经过Layer Normalization，之后送入FCN并进行Residual Connection加上送入FCN的输入自身，最终再进行Layer Normalization，以上构成了一个Encoder Block。每一个Block输出的向量序列长度等于输入的向量序列长度。","s":"具体结构","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#具体结构","p":1008},{"i":1020,"t":"Decoder的任务是生成输出，可以根据是否一次性生成输出分为Autoregressive（自回归，abbr. AT）以及Non-Autoregressive（非自回归，abbr. NAT）两种模式。 自回归类型的Decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token作为下一次的输入，通常每次生成一个词或一个符号。这种方式的缺点是需要保存和更新词表中的所有可能选项，因此在大词汇表上可能会变得非常慢。然而，它的优点是能够利用上下文信息来生成输出，这有助于提高翻译的质量。 非自回归类型的Decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。NAT的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于AT。","s":"Decoder","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#decoder","p":1008},{"i":1022,"t":"整体结构​ 词汇表（Vocabulary）​ 词汇表（Vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（NLP）中，词汇表是训练模型时所使用的唯一单词的集合，由具体的生成任务而确定。 Decoder每一步的输出是一个经过Softmax的Probability Distribution（概率分布），代表着词汇表中每一个词汇当前生成的概率，取最大概率值的词汇便是模型当前时间步输出的词汇。 Begin符号​ 解码器（Decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（Encoder）的输出。特别地，首个时间步的输入是Begin符号以及编码器（Encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（Encoder）的输出，直到生成序列的结束。 特殊符号 Begin符号是在Lexicon中添加的特殊符号，用来表示Decoder生成的开始。Begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（Embedding Layer）学习得到的，在嵌入层中，离散的符号被映射到一个实数向量。 Begin符号又叫Start符号或SOS符号（Start Of Sentence），都是表示生成的开始。End符号又叫EOS符号（End Of Sentence）。 End符号​ 在Decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过Softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向Decoder的输出中加入End符号的生成，即每一次输出除了词汇表的所有词汇外还有End符号的概率，当End符号是在所有词汇中概率最大的词汇时，生成停止。 掩码多头自注意力机制（Masked Multi-Head Self-Attention）​ 为什么使用掩码多头自注意力 掩码多头自注意力与Transformer训练时采取的Teacher Forcing策略有很大的关系，具体分析见下文《Teacher Forcing与Masked Multi-Head Self-Attention》的讨论环节：Teacher Forcing与Masked Multi-Head Self-Attention 观察Decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的Decoder当前时间步之前的所有输出单词经过嵌入后的向量表示。 掩码多头自注意力机制用于确保在生成序列的过程中，每个位置只能关注到该位置及其之前的位置。这是通过在Self-Attention的计算中应用一个掩码（mask）来实现的。这确保了在生成序列时，每个位置只能查看到它之前的信息，而不能查看到未来的信息，从而实现了自回归性质。 具体来说，添加掩码后的自注意力机制在生成注意力分数时不再考虑输入序列的所有向量。如在输入向量aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot product，而不考虑aia^iai之后的输入的key。 tip 对于第sss个时间步，Masked Mutil-Head Self-Attention的输入是时间步sss之前Decoder生成的所有输出单词的嵌入表示。 交叉注意力（Cross-Attention）​ 交叉注意力是连接Encoder和Decoder的桥梁，也是Decoder输入的重要组成部分。 交叉注意力接收两个输入序列，一个来自编码器（Encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（Decoder），是经过掩码多头自注意力机制的输出序列（通常是正在生成的序列的中间表示）。 在交叉注意力中，每次计算注意力得分的query来自解码器，key和value来自编码器。解码器每个向量的查询（Query）与编码器位置的键（Key）进行点积得到了注意力分数，通过Softmax操作后转换为注意力权重，再与编码器位置的值（Value）weighted sum得到加权注意力分数，最终将加权注意力分数求和得到每个输入向量的输出。","s":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":1008},{"i":1026,"t":"在 Transformer 中，Encoder 不像 Decoder 需要生成序列，因此它通常不涉及标签的预测。Encoder 的训练通常是在整个模型中的联合训练中进行的，通过优化整个模型的损失函数来进行。 Transformer 的整体训练过程一般分为以下几个步骤： 编码器（Encoder）的正向传播： 输入序列经过编码器的正向传播，产生一组上下文表示。 解码器（Decoder）的正向传播： 解码器接收上下文表示，并生成目标序列。 计算损失： 通过比较生成的目标序列与实际目标序列，计算损失。在 Decoder 中，通常使用交叉熵损失函数。 反向传播： 根据损失，进行反向传播，更新模型参数。这个过程中，梯度通过整个模型传播，包括 Encoder 和 Decoder。 整个模型的参数（包括 Encoder 和 Decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，Encoder 的表示对于 Decoder 的性能至关重要。在训练过程中，梯度从损失函数传播回整个模型，包括 Encoder 和 Decoder，从而更新它们的参数。 需要注意的是，Transformer 模型通常使用的是端到端的训练方式，整个模型的参数是一次性更新的。在某些场景下，你可能会看到对 Encoder 或 Decoder 进行微调（fine-tuning）的情况，但这是在特定应用场景下的调整，不是 Transformer 模型的标准训练方式。","s":"损失函数","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#损失函数","p":1008},{"i":1028,"t":"在Transformer的推理阶段，自回归类型的Decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入Decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（Error Propagation）。 因此使用Teacher Forcing策略，将Ground Truth一次性喂到Decoder中，使模型更快收敛并且避免误差积累的问题。 但是，自回归Decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用Teacher Forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（Autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入masked掉，防止模型学习到不该学习的注意力。","s":"Teacher Forcing","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#teacher-forcing","p":1008},{"i":1030,"t":"参考文献：MultiHead-Attention和Masked-Attention的机制和原理 与Encoder的多头自注意力不同，在Decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入Teacher Forcing出现的问题，避免了训练与推理阶段的Mismatch，维护了自回归的特性。 具体来说，模拟推理过程中第一个词汇时的场景。当模型只有voc1voc_1voc1​词汇向量输入时，在Decoder中，voc1voc_1voc1​与自身计算注意力分数，于是有 [o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5) 我们再模拟训练过程中使用Teacher Forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2​的情况，于是有 [o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6) 然而，为了使训练过程中符合推理时自回归的特性，理想的输出应该是 [o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7) 继续扩展，当有nnn个输入词汇时，应该有 [o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}​o1​o2​⋮on​​​=​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​​​v1​v2​⋮vn​​​(8) 因此，我们需要将当前时间步计算的词汇的时间顺序右侧的输入词汇全部掩码，置为0。 在源码中，有如下片段实现掩码： if mask is not None: scores = scores.masked_fill(mask == 0, -1e9) p_attn = scores.softmax(dim=-1) 在源码中，将mask置为负无穷是因为这是在经过Softmax之前进行的掩码，在经过Softmax之后负无穷小就变成了0。","s":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1008},{"i":1032,"t":"tip 本笔记使用的教材是陈天华所著、清华大学出版社的《数字图像处理及应用：使用MATLAB分析与实现》。 Take me to church, I'll worship like a dog at the shrine of your lies. I'll tell you my sins, and you can sharpen your knife. Offer me that deathless death, good god, let me give you my life.","s":"数字图像处理复习笔记","u":"/en/docs/Curriculum/数字图像处理/Note","h":"","p":1031},{"i":1035,"t":"为了从模拟图像产生数字图像，需要进行采样与量化，即对模拟图像在空间(x,y)(x, y)(x,y)方向上以及亮度函数f(x,y)f(x, y)f(x,y)进行离散化处理。 采样： 模拟图像在空间(x,y)(x, y)(x,y)上的离散化称为采样。 若在x和y方向上均进行等间距的采样，则称为均匀采样。 采样点的多少以及采样的间隔直接影响着图像的质量。 量化： 模拟图像经过采样后，在时间和空间上被离散化为像素，但采样所得的像素点的像素值依然是连续量。量化过程就是以离散的灰度值信息代替连续的模拟量灰度信息的过程，是一对多的过程。 量化可以分为线性量化以及非线性量化。 灰度级一般以2的整数次幂表示，如大多图像为彩色RGB图像，256个灰度级，位深度为8（28=2562^8=25628=256），则对于分辨率为256×256的图像来说，需要256×256×3×8位表示，即每一个像素实际上使用24位表示。","s":"图像的采样与量化","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像的采样与量化","p":1031},{"i":1037,"t":"4邻域N4(p)N_4(p)N4​(p)即该像素上下左右的四个点，8邻域N8(p)N_8(p)N8​(p)，对角邻域ND(p)N_D(p)ND​(p)。 像素之间的距离度量必须满足三种关系： 非负性 对称性 三角不等式 三种距离度量： 已知，点ppp的坐标为(x,y)(x, y)(x,y)，点qqq的坐标为(s,t)(s,t)(s,t)。 欧氏距离： De(p,q)=(x−s)2+(y−t)2(1)D_e(p,q)=\\sqrt{(x-s)^2+(y-t)^2}\\tag{1}De​(p,q)=(x−s)2+(y−t)2​(1) 城市距离 D4(p,q)=∣x−s∣+∣y−t∣(2)D_4(p,q)=\\vert x-s\\vert+\\vert y-t\\vert \\tag{2}D4​(p,q)=∣x−s∣+∣y−t∣(2) 棋盘距离 D8(p,q)=max(∣x−s∣,∣y−t∣)(3)D_8(p,q)=max(\\vert x-s\\vert,\\vert y-t\\vert)\\tag{3}D8​(p,q)=max(∣x−s∣,∣y−t∣)(3)","s":"距离度量","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#距离度量","p":1031},{"i":1039,"t":"MSE越小代表待测图像与参考图像越接近，均方误差公式如下： MSE=1MN∑x=1M∑y=1N[f(x,y)−g(x,y)]2(4)MSE=\\frac{1}{MN}\\sum_{x=1}^{M}\\sum_{y=1}^{N}[f(x,y)-g(x,y)]^2\\tag{4}MSE=MN1​x=1∑M​y=1∑N​[f(x,y)−g(x,y)]2(4) SNR：参考图像像素值的平方均值与均方误差的比值的对数的10倍。越大代表图像质量越好 PSNR：峰值信噪比，图像所允许的最大像素值的平方与均方误差的比值的对数的10倍，这是信噪比的改良版本，消除了图像自身像素值对评价指标的影响。越大代表图像质量越好 SSIM为结构相似系数，越大代表图像质量越好","s":"图像质量评价","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像质量评价","p":1031},{"i":1043,"t":"可以使用傅里叶变换的函数需要满足狄利克莱条件（Dirichlet Condition）： 具有有限个间断点 具有有限个极值点 绝对可积 傅里叶变换的特性： important 傅里叶频谱图的特征： 频率分布：傅里叶频谱图展示了图像在不同频率下的强度分布。高频部分对应图像中的边缘和细节，低频部分对应图像中的整体结构和大致轮廓。 能量分布：图像中不同频率的能量在频谱图中以不同强度的幅度呈现。高幅度的频率分量通常标示着图像中强烈的变化或边缘。 平移不变性：傅里叶变换具有平移不变性，这意味着在频域中图像的平移对应于幅度谱中相位的改变而不影响幅度谱本身。 连续傅里叶变换​ 一维连续傅里叶变换 F(u)=∫−∞+∞f(x)e−j2πuxdx(5)F(u)=\\int_{-\\infty}^{+\\infty}f(x)e^{-j2\\pi ux}dx\\tag{5}F(u)=∫−∞+∞​f(x)e−j2πuxdx(5) 一维连续傅里叶逆变换 f(x)=∫−∞∞F(u)ej2πuxdu(6)f(x)=\\int_{-\\infty}^{\\infty}F(u)e^{j2\\pi ux}du\\tag{6}f(x)=∫−∞∞​F(u)ej2πuxdu(6) 二维连续傅里叶变换 F(u,v)=∫−∞∞∫−∞∞f(x,y)e−j2π(ux+vy)dxdy(7)F(u,v)=\\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}f(x,y)e^{-j2\\pi (ux+vy)}dxdy\\tag{7}F(u,v)=∫−∞∞​∫−∞∞​f(x,y)e−j2π(ux+vy)dxdy(7) 二维连续傅里叶逆变换 f(x,y)=∫−∞∞∫−∞∞F(u,v)ej2π(ux+vy)dudv(8)f(x,y)=\\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}F(u,v)e^{j2\\pi (ux+vy)}dudv\\tag{8}f(x,y)=∫−∞∞​∫−∞∞​F(u,v)ej2π(ux+vy)dudv(8) 离散傅里叶变换​ 一维离散傅里叶变换 F(u)=∑x=0N−1f(x)e−j2πuxN(9)F(u)=\\sum_{x=0}^{N-1}f(x)e^{-j\\frac{2\\pi ux}{N}}\\tag{9}F(u)=x=0∑N−1​f(x)e−jN2πux​(9) 一维离散傅里叶逆变换 f(x)=1N∑u=0N−1F(u)ej2πuxN(10)f(x)=\\frac{1}{N}\\sum_{u=0}^{N-1}F(u)e^{j\\frac{2\\pi ux}{N}}\\tag{10}f(x)=N1​u=0∑N−1​F(u)ejN2πux​(10) 二维离散傅里叶变换 F(u,v)=∑x=0M−1∑y=0N−1f(x,y)e−j2π(uxM+vyN)(11)F(u,v)=\\sum_{x=0}^{M-1}\\sum_{y=0}^{N-1}f(x,y)e^{-j2\\pi (\\frac{ux}{M}+\\frac{vy}{N})}\\tag{11}F(u,v)=x=0∑M−1​y=0∑N−1​f(x,y)e−j2π(Mux​+Nvy​)(11) 二维离散傅里叶逆变换 f(x,y)=1MN∑u=0M−1∑v=0N−1F(u,v)ej2π(uxM+vyN)(12)f(x,y)=\\frac{1}{MN}\\sum_{u=0}^{M-1}\\sum_{v=0}^{N-1}F(u,v)e^{j2\\pi (\\frac{ux}{M}+\\frac{vy}{N})}\\tag{12}f(x,y)=MN1​u=0∑M−1​v=0∑N−1​F(u,v)ej2π(Mux​+Nvy​)(12)","s":"傅里叶变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#傅里叶变换","p":1031},{"i":1046,"t":"下图展示了点运算的主要应用：对比度拉伸 主要应用： 对比度拉伸 光度学标定 显示标定 轮廓线 裁剪","s":"点运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#点运算","p":1031},{"i":1048,"t":"使用齐次坐标对图像进行比例缩放。 全比例缩放是指x方向和y方向使用相同的比例系数。 当对图像进行放大时，会产生之前没有的像素，此时需要使用插值来解决。","s":"比例缩放","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#比例缩放","p":1031},{"i":1050,"t":"最近邻法插值​ 双线性插值（Bilinear）​ 例题：","s":"灰度级插值","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度级插值","p":1031},{"i":1053,"t":"线性变换​ 是指将输入图像的灰度值的动态范围按线性关系变换至指定范围或灰度的整个动态范围。 按比例线性变换 均匀线性变换 限幅线性变换 分段线性拉伸 非线性变换​ 对数拉伸可以拉伸低亮度区域，压缩高亮度区域。 指数拉伸可以拉伸高亮度区域，压缩低亮度区域。 注意，上述的拉伸是指新的图像在该灰度范围内分布的更均匀，即出现的灰度级更多；压缩的意义是指新的图像在该灰度范围内分布的更狭窄，即出现的灰度级更少。 例题： 答：该图像存在较亮的问题，灰度直方图分布在较高的区域。从直接灰度变换增强法的角度，我们可以采用指数函数变换，对高灰度区进行扩展。 tip 分析：该图像中没有低灰度的像素，全部集中在高灰度部分，因此使用指数函数变换将原来的集中的高灰度区域进行拉伸，扩展其灰度分布的范围，从而起到增强效果。","s":"直接灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直接灰度变换","p":1031},{"i":1055,"t":"直方图均衡化​ 目的： 将一非均匀灰度概率密度分布的图像，通过某种灰度变换，将其变成一幅具有均匀灰度概率密度分布的目的图像。 步骤： 根据原始图像计算原始灰度密度分布函数rkr_krk​ 计算变换函数，即累积密度分布函数sks_ksk​ 计算均衡化后的灰度级s(k)s(k)s(k)，即使用以下公式进行均衡化映射： s(k)=ceil(sk×L−1)(13)s(k)=\\mathbf{ceil}(s_k\\times L-1)\\tag{13}s(k)=ceil(sk​×L−1)(13) 其中，LLL是原直方图中灰度级数。 画出最终均衡化后的直方图 例题： 直方图规定化​ 目的： 调整原始图像的直方图使其符合某一规定的直方图的要求。 思想： 将原始图像和规定图像进行均衡化后，二者的灰度概率密度分布相同，进行对应映射即可。 步骤： 对原始图像进行均衡化，得到映射后的s(k)s(k)s(k) 对规定的图像直方图进行均衡化，得到映射后的z(k)z(k)z(k) 由于s(k)s(k)s(k)和z(k)z(k)z(k)都是归一化后的均匀分布，使用二者之间的就近原则将s(k)s(k)s(k)对应到给出的规定直方图的灰度级 画出规定化后的直方图 例题： 此时已经获得了原始图像均衡化后的灰度级与目标规定化输出的图像的灰度级之间的映射关系，最后一步按照rkr_krk​画出目标规定化输出的图像直方图即可。","s":"直方图灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直方图灰度变换","p":1031},{"i":1057,"t":"空域滤波可以根据作用分为平滑滤波以及锐化滤波。 平滑滤波​ important 噪声的特点： 随机性 叠加性 噪声与图像之间具有相关性 线性平滑滤波​ 邻域平均滤波 加权平均滤波 高斯滤波 非线性平滑滤波​ 中值滤波 最大值滤波 最小值滤波 锐化滤波​ 锐化滤波消除或减弱图像的低频分量从而增强图像中物体的边缘轮廓信息，使得除边缘以外的像素点的灰度值趋向于零。 梯度法 拉普拉斯算子，非线性滤波 定向滤波：检测特定方向边缘的滤波，通常在模板上表现为在该特定方向上模板值较大。 下面的表格展示了水平方向的定向锐化模板 -1 -1 -1 2 2 2 -1 -1 -1 下面的表格展示了对角方向的定向锐化模板 -1 2 -1 -1 2 -1 -1 2 -1","s":"空域滤波增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#空域滤波增强","p":1031},{"i":1059,"t":"图像从空域变换到频域后，低频分量对应图像中灰度值变化缓慢的区域，可能是图像的背景；高频分量表示图像中灰度值变化迅速的区域，可能是图像的噪声或物体的边缘。 在图像频谱（经过中心偏移的）中，中心代表低频信息，四周代表高频信息。","s":"第6章 图像频域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第6章-图像频域增强","p":1031},{"i":1061,"t":"抑制、衰减高频分量，保留低频分量。 理想低通滤波器（ILPF）​ tip ILPF means Ideal Low Pass Filter. H(u,v)={1D(u,v)≤D00D(u,v)>D0(14)H(u,v)=\\begin{cases}1&D(u,v)\\leq D_0\\\\ 0&D(u,v)>D_0\\end{cases}\\tag{14}H(u,v)={10​D(u,v)≤D0​D(u,v)>D0​​(14)D(u,v)=u2+v2(15)D(u,v)=\\sqrt{u^2+v^2}\\tag{15}D(u,v)=u2+v2​(15) 在截止频率D0D_0D0​处垂直截止，通过频率和截止频率在D0D_0D0​处具有不连续性，通带和阻带之间没有过渡，会产生无限的振铃效应。 巴特沃斯低通滤波器（BLPF）​ 通带与阻带之间过度平坦，通过频率和截止频率之间没有明显的不连续性，不会出现振铃效应。 H(u,v)=11+(2−1)[D(u,v)D0]2n(16)H(u,v)=\\frac{1}{1+(\\sqrt{2}-1)[\\frac{D(u,v)}{D_0}]^{2n}}\\tag{16}H(u,v)=1+(2​−1)[D0​D(u,v)​]2n1​(16) 其中，取H(u,v)H(u,v)H(u,v)下降到最大值的0.707时的D(u,v)D(u,v)D(u,v)作为截止频率D0D_0D0​。 即当D(u,v)D(u,v)D(u,v)达到截止频率时，D(u,v)D0=1\\frac{D(u,v)}{D_0}=1D0​D(u,v)​=1，此时H(u,v)=0.707H(u,v)=0.707H(u,v)=0.707。 指数低通滤波器（ELPF）​ 一般情况下，取H(u,v)H(u,v)H(u,v)下降到最大值的1/2时的D(u,v)D(u,v)D(u,v)作为截止频率。 H(u,v)=e−[D(u,v)D0]n(17)H(u,v)=e^{-[\\frac{D(u,v)}{D_0}]^n}\\tag{17}H(u,v)=e−[D0​D(u,v)​]n(17) 截止频率和通过频率之间具有更光滑的过渡，没有振铃现象。且指数低通滤波器比巴特沃斯低通滤波器衰减更快，处理后的图像更模糊。 梯形低通滤波器（TLPF）​ 由于在D0D_0D0​尾部包含高频分量D1D_1D1​，处理后图像的清晰度较理想低通滤波器有所改善，但会出现振铃效应， H(u,v)={1D(u,v)<D0D(u,v)−D1D0−D1D0≤D(u,v)≤D10D(u,v)>D1(18)H(u,v)=\\begin{cases}1&D(u,v)<D_0\\\\ \\\\ \\frac{D(u,v)-D_1}{D_0-D_1}&D_0\\leq D(u,v)\\leq D_1\\\\ \\\\ 0&D(u,v)>D_1\\end{cases}\\tag{18}H(u,v)=⎩⎨⎧​1D0​−D1​D(u,v)−D1​​0​D(u,v)<D0​D0​≤D(u,v)≤D1​D(u,v)>D1​​(18)","s":"低通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#低通滤波","p":1031},{"i":1063,"t":"抑制低频分量，保留高频分量。 理想高通滤波器（IHPF）​ H(u,v)={1D(u,v)>D00D(u,v)≤D0(19)H(u,v)=\\begin{cases}1&D(u,v)>D_0\\\\ 0&D(u,v)\\leq D_0\\end{cases}\\tag{19}H(u,v)={10​D(u,v)>D0​D(u,v)≤D0​​(19) 性质与理想低通滤波器一样，垂直截断，具有无限振铃效应。 巴特沃斯高通滤波器（BHPF）​ H(u,v)=11+(2−1)[D0D(u,v)]2n(20)H(u,v)=\\frac{1}{1+(\\sqrt{2}-1)[\\frac{D_0}{D(u,v)}]^{2n}}\\tag{20}H(u,v)=1+(2​−1)[D(u,v)D0​​]2n1​(20) 通常采取H(u,v)H(u,v)H(u,v)下降到最大值的0.707时的D(u,v)D(u,v)D(u,v)作为截止频率，没有振铃效应。 指数高通滤波器（EHPF）​ H(u,v)=e−[D0D(u,v)]n(21)H(u,v)=e^{-[\\frac{D_0}{D(u,v)}]^n}\\tag{21}H(u,v)=e−[D(u,v)D0​​]n(21) 梯形高通滤波器（THPF）​ H(u,v)={1D(u,v)>D0D(u,v)−D1D0−D1D1≤D(u,v)≤D00D(u,v)<D1(22)H(u,v)=\\begin{cases}1&D(u,v)>D_0\\\\ \\\\ \\frac{D(u,v)-D_1}{D_0-D_1}&D_1\\leq D(u,v)\\leq D_0\\\\ \\\\ 0&D(u,v)<D_1\\end{cases}\\tag{22}H(u,v)=⎩⎨⎧​1D0​−D1​D(u,v)−D1​​0​D(u,v)>D0​D1​≤D(u,v)≤D0​D(u,v)<D1​​(22)","s":"高通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#高通滤波","p":1031},{"i":1065,"t":"带通滤波​ 顾名思义，带通滤波就是允许某一特定频率的信号通过，而衰减频率范围之外的信号。 理想带通滤波的传递函数为： H(u,v)={0D(u,v)<D0−w21D0−w2≤D(u,v)≤D0+w20D(u,v)≥D0+w2(23)H(u,v)=\\begin{cases}0&D(u,v)<D_0-\\frac{w}{2}\\\\1&D_0-\\frac{w}{2}\\leq D(u,v)\\leq D_0+\\frac{w}{2}\\\\0&D(u,v)\\geq D_0+\\frac{w}{2}\\end{cases}\\tag{23}H(u,v)=⎩⎨⎧​010​D(u,v)<D0​−2w​D0​−2w​≤D(u,v)≤D0​+2w​D(u,v)≥D0​+2w​​(23) 其中，D0D_0D0​是通带中心频率，www是通带宽度。 带阻滤波​ 顾名思义，带阻滤波就是衰减某一特定频率范围的信号，而允许频率范围之外的信号通过。 理想带阻滤波的传递函数为： H(u,v)={1D(u,v)<w10w1⩽D(u,v)≤w21D(u,v)>w2(24)H(u,v)=\\begin{cases}1&D(u,v)<w_1\\\\0&w_1\\leqslant D(u,v)\\leq w_2\\\\1&D(u,v)> w_2\\end{cases}\\tag{24}H(u,v)=⎩⎨⎧​101​D(u,v)<w1​w1​⩽D(u,v)≤w2​D(u,v)>w2​​(24)","s":"带通和带阻滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#带通和带阻滤波","p":1031},{"i":1068,"t":"伪彩色图像的增强一般用于B超、石油开采以及安检方面。","s":"伪彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#伪彩色图像的处理","p":1031},{"i":1072,"t":"退化原因​ 成像系统镜头聚焦不准产生的散焦 相机与景物之间的相对运动 成像系统存在的各种非线性因素以及系统本身的性能 模拟图像在数字化过程中，因数字化的精度和误差而损失图像细节 成像系统中存在的各种随机噪声 复原机理​ 图像复原的过程一般是沿着图像退化的逆向过程进行的。首先根据先验知识分析退化原因，了解图像变质的原理，在此基础上建立图像的退化模型，然后以图像退化的逆过程对图像进行处理。 图像复原与图像增强的区别和联系​ 联系：二者从表面上看都是为了提高图像的质量。 区别：二者在目的和过程上都有明显的区别。 在目的上，图像增强是为了提高图像的视感质量，增强后的图像可能损失一些信息，并与原始图像有一定的差异；而图像复原是为了使待复原的图像与原始图像尽可能的接近。 在过程上。图像增强一般不考虑图像退化的真实过程，而是使用特定技术来突出和强调图像中所关注的特征；而图像复原是直接针对图像产生退化的原因建立相应的数学模型，并沿着退化的逆向进行复原。","s":"图像退化机理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化机理","p":1031},{"i":1074,"t":"图像f(x,y)f(x,y)f(x,y)经过退化系统H(x,y)H(x,y)H(x,y)后再与噪声n(x,y)n(x,y)n(x,y)叠加，得到最后退化的图像g(x,y)g(x,y)g(x,y)。 退化系统的一般特性： 线性特性。 空间位置不变性：经过退化系统后的输出只有输入有关，而与输入在图像中的位置无关。","s":"图像退化模型","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化模型","p":1031},{"i":1077,"t":"最佳阈值法​ 假设图像由物体和背景两部分组成，且物体像素的分布和背景像素的分布均符合正态分布，物体像素的正态分布概率密度函数的均值为μ\\muμ，背景像素的正态分布概率密度函数的均值为ν\\nuν，则最佳阈值法确定的阈值为 t=μ+ν2(25)t=\\frac{\\mu +\\nu}{2}\\tag{25}t=2μ+ν​(25) 判别分析法​ 通过计算灰度直方图的0阶矩和1阶矩最大化类间方差从而得到最佳阈值。","s":"阈值分割法","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#阈值分割法","p":1031},{"i":1079,"t":"什么是图像的边缘？ 图像中结构具有突变的地方，表明一个区域的终结，也是另一个区域的开始，这种不连续性称为边缘。 边缘信号的类型？ 阶跃型，但实际情况中不可能有完全理想的突变。突变处为边缘点。 渐变型，逐渐增大或逐渐减小。渐变的中间位置为边缘点。 台阶型。台阶的中间为边缘点或认为台阶两侧为两个边缘点。","s":"边缘检测的基本原理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测的基本原理","p":1031},{"i":1081,"t":"Robert算子​ 一阶导数算子。 利用局部差分方法，采用对角线方向相邻两像素之差近似梯度幅值检测边缘。 对噪声敏感，不能抑制噪声。 Sobel算子​ 一阶导数算子。 先进行加权平均，然后进行微分运算。 对噪声具有一定的抑制能力。 Prewitt算子​ 一阶导数算子。 利用局部差分平均方法寻找边缘。两个模板一个检测水平边缘，一个检测竖直边缘。 对噪声具有一定的抑制能力。 Laplace算子​ 二阶导数算子。 使噪声成分得到加强，对噪声更敏感。 与Marr边缘检测算子一样，一般先进行低通滤波平滑后再进行二阶微分运算。 Canny边缘检测​ 使用高斯滤波平滑图像 计算梯度幅值和方向 NMS非极大值抑制，保留每个像素点上梯度强度的极大值，删掉其他值 使用双阈值方法确定强边界和弱边界 滞后边界跟踪","s":"边缘检测算子","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测算子","p":1031},{"i":1083,"t":"傅里叶频谱图的特征： 频率分布：傅里叶频谱图展示了图像在不同频率下的强度分布。高频部分对应图像中的边缘和细节，低频部分对应图像中的整体结构和大致轮廓。 能量分布：图像中不同频率的能量在频谱图中以不同强度的幅度呈现。高幅度的频率分量通常标示着图像中强烈的变化或边缘。 平移不变性：傅里叶变换具有平移不变性，这意味着在频域中图像的平移对应于幅度谱中相位的改变而不影响幅度谱本身。 如何在频域实现图像平滑 利用傅里叶变换将图像从空域转换为频域； 将频域图像进行中心偏移，使得低频信息在频谱中央； 利用滤波函数生成一个与图像大小相同的二维频域矩阵； 将图像的频域与滤波器的频域相应相乘； 将相乘后的频域再次逆平移到频域的原始位置； 将得到的频域进行逆傅里叶变换，得到滤波后的空域图像。 一阶边缘检测算子与Laplace算子的异同。 相同点：都可以检测边缘并且对噪声敏感 不同点：一阶边缘检测算子检测到的边缘都有明确的方向，而Laplace算子对各种方向的边缘都有较好的响应 已知一幅图像受到加性随机噪声污染，分析并写出三种去除或降低噪声的方法。 空域滤波（均值滤波、中值滤波），频域滤波（巴特沃斯低通滤波），图像恢复技术。 分析采样和量化的过程，以及它们对数字化图像质量的影响。 采样是把空间上连续的图像转换为离散的抽样点，即像素。量化将抽样后所得的连续的像素值离散化为整数值。 对数字化图像质量的影响： 采样间隔越大，所得图像像素数越少，图像空间分辨率越低，质量越差。反之图像质量好，但数据量大。 量化等级越多（灰度级数越多），所得图像层次越丰富，灰度分辨率越高，质量越好，但数据量大。反之，图像质量差，会出现假轮廓现象，但数据量小。 图像噪声的特点。 随机性 叠加性 噪声与图像之间具有相关性 什么是线性灰度拉伸？线性灰度拉伸可以分为几种情况？ 线性灰度拉伸是将输入图像的灰度值的动态范围按线性关系拉伸扩展至指定范围或灰度的整个动态范围。 线性拉伸可分为按比例线性拉伸和分段线性拉伸两种方法。同时，按比例线性拉伸又可以分为均匀线性拉伸以及限幅线性拉伸。 伪彩色图像处理可以应用在哪些方面？ B超 石油开采 安检","s":"课后习题中的问答题","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#课后习题中的问答题","p":1031},{"i":1085,"t":"参考资料：Sampling for Text Generation","s":"生成模型中的采样技巧","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"","p":1084},{"i":1087,"t":"生成模型的核心任务是学习数据的概率分布，并能够生成新的样本。采样（Sampling）是模型从其内部概率分布中生成新数据的关键步骤。采样不仅决定了生成数据的质量和多样性，还影响着模型对潜在空间的探索方式。 没有合适的采样策略，生成的结果可能会过于保守（总是生成相似的内容）或者过于随机（生成无意义的数据）。","s":"引言","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#引言","p":1084},{"i":1089,"t":"生成模型通常通过学习训练数据中的复杂概率分布来工作。这些模型试图捕捉到数据之间的统计规律，并以此为基础生成新的样本。我们通常希望模型能够捕捉到数据的复杂分布，并能够生成新的、合理的样本。如果不使用采样，模型可能会倾向于生成最常见的样本，这会导致生成的样本缺乏多样性，无法覆盖数据分布的全貌。直接从模型的概率分布中采样往往会带来一些问题，例如： 确定性解：模型可能倾向于给出单一最优解，这会导致生成结果缺乏多样性。 过拟合：模型可能过度拟合训练数据，从而在生成时重复相同的模式。 非典型样本：由于概率分布的长尾效应，直接采样可能会生成非常罕见且不符合实际的样本。","s":"为什么需要采样？","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#为什么需要采样","p":1084},{"i":1091,"t":"概率的长尾效应是指在概率分布中，某些事件虽然发生的概率非常小，但在分布的尾部仍存在一定的非零概率。在语言模型和其他生成模型中，长尾效应同样存在，指的是模型可能为一些非常罕见的词汇或序列分配非零的概率。 在生成模型中，长尾效应可能导致的问题在于模型有时会生成那些在训练数据集中很少见甚至从未出现过的样本。这是因为模型试图捕获训练数据中的所有统计特性，包括那些稀有的事件。在训练过程中，即使这些稀有事件只出现了一次，模型也可能学会为它们分配一定的概率。 当我们在生成过程中直接从模型的概率分布中采样时，如果模型的输出分布具有长尾特性，那么即使是那些概率很小的事件也可能被选中。例如，在文本生成中，模型可能会生成一些非常罕见的词汇组合，这些组合在语义上可能并不合理，或者语法上不符合常规。","s":"长尾效应","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#长尾效应","p":1084},{"i":1093,"t":"为了克服上述问题，研究人员开发了多种采样技巧，旨在控制生成过程中的随机性和多样性。","s":"采样技巧","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#采样技巧","p":1084},{"i":1095,"t":"温度是一种调整模型输出多样性的方法，它通过改变模型预测概率分布的形状来实现。较低的温度值会使得概率分布更加尖锐，而较高的温度值则会让分布变得更加平坦。 假设模型的原始概率分布为 p(xi)p(x_i)p(xi​)，那么通过温度调整后的概率分布可以表示为： p′(xi)=exp⁡(log⁡(p(xi))T)∑jexp⁡(log⁡(p(xj))T)p'(x_i) = \\frac{\\exp\\left(\\frac{\\log(p(x_i))}{T}\\right)}{\\sum_j \\exp\\left(\\frac{\\log(p(x_j))}{T}\\right)}p′(xi​)=∑j​exp(Tlog(p(xj​))​)exp(Tlog(p(xi​))​)​ p(xi)p(x_i)p(xi​)：表示原始模型对第 iii 个选项的预测概率。 TTT：温度参数，一般是一个正数。 当 T>1T > 1T>1 时，分布变得更平坦，这意味着模型更倾向于生成概率较低但仍然合理的样本；当 T<1T < 1T<1 时，分布变得更尖锐，模型倾向于生成高概率的样本，这会降低生成内容的多样性。","s":"温度（Temperature）","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#温度temperature","p":1084},{"i":1097,"t":"Top-k 采样是一种减少模型输出中低概率事件的方法。这种方法仅考虑最有可能发生的 k 个候选结果进行采样，从而避免生成那些极不可能出现的样本。 Top-k 采样算法从输出概率分布中选择概率最高的前 k 个候选项，并在这些候选项中进行随机采样。具体步骤如下： 获取模型输出的概率分布 P={p1,p2,…,pV}P=\\left\\{p_1, p_2, \\ldots, p_V\\right\\}P={p1​,p2​,…,pV​} ，其中 VVV 是词汇表的大小 选择概率最高的前 k 个候选项。设这些候选项的集合为 CkC_kCk​ 对于 CkC_kCk​ 中的每个候选项，重新归一化它们的概率，使得这些候选项的概率和为 1 从归一化后的概率分布中随机采样一个候选项。 公式化表示如下： Ck={wi∣pi is among the top k probabilities in P}C_k=\\left\\{w_i \\mid p_i \\text{ is among the top k probabilities in }P\\right\\}Ck​={wi​∣pi​ is among the top k probabilities in P}pi′=pi∑wj∈Ckpj for wi∈Ckp_i^{\\prime}=\\frac{p_i}{\\sum_{w_j \\in C_k} p_j} \\text { for } w_i \\in C_kpi′​=∑wj​∈Ck​​pj​pi​​ for wi​∈Ck​ 其中， pi′p_i^{\\prime}pi′​​ 是重新归一化后的概率。","s":"Top-k 采样","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#top-k-采样","p":1084},{"i":1099,"t":"Top-p 采样，也称为 Nucleus 采样，是一种更加灵活的采样方法，它不是固定选择前 k 个元素，而是选择累积概率达到某个阈值 p 的最小集合进行采样。 获取模型输出的概率分布 P={p1,p2,…,pV}P=\\left\\{p_1, p_2, \\ldots, p_V\\right\\}P={p1​,p2​,…,pV​} ，其中 VVV 是词汇表的大小 将概率分布按从高到低排序，得到排序后的候选项和对应的概率 {(w1,p1),(w2,p2),…,(wV,pV)}\\left\\{\\left(w_1, p_1\\right),\\left(w_2, p_2\\right), \\ldots,\\left(w_V, p_V\\right)\\right\\}{(w1​,p1​),(w2​,p2​),…,(wV​,pV​)} ，其中 p1≥p2≥…≥pVp_1 \\geq p_2 \\geq \\ldots \\geq p_Vp1​≥p2​≥…≥pV​ 找到最小的 k，使得前 k 个候选项的概率和大于等于阈值 ppp，设这些候选项的集合为 CpC_pCp​ 对于 CpC_pCp​ 中的每个候选项，重新归一化它们的概率，使得这些候选项的概率和为 1 从归一化后的概率分布中随机采样一个候选项 Cp={wi∣∑j=1ipj≥p}C_p=\\left\\{w_i \\mid \\sum_{j=1}^i p_j \\geq p\\right\\}Cp​={wi​∣j=1∑i​pj​≥p}pi′=pi∑wj∈Cppj for wi∈Cpp_i^{\\prime}=\\frac{p_i}{\\sum_{w_j \\in C_p} p_j} \\text { for } w_i \\in C_ppi′​=∑wj​∈Cp​​pj​pi​​ for wi​∈Cp​ 其中，pi′p_i^{\\prime}pi′​ 是重新归一化后的概率。","s":"Top-p 采样（Nucleus Sampling）","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#top-p-采样nucleus-sampling","p":1084},{"i":1101,"t":"采样技巧对于生成模型的成功至关重要。它们不仅可以帮助我们生成更加多样的结果，还可以改善生成质量。通过适当调整温度参数、使用 Top-k 或 Top-p 采样，我们可以有效地控制生成过程中的随机性，确保模型既能探索多样化的可能性，又能保持生成内容的合理性。","s":"结论","u":"/en/docs/Deep-Learning/大模型基础/Sampling-for-Generation","h":"#结论","p":1084},{"i":1104,"t":"在文字生成模型中根据模型的输入是否与前一时刻的输出有关可以分为自回归AR模型与非自回归NAR模型两种，这两种生成方式的利与弊在图像生成中仍然存在。","s":"回顾文字生成的两种方法","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#回顾文字生成的两种方法","p":1102},{"i":1106,"t":"Transformer-based的文字生成模型有很多，如GPT模型，大多使用自回归（Autoregressive, abbr. AR）的方法逐token生成。 什么是ARM ARM（Autoregressive Model，自回归模型）是一类用于建模时间序列数据的统计模型，其中当前时刻的观测值被认为是过去时刻观测值的线性组合，加上一个随机误差项。这类模型的核心思想是，当前时刻的数据依赖于先前时刻的数据。 若把文字生成的AR方法对应到图像生成中的使用，即一个一个像素生成图像。由于当前对高清图像像素的需求越来越高，自回归的生成方式导致速度非常缓慢，但优点是后面生成的每一个像素都考虑了之前的所有像素，从而使生成的图像更清晰、更细腻、更加符合预期。","s":"自回归方法（AR）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#自回归方法ar","p":1102},{"i":1108,"t":"若使用NAR非自回归的方法一次生成所有像素，各像素在生成时无法考虑之间的语义信息，生成的图像质量普遍低于自回归方法生成的图像。","s":"非自回归方法（NAR）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#非自回归方法nar","p":1102},{"i":1110,"t":"VAE、GAN以及Diffusion Model等生成模型，都不只是单独使用文字作为输入来生成图像，而是使用了从已知的随机分布（e.g. Normal Distribution）中sample出向量作为模型额外输入的方法。 大致的思想如下图所示，由于期待生成的图像并不是固定的，可以将预期输出看作是一个分布，即P(x∣y)P(x|y)P(x∣y)，而图像生成模型需要完成的任务就是将输入的从某一随机分布中sample出的向量对应到图像预期输出分布中的某一个图像。 important 总结：由于根据文字prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（Target Domain）符合某种分布。因此目前的SOTA模型除了将文字Prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（Source Domain）输入的随机向量映射到目标域的分布，生成对应的图片。","s":"目前图像生成模型的共同点","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#目前图像生成模型的共同点","p":1102},{"i":1112,"t":"Stable Diffusion是目前图像生成的SOTA模型之一，在本章中我们快速的了解一下Stable Diffusion的大致框架以及原理。","s":"生成模型的共同结构","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#生成模型的共同结构","p":1102},{"i":1114,"t":"目前，如Stable Diffusion等SOTA图像生成模型都具备以下所示的三个模块，通常情况下这三个模块分开训练，最终通过特殊的逻辑和规则组合在一起。 Text Encoder：根据输入的text prompt进行嵌入表示 Generation Model：接受Text Encoder输出的prompt表示以及从随机分布sample出的图像大小的向量，得到“中间产物”，中间产物有以下两种情况： 具有视觉意义但经过压缩比较模糊的图像 不具备视觉特征的矩阵（Latent Representation） Decoder：以上述的“中间产物”作为输入，生成出高清图像 通用框架的三个组成部分如下图所示： 再附上Stable Diffusion、DALL-E系列以及Google的Imagen的结构说明。 其中Imagen将压缩版本的图片作为Generation Model的中间产物，Stable Diffusion以及DALL-E将Latent Representation作为中间产物。 根据Imagen的实验结果，相对于Decoder即Diffusion Model的模型大小，Text Encoder的模型大小对图像生成模型的影响是非常大的。Text Encoder可以帮助模型理解prompt中在训练资料的文字-图像对中没有出现的新的词汇，从而提高图像生成的表现。 Scaling text encoder size is more important than U-Net size. While scaling the size of the diffusion model U-Net improves sample quality, we found scaling the text encoder size to be significantly more impactful than the U-Net size. Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding","s":"通用框架概览","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#通用框架概览","p":1102},{"i":1116,"t":"下面介绍两种用于评估图像生成模型的常用Benchmark：FID与CLIP Score。 FID（Fréchet Inception Distance）​ FID提供一个Pre-trained的CNN，该CNN通常使用预训练的Inception v3模型。在计算FID时，生成图像和真实图像分别输入到预训练的CNN中，提取出各自的特征表示向量（Representation）。这两个Representation越接近，代表输出的图像越像预期的“真实”图片。 在FID中，做出了如下重要的假设**：将生成的图像真实的图像经过CNN输出的Representation看作是sample自两个高斯分布的随机变量**。然后，通过计算两个特征向量的均值和协方差矩阵来得到两个高斯分布的参数。最后，利用两个高斯分布之间的Fréchet距离来衡量生成图像与真实图像之间的差异。 FID=∥μ1−μ2∥22+tr(Σ1+Σ2−2(Σ1Σ2)12)(1)\\mathrm{FID}=\\left\\|\\mu_1-\\mu_2\\right\\|_2^2+\\mathrm{tr}\\left(\\Sigma_1+\\Sigma_2-2\\left(\\Sigma_1\\Sigma_2\\right)^{\\frac12}\\right)\\tag{1}FID=∥μ1​−μ2​∥22​+tr(Σ1​+Σ2​−2(Σ1​Σ2​)21​)(1) 其中，μ1\\mu_1μ1​和μ2\\mu_2μ2​分别是第一个和第二个高斯分布的均值向量；Σ1\\Sigma_1Σ1​和Σ2\\Sigma_2Σ2​则是它们的协方差矩阵；tr(⋅)\\mathrm{tr}(\\cdot)tr(⋅)表示矩阵的迹运算。 高斯分布的均值向量从观测到的数据中计算出来的。对于一个nnn-维高斯分布，其均值向量可以表示为一个长度为nnn的列向量，其中的每一个元素都是一个特定维度的平均数，这可以通过在每个维度上进行简单的算术平均来完成。 值得注意的是，FID指标需要一定数量的生成图像和真实图像来进行统计估计。这是因为FID的计算是基于两个高斯分布之间的距离计算的，因此需要足够多的样本数量才能够获得较为准确的概率分布估计。 CLIP Score​ CLIP Score中的CLIP指的就是OpenAI的CLIP（Contrastive Language-Image Pre-Training）模型。 具体来说，CLIP Score的计算方式是将用于生成图像的文字prompt输入至CLIP的Text Encoder中得到一个Representation，再将对应prompt生成的图像输入至CLIP的Image Encoder中得到对应的Representation，计算二者之间的距离，即得到CLIP Score。分数越小，代表文字和图像更align。","s":"Benchmark","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#benchmark","p":1102},{"i":1118,"t":"Generation Model​ Generation Model的生成过程其实就是Denoise的过程。具体来讲，输入文字Prompt以及从随机分布中sample出的与预期生成图像具有相同大小的噪声矩阵，预测出输入图片中的噪声分布，在输入图像中减去噪声，输出去噪后的图像。Generation Model的最终输出是中间产物，这个中间产物可以是图像的压缩版本，也可以是一个Latent Representation。因此，训练Generation Model其实就是训练一个Noise Predictor。 中间产物是压缩图像​ 当Generation Model的中间产物是压缩图像时，如Diffusion模型，在训练Generation Model时的训练资料可以通过对数据集中的原始图片添加与图像大小一致地从已知随机分布中sample出的噪声来获得。此时加入噪声后的图像可以作为压缩图像输入至Noise Predictor中，而需要预测出的噪声分布的Ground Truth就是sample出的噪声。 中间产物是Latent Representation​ 中间产物是Latent Representation时，同样采取从已知随机分布中sample出噪声再添加到网络的输入作为生成Ground Truth的策略，但是还额外需要一个Encoder来产生Latent Representation。 这里的Encoder使用数据集中的图片（即期待模型最终输出的图片）作为输入，输出该图片的某种Latent Representation，经过从随机分布中sample出的噪声的加入，输入至Noise Predictor中。从随机分布中sample出的噪声就是Noise Predictor的Ground Truth。 Decoder​ Generation Model的训练需要大量成对的（Pair）文字-图像资料。而对于Decoder来说，它的输入是中间产物（即Generation Model生成的压缩的图片或Latent Representation），输出的是还原出的高分辨率的图像，它的训练是不需要额外pair的文字-图像资料。 中间产物是压缩图像​ 当Generation Model的输出是压缩版本的图像时，Decoder的训练资料可以将从互联网上fetch到的图像作为label，并对这些图像做Down Sampling来获得压缩版本的图像作为Decoder训练时的输出。 中间产物是Latent Representation​ 当中间产物是Latent Representation时，需要训练一个Auto-Encoder，使用Encoder-Decoder的结构训练生成模型的Decoder。 具体来讲，向Encoder中输入数据集中的高清预期图片，Encoder将其转换为某种Latent Representation，Decoder再吃Encoder的输出，最终输出还原出的高清label图片，训练的方向是让输出的图片与输入的图片越接近越好。在这个过程中，不需要额外的标注，Auto-Encoder和生成模型的Decoder一起更新参数。","s":"通用框架解析","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#通用框架解析","p":1102},{"i":1120,"t":"在这个模块大致介绍目前常见的几种图像生成模型，其中Diffusion Model以及GAN将在以后的文章中详细讲解。","s":"常见图像生成模型速览","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#常见图像生成模型速览","p":1102},{"i":1122,"t":"变分自编码器（Variational Auto-Encoder, abbr. VAE）的训练策略是使用Encoder将输入图像对应（嵌入）到一个符合某随机分布的向量，再将该向量作为Decoder的输入，加上文字prompt后，期待模型产生合适的图像。 tip VAE在训练过程中，期待Ecoder输入多张图片后，输出的向量在一起符合某个随机分布（e.g. Normal Distribution），并不是Encoder直接输出一个Distrubution。","s":"变分自编码器（VAE）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#变分自编码器vae","p":1102},{"i":1124,"t":"基于流的生成模型采用特殊的网络结构的设计，将Encoder设计为可逆的（invertible），在训练阶段喂入多张图片，期待模型的向量符合某个随机分布。而在预测阶段，由于Encoder是可逆的，输入从该随机分布中sample出来的向量，期待输出对应的图像。 注意，由于Encoder是可逆的，在训练阶段其输入的图片矩阵的形状应该等于输出的随机分布向量的形状，在推理阶段亦然。","s":"基于流的生成模型（Flow-Based Generative Model）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#基于流的生成模型flow-based-generative-model","p":1102},{"i":1126,"t":"GAN模型的结构分为Generator和Discriminator，其中Generator接受来自随机分布的向量，产生预期图像；Discriminator接受生成器输出的图像或真实图像，输出输入的图像是真实图像的概率。在训练过程中，通过固定生成器参数来更新辨别器参数、固定辨别器参数更新生成器参数的往复交替训练来形成“两个网络对抗”的效果，从而使得生成器生成的图像更逼真（与输入的真实图像更近似）、辨别器识别是否是输入的真实图像的精确度更高。","s":"生成对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#生成对抗网络gan","p":1102},{"i":1128,"t":"扩散模型的核心思想是对输入的图片加入噪声使其成为从某一随机分布sample出的向量，并在这个过程中训练出Noise Predictor；在生成图片时，输入从该随机分布中sample出的向量，使用训练出的Noise Predictor对噪声denoise从而获得生成的图片。 以DDPM（Denoising Diffusion Probabilistic Models）模型为例，模型在denoise时为每个denoise步骤赋予一个编号，越早进行denoise的步骤编号越大，因此，这个编号也代表着图像中噪声的严重程度。在Denoise模块中，模型根据输入的带有噪声的图片、文字prompt以及噪声的严重程度（即denoise的步骤）预测出该图片中噪声的分布，然后将输入的图片中减去预测出的噪声得到denoise后的图片。 Denoise模块的目标是预测出输入的噪声图片中的噪声，其资料可以通过对数据集中的图片不断加入从Gaussian Distribution中sample出的噪声的方法来获得，这个加噪声的过程我们称为Forward Process or Diffusion Process。此时将加入噪声后的图片、文字prompt以及denoise的步骤序号作为输入，sample出的噪声作为Ground Truth对noise predictor进行训练。","s":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型基础/Image-Generation-Models","h":"#扩散模型diffusion-model","p":1102},{"i":1130,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"","p":1129},{"i":1133,"t":"conda create -n ipl python=3.8 conda activate ipl","s":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1129},{"i":1135,"t":"请确保 NVIDIA 驱动、CUDA 以及 PyTorch 之间版本互相匹配。 conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia pip install ftfy regex tqdm ninja pip install git+https://github.com/openai/CLIP.git","s":"安装依赖","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#安装依赖","p":1129},{"i":1137,"t":"预训练的源域生成器可以通过 Google Drive 或者 Tsinghua Cloud 下载，并将其置于 ./pre_stylegan 文件夹中。","s":"下载预训练生成器","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1129},{"i":1141,"t":"ctx_init 参数用于初始化 prompts，官方提供的演示 context 是a photo of a。 source_prompts = [prompt_prefix + \" \" + args.source_class] target_prompts = [prompt_prefix + \" \" + args.target_class] 源域的初始提示词 source_prompts 是 ctx_init 与源域标签的组合。若源域标签为 photo，则源域的初始提示词是 a photo of a photo。目标域的初始提示词同理。","s":"prompts 的初始化","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1129},{"i":1143,"t":"源域以及目标域的初始提示词接下来会进行 tokenize： source_tokenized_prompts = torch.cat([clip.tokenize(p) for p in source_prompts]).to(device) # (1, 77) 'sot a photo of a photo eot' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 1125, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 target_tokenized_prompts = torch.cat([clip.tokenize(p) for p in target_prompts]).to(device) # (1, 77) 'sot a photo of a disney' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 4696, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 tokenize 是 CLIP 对送入的 prompt 字符串进行标记化处理，在头部和尾部添加 startoftext 以及 endoftext 标记，最终为两个首尾标记和全部单词生成 int 标记。其中 CLIP 模型缺省的 context_length 是77，若 prompt 大于 77 会进行截断（truncate），若小于 77 会进行补零，因此 source_tokenized_prompts 与 target_tokenized_prompts 的形状均为 (1, 77)。 在提示词标记化之后，将进行嵌入表示 embedding： source_embedding = clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度 target_embedding = clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度","s":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1129},{"i":1145,"t":"在 Mapper 生成 prompts 后进行 prompts 的特征提取时，需要传入 tokenize 之后的人工初始化 prompt（‘a photo of a photo.’或‘a photo of a disney.’），用于选择 eot 符号对应的维度来进行特征投影（因为 eot 作为整个句子的结尾，被认为该维度包含更多的信息。具体做法：由于在 tokenize 之后，eot 符号对应的维度的值最大，因此可使用 argmax 来定位），以保证最后得到的特征形状与图像特征提取的输出形状相同，使得后续可以进行对比学习的损失计算。","s":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1129},{"i":1147,"t":"Z空间与W空间​ # Z空间到W空间的变换 sample_z = mixing_noise(args.batch_mapper, 512, args.mixing, device) # (batch_size, 512) sample_w = net.generator_frozen.style(sample_z) # (batch_size, 512) Z 空间和 W 空间是 StyleGAN 模型中两种不同的隐变量空间，分别用于控制生成图像的随机特征和样式信息。W 空间通过对 Z 空间的映射得到。 Z 空间（Latent Space Z）： Z 空间是随机噪声空间，通常由随机噪声向量组成，表示了图像的随机特征。 在 StyleGAN 中，Z 空间的维度通常为 512 维。这意味着一个 Z 向量由 512 个数字组成，每个数字表示了图像的一个随机特征的强度或者方向。 W 空间（Style Space W）： W 空间经过特征解耦的隐空间，与 Z 空间相比更加解耦合。 在 StyleGAN 中，W 空间的维度也通常为 512 维，是通过mapping network进行映射得到的，mapping network 由 PixelNorm 层与 EqualLinear 层构成。以下代码节选自sg2_model.py： '''mapping network''' layers = [PixelNorm()] for i in range(n_mlp): layers.append( EqualLinear( style_dim, style_dim, lr_mul=lr_mlp, activation=\"fused_lrelu\" ) ) self.style = nn.Sequential(*layers) Z 空间与 W 空间的关系： 在 StyleGAN 中，通常会先将一个 Z 向量映射到 W 空间，然后再将 W 向量输入到生成器网络中生成图像。 Z 空间提供了初始随机噪声，而 W 空间则通过特征解耦提供更多控制图像风格的灵活性。通过对 Z 和 W 之间的映射以及 W 在生成器中的应用，StyleGan 实现了高度可控且具有良好生成效果的图像合成。 损失函数​ 在代码中，stage 1 的损失函数是 global_clip_loss，该损失由三部分组成： 对比学习损失：Mapper 生成的源域 prompts 的特征**（注意，这里的 prompts 特征是与人工初始化的 prompts 的特征做过 element-wise 相加后的特征）**与源域图像特征的余弦相似度组成的对比学习损失； 目标域正则化损失：Mapper 生成的目标域 prompts 的特征与目标域文本标签特征的余弦相似度，这里生成的目标域 prompts 特征同样也是与人工初始化的 prompts 做过加法的。注意该损失有权重 lambda_l。 源域正则化：计算生成的源域prompts与源域标签之间的余弦相似度，由 lambda_src 控制，默认是 0。","s":"训练 stage 1","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-1","p":1129},{"i":1149,"t":"确定目标域生成域需要更新的层​ 在训练的第二阶段进行前向传播时，需要先对目标域生成器（generator_trainable）的所有层进行 unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.ZSSGAN.ZSSGAN.determine_opt_layers，最后 freeze 所有层后再 unfreeze 选择的网络层。 if self.training and self.auto_layer_iters > 0: self.generator_trainable.unfreeze_layers() # unfreeze train_layers = self.determine_opt_layers() # layer to train if not isinstance(train_layers, list): train_layers = [train_layers] self.generator_trainable.freeze_layers() self.generator_trainable.unfreeze_layers(train_layers) # unfreeze 具体选择带更新网络层的策略： 将 W 空间的隐向量送入目标域生成器（SG2Generator）中，并进行反向传播，此时可以通过反向传播后 W 空间隐向量不同维度的更新幅度来衡量不同网络层的影响力，因此选出更新幅度最大的维度就可以确定在 Model Adaption 中需要更新的网络层。 之所以 W 空间编码在 n_latent 维度上的序号就代表着对应的网络层数的序号，是因为 StyleGAN 生成器的结构决定了这一点：StyleGAN 生成器中，W 空间编码的不同维度会被送入生成器网络的不同层，控制这些层的特征映射 (feature mapping)。具体来说，W 空间编码的每个维度会被重复 n_latent 次，作为该层的风格向量 (style vector)，通过 AdaIN (Adaptive Instance Normalization) 层控制该层的特征映射。因此，W 空间编码的第 i 个维度会影响生成器网络中第 i 层的特征映射。当某个维度的 W 值被更新的程度较大时，就意味着该维度对应的层在生成目标图像时起到了重要作用，需要被优化。 损失函数​ stage 2 的损失函数是 CLIP Loss 类中的 clip_directional_loss，该损失函数由两部分组成： edit_direciton：源域生成器与目标域生成器生成的图片在经过 image encdoer 后做 element-wise 的相减，最后除以自身的 L2 Norm 方便后续与 target_direction 计算余弦相似度。 target_direction：Mapper 产生的源域和目标域 prompts 的 text_features 做element-wise相减后，最后初一自身的 L2 Norm 以便后续与 edit_direction 计算余弦相似度。","s":"训练 stage 2","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-2","p":1129},{"i":1151,"t":"测试所用 nada 权重 Google Drive 链接：StyleGAN-NADA Models 参考文献：GAN 的几种评价指标 Inception Score（IS） 评估图像的质量和多样性 质量：把生成的图片 xxx 输入 Inception V3 中，得到输出 1000 维的向量 yyy，向量的每个维度的值对应图片属于某类的概率。对于一个清晰的图片，它属于某一类的概率应该非常大，而属于其它类的概率应该很小。用专业术语说， p(y∣x)p(y|x)p(y∣x) 的熵应该很小（熵代表混乱度，均匀分布的混乱度最大，熵最大）。 多样性： 如果一个模型能生成足够多样的图片，那么它生成的图片在各个类别中的分布应该是平均的，假设生成了 10000 张图片，那么最理想的情况是，1000 类中每类生成了 10 张。转换成术语，就是生成图片在所有类别概率的边缘分布 p(y)p(y)p(y) 熵很大（均匀分布）。 因此，对于 IS 我们需要求的两个量就是 p(y∣x)p(y|x)p(y∣x) 和 p(y)p(y)p(y)。实际中，选取大量生成样本，用经验分布模拟 p(y)p(y)p(y)： p^(y)=1N∑i=1Np(y∣x(i))\\hat{p}(y)=\\frac{1}{N}\\sum_{i=1}^{N}p(y|\\mathbf{x}^{(i)})p^​(y)=N1​∑i=1N​p(y∣x(i)) Inception Score 的完整公式如下： IS=exp⁡(Ex[KL(p(y∣x)∣∣p(y))])IS=\\exp\\left(\\mathbb{E}_x[KL(p(y|x)||p(y))]\\right)IS=exp(Ex​[KL(p(y∣x)∣∣p(y))]) 其中 Ex\\mathbb{E}_xEx​ 表示对所有图像的期望，KL(p(y∣x)∣∣p(y))KL(p(y|x)||p(y))KL(p(y∣x)∣∣p(y)) 表示每张图像的 KL 散度，exp⁡\\expexp 表示取指数。 通常计算 Inception Score 时，会生成 50000 个图片，然后把它分成 10 份，每份 5000 个，分别代入公式计算 10 次 Inception Score，再计算均值和方差，作为最终的衡量指标（均值±方差）。但是 5000 个样本往往不足以得到准确的边缘分布 p(y)p(y)p(y)，尤其是像 ImageNet 这种包含 1000 个类的数据集。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 IS 分别为 (2.2960, 0.2042) 以及 (2.6420, 0.1959)。 Fréchet Inception Distance（FID） 评估目标域的风格 计算 IS 时只考虑了生成样本，没有考虑真实数据，即 IS 无法反映真实数据和样本之间的距离，IS 判断数据真实性的依据，源于 Inception V3 的训练集 ImageNet，在 Inception V3 的“世界观”下，凡是不像 ImageNet 的数据，都是不真实的，都不能保证输出一个 sharp 的 predition distribution。因此，要想更好地评价生成网络，就要使用更加有效的方法计算真实分布与生成样本之间的距离。 FID 距离计算真实样本，生成样本在特征空间之间的距离。首先利用 Inception 网络来提取特征，然后使用高斯模型对特征空间进行建模，再去求解两个特征之间的距离，较低的 FID 意味着较高图片的质量和多样性。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 FID 分别为 84 以及 58。 Single Image Fréchet Inception Score（SIFID） FID 测量生成的图像的深层特征分布与真实图像的分布之间的偏差。在 ICCV 2019 Best Paper 中提出了 SIFID，只使用一张真实目标域的图像。与 FID 不同，SFID 不使用 Inception Network 中最后一个池化层之后的激活矢量（每个图像一个向量），而是在第二个池层之前的卷积层输出处使用深层特征的内部分布（feature map 中每个位置一个向量）。最终 SIFID 是真实图像和生成的样本中这些特征的统计数据之间的 FID。 Structural Consistency Score（SCS） 评估图像的结构保存能力 Identity Similarity（ID） 评估图像的特征保存能力 定量分析结果​ IS（Inception Score）↑ 数据集 源域→目标域 NADA IPL IPL* FFHQ Photo→Disney 2.296 2.642 2.701 FFHQ Photo→Anime Painting 2.320 2.464 2.578 FFHQ Photo→Wall painting FFHQ Photo→Ukiyo-e 2.489 2.715 2.851 FFHQ Photo→Pixar character FFHQ Photo→Tolkien elf FFHQ Photo→Werewolf 2.173 2.482 2.517 AFHQ Photo→Cartoon AFHQ Photo→Pointillism AFHQ Photo→Cubism SFID（Single Fréchet Inception Distance）↓ 数据集 源域→目标域 NADA IPL IPL* FFHQ Photo→Disney 84 58 54 FFHQ Photo→Anime Painting FFHQ Photo→Wall painting FFHQ Photo→Ukiyo-e FFHQ Photo→Pixar character FFHQ Photo→Tolkien elf FFHQ Photo→Werewolf AFHQ Photo→Cartoon AFHQ Photo→Pointillism AFHQ Photo→Cubism","s":"定量分析指标","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#定量分析指标","p":1129},{"i":1154,"t":"新增了对自定义图像进行风格迁移的功能。 HyperStyle 中的 e4e encoder 将自定义的真实图像编码至 StyleGAN2 中的 W 空间生成 latent codes，再将其分别输入至源域生成器以及目标域生成器以代替原始的从正态分布中 sample 出的随机向量生成的 w_codes，从而得到相应的图片。其中 e4e encoder 来源于 HyperStyle 提供的预训练 checkpoint。 使用方法：运行 inference.py，设置对应的参数，如生成器以及 e4e encoder 的路径、图像路径等，最后运行即可。 修改日志​ 第一次尝试只加载了 w_encoder 类及其对应 checkpoint 参数，导致并未将真实图片编码到 StyleGAN 的 W 空间中，没有 inversion 出合理的结果。 第二次尝试使用了 restyle_e4e_encoder，但是没有使用 dlib 进行 alignment，也没有使用 restyle 模型在反演时使用的多次进行前向传播来修正 latent code 的策略。此次尝试虽然反演出了合理的人像，但是人像的特征保存能力非常弱。 第三次尝试解决了上一次发现的问题，加入 dlib 提供的 landmark 检测以实现 alignment，并且使用 run_loop 函数在 restyle_e4e_encoder 中进行多次前向传播以修正得到的 W 空间的 latent code，效果较好。 对比 pSp 和 e4e encoder，pSp 对人脸图像的还原能力较强，但是会导致目标域图像具有随机的彩色光晕。","s":"支持自定义图像的风格迁移","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#支持自定义图像的风格迁移","p":1129},{"i":1156,"t":"参考 MIT 开源项目 pytorch-deployment 进行生成模型的 Web UI 部署。参考项目使用的是 StarGANv2 模型，对其进行优化使得其可以部署 StyleGAN 模型。 分别对人像和宠物图像生成了两个单独的卡片和 HTML 网页，网页可以完成两种功能： 使用参考图像进行零样本跨域适应，同时可以在网页下拉框中选择预期的目标域风格（由于没有合适的 restyle encoder，宠物图像不支持选择参考图像） 直接使用随机数生成源域图像并进行零样本跨域适应 UI 独立代码可以参考本人仓库 stylegan-ui，但功能有限，完整的 UI 代码已经合并到主程序中，请参考 ./web_ui 中的具体代码。 部分效果展示图​ 主页： 人物画像的零样本域适应（初始状态）： 人物画像的零样本域适应（使用参考图像生成状态）： 宠物画像的零样本域适应（初始状态）： 宠物画像的零样本域适应（使用随机数生成状态）：","s":"Web UI","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#web-ui","p":1129},{"i":1159,"t":"Mapper 的作用是从 W 空间的隐式代码中学习出符合源域图片特征以及符合目标域文字特征的 prompts。 改进后的 Mapper 结构： class TransformerMapperV2(nn.Module): \"\"\" 改良版transformer mapper，增加多头注意力，减小transformer encoder的层数，防止学习到的源域图像细节过拟合 同时去掉开头的PixelNorm，防止与transformer中的layer normalization冲突 并在transformer encoder之后加入Pixel Norm以及全连接层 \"\"\" def __init__(self, opts, n_dim): super(TransformerMapperV2, self).__init__() self.opts = opts self.n_dim = n_dim layers = [] # transformer中有layer normalization，不需要进行PixelNorm # 自定义Transformer编码器层配置 transformer_layer = TransformerEncoderLayer(d_model=512, nhead=4, dim_feedforward=1024, dropout=0.1) # 构建Transformer编码器 self.transformer_encoder = TransformerEncoder(transformer_layer, num_layers=2) layers.append(self.transformer_encoder) # 再过一次PixelNorm以及全连接层，将每个点归一化（除以模长），避免输入noise的极端权重，改善稳定性 layers.append(PixelNorm()) self.linear = EqualLinear(512, 512, lr_mul=0.01, activation='fused_lrelu') layers.append(self.linear) # 最后一个全连接层，输出维度保持不变 self.final_linear = EqualLinear(512, n_dim * opts.n_ctx, lr_mul=0.01, activation='fused_lrelu') layers.append(self.final_linear) self.mapping = nn.Sequential(*layers).to(device)","s":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1129},{"i":1161,"t":"在 IPL 的官方代码实现中，人工设计的 prompts 有两处，一是 ctx_init，由命令行参数赋值，即 \"a photo of a\"，另一处是 utils/text_templates.py 中的 templates，下面分别分析这两处的具体作用。 ctx_init 的作用（与域标签拼接后的 ctx_init）​ ctx_init 在 compute_text_features 函数中用于定位 eot 层符号所表示的维度来进行投影，使得文字特征与图像特征维度相同，并不参与 text_features 的实际计算。但是在该函数中，Mapper 输出的 image-specific prompts 已经与域标签的嵌入表示进行了 concat。 在 stage 1 训练 Mapper 损失函数中，Mapper 学习到的 image-specfic prompts 在与源域标签进行 concat 并得到文字编码后，会与 ctx_init 的文字编码进行 element-wise 的相加，最后再与源域生成器输出的图片的图像编码进行对比损失计算； 同理，在 stage 2 训练目标域生成器时，Mapper 输出的 image-specific prompts 在分别与源域、目标域标签 concat 后送入文字编码器得到文字特征，再与 ctx_init 的文字特征进行 element-wise 相加，最后二者相减得到 text_direction。 templates 的作用​ templates 是提前准备好的一系列字符串，其中字符串的格式全部类似于 a photo of a {}. 原始 hhfq 数据集的模板共有 79 个字符串。 与 ctx_init 起作用的函数不同，templates 在第一阶段的训练的 domain regularization loss 中使用到的 get_text_features 函数起作用，用于与目标域标签进行格式化连接后成为 image-specific prompts 向目标域靠近的方向。即 domain loss 使学习到的 prompts 向以目标域标签为中心的字符串对齐。 思考​ IPL 方法对 Mapper 学习到的 prompts 除了（1）使用对比学习使 prompts 学习到源域图片的特征以及（2）使用域正则化使得 prompts 向目标域标签对齐之外，并没有使用其他与人工设计的 prompts 有关的正则化方式来约束 prompts 的学习，因此人工设计的 prompts 可能并没有起到太大的约束作用。 如果对比学习损失是为了让 Mapper 自监督学习到图片的特征外，那么是否可以对域正则化损失进行改进，约束学习到的 prompts 向人工设计的初始化 prompts 对齐，以实现类似于 Stable Diffusion 类似的 prompts 控制图像生成的效果。","s":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1129},{"i":1163,"t":"对第一阶段的损失函数做出修改，更新domain loss，将原始 domain loss 中使用的以目标域标签为中心的模板更换成自定义模板，使目标域的image-specific prompts与自定义模板对齐。 经过多次实验和分析，刻意让 Mapper 输出的image-specific prompts 去逼近用户设置的 prompts，会产生一些隐式细节的丢失。因为 Mapper 本身存在的目的就是学习出人工无法准确描述的细节（包括源域图像的自身细节以及目标域风格的细节），如果对 Mapper 的损失函数中加上太多人为设计的限制，很显然会造成细节的丢失并且出现同质的现象。 因此，为了达到既使用精心设计的 prompts 来优化域适应，同时又不影响 Mapper 自主学习双域特征，在原有两个损失函数的基础上，新增一个权重较小的损失函数，用于将 Mapper 学习到的目标域 prompts 向自定义模板对齐。 用于生成 prompts 的 GPT、Claude prompts​ 中文提示词： 针对将普通人像转换成迪士尼风格人物画像的任务，给出60个描述迪士尼人像特有特征的文字prompt。 将上述生成的60个prompts放在同一个Python列表中，即每一个prompt作为该列表的字符串元素，输出整个Python列表。 英文提示词： For the task of converting a {source class} photo into a {target_class} photo, provide some text prompts describing the distinctive features of Disney character portraits. Put the generated 60 prompts into the same Python list, with each prompt as a string element of the list, and output the entire Python list. 对 global_clip_loss 的改进​ IPL 训练第一阶段的损失函数除了源域 prompts 与源域图像之间的对比学习损失函数外，还有将目标域 prompts 与目标域标签计算余弦相似度的 domain regularization。 对 domain regularization 进行改进，引入开发者自定义的 prompts，约束 Mapper 学习到的目标域 prompts 向开发者自定义的 prompts 对齐，以此来进行 prompt tuning，发挥 prompt learning 的更大优势，并增强自定义性。 对 clip_directional_loss 的改进​ IPL 训练第二阶段的损失函数，使用 criteria.clip_loss.CLIPLoss.clip_directional_loss。","s":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/大模型基础/Prompt Learning/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1129},{"i":1165,"t":"tip 在自监督学习的模型中，出现了很多以芝麻街任务命名的经典模型和论文。","s":"自监督学习（Self-Supervised Learning）","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"","p":1164},{"i":1167,"t":"自监督学习是无监督学习的一种方法，利用未标记的数据来训练模型。与传统的监督学习不同，自监督学习不需要依赖人工标注的标签数据，而是通过自动构建任务来生成伪标签，从而指导模型的学习。 自监督学习的基本原理是，通过对输入数据进行某种变换或操作，使得模型能够从中提取有用的特征和语义信息。例如，在自然语言处理领域，一种常见的自监督学习任务是预测下一个单词；在计算机视觉领域，一种常见的自监督学习任务是预测图像中的缺失部分。这些任务可以帮助模型学习到输入数据中的潜在结构和规律，从而提高其泛化能力和性能。","s":"介绍","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#介绍","p":1164},{"i":1169,"t":"下面以BERT为例，介绍自监督模型。","s":"BERT（Bidirectional Encoder Representation from Transformers）","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#bertbidirectional-encoder-representation-from-transformers","p":1164},{"i":1171,"t":"BERT的结构其实是Transformer的Encoder部分，仅使用Encoder做特征抽取器。 BERT（Bidirectional Encoder Representations from Transformers）本身是一种预训练的模型架构，通常是在大规模无标签数据上进行预训练，然后在特定任务上进行微调。BERT并不是一个用于特定任务的模型，而是一个通用的语言表示模型。 使用 BERT 的一般步骤包括： 预训练（Pretraining）：在大规模无标签数据上对 BERT 进行预训练，学习通用的语言表示。 微调（Fine-tuning）：将预训练的 BERT 模型应用于特定任务，并在有标签的数据上进行微调，以适应该任务。 应用于下游任务（Downstream Tasks）：微调后的 BERT 模型可以被用于执行特定的下游任务，如文本分类、命名实体识别等。","s":"结构","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#结构","p":1164},{"i":1173,"t":"Masking Input​ BERT模型的自监督性质主要体现在其训练数据并不需要人为标注label，而是通过对输入句子中的部分词汇做mask，将输入数据的部分内容使用special token或random token进行遮挡后，喂入Encoder中。对于每个被mask掉的词汇，BERT输出一个概率分布向量，表示这个词汇属于词汇表中的哪一个。 BERT的损失函数主要是Masked Language Model（MLM）任务的交叉熵损失，通过最小化Encoder输出的概率分布与Ground Truth之间的交叉熵损失函数来训练模型。 L=−1N∑i=1Nyilog⁡(pi)(1)L=-\\frac1N\\sum_{i=1}^Ny_i\\log(p_i)\\tag{1}L=−N1​i=1∑N​yi​log(pi​)(1) 其中： NNN是输出的概率分布向量的维度。 yiy_{i}yi​是概率分布向量标签。 pip_{i}pi​是模型预测的概率分布向量。 Next Sentence Prediction​","s":"Self-Supervised Pretraining","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#self-supervised-pretraining","p":1164},{"i":1175,"t":"在预训练之后，BERT 的模型参数可以被用于多个下游任务，如文本分类、命名实体识别、问答等。 首先，我们先来了解一下NLP任务中很重要的一个Benchmark：GLUE。 Benchmark: GLUE​ GLUE（General Language Understanding Evaluation）是一个评估自然语言处理模型在多个任务上综合性能的基准（benchmark）。它旨在测试模型对各种语言任务的通用理解能力。GLUE benchmark 包含了多个任务，每个任务都有一个对应的数据集和评估标准。 MNLI（MultiNLI）：自然语言推理任务，要求模型判断给定的两个句子之间的关系是蕴含、矛盾还是中立。 QQP（Quora Question Pairs）：问题匹配任务，要求模型判断两个问题是否语义上等价。 QNLI（Question-answering Natural Language Inference）：句子分类任务，要求模型判断给定问题和句子之间的关系。 RTE（Recognizing Textual Entailment）：文本蕴涵任务，要求模型判断给定的两个文本之间是否存在蕴涵关系。 STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度任务，要求模型度量两个文本之间的语义相似度。 CoLA（Corpus of Linguistic Acceptability）：语言可接受性判断任务，要求模型判断一个句子是否语法上正确。 MRPC（Microsoft Research Paraphrase Corpus）：短语匹配任务，要求模型判断两个句子是否语义上等价。 SST-2（Stanford Sentiment Treebank）：情感分类任务，要求模型判断给定句子的情感极性。 WNLI（Winograd NLI）：自然语言推理任务，属于 Winograd 模式的变体，要求模型判断一个给定的句子对是否存在蕴含关系。 GLUE 提供了一个全面的测试平台，有助于评估和比较不同自然语言处理模型在多个任务上的性能。 Downstream Tasks​ Sentiment Analysis​ BERT作为自监督的预训练模型，从大语料库中学习到了一定的语言知识，在做文字情感分析时，只需要在下游连接上对应的分类器网络，即使只有比较少量的训练资料也能得到比较好的效果。 下图将Pre-training&Fine-tuning范式与Scratch范式的训练效果做了对比，其中Scratch范式即使用传统的随机初始化的方式从头训练整个分类网络。可以看到预训练&微调的训练范式可以加速模型的收敛（Convergence）并且效果也更好。 立场分析​ Extraction-based Question Answering​ BERT也可以用来完成截取式问答任务，提供一篇文章以及问题，要求输出两个integer代表答案短语在该文章中的起始位置以及结束位置。 具体的解决方案：选择输入文章的所有token所对应的输出向量，随机初始化两个相同维度的向量，分别与输出向量做Dot Product，在经过Softmax之后选择最大的得分所对应的索引。得到的两个索引分别是答案短语在文章中开始的位置以及结束的位置。 其他应用​ 虽然以上的应用都是NLP领域的，但是BERT是Seq2Seq模型，图片、语音等信号也都可以作为Sequence输入至BERT中，因此BERT也可以通过迁移学习应用至多模态领域。","s":"Fine-tuning","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#fine-tuning","p":1164},{"i":1177,"t":"BERT在大规模语料库（Corpus）上预训练后，输出的向量表示了对应输入token的意思，特别地，是考虑了上下文信息的意思。比如，对于水果的苹果已经苹果公司的苹果，BERT对一样的苹果有不同的输出。即对一个处在不同上下文信息中的相同词汇，BERT有不同的Embedding。类似于Word Embedding中的CBOW，BERT可以看作是Contextualized Word Embedding。 BERT模型的核心就是通过预训练来学习上下文信息，进而对每个输入token生成相应的向量表示。这个向量表示考虑了上下文信息，所以对于处在不同上下文中的相同词汇，BERT会有不同的Embedding。 ——来自讯飞星火大模型 虽然 BERT 的确是一种基于大规模语料库的预训练模型，但它并不是一种简单的词嵌入方法，而是一种深度神经网络模型。 在 BERT 中，每个单词都被嵌入到一个高维空间中，并且这些嵌入向量是通过多层 Transformer 编码器生成的。这些编码器的每一层都包含多个自注意力子层和一个前馈神经网络子层，它们共同作用来捕捉文本中的上下文关系和其他语义特征。 因此，BERT 中的嵌入向量不仅仅是单个单词的词义表征，还包括整个句子或段落中的语境信息。这意味着即使两个单词在不同的上下文中出现，它们的嵌入向量也可能非常相似，因为它们共享相同的语义结构。 总之，BERT 可以被视为一种上下文感知词嵌入技术，但它的实现方式比传统的词嵌入方法要复杂得多。 ——来自腾讯混元大模型","s":"Why does BERT work?","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#why-does-bert-work","p":1164},{"i":1179,"t":"GPT的结构是Transformer的Decoder部分，可以承担生成的任务。 GPT的自监督学习的特征体现在：在训练过程中，GPT根据输入的token预测输入的下一个token应该是什么，对输出的distribution与Ground Truth做Cross Entropy Loss来更新参数。","s":"GPT: Generative Pre-trained Transformer","u":"/en/docs/Deep-Learning/大模型基础/Self-Supervised-Learning","h":"#gpt-generative-pre-trained-transformer","p":1164},{"i":1181,"t":"实战练习 Transformer实战练习，代码见Github仓库。 This is a practice of Transformer, follow the guide of Github Repo.","s":"Speaker Classification","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"","p":1180},{"i":1183,"t":"Classify the speaker of given features, learn how to use Transformer and how to adjust parameters of transformer.","s":"Overview","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#overview","p":1180},{"i":1185,"t":"The original dataset is VoxCeleb1. We randomly select 600 speakers from VoxCeleb1, then preprocess the raw waveforms into mel-spectrograms. You can download the preprocessed dataset from Google Drive. Arguments: data_dir: The path to the data directory. metadata_path: The path to the metadata. segment_len: The length of audio segment for training. The architecture of dataset directory is shown below, where uttr-{random string}.pt represents PyTorch data file containing valid mel-spectrogram data. data directory/ ├── mapping.json ├── metadata.json ├── testdata.json └── uttr-{random string}.pt","s":"Dataset","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#dataset","p":1180},{"i":1187,"t":"This is also the assignment solution of ML2021Spring HW4.","s":"Related","u":"/en/docs/Deep-Learning/代码实现/Speaker-Classification","h":"#related","p":1180},{"i":1190,"t":"下采样因子 fff 为 8，采样分辨率根据模型权重可选 512×512512 \\times 512512×512 或 768×768768 \\times 768768×768。","s":"Stable Diffusion","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","h":"#stable-diffusion","p":1188},{"i":1192,"t":"下采样因子 fff 高达 42，采样分辨率为 1024×10241024 \\times 10241024×1024。","s":"Stable Cascade","u":"/en/docs/Deep-Learning/代码实现/Stable-Diffusion","h":"#stable-cascade","p":1188},{"i":1194,"t":"tip 对于TensorFlow框架，可以使用TensorBoard实现可视化。 对于PyTorch框架，可以使用Visdom或TensorBoardX实现可视化，本篇主要讲述Visdom。","s":"Visdom可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"","p":1193},{"i":1196,"t":"pip install visdom","s":"安装Visdom","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#安装visdom","p":1193},{"i":1199,"t":"首先要通过终端启动Visdom，使用本机端口运行服务器。 以下二者均可。 visdom python -m visdom.server","s":"Visdom的启动","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#visdom的启动","p":1193},{"i":1201,"t":"from visdom import Visdom vis = Visdom() # 实例化 # 创建一条曲线，前两个参数分别为y轴数据、x轴数据，win参数是窗口的唯一标识，opt可选字典中可以给出窗口的title和legend vis.line([0.], [0.], win='win_id', opts=dict(title=\"win_title\")) # 在训练过程中的合适位置向初始化的曲线中喂数据 # viz.line([real_y_data], [global_step], win='win_id', update='append') # 查看训练loss vis.line([loss.item()], [epoch], win='win_id', update='append') # 对于非image数据，在传入visdom时仍需要先转化为numpy类型","s":"单窗口单曲线的可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#单窗口单曲线的可视化","p":1193},{"i":1203,"t":"from visdom import Visdom vis = Visdom() vis.line([[0., 0.]], [0.], win='win_id', opts=dic(title=\"win_title\", legend=[\"curve_name_1\", \"curve_name_2\"])) # 在训练过程中的合适位置向初始化的曲线中喂数据 viz.line([[y1, y2]], [global_step], win='win_id', update='append')","s":"单窗口多曲线的可视化","u":"/en/docs/Deep-Learning/代码实现/Visdom-Visualization","h":"#单窗口多曲线的可视化","p":1193},{"i":1205,"t":"important 参考链接: Illustrated: Self-Attention 动图轻松理解Self-Attention(自注意力机制)","s":"自注意力（Self-Attention）","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"","p":1204},{"i":1208,"t":"CNN模型的输入向量的形状是固定的，其输出向量的形状也是固定的或可以根据不同的下游任务而唯一确定，即输入形状与下游任务共同确定了一个CNN模型的架构，具有较强的固定性。 important 在视觉中，输入大多为数字图像，其形状可以大致分为由尺寸和通道数来决定。 从输入图像的尺寸看，当CNN中没有全连接层时，本质上可以接受任意尺寸的输入，但这是狭隘的。若考虑其下游任务以及输出，如FCN（Fully Convolution Network），FCN通过最后通过反卷积将tensor还原到原始图像尺寸，即在CNN中，输入与输出（下游任务的要求）都影响着CNN网络的结构。 从通道数看，CNN本质上可以接受任意通道数的图像输入，但是其模型效果将会受到极大的影响。以一个使用通道数为3的数据集进行训练的CNN模型，但在测试阶段分别使用通道数为 1 和 6 的数据进行推理的情形为例，进行分析： 通道数为1的测试集： 情况： 如果使用通道数为 1 的数据进行推理，即灰度图像，而模型在训练时是使用 RGB 数据集训练的，模型可能会受到一些影响。 解释： 模型可能在训练时学到了关于颜色的特定信息，而在测试时，如果输入是灰度图像，那些颜色信息将不可用。 建议： 在这种情况下，模型可能会失去对颜色信息的敏感性，可能需要进行进一步的调整或微调，以适应灰度图像的特性。 通道数为6的测试集： 情况： 如果使用通道数为 6 的数据进行推理，模型可能会面临额外的挑战，因为它在训练时只见过 3 个通道的数据。 解释： 模型在训练时学到的权重是基于 3 个通道的数据的，对于额外的通道，模型可能无法有效利用这些信息。 建议： 对于通道数不匹配的情况，可以考虑进行通道的适当组合或调整。这可能包括降低通道数（例如，只使用前 3 个通道），或者通过某种方式将 6 个通道映射到 3 个通道，例如通过某种特定的数据预处理。 当模型的输入更复杂（sophisticated），是长度不定的向量序列（sequence）时，CNN不能很好地处理，且不能解决输出由输入和模型自行决定的下游任务，如生成类任务。","s":"输入与输出的局限性","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#输入与输出的局限性","p":1204},{"i":1210,"t":"CNN中存在局部连接和权值共享的归纳偏置： 局部连接：CNN使用卷积层通过滑动卷积核在输入上进行局部感受野的操作。每个神经元只与输入的一小部分区域相连，这意味着每个神经元只能接触到局部的上下文信息。 权值共享：共享的主要思想是，对于输入图像的不同位置使用相同的权重参数进行卷积操作。这意味着，无论卷积操作发生在图像的左上角、右下角，或者其他任何位置，都使用相同的卷积核进行权值计算。CNN的权值共享使得模型能够学习到图像中的局部特征，这也是一种对于上下文的假设。相邻位置上的权重共享使得模型能够对局部结构进行建模，这种权重共享使得CNN具有更强的归纳偏置。 tip 在多通道卷积中，卷积核不同通道之间的权重参数是独立的。这使得网络能够学习不同通道之间的特征组合。这种设计有效地捕捉了输入数据中的多通道信息，提高了网络的表达能力。 CNN的设计理念认为：在图像任务中，局部结构通常更为重要，局部连接和权值共享使得CNN更适用于图像处理等任务。但也正是这种设计理念，使得CNN在面临长输入序列时不能很好地综合上下文信息、提取位置信息，因此Self-Attention应运而生，允许每个位置关注到序列中地所有其他位置。这种全局关联性质使得Transformer能够捕捉序列中的长距离依赖关系。","s":"关联上下文信息的局限性","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#关联上下文信息的局限性","p":1204},{"i":1213,"t":"A self-attention module takes in nnn inputs and returns nnn outputs. What happens in this module? In layman’s terms, the self-attention mechanism allows the inputs to interact with each other (“self”) and find out who they should pay more attention to (“attention”). The outputs are aggregates of these interactions and attention scores. Self-Attention接受任意向量数量的向量序列的输入，输出每一个向量所有向量（包括自身）的注意力分数。这使得Self-Attention在捕捉长距离依赖和处理序列中的全局关系时非常有效。","s":"什么是Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#什么是self-attention","p":1204},{"i":1215,"t":"自注意力机制的核心思想是为序列中的每个向量分配一个权重（即注意力分数），该权重表示该元素与其他元素的关联强度。这个权重是通过计算输入序列中所有元素与当前元素之间的关系来确定的。通常，这个计算过程使用一个可学习的权重矩阵来完成，即用来生成Key，Query以及Value的权重矩阵。","s":"Self-Attention的核心思想","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention的核心思想","p":1204},{"i":1217,"t":"important 定性分析详见文末。 注意考虑自注意力机制的实际意义，其输出是输入序列每个元素对每个位置的注意力分数。 因此，对于单头自注意力中的 Q、K 和 V 的维度 n_dim 通常等于输入序列的词嵌入维度 d_model。 对于多头自注意力机制而言，n_dim 通常等于 d_model // num_heads，即词嵌入维度除以多头自注意力的头数。 定义输入​ Self-Attention的输入是向量序列，其向量数量是任意的，计算每个输入向量之间的注意力分数。在本例中输入向量个数为3，同时为了统一性分析，计输入向量个数为batchbatchbatch个。 # define the input, which has a shape of (3, 4) inputs = [[1, 0, 1, 0], [0, 2, 0, 2], [1, 1, 1, 1]] inputs = torch.tensor(inputs, dtype=torch.float32) 初始化权重矩阵​ 每个输入向量都会与3个权重向量做乘法得到3个新的向量，分别为key，query以及value。在本例中将新的向量维度设为3，由于输出的k、q、v矩阵大小均为(3,3)(3, 3)(3,3)，因此每个权重矩阵的形状应该是(4,3)(4, 3)(4,3)。为了统一性分析，计key，query以及value各向量维度为numnumnum。 In a neural network setting, these weights are usually small numbers, initialised randomly using an appropriate random distribution like Gaussian, Xavier and Kaiming distributions. This initialisation is done once before training. 在实际应用中，权重通常是较小的数字，通过适当的随机分布（比如高斯、Xavier和Kaiming分布）进行随机初始化。 # define the weights for keys, queries and values w_key = torch.tensor([[0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 0]], dtype=torch.float32) w_query = torch.tensor([[1, 0, 1], [1, 0, 0], [0, 0, 1], [0, 1, 1]], dtype=torch.float32) w_value = torch.tensor([[0, 2, 0], [0, 3, 0], [1, 0, 3], [1, 1, 0]], dtype=torch.float32) 计算key，query以及value​ # compute keys, queries and values keys = inputs @ w_key queries = inputs @ w_query values = inputs @ w_value print(\"keys:\\n\", keys) # (3, 3) print(\"queries:\\n\", queries) # (3, 3) print(\"values:\\n\", values) # (3, 3) 计算原始的注意力分数​ 我们要为每一个输入向量计算它对所有向量的注意力分数，包括对自身的。 原始注意力分数的计算方式为，使用自身的query分别与所有向量的key做内积（dot product），得到的scalar数量与输入向量个数相同，都为batchbatchbatch，即scores矩阵的形状应为(batch,batch)(batch, batch)(batch,batch)。 # compute raw self-attention scores scores = queries @ keys.T print(\"attention scores:\\n\", scores) 注意，代码中提供的是计算所有向量的注意力分数，而图中演示的只是计算input #1的注意力分数。 对每一个向量计算出的注意力分数做softmax​ # normalize the attention score score_softmax = F.softmax(scores, dim=-1) # select the highest dimension print(\"attention scores after normalization:\\n\", score_softmax) 将注意力分数与对应的value相乘​ 每一个输入向量对所有batchbatchbatch个向量计算得到的注意力分数，都要与其对应的value向量相乘，计算加权的注意力分数。最终的注意力分数矩阵的形状应为(batch,num)(batch, num)(batch,num)。 # compute the weighted values by doting score_softmax with values # please be advised, this is dot product weighted_values = values[:, None] * score_softmax.T[:, :, None] print(\"weighted scores: \\n\", weighted_values) 加权注意力分数求和​ 最后一步，对于每个向量得到的加权注意力分数进行求和，得到维度为numnumnum的注意力分数向量，考虑到有batchbatchbatch个输入向量，因此最终的注意力分数矩阵的形状为(batch,num)(batch, num)(batch,num)。 根据推导，显然，最终Self-Attention的输出向量维度与value向量的维度相同，输出向量的数量与输入向量的数量相同。 # compute outputs outputs = weighted_values.sum(dim=0) 总结​ As mentioned in the above paragraph, we don’t only use dot product to find relevance. But we scale it as well by a factor of the square root of key dimension dk. This helps in making sure that the dot-products between query and key don’t grow too large for dk. If the dot product becomes too large then the softmax output will be very small. To avoid this, we scale the dot product. 在计算dot product后，为了避免点积运算经过softmax后的输出太小，在点积后除以key向量维度的平方根来进行缩放。 Attention(Q,K,V)=softmax(QKTdk)V(1)Attention(Q,K,V)=\\textit{softmax}(\\frac{QK^T}{\\sqrt{d_k}})V \\tag{1}Attention(Q,K,V)=softmax(dk​​QKT​)V(1) 完整代码​ # simple code for Self-Attention import torch import torch.nn.functional as F import numpy as np import matplotlib.pyplot as plot # define the input, which has the shape of (3, 4) inputs = [[1, 0, 1, 0], [0, 2, 0, 2], [1, 1, 1, 1]] inputs = torch.tensor(inputs, dtype=torch.float32) # initialize the weights for keys, queries and values w_key = torch.tensor([[0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 0]], dtype=torch.float32) w_query = torch.tensor([[1, 0, 1], [1, 0, 0], [0, 0, 1], [0, 1, 1]], dtype=torch.float32) w_value = torch.tensor([[0, 2, 0], [0, 3, 0], [1, 0, 3], [1, 1, 0]], dtype=torch.float32) # compute keys, queries and values keys = inputs @ w_key queries = inputs @ w_query values = inputs @ w_value print(\"keys:\\n\", keys) # (3, 3) print(\"queries:\\n\", queries) # (3, 3) print(\"values:\\n\", values) # (3, 3) # compute raw self-attention score scores = queries @ keys.T print(\"attention scores:\\n\", scores) # normalize the attention score score_softmax = F.softmax(scores, dim=-1) # select the highest dimension print(\"attention scores after normalization:\\n\", score_softmax) # compute the weighted values by doting score_softmax with values # please be advised, this is dot product weighted_values = values[:, None] * score_softmax.T[:, :, None] print(\"weighted scores: \\n\", weighted_values) # compute outputs outputs = weighted_values.sum(dim=0)","s":"Self-Attention的实现","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention的实现","p":1204},{"i":1219,"t":"多头自注意力机制是对自注意力机制的扩展，假设扩展成为nnn -head self-attention，则对每个输入向量生成对应的key，query和value后，再次使用nnn个可学习的权重矩阵生成nnn个不同的key0,...,keyn−1key^{0}, ..., key^{n-1}key0,...,keyn−1,query0,...,queryn−1query^{0}, ..., query^{n-1}query0,...,queryn−1以及value0,...,valuen−1value^{0}, ..., value^{n-1}value0,...,valuen−1。 在计算attention score时，使用每一个query查询对应的key，即query0query^{0}query0只与其他每一个输入向量的key0key^{0}key0做dot product。","s":"Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#multi-head-self-attention","p":1204},{"i":1221,"t":"Self-Attention可以看作是复杂化的CNN，CNN只能在感受野范围内考虑上下文信息，而Self-Attention可以自己学习感受野。","s":"Self-Attention与CNN的对比","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention与cnn的对比","p":1204},{"i":1223,"t":"自注意力机制（Self-Attention Mechanism）是深度学习领域中的一种重要机制，尤其在处理序列数据和图像特征时展现出了强大能力。下面将以一个典型的自注意力机制为例，使用 Transformer 架构中的多头自注意力（Multi-Head Self-Attention）来说明其计算过程，以帮助理解其工作原理。假设我们的输入是一个序列，比如文本序列，其长度为 LLL，每个词向量的维度为 DDD​。 important 注意考虑自注意力机制的实际意义，其输出是输入序列每个元素对每个位置的注意力分数。 因此，对于单头自注意力中的 Q、K 和 V 的维度 n_dim 通常等于输入序列的词嵌入维度 d_model。 对于多头自注意力机制而言，n_dim 通常等于 d_model // num_heads，即词嵌入维度除以多头自注意力的头数。","s":"Self Attention 的计算","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#self-attention-的计算","p":1204},{"i":1225,"t":"假设我们有一个文本序列，长度为 LLL，每个词表示为一个 DDD 维的向量。那么，整个输入的形状可以表示为 L×DL \\times DL×D 的矩阵。","s":"输入形状","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#输入形状","p":1204},{"i":1227,"t":"自注意力机制的核心思想是让序列中的每个元素（词向量）能够关注到序列中的其他元素，从而更好地理解它们之间的关系。具体来说，它通过计算三个向量——查询（Query，Q）、键（Key，K）和值（Value，V）来进行。 Query、Key、Value的生成： 首先，通过矩阵乘法，将输入的词向量矩阵分别与三个不同的权重矩阵相乘，生成 Q、K、V 三个矩阵。假设权重矩阵的维度均为 D×dkD \\times d_kD×dk​（其中 dkd_kdk​ 是查询和键的维度），那么 Q、K、V 的形状均为 L×dkL \\times d_kL×dk​。 计算注意力权重： 接下来，计算 Q 与 K 之间的相似度，通常使用点积（Dot Product）的方式，即每个查询向量 Q 与所有键向量 K 进行点积。点积的结果是一个 L×LL \\times LL×L 的矩阵，其中的每个元素表示查询向量与键向量之间的相似度。为了使这个矩阵中的元素处于同一尺度，通常会除以 dk\\sqrt{d_k}dk​​，以避免过大的点积值导致 softmax 函数饱和。 然后，对上述得到的矩阵应用 softmax 函数，得到注意力权重矩阵。这个矩阵的每一行都是一个概率分布，表示序列中每个元素对其他元素的注意力权重。 加权求和： 最后，将注意力权重矩阵与值矩阵 V 进行矩阵乘法，得到最终的注意力输出。这个过程可以视为对 V 矩阵中的每个值向量进行加权求和，权重由注意力权重矩阵决定。","s":"自注意力机制的计算步骤","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#自注意力机制的计算步骤","p":1204},{"i":1229,"t":"在实际应用中，往往采用多头自注意力（Multi-Head Attention）来增强模型的表示能力。具体来说，就是将上述过程重复多次，每次使用不同的权重矩阵来生成 Q、K、V，然后将多次得到的注意力输出进行拼接或平均，形成最终的多头注意力输出。","s":"多头自注意力","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#多头自注意力","p":1204},{"i":1231,"t":"假设输入的文本序列长度为 L=5L=5L=5，每个词向量的维度为 D=512D=512D=512，dk=512d_k=512dk​=512（查询和键的维度）。那么，Q、K、V 的形状均为 5×5125 \\times 5125×512。在计算注意力权重时，得到的矩阵形状为 5×55 \\times 55×5。最后的注意力输出形状同样为 5×5125 \\times 5125×512（如果是多头自注意力，则可能需要将多个头的输出拼接或平均，具体形状取决于头的数量和后续处理方式）。 自注意力机制通过让序列中的每个元素都能“看到”其他元素，并根据它们之间的关系调整自己的表示，从而增强了模型对序列数据的理解能力，这对于处理自然语言处理任务（如翻译、文本生成等）和图像特征提取（如在视觉 Transformer 中）等场景都有着重要作用。","s":"示例","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#示例","p":1204},{"i":1233,"t":"tip 参考资料：https://blog.csdn.net/yeziyezi210/article/details/103864518 自注意力中有多种掩码类型，但实现方式大致相同，其作用大概可以分为一下几种。 防止注意力机制关注填充（padding）标记 实现因果注意力（causal attention），即每个位置只能关注它自己和之前的位置，常用于 Decoder 中 在特定任务中屏蔽某些不相关的输入","s":"自注意力中的掩码 Mask","u":"/en/docs/Deep-Learning/大模型基础/Self-Attention","h":"#自注意力中的掩码-mask","p":1204},{"i":1235,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"","p":1234},{"i":1238,"t":"conda create -n ipl python=3.8 conda activate ipl","s":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1234},{"i":1240,"t":"请确保 NVIDIA 驱动、CUDA 以及 PyTorch 之间版本互相匹配。 conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia pip install ftfy regex tqdm ninja pip install git+https://github.com/openai/CLIP.git","s":"安装依赖","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#安装依赖","p":1234},{"i":1242,"t":"预训练的源域生成器可以通过 Google Drive 或者 Tsinghua Cloud 下载，并将其置于 ./pre_stylegan 文件夹中。","s":"下载预训练生成器","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1234},{"i":1246,"t":"ctx_init 参数用于初始化 prompts，官方提供的演示 context 是a photo of a。 source_prompts = [prompt_prefix + \" \" + args.source_class] target_prompts = [prompt_prefix + \" \" + args.target_class] 源域的初始提示词 source_prompts 是 ctx_init 与源域标签的组合。若源域标签为 photo，则源域的初始提示词是 a photo of a photo。目标域的初始提示词同理。","s":"prompts 的初始化","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1234},{"i":1248,"t":"源域以及目标域的初始提示词接下来会进行 tokenize： source_tokenized_prompts = torch.cat([clip.tokenize(p) for p in source_prompts]).to(device) # (1, 77) 'sot a photo of a photo eot' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 1125, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 target_tokenized_prompts = torch.cat([clip.tokenize(p) for p in target_prompts]).to(device) # (1, 77) 'sot a photo of a disney' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 4696, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 tokenize 是 CLIP 对送入的 prompt 字符串进行标记化处理，在头部和尾部添加 startoftext 以及 endoftext 标记，最终为两个首尾标记和全部单词生成 int 标记。其中 CLIP 模型缺省的 context_length 是77，若 prompt 大于 77 会进行截断（truncate），若小于 77 会进行补零，因此 source_tokenized_prompts 与 target_tokenized_prompts 的形状均为 (1, 77)。 在提示词标记化之后，将进行嵌入表示 embedding： source_embedding = clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度 target_embedding = clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度","s":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1234},{"i":1250,"t":"在 Mapper 生成 prompts 后进行 prompts 的特征提取时，需要传入 tokenize 之后的人工初始化 prompt（‘a photo of a photo.’或‘a photo of a disney.’），用于选择 eot 符号对应的维度来进行特征投影（因为 eot 作为整个句子的结尾，被认为该维度包含更多的信息。具体做法：由于在 tokenize 之后，eot 符号对应的维度的值最大，因此可使用 argmax 来定位），以保证最后得到的特征形状与图像特征提取的输出形状相同，使得后续可以进行对比学习的损失计算。","s":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1234},{"i":1252,"t":"Z空间与W空间​ # Z空间到W空间的变换 sample_z = mixing_noise(args.batch_mapper, 512, args.mixing, device) # (batch_size, 512) sample_w = net.generator_frozen.style(sample_z) # (batch_size, 512) Z 空间和 W 空间是 StyleGAN 模型中两种不同的隐变量空间，分别用于控制生成图像的随机特征和样式信息。W 空间通过对 Z 空间的映射得到。 Z 空间（Latent Space Z）： Z 空间是随机噪声空间，通常由随机噪声向量组成，表示了图像的随机特征。 在 StyleGAN 中，Z 空间的维度通常为 512 维。这意味着一个 Z 向量由 512 个数字组成，每个数字表示了图像的一个随机特征的强度或者方向。 W 空间（Style Space W）： W 空间经过特征解耦的隐空间，与 Z 空间相比更加解耦合。 在 StyleGAN 中，W 空间的维度也通常为 512 维，是通过mapping network进行映射得到的，mapping network 由 PixelNorm 层与 EqualLinear 层构成。以下代码节选自sg2_model.py： '''mapping network''' layers = [PixelNorm()] for i in range(n_mlp): layers.append( EqualLinear( style_dim, style_dim, lr_mul=lr_mlp, activation=\"fused_lrelu\" ) ) self.style = nn.Sequential(*layers) Z 空间与 W 空间的关系： 在 StyleGAN 中，通常会先将一个 Z 向量映射到 W 空间，然后再将 W 向量输入到生成器网络中生成图像。 Z 空间提供了初始随机噪声，而 W 空间则通过特征解耦提供更多控制图像风格的灵活性。通过对 Z 和 W 之间的映射以及 W 在生成器中的应用，StyleGan 实现了高度可控且具有良好生成效果的图像合成。 损失函数​ 在代码中，stage 1 的损失函数是 global_clip_loss，该损失由三部分组成： 对比学习损失：Mapper 生成的源域 prompts 的特征**（注意，这里的 prompts 特征是与人工初始化的 prompts 的特征做过 element-wise 相加后的特征）**与源域图像特征的余弦相似度组成的对比学习损失； 目标域正则化损失：Mapper 生成的目标域 prompts 的特征与目标域文本标签特征的余弦相似度，这里生成的目标域 prompts 特征同样也是与人工初始化的 prompts 做过加法的。注意该损失有权重 lambda_l。 源域正则化：计算生成的源域prompts与源域标签之间的余弦相似度，由 lambda_src 控制，默认是 0。","s":"训练 stage 1","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#训练-stage-1","p":1234},{"i":1254,"t":"确定目标域生成域需要更新的层​ 在训练的第二阶段进行前向传播时，需要先对目标域生成器（generator_trainable）的所有层进行 unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.ZSSGAN.ZSSGAN.determine_opt_layers，最后 freeze 所有层后再 unfreeze 选择的网络层。 if self.training and self.auto_layer_iters > 0: self.generator_trainable.unfreeze_layers() # unfreeze train_layers = self.determine_opt_layers() # layer to train if not isinstance(train_layers, list): train_layers = [train_layers] self.generator_trainable.freeze_layers() self.generator_trainable.unfreeze_layers(train_layers) # unfreeze 具体选择带更新网络层的策略： 将 W 空间的隐向量送入目标域生成器（SG2Generator）中，并进行反向传播，此时可以通过反向传播后 W 空间隐向量不同维度的更新幅度来衡量不同网络层的影响力，因此选出更新幅度最大的维度就可以确定在 Model Adaption 中需要更新的网络层。 之所以 W 空间编码在 n_latent 维度上的序号就代表着对应的网络层数的序号，是因为 StyleGAN 生成器的结构决定了这一点：StyleGAN 生成器中，W 空间编码的不同维度会被送入生成器网络的不同层，控制这些层的特征映射 (feature mapping)。具体来说，W 空间编码的每个维度会被重复 n_latent 次，作为该层的风格向量 (style vector)，通过 AdaIN (Adaptive Instance Normalization) 层控制该层的特征映射。因此，W 空间编码的第 i 个维度会影响生成器网络中第 i 层的特征映射。当某个维度的 W 值被更新的程度较大时，就意味着该维度对应的层在生成目标图像时起到了重要作用，需要被优化。 损失函数​ stage 2 的损失函数是 CLIP Loss 类中的 clip_directional_loss，该损失函数由两部分组成： edit_direciton：源域生成器与目标域生成器生成的图片在经过 image encdoer 后做 element-wise 的相减，最后除以自身的 L2 Norm 方便后续与 target_direction 计算余弦相似度。 target_direction：Mapper 产生的源域和目标域 prompts 的 text_features 做element-wise相减后，最后初一自身的 L2 Norm 以便后续与 edit_direction 计算余弦相似度。","s":"训练 stage 2","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#训练-stage-2","p":1234},{"i":1256,"t":"测试所用 nada 权重 Google Drive 链接：StyleGAN-NADA Models 参考文献：GAN 的几种评价指标 Inception Score（IS） 评估图像的质量和多样性 质量：把生成的图片 xxx 输入 Inception V3 中，得到输出 1000 维的向量 yyy，向量的每个维度的值对应图片属于某类的概率。对于一个清晰的图片，它属于某一类的概率应该非常大，而属于其它类的概率应该很小。用专业术语说， p(y∣x)p(y|x)p(y∣x) 的熵应该很小（熵代表混乱度，均匀分布的混乱度最大，熵最大）。 多样性： 如果一个模型能生成足够多样的图片，那么它生成的图片在各个类别中的分布应该是平均的，假设生成了 10000 张图片，那么最理想的情况是，1000 类中每类生成了 10 张。转换成术语，就是生成图片在所有类别概率的边缘分布 p(y)p(y)p(y) 熵很大（均匀分布）。 因此，对于 IS 我们需要求的两个量就是 p(y∣x)p(y|x)p(y∣x) 和 p(y)p(y)p(y)。实际中，选取大量生成样本，用经验分布模拟 p(y)p(y)p(y)： p^(y)=1N∑i=1Np(y∣x(i))\\hat{p}(y)=\\frac{1}{N}\\sum_{i=1}^{N}p(y|\\mathbf{x}^{(i)})p^​(y)=N1​∑i=1N​p(y∣x(i)) Inception Score 的完整公式如下： IS=exp⁡(Ex[KL(p(y∣x)∣∣p(y))])IS=\\exp\\left(\\mathbb{E}_x[KL(p(y|x)||p(y))]\\right)IS=exp(Ex​[KL(p(y∣x)∣∣p(y))]) 其中 Ex\\mathbb{E}_xEx​ 表示对所有图像的期望，KL(p(y∣x)∣∣p(y))KL(p(y|x)||p(y))KL(p(y∣x)∣∣p(y)) 表示每张图像的 KL 散度，exp⁡\\expexp 表示取指数。 通常计算 Inception Score 时，会生成 50000 个图片，然后把它分成 10 份，每份 5000 个，分别代入公式计算 10 次 Inception Score，再计算均值和方差，作为最终的衡量指标（均值±方差）。但是 5000 个样本往往不足以得到准确的边缘分布 p(y)p(y)p(y)，尤其是像 ImageNet 这种包含 1000 个类的数据集。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 IS 分别为 (2.2960, 0.2042) 以及 (2.6420, 0.1959)。 Fréchet Inception Distance（FID） 评估目标域的风格 计算 IS 时只考虑了生成样本，没有考虑真实数据，即 IS 无法反映真实数据和样本之间的距离，IS 判断数据真实性的依据，源于 Inception V3 的训练集 ImageNet，在 Inception V3 的“世界观”下，凡是不像 ImageNet 的数据，都是不真实的，都不能保证输出一个 sharp 的 predition distribution。因此，要想更好地评价生成网络，就要使用更加有效的方法计算真实分布与生成样本之间的距离。 FID 距离计算真实样本，生成样本在特征空间之间的距离。首先利用 Inception 网络来提取特征，然后使用高斯模型对特征空间进行建模，再去求解两个特征之间的距离，较低的 FID 意味着较高图片的质量和多样性。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 FID 分别为 84 以及 58。 Single Image Fréchet Inception Score（SIFID） FID 测量生成的图像的深层特征分布与真实图像的分布之间的偏差。在 ICCV 2019 Best Paper 中提出了 SIFID，只使用一张真实目标域的图像。与 FID 不同，SFID 不使用 Inception Network 中最后一个池化层之后的激活矢量（每个图像一个向量），而是在第二个池层之前的卷积层输出处使用深层特征的内部分布（feature map 中每个位置一个向量）。最终 SIFID 是真实图像和生成的样本中这些特征的统计数据之间的 FID。 Structural Consistency Score（SCS） 评估图像的结构保存能力 Identity Similarity（ID） 评估图像的特征保存能力 定量分析结果​ IS（Inception Score）↑ 数据集 源域→目标域 NADA IPL IPL* FFHQ Photo→Disney 2.296 2.642 2.701 FFHQ Photo→Anime Painting 2.320 2.464 2.578 FFHQ Photo→Wall painting FFHQ Photo→Ukiyo-e 2.489 2.715 2.851 FFHQ Photo→Pixar character FFHQ Photo→Tolkien elf FFHQ Photo→Werewolf 2.173 2.482 2.517 AFHQ Photo→Cartoon AFHQ Photo→Pointillism AFHQ Photo→Cubism SFID（Single Fréchet Inception Distance）↓ 数据集 源域→目标域 NADA IPL IPL* FFHQ Photo→Disney 84 58 54 FFHQ Photo→Anime Painting FFHQ Photo→Wall painting FFHQ Photo→Ukiyo-e FFHQ Photo→Pixar character FFHQ Photo→Tolkien elf FFHQ Photo→Werewolf AFHQ Photo→Cartoon AFHQ Photo→Pointillism AFHQ Photo→Cubism","s":"定量分析指标","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#定量分析指标","p":1234},{"i":1259,"t":"新增了对自定义图像进行风格迁移的功能。 HyperStyle 中的 e4e encoder 将自定义的真实图像编码至 StyleGAN2 中的 W 空间生成 latent codes，再将其分别输入至源域生成器以及目标域生成器以代替原始的从正态分布中 sample 出的随机向量生成的 w_codes，从而得到相应的图片。其中 e4e encoder 来源于 HyperStyle 提供的预训练 checkpoint。 使用方法：运行 inference.py，设置对应的参数，如生成器以及 e4e encoder 的路径、图像路径等，最后运行即可。 修改日志​ 第一次尝试只加载了 w_encoder 类及其对应 checkpoint 参数，导致并未将真实图片编码到 StyleGAN 的 W 空间中，没有 inversion 出合理的结果。 第二次尝试使用了 restyle_e4e_encoder，但是没有使用 dlib 进行 alignment，也没有使用 restyle 模型在反演时使用的多次进行前向传播来修正 latent code 的策略。此次尝试虽然反演出了合理的人像，但是人像的特征保存能力非常弱。 第三次尝试解决了上一次发现的问题，加入 dlib 提供的 landmark 检测以实现 alignment，并且使用 run_loop 函数在 restyle_e4e_encoder 中进行多次前向传播以修正得到的 W 空间的 latent code，效果较好。 对比 pSp 和 e4e encoder，pSp 对人脸图像的还原能力较强，但是会导致目标域图像具有随机的彩色光晕。","s":"支持自定义图像的风格迁移","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#支持自定义图像的风格迁移","p":1234},{"i":1261,"t":"参考 MIT 开源项目 pytorch-deployment 进行生成模型的 Web UI 部署。参考项目使用的是 StarGANv2 模型，对其进行优化使得其可以部署 StyleGAN 模型。 分别对人像和宠物图像生成了两个单独的卡片和 HTML 网页，网页可以完成两种功能： 使用参考图像进行零样本跨域适应，同时可以在网页下拉框中选择预期的目标域风格（由于没有合适的 restyle encoder，宠物图像不支持选择参考图像） 直接使用随机数生成源域图像并进行零样本跨域适应 UI 独立代码可以参考本人仓库 stylegan-ui，但功能有限，完整的 UI 代码已经合并到主程序中，请参考 ./web_ui 中的具体代码。 部分效果展示图​ 主页： 人物画像的零样本域适应（初始状态）： 人物画像的零样本域适应（使用参考图像生成状态）： 宠物画像的零样本域适应（初始状态）： 宠物画像的零样本域适应（使用随机数生成状态）：","s":"Web UI","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#web-ui","p":1234},{"i":1264,"t":"Mapper 的作用是从 W 空间的隐式代码中学习出符合源域图片特征以及符合目标域文字特征的 prompts。 改进后的 Mapper 结构： class TransformerMapperV2(nn.Module): \"\"\" 改良版transformer mapper，增加多头注意力，减小transformer encoder的层数，防止学习到的源域图像细节过拟合 同时去掉开头的PixelNorm，防止与transformer中的layer normalization冲突 并在transformer encoder之后加入Pixel Norm以及全连接层 \"\"\" def __init__(self, opts, n_dim): super(TransformerMapperV2, self).__init__() self.opts = opts self.n_dim = n_dim layers = [] # transformer中有layer normalization，不需要进行PixelNorm # 自定义Transformer编码器层配置 transformer_layer = TransformerEncoderLayer(d_model=512, nhead=4, dim_feedforward=1024, dropout=0.1) # 构建Transformer编码器 self.transformer_encoder = TransformerEncoder(transformer_layer, num_layers=2) layers.append(self.transformer_encoder) # 再过一次PixelNorm以及全连接层，将每个点归一化（除以模长），避免输入noise的极端权重，改善稳定性 layers.append(PixelNorm()) self.linear = EqualLinear(512, 512, lr_mul=0.01, activation='fused_lrelu') layers.append(self.linear) # 最后一个全连接层，输出维度保持不变 self.final_linear = EqualLinear(512, n_dim * opts.n_ctx, lr_mul=0.01, activation='fused_lrelu') layers.append(self.final_linear) self.mapping = nn.Sequential(*layers).to(device)","s":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1234},{"i":1266,"t":"在 IPL 的官方代码实现中，人工设计的 prompts 有两处，一是 ctx_init，由命令行参数赋值，即 \"a photo of a\"，另一处是 utils/text_templates.py 中的 templates，下面分别分析这两处的具体作用。 ctx_init 的作用（与域标签拼接后的 ctx_init）​ ctx_init 在 compute_text_features 函数中用于定位 eot 层符号所表示的维度来进行投影，使得文字特征与图像特征维度相同，并不参与 text_features 的实际计算。但是在该函数中，Mapper 输出的 image-specific prompts 已经与域标签的嵌入表示进行了 concat。 在 stage 1 训练 Mapper 损失函数中，Mapper 学习到的 image-specfic prompts 在与源域标签进行 concat 并得到文字编码后，会与 ctx_init 的文字编码进行 element-wise 的相加，最后再与源域生成器输出的图片的图像编码进行对比损失计算； 同理，在 stage 2 训练目标域生成器时，Mapper 输出的 image-specific prompts 在分别与源域、目标域标签 concat 后送入文字编码器得到文字特征，再与 ctx_init 的文字特征进行 element-wise 相加，最后二者相减得到 text_direction。 templates 的作用​ templates 是提前准备好的一系列字符串，其中字符串的格式全部类似于 a photo of a {}. 原始 hhfq 数据集的模板共有 79 个字符串。 与 ctx_init 起作用的函数不同，templates 在第一阶段的训练的 domain regularization loss 中使用到的 get_text_features 函数起作用，用于与目标域标签进行格式化连接后成为 image-specific prompts 向目标域靠近的方向。即 domain loss 使学习到的 prompts 向以目标域标签为中心的字符串对齐。 思考​ IPL 方法对 Mapper 学习到的 prompts 除了（1）使用对比学习使 prompts 学习到源域图片的特征以及（2）使用域正则化使得 prompts 向目标域标签对齐之外，并没有使用其他与人工设计的 prompts 有关的正则化方式来约束 prompts 的学习，因此人工设计的 prompts 可能并没有起到太大的约束作用。 如果对比学习损失是为了让 Mapper 自监督学习到图片的特征外，那么是否可以对域正则化损失进行改进，约束学习到的 prompts 向人工设计的初始化 prompts 对齐，以实现类似于 Stable Diffusion 类似的 prompts 控制图像生成的效果。","s":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1234},{"i":1268,"t":"对第一阶段的损失函数做出修改，更新domain loss，将原始 domain loss 中使用的以目标域标签为中心的模板更换成自定义模板，使目标域的image-specific prompts与自定义模板对齐。 经过多次实验和分析，刻意让 Mapper 输出的image-specific prompts 去逼近用户设置的 prompts，会产生一些隐式细节的丢失。因为 Mapper 本身存在的目的就是学习出人工无法准确描述的细节（包括源域图像的自身细节以及目标域风格的细节），如果对 Mapper 的损失函数中加上太多人为设计的限制，很显然会造成细节的丢失并且出现同质的现象。 因此，为了达到既使用精心设计的 prompts 来优化域适应，同时又不影响 Mapper 自主学习双域特征，在原有两个损失函数的基础上，新增一个权重较小的损失函数，用于将 Mapper 学习到的目标域 prompts 向自定义模板对齐。 用于生成 prompts 的 GPT、Claude prompts​ 中文提示词： 针对将普通人像转换成迪士尼风格人物画像的任务，给出60个描述迪士尼人像特有特征的文字prompt。 将上述生成的60个prompts放在同一个Python列表中，即每一个prompt作为该列表的字符串元素，输出整个Python列表。 英文提示词： For the task of converting a {source class} photo into a {target_class} photo, provide some text prompts describing the distinctive features of Disney character portraits. Put the generated 60 prompts into the same Python list, with each prompt as a string element of the list, and output the entire Python list. 对 global_clip_loss 的改进​ IPL 训练第一阶段的损失函数除了源域 prompts 与源域图像之间的对比学习损失函数外，还有将目标域 prompts 与目标域标签计算余弦相似度的 domain regularization。 对 domain regularization 进行改进，引入开发者自定义的 prompts，约束 Mapper 学习到的目标域 prompts 向开发者自定义的 prompts 对齐，以此来进行 prompt tuning，发挥 prompt learning 的更大优势，并增强自定义性。 对 clip_directional_loss 的改进​ IPL 训练第二阶段的损失函数，使用 criteria.clip_loss.CLIPLoss.clip_directional_loss。","s":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/代码实现/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1234},{"i":1270,"t":"tip 输入：shape为[5,5,3][5, 5, 3][5,5,3]的图像 输出要求：shape为[5,5,4][5, 5, 4][5,5,4]的feature map 使用3×33 \\times 33×3卷积核，padding=1,stride=1padding=1, stride=1padding=1,stride=1","s":"深度可分离卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"","p":1269},{"i":1272,"t":"卷积层共4个filter（输出通道为4），每个filter3个kernel（输入通道为3） 其中，每个filter都对输入图像的所有通道完成一次卷积，filter中的kernel分别对输入的通道进行具体卷积运算 不考虑卷积偏置，参数量为 3×3×3×4=108(1)3 \\times 3 \\times 3 \\times 4 = 108 \\tag{1}3×3×3×4=108(1)","s":"常规卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#常规卷积","p":1269},{"i":1274,"t":"使用1个filter，其中包含3个kernel。每个kernel分别对输入图像的3个通道单独进行卷积，参数量为 3×3××3=27(2)3 \\times 3 \\times \\times 3 = 27 \\tag{2}3×3××3=27(2) 代码实现也较为简单，只需令Conv2d的输出通道与输入通道相同即可","s":"逐通道卷积-Depthwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#逐通道卷积-depthwise-convolution","p":1269},{"i":1276,"t":"使用1×11 \\times 11×1卷积核，每个filter对上一步的feature map在深度方向进行一次加权组合，参数量为 1×1×3×4=12(3)1 \\times 1 \\times 3 \\times 4 = 12 \\tag{3}1×1×3×4=12(3) tip 图片源自知乎","s":"逐点卷积-Pointwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#逐点卷积-pointwise-convolution","p":1269},{"i":1280,"t":"σ(x)=11+e−x(1)\\sigma(x) = \\frac{1}{1 + e^{-x}} \\tag{1}σ(x)=1+e−x1​(1)dσdx=σ (1−σ)(2)\\frac{{\\rm d}\\sigma}{{\\rm d}x} = \\sigma \\space (1 - \\sigma) \\tag{2}dxdσ​=σ (1−σ)(2) 优点：可以将数据压缩至[0, 1)区间内，有较大实用意义 致命问题：在输入值较小或较大时，Sigmoid函数的梯度趋近于零，会导致网络参数长时间得不到更新，即梯度弥散问题 from torch.nn import functional as F import torch x = torch.linspace(-100, 100, 10) F.sigmoid(x) # 当x为100时，sigmoid(x)就接近于0了","s":"Sigmoid函数 / Logistic函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#sigmoid函数--logistic函数","p":1277},{"i":1282,"t":"f(x)={0x<0xx≥0(3) f(x) = \\begin{cases} 0 & x < 0\\\\ x & x \\geq 0\\\\ \\end{cases} \\tag{3}f(x)={0x​x<0x≥0​(3)df(x)dx={0x<01x≥0(4) \\frac {{\\text d}f(x)}{{\\text d}x} = \\begin{cases} 0 & x < 0\\\\ 1 & x \\geq 0\\\\ \\end{cases} \\tag{4}dxdf(x)​={01​x<0x≥0​(4) from torch.nn import functional as F import torch x = torch.linspace(-100, 100, 10) F.relu(x)","s":"线性整流单元（Rectified Linear Unit, ReLU）","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#线性整流单元rectified-linear-unit-relu","p":1277},{"i":1285,"t":"L2范数是对元素求平方和后再开根号，需要.pow(2)后才可作为损失函数 微小的误差可能对网络性能带来极大的影响 LossMSE=∑[y−f(x)]2(5)Loss_{MSE} = \\sum{[{y - f(x)]^2}} \\tag{5}LossMSE​=∑[y−f(x)]2(5) ∥y−f(x)∥2=∑[y−f(x)]22(6)\\Vert y - f(x) \\Vert_2 = \\sqrt[2]{\\sum{[y - f(x)]^2}} \\tag{6}∥y−f(x)∥2​=2∑[y−f(x)]2​(6)","s":"Mean Squared Error 均方误差","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#mean-squared-error-均方误差","p":1277},{"i":1287,"t":"信息熵​ Cross Entropy中的Entropy指的是信息熵，可以理解为不确定性。衡量一个概率分布本身的不确定程度。 It's a measure of surprise, higher entrpoy means less information and higher uncertainty. 假设一个离散型随机变量XXX的可能取值为X=x1,x2,...,xnX=x_1,x_2,...,x_nX=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率为PiP_iPi​，则其信息熵的定义为 H(P)=−∑inPi log2(Pi)=∑inPi log2(1Pi)\\begin{align} H(P) &= -\\sum_i^n{P_i}\\space{log_2(P_i)} \\\\ &= \\sum_i^n{P_i}\\space{log_2({\\frac{1}{P_i}}}) \\tag{7} \\end{align}H(P)​=−i∑n​Pi​ log2​(Pi​)=i∑n​Pi​ log2​(Pi​1​)​(7)​ KL散度​ 在概率论或信息论中，KL散度( Kullback–Leibler Divergence)，又称相对熵（relative entropy)，是描述两个概率分布P和Q差异的一种方法。 存在两个概率分布P和Q，其离散型随机变量XXX的可能取值为X=x1,x2,...,xnX=x_1,x_2,...,x_nX=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率分别为Pi,QiP_i,Q_iPi​,Qi​. KL散度是非对称的，即 DKL(P ∣∣ Q)≠DKL(Q ∣∣ P)(8)D_{KL}(P \\space || \\space Q) \\neq D_{KL}(Q \\space || \\space P)\\tag{8}DKL​(P ∣∣ Q)=DKL​(Q ∣∣ P)(8)DKL(P ∣∣ Q)=∑Pi [log2(Pi)−log2(Qi)](9)D_{KL}(P \\space || \\space Q) = \\sum{P_i\\space [log_2(P_i)-log_2(Q_i)]}\\tag{9}DKL​(P ∣∣ Q)=∑Pi​ [log2​(Pi​)−log2​(Qi​)](9) 特别的，DKL(PLabel ∣ QPred)D_{KL}(P_{Label} \\space | \\space Q_{Pred})DKL​(PLabel​ ∣ QPred​)表示当用概率分布Q来拟合真实分布P时，产生的信息损耗，其中P表示真实分布，Q表示P的拟合分布。 交叉熵​ 衡量两个概率分布P和Q之间的不确定性程度。交叉熵的数学表达为 H(P, Q)=H(P)+DKL(P ∣∣ Q)=−∑Pi log2(Qi)\\begin{align} H(P, \\space Q) &= H(P) + D_{KL}(P\\space || \\space Q) \\\\ &= - \\sum{P_i}\\space{log_2({Q_i})} \\tag{10} \\end{align}H(P, Q)​=H(P)+DKL​(P ∣∣ Q)=−∑Pi​ log2​(Qi​)​(10)​ PyTorch中的CrossEntropyLoss​ torch.nn.CrossEntropyLoss相当于torch.softmax + torch.log + torch.nn.nllloss. import torch.nn as nn # 使用NLLLoss实现 nllloss = nn.NLLLoss() predict = torch.Tensor([[2, 3, 1], [3, 7, 9]]) predict = torch.log(torch.softmax(predict, dim=-1)) label = torch.tensor([1, 2]) nllloss(predict, label) # output: tensor(0.2684) # 使用CrossEntropyLoss实现 cross_loss = nn.CrossEntropyLoss() predict = torch.Tensor([[2, 3, 1], [3, 7, 9]]) label = torch.tensor([1, 2]) cross_loss(predict, label) # output: tensor(0.2684)","s":"Cross Entropy Loss 交叉熵损失","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#cross-entropy-loss-交叉熵损失","p":1277},{"i":1290,"t":"AlexNet是指2012年由Alex Krizhevsky、Ilya Sutskever和Geoffrey Hinton提出的一种卷积神经网络模型，它主要应用于图像分类任务。在当时，AlexNet的表现远远超过了其他参赛的网络模型，并且在ImageNet比赛中获得了第一名。 标志着新的一轮神经网络热潮的开始","s":"背景","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#背景","p":1288},{"i":1292,"t":"ReLU激活函数 Dropout正则化、丢弃法 最大池化MaxPooling","s":"新的概念和技术","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#新的概念和技术","p":1288},{"i":1294,"t":"由于输入的图片更大，设置了更大的卷积核尺寸和步长 更大的池化窗口，使用最大池化 在卷积层中设置了更大的输出通道，提取更深层的特征、识别更多的模式 激活函数从Sigmoid改成了ReLU，减缓梯度消失 在卷积层和输出层之间仍使用两个全连接隐藏层，但在输出层之前增加了Dropout层做正则化 使用了数据增强data augmentation","s":"与LeNet比较","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#与lenet比较","p":1288},{"i":1296,"t":"tip 正则化与权重衰退","s":"正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"","p":1295},{"i":1298,"t":"正则化(Regularization)是机器学习中用于控制模型过拟合的一种技术。在模型训练过程中，我们通常要最小化一个损失函数来得到最佳的模型参数。但是当模型过于复杂时，容易出现过拟合现象，即在训练数据上表现很好，但在测试数据上表现很差。这是因为模型过于依赖训练数据的噪声和细节，而忽略了真正的规律。 正则化通过在损失函数中增加一个**惩罚项(Penalty)**来对模型进行约束，防止其过分依赖训练数据。 常见的正则化方法包括L1正则化(硬性限制)、L2正则化(柔性限制)等。 L1正则化会使得一部分参数变为0，从而实现特征选择的效果；L2正则化则会使得模型参数尽量接近0，也就是使得模型更加平滑。在使用正则化时，需要调整正则化强度的超参数，以达到最优的泛化性能。","s":"什么是正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#什么是正则化","p":1295},{"i":1300,"t":"min l(w,b) subject to ∥w∥12≤θ(1)min \\space l(w, b) \\space \\text{subject to} \\space \\Vert w \\Vert^2_1 \\leq \\theta \\tag{1}min l(w,b) subject to ∥w∥12​≤θ(1) L1正则化限制权重参数的L1范数小于某一特定的超参数 通常不限制偏移bbb 更小的超参数θ\\thetaθ意味着更强的正则项","s":"L1正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#l1正则化","p":1295},{"i":1302,"t":"L2正则化是指在模型的损失函数中，加入对模型参数的L2范数进行惩罚的一种方法。公式如下所示： l(w,b)+λ2∥w∥12(2)l(w, b) + \\frac{\\lambda}{2} \\Vert w \\Vert^2_1 \\tag{2}l(w,b)+2λ​∥w∥12​(2) 其中，λ\\lambdaλ是一个正则化系数超参数 此时在更新梯度时，具有如下公式 ∂∂w(l(w,b)+λ2∥w∥12)=∂l(w,b)∂w+λw(3)\\frac{\\partial}{\\partial w} \\big(l(w, b) + \\frac{\\lambda}{2} \\Vert w \\Vert^2_1 \\big) = \\frac{\\partial l(w, b)}{\\partial w} + \\lambda w \\tag{3}∂w∂​(l(w,b)+2λ​∥w∥12​)=∂w∂l(w,b)​+λw(3)wt+1=(1−ηλ)wt+η∂l(wt,bt)∂wt(4)w_{t+1}=(1-\\eta \\lambda)w_t + \\eta \\frac{\\partial l(w_t, b_t)}{\\partial w_t} \\tag{4}wt+1​=(1−ηλ)wt​+η∂wt​∂l(wt​,bt​)​(4) 通常ηλ<1\\eta \\lambda < 1ηλ<1，因此又叫做权重衰退","s":"L2正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#l2正则化与权重衰退","p":1295},{"i":1305,"t":"K-fold cross-validation is a technique used in machine learning to evaluate the performance of a model. The basic idea behind k-fold cross-validation is to split the dataset into kkk partitions, or folds, and then train and test the model kkk times, using a different fold for testing each time.","s":"What is k-fold cross-validation?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#what-is-k-fold-cross-validation","p":1303},{"i":1307,"t":"In each iteration of k-fold cross-validation, one of the kkk folds is used as the test set, while the remaining k−1k-1k−1 folds are used as the training set. This process is repeated kkk times, with each fold being used exactly once as the test set. The results from each iteration can then be averaged to produce a more accurate estimate of the model's performance.","s":"How does k-fold cross-validation work?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#how-does-k-fold-cross-validation-work","p":1303},{"i":1309,"t":"train set: to train the model and do parameter update validation set: to choose hyperparameter test set: the final test, only used once","s":"Summary","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#summary","p":1303},{"i":1312,"t":"kh=kw=1k_h=k_w=1kh​=kw​=1的卷积不识别空间模式，丢弃了空间信息，只是融合通道 相当于输入形状为HW×ciHW \\times c_iHW×ci​，权重形状为co×cic_o \\times c_ico​×ci​的全连接层","s":"1x1 卷积","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#1x1-卷积","p":1310},{"i":1314,"t":"输入：ci×H×Wc_i \\times H \\times Wci​×H×W 核：co×ci×kh×kwc_o \\times c_i \\times k_h \\times k_wco​×ci​×kh​×kw​ 偏差：co×cic_o \\times c_ico​×ci​ 输出：co×H′×W′c_o \\times H' \\times W'co​×H′×W′ 输出H′以及W′H'以及W'H′以及W′的计算： shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(1)shape_{output} = \\frac{shape_{input}-size_{kernel}+2*padding}{stride}+1 \\tag{1}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(1) 计算复杂度：O(co×ci×H×W×H′×W′)O(c_o \\times c_i \\times H \\times W \\times H' \\times W')O(co​×ci​×H×W×H′×W′) 总结： 输出的通道数是卷积层的超参数 每个输入通道有独立的二维卷积核，所有通道结果相加得到一个输出结果 每个输出通道有独立的三维卷积核","s":"二维卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#二维卷积层","p":1310},{"i":1317,"t":"现代图片具有较大的像素，使用全连接层导致参数爆炸 针对图片的特征提取和模式识别，应具备以下原则： 平移不变性 局部性","s":"卷积的诞生&核心特征","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#卷积的诞生核心特征","p":1315},{"i":1319,"t":"将全连接层的一维输入和输出变换为二维的矩阵，公式如下 其中i,ji,ji,j代表输出神经元的二维索引坐标，h,wh,wh,w代表输入神经元的二维索引坐标 yi,j=∑h,wwi,j,h,w∗xh,w(1)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}} \\tag{1}yi,j​=h,w∑​wi,j,h,w​∗xh,w​(1) 进一步将权重以及输入的索引变形，公式如下 其中a,ba,ba,b的取值可负可正，直到遍历所有权重以及输入神经元，实现全连接 yi,j=∑h,wwi,j,h,w∗xh,w=∑a,bvi,j,a,b∗xi+a,j+b(2)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}} \\tag{2}yi,j​=h,w∑​wi,j,h,w​∗xh,w​=a,b∑​vi,j,a,b​∗xi+a,j+b​(2) 在公式(2)中，当i,ji,ji,j发生变化时，即产生平移，权重也发生平移，不满足平移不变性。 为了解决这一问题，将公式(2)变形为如下 此时参数权值共享，满足了平移不变性 yi,j=∑a,bvi,j,a,b∗xi+a,j+b=∑a,bva,b∗xi+a,j+b(3)y_{i,j}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}} \\tag{3}yi,j​=a,b∑​vi,j,a,b​∗xi+a,j+b​=a,b∑​va,b​∗xi+a,j+b​(3) 再考虑局部性，在进行特征提取以及模式识别时，只需关注周围的局部特征，因此公式(3)中的a,ba,ba,b可缩小范围，并不用来实现全连接，此时a,ba,ba,b代表着卷积核的感受野，即kernel size 此时完成了全连接层到卷积层的转换","s":"重新考察全连接层","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#重新考察全连接层","p":1315},{"i":1321,"t":"对全连接层使用平移不变性和局部性得到卷积层，卷积是特殊的全连接 yi,j=∑a,bva,b∗xi+a,j+b=∑a=−ΔΔ∑b=−ΔΔva,b∗xia,j+b(4)y_{i,j}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}}=\\sum_{a=-\\Delta}^{\\Delta}\\sum_{b=-\\Delta}^{\\Delta}{v_{a,b}*x_{i_a,j+b}} \\tag{4}yi,j​=a,b∑​va,b​∗xi+a,j+b​=a=−Δ∑Δ​b=−Δ∑Δ​va,b​∗xia​,j+b​(4) 卷积层输出形状的计算 shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(5)shape_{output} = \\frac{shape_{input}-size_{kernel}+2*padding}{stride}+1 \\tag{5}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(5)","s":"总结","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#总结","p":1315},{"i":1324,"t":"Logistic Regression直译为逻辑回归，是一种用来解决二分类问题的机器学习方法，用于估计某种事物的可能性。 逻辑回归经过sigmoid函数输出的结果可将其视为probability，而后根据设定的置信度阈值来判断该特征向量对应的标签是1还是0，用以解决二分类问题。","s":"什么是Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#什么是logistic-regression","p":1322},{"i":1326,"t":"线性回归要求因变量是连续性数值变量，而逻辑回归要求因变量是离散的变量。 逻辑回归以线性回归为理论支持，通过Sigmoid函数引入了非线性因素。 线性回归常用MSE函数作为损失函数，而逻辑回归作为分类任务的解决方案通常搭配交叉熵损失函数进行训练。","s":"逻辑回归（Logistic Regression）和线性回归（Linear Regression）","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#逻辑回归logistic-regression和线性回归linear-regression","p":1322},{"i":1328,"t":"从历史角度方面看，逻辑回归在诞生时使用MSE作为损失函数，其目标是让输出的概率更接近于1，与回归任务的目标相似。","s":"逻辑回归到底是回归任务（Regression）还是分类任务（Classification）？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#逻辑回归到底是回归任务regression还是分类任务classification","p":1322},{"i":1330,"t":"逻辑回归以及其他分类任务在测试角度上的目标让提高分类准确率acc，但并不会将maximize accuracy作为数学上的训练方法，即在训练过程中不使用与acc有关的损失函数。 逻辑回归中的训练目标（评估函数）与预测目标（评估函数）并不相同，但方向一致。 acc=∑I(predi==yi)len(Y)(1)acc = \\frac{\\sum{I(pred_i==y_i)}}{len(Y)} \\tag{1}acc=len(Y)∑I(predi​==yi​)​(1) 如果在训练过程中以最大化acc为目标，当参数在训练过程中向标签方向更新使得逻辑回归输出的正确类的概率增大时，考虑以下两种情况： gradient = 0 if accuracy unchanged but weights changed: xxxxxxxxxx19 1a = torch.tensor([1, 2, 3])2b = torch.tensor([4, 5, 6])3c = zip(a, b)4for i in c:5 print(i)6'''7(tensor(1), tensor(4))8(tensor(2), tensor(5))9(tensor(3), tensor(6))10'''11a = torch.tensor([[1, 2, 3], [3, 2, 1]])12b = torch.tensor([[4, 5, 6], [6, 5, 4]])13c = zip(a, b)14for i in c:15 print(i)16'''17(tensor([1, 2, 3]), tensor([4, 5, 6]))18(tensor([3, 2, 1]), tensor([6, 5, 4]))19'''python gradient not continuous since the number of correct is not continunous: 当上一轮迭代的输出概率很接近阈值时，下一次迭代的概率提升了很少一点但是仍超过了阈值，且一个batch中有大量样本均存在这种情况，此时acc有显著提升而网络的权重的更新极小，此时，与acc有关的Loss函数对权重求导得到的梯度会出现梯度爆炸或者说不连续的情况。","s":"为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数","p":1322},{"i":1333,"t":"感知机是一种二元线性分类模型，旨在寻找一个超平面（在二维空间中即为一条直线），将不同类别的实例划分到不同的区域。感知机的训练过程包括迭代地对样本进行分类，并根据分类错误的情况调整超平面的参数，使得分类准确率逐步提高。感知机是基础的机器学习算法之一，其思想和方法对神经网络等更复杂的模型也具有启发意义。","s":"什么是感知机","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#什么是感知机","p":1331},{"i":1335,"t":"输入向量：感知机的输入向量是一个n维向量x=(x1,x2,...,xn)x=(x_1,x_2,...,x_n)x=(x1​,x2​,...,xn​)，表示一个样本的各个特征值。 权值向量：感知机的权值向量也是一个n维向量w=(w1,w2,...,wn)w=(w_1,w_2,...,w_n)w=(w1​,w2​,...,wn​)，表示每个特征对应的权重。 偏置项：偏置项bbb是一个常数，可看作是模型的截距，用于调整阈值函数的位置。 内积运算：感知机将输入向量和权值向量进行内积运算，并加上偏置项，得到输入信号z=w∗x+bz=w*x+bz=w∗x+b。 阈值函数：将输入信号zzz带入阈值函数，如符号函数sign(z)sign(z)sign(z)，即可得到分类结果。 损失函数：感知机使用误分类点到超平面的距离来作为损失函数，即 L(y,z)=max(0,−y∗z)(1)L(y,z)=max(0,-y*z) \\tag{1}L(y,z)=max(0,−y∗z)(1) 其中yyy是样本的真实标签，zzz是预测值。 参数更新：根据当前样本误分类情况来对权值向量www和偏置项bbb进行迭代更新。 收敛条件：当全部训练样本被正确分类或达到最大迭代次数时，感知机算法停止迭代。 感知机训练流程伪代码如下所示： initialize w = 0 and b = 0 repeat if yi * zi <= 0 then w = w + yi * xi and b = b + yi end if until all classified correctly","s":"详细原理","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#详细原理","p":1331},{"i":1337,"t":"感知机是一个二分类模型，最早的AI模型之一 求解算法等价于使用批量大小为1的梯度下降 要求数据集线性可分，不能拟合XOR异或等非线性问题，导致第一次AI寒冬","s":"总结","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#总结","p":1331},{"i":1340,"t":"卷积层会对输入的局部区域进行卷积操作，因此对于输入图像中的每个位置都会产生一个响应。然而，在某些情况下，我们并不关心输入图像中每个位置的细节，而只是想获取该区域的一些重要特征。 假设我们想分类一张猫的图片，那么我们可能只需要提取出它的眼睛、鼻子、嘴巴和耳朵等特征，而不必考虑这些特征在图像中的精确位置。","s":"卷积对像素位置信息是敏感的","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#卷积对像素位置信息是敏感的","p":1338},{"i":1342,"t":"池化层通过对输入的局部区域进行降采样操作，减少了特征图的大小，从而使得模型对于输入位置的微小变化更加鲁棒。例如，如果我们将一个对象稍微平移一点，它依然可以被正确地识别，因为池化层可以保留输入图像的关键特征，而忽略掉微小的位置变化。 但是需要注意的是，当池化的步幅和池化区域的大小过大时，会导致模型丢失较多的细节信息，从而影响模型性能。因此，在实际应用中，需要根据具体任务来选择适当的池化参数。 缓解卷积层对位置的敏感性，提高鲁棒：池化操作通常用于卷积层之后，使模型对于输入位置的微小变化更加鲁棒，减少图像中的噪声和冗余信息 减小特征图大小：池化操作会通过在特定位置上合并特征值来缩小输入特征图的空间大小，降低计算开销。 减少参数数量：池化操作减小了特征图的空间大小，从而也减小了需要训练的权重参数数量，更容易训练和优化。","s":"池化层的作用","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#池化层的作用","p":1338},{"i":1344,"t":"池化层将输入特征图分割成若干个区域，然后对每个区域进行汇聚操作，将该区域内的特征值合并成一个值。这个操作可以使用不同的方法实现，如最大值池化、平均值池化等。 最常见的是最大值池化，其中每个区域的输出值是该区域内特征值的最大值，这样可以保留图像中最显著的特征，同时减少噪声和冗余信息的影响。","s":"池化的实现","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#池化的实现","p":1338},{"i":1347,"t":"concat与stack函数 stack函数对输入的两个张量在指定的维度进行堆叠，是创建了新的维度 concat函数对输入的张量在指定维度进行拼接，没有创建新的维度 # stack和concat函数 a = torch.rand(4, 3) # A班4位同学，每位同学3科成绩 b = torch.rand(4, 3) # B班4位同学，每位同学3科成绩 c = torch.stack((a, b), dim=0) # 理解：年级所有同学的3科成绩（假设年级只有A班和B班两个班，每个班只有四名同学） print(c.shape) # torch.Size([2, 4, 3]) d = torch.concat((a, b), dim=1) # 理解：a是A班4位同学3科成绩，b是这4名同学其他3门课的成绩，拼接后代表这4名同学的6科成绩 print(d.shape) # torch.Size([4, 6]) list和tensor乘法不同之处 list的*乘法是复制元素，改变list的shape tensor的*乘法是对tensor中的元素进行点乘计算 a = torch.tensor([[3, 3, 3, 3]]) b = [3] # list的*乘是复制元素进行扩展 print(a * 3) # tensor([[9, 9, 9, 9]]) print(b * 3) # [3, 3, 3] 最大值 / 最小值索引：argmax / argmin 需要通过参数dim指定操作的维度，dim的理解 官方解释：The dimension to reduce 以二维张量举例，dim=1即在每一行中选出一个最大值 / 最小值元素的索引，索引的shape应为[dim0, 1]，即reduce了dim=1的维度 # 最大值最小值索引 a = torch.tensor([[0.1, 0.9, 0.3], [0.9, 0.8, 0.99], [0.1, 0.7, 0.8], [0.88, 0.1, 0.2]]) # [4, 3] print(\"argmax output: \", a.argmax(dim=0), a.argmax(dim=1)) # argmax output: tensor([1, 0, 1]) tensor([1, 2, 2, 0]) Python zip函数 zip函数可以理解为压缩，将输入的两个迭代器的最外层对应元素压缩为一个新的元素 a = torch.tensor([1, 2, 3]) b = torch.tensor([4, 5, 6]) c = zip(a, b) for i in c: print(i) ''' (tensor(1), tensor(4)) (tensor(2), tensor(5)) (tensor(3), tensor(6)) ''' a = torch.tensor([[1, 2, 3], [3, 2, 1]]) b = torch.tensor([[4, 5, 6], [6, 5, 4]]) c = zip(a, b) for i in c: print(i) ''' (tensor([1, 2, 3]), tensor([4, 5, 6])) (tensor([3, 2, 1]), tensor([6, 5, 4])) '''","s":"常用函数部分","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","h":"#常用函数部分","p":1345},{"i":1349,"t":"相关链接 论文：arXiv 参考资料： Transformer模型详解（图解最完整版） 【機器學習2021】Transformer (下) Transformer是Sequence-to-Sequence (Seq2Seq) 模型，模型的输入是向量序列，输出同样是向量序列，且输出的长度由模型经过学习决定。","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"","p":1348},{"i":1351,"t":"Transformer由Encoder和Decoder组成，编码器和解码器都包含6个Block，整体结构如下图所示。","s":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#整体结构","p":1348},{"i":1354,"t":"Transformer Encoder结构如下图所示。其中，Add指的是残差连接Residual Connection，Norm指的是Layer Normalization。","s":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#整体结构-1","p":1348},{"i":1356,"t":"对于输入的句子，对一个词汇的嵌入向量的奇数维度使用sine函数进行编码，对偶数维度使用cosine函数计算编码。 公式如下所示，其中pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel​次位置编码。 PE(pos,2i)=sin(pos100002i/dmodel)(1)PE_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{1}PE(pos,2i)​=sin(100002i/dmodel​pos​)(1)PE(pos,2i+1)=cos(pos100002i/dmodel)(2)PE_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{2}PE(pos,2i+1)​=cos(100002i/dmodel​pos​)(2) 根据三角函数的性质，对于pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1维度的线性组合，使得位置向量中蕴含了相对位置的信息。 PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)(3)\\begin{array}{l}PE(pos+k,2i)=PE(pos,2i)\\times PE(k,2i+1)+PE(pos,2i+1)\\times PE(k,2i)\\\\PE(pos+k,2i+1)=PE(pos,2i+1)\\times PE(k,2i+1)-PE(pos,2i)\\times PE(k,2i)\\end{array} \\tag{3}PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)​(3) 最终，位置编码向量的维度与词汇的嵌入维度相同，进行element-wise的相加操作。 InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i) \\tag{4}InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)","s":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":1348},{"i":1358,"t":"输入向量由Word Embedding和Positional Embedding相加得到。输入序列经过Mutil-Head Self-Attention之后，通过Residual Connection加上自身的输入向量，再经过Layer Normalization，之后送入FCN并进行Residual Connection加上送入FCN的输入自身，最终再进行Layer Normalization，以上构成了一个Encoder Block。每一个Block输出的向量序列长度等于输入的向量序列长度。","s":"具体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#具体结构","p":1348},{"i":1360,"t":"Decoder的任务是生成输出，可以根据是否一次性生成输出分为Autoregressive（自回归，abbr. AT）以及Non-Autoregressive（非自回归，abbr. NAT）两种模式。 自回归类型的Decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token作为下一次的输入，通常每次生成一个词或一个符号。这种方式的缺点是需要保存和更新词表中的所有可能选项，因此在大词汇表上可能会变得非常慢。然而，它的优点是能够利用上下文信息来生成输出，这有助于提高翻译的质量。 非自回归类型的Decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。NAT的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于AT。","s":"Decoder","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#decoder","p":1348},{"i":1362,"t":"整体结构​ 词汇表（Vocabulary）​ 词汇表（Vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（NLP）中，词汇表是训练模型时所使用的唯一单词的集合，由具体的生成任务而确定。 Decoder每一步的输出是一个经过Softmax的Probability Distribution（概率分布），代表着词汇表中每一个词汇当前生成的概率，取最大概率值的词汇便是模型当前时间步输出的词汇。 Begin符号​ 解码器（Decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（Encoder）的输出。特别地，首个时间步的输入是Begin符号以及编码器（Encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（Encoder）的输出，直到生成序列的结束。 特殊符号 Begin符号是在Lexicon中添加的特殊符号，用来表示Decoder生成的开始。Begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（Embedding Layer）学习得到的，在嵌入层中，离散的符号被映射到一个实数向量。 Begin符号又叫Start符号或SOS符号（Start Of Sentence），都是表示生成的开始。End符号又叫EOS符号（End Of Sentence）。 End符号​ 在Decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过Softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向Decoder的输出中加入End符号的生成，即每一次输出除了词汇表的所有词汇外还有End符号的概率，当End符号是在所有词汇中概率最大的词汇时，生成停止。 掩码多头自注意力机制（Masked Multi-Head Self-Attention）​ 为什么使用掩码多头自注意力 掩码多头自注意力与Transformer训练时采取的Teacher Forcing策略有很大的关系，具体分析见下文《Teacher Forcing与Masked Multi-Head Self-Attention》的讨论环节：Teacher Forcing与Masked Multi-Head Self-Attention 观察Decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的Decoder当前时间步之前的所有输出单词经过嵌入后的向量表示。 掩码多头自注意力机制用于确保在生成序列的过程中，每个位置只能关注到该位置及其之前的位置。这是通过在Self-Attention的计算中应用一个掩码（mask）来实现的。这确保了在生成序列时，每个位置只能查看到它之前的信息，而不能查看到未来的信息，从而实现了自回归性质。 具体来说，添加掩码后的自注意力机制在生成注意力分数时不再考虑输入序列的所有向量。如在输入向量aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot product，而不考虑aia^iai之后的输入的key。 tip 对于第sss个时间步，Masked Mutil-Head Self-Attention的输入是时间步sss之前Decoder生成的所有输出单词的嵌入表示。 交叉注意力（Cross-Attention）​ 交叉注意力是连接Encoder和Decoder的桥梁，也是Decoder输入的重要组成部分。 交叉注意力接收两个输入序列，一个来自编码器（Encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（Decoder），是经过掩码多头自注意力机制的输出序列（通常是正在生成的序列的中间表示）。 在交叉注意力中，每次计算注意力得分的query来自解码器，key和value来自编码器。解码器每个向量的查询（Query）与编码器位置的键（Key）进行点积得到了注意力分数，通过Softmax操作后转换为注意力权重，再与编码器位置的值（Value）weighted sum得到加权注意力分数，最终将加权注意力分数求和得到每个输入向量的输出。","s":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":1348},{"i":1366,"t":"在 Transformer 中，Encoder 不像 Decoder 需要生成序列，因此它通常不涉及标签的预测。Encoder 的训练通常是在整个模型中的联合训练中进行的，通过优化整个模型的损失函数来进行。 Transformer 的整体训练过程一般分为以下几个步骤： 编码器（Encoder）的正向传播： 输入序列经过编码器的正向传播，产生一组上下文表示。 解码器（Decoder）的正向传播： 解码器接收上下文表示，并生成目标序列。 计算损失： 通过比较生成的目标序列与实际目标序列，计算损失。在 Decoder 中，通常使用交叉熵损失函数。 反向传播： 根据损失，进行反向传播，更新模型参数。这个过程中，梯度通过整个模型传播，包括 Encoder 和 Decoder。 整个模型的参数（包括 Encoder 和 Decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，Encoder 的表示对于 Decoder 的性能至关重要。在训练过程中，梯度从损失函数传播回整个模型，包括 Encoder 和 Decoder，从而更新它们的参数。 需要注意的是，Transformer 模型通常使用的是端到端的训练方式，整个模型的参数是一次性更新的。在某些场景下，你可能会看到对 Encoder 或 Decoder 进行微调（fine-tuning）的情况，但这是在特定应用场景下的调整，不是 Transformer 模型的标准训练方式。","s":"损失函数","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#损失函数","p":1348},{"i":1368,"t":"在Transformer的推理阶段，自回归类型的Decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入Decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（Error Propagation）。 因此使用Teacher Forcing策略，将Ground Truth一次性喂到Decoder中，使模型更快收敛并且避免误差积累的问题。 但是，自回归Decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用Teacher Forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（Autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入masked掉，防止模型学习到不该学习的注意力。","s":"Teacher Forcing","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#teacher-forcing","p":1348},{"i":1370,"t":"参考文献：MultiHead-Attention和Masked-Attention的机制和原理 与Encoder的多头自注意力不同，在Decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入Teacher Forcing出现的问题，避免了训练与推理阶段的Mismatch，维护了自回归的特性。 具体来说，模拟推理过程中第一个词汇时的场景。当模型只有voc1voc_1voc1​词汇向量输入时，在Decoder中，voc1voc_1voc1​与自身计算注意力分数，于是有 [o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5) 我们再模拟训练过程中使用Teacher Forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2​的情况，于是有 [o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6) 然而，为了使训练过程中符合推理时自回归的特性，理想的输出应该是 [o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7) 继续扩展，当有nnn个输入词汇时，应该有 [o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}​o1​o2​⋮on​​​=​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​​​v1​v2​⋮vn​​​(8) 因此，我们需要将当前时间步计算的词汇的时间顺序右侧的输入词汇全部掩码，置为0。 在源码中，有如下片段实现掩码： if mask is not None: scores = scores.masked_fill(mask == 0, -1e9) p_attn = scores.softmax(dim=-1) 在源码中，将mask置为负无穷是因为这是在经过Softmax之前进行的掩码，在经过Softmax之后负无穷小就变成了0。","s":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/论文笔记/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1348},{"i":1373,"t":"LeNet是由Yann LeCun等人于1998年提出的卷积神经网络结构，该结构由卷积层、池化层和全连接层组成，可以高效地处理手写数字图像，并在MNIST数据集上取得了很好的性能。 LeNet-5的成功标志着卷积神经网络在计算机视觉领域中的崛起，并促进了深度学习的快速发展。","s":"背景","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#背景","p":1371},{"i":1375,"t":"import torch import numpy as np from torch import nn as nn from torch.nn import functional as F from d2l import torch as d2l from matplotlib import pyplot as plt import os os.environ['http_proxy'] = 'http://127.0.0.1:7890' os.environ['https_proxy'] = 'https://127.0.0.1:7890' class LeNetReshape(nn.Module): def __init__(self): super(LeNetReshape, self).__init__() def forward(self, x): return x.reshape(-1, 1, 28, 28) class LeNet5(nn.Module): def __init__(self): super(LeNet5, self).__init__() self.net = torch.nn.Sequential( LeNetReshape(), # 激活函数应为Sigmoid nn.Conv2d(1, 6, kernel_size=5, padding=2), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2), nn.Conv2d(6, 16, kernel_size=5), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2), nn.Flatten(), nn.Linear(16 * 5 * 5, 120), nn.LeakyReLU(), nn.Linear(120, 84), nn.Sigmoid(), nn.Linear(84, 10)) def forward(self, x): return self.net(x) def evaluate_accuracy_gpu(net, data_iter, device=None): if isinstance(net, torch.nn.Module): net.eval() if not device: device = next(iter(net.parameters())).device metric = d2l.Accumulator(2) for X, y in data_iter: if isinstance(X, list): X = [x.to(device) for x in X] else: X = X.to(device) y = y.to(device) metric.add(d2l.accuracy(net(X), y), y.numel()) # 此处accuracy是统计 return metric[0] / metric[1] def accuracy(y_hat, y): return torch.sum(y_hat.argmax(dim=1) == y) def train(net, train_iter, test_iter, num_epochs, lr, device): def init_weights(m): if type(m) == nn.Linear or type(m) == nn.Conv2d: nn.init.xavier_uniform_(m.weight) net.apply(init_weights) net.to(device) optimizer = torch.optim.SGD(net.parameters(), lr=lr) loss = torch.nn.CrossEntropyLoss() loss.to(device) animator = d2l.Animator(xlabel='epoch', xlim=[1, num_epochs], legend=['train loss', 'train acc', 'test acc']) timer, num_batches = d2l.Timer(), len(train_iter) metric = d2l.Accumulator(3) net.train() for epoch in range(num_epochs): for batch, (X, y) in enumerate(train_iter): timer.start() optimizer.zero_grad() X, y = X.to(device), y.to(device) y_hat = net(X) l = loss(y_hat, y) l.backward() optimizer.step() metric.add(l * X.shape[0], accuracy(y_hat, y), y.numel()) timer.stop() train_l = metric[0] / metric[2] train_acc = metric[1] / metric[2] if (batch + 1) % (num_batches // 5) == 0 or batch == num_batches - 1: animator.add(epoch + (batch + 1) / num_batches, (train_l, train_acc, None)) test_acc = evaluate_accuracy_gpu(net, test_iter) animator.add(epoch + 1, (None, None, test_acc)) print(f'loss {train_l:.3f}, train acc {train_acc:.3f}, test acc {test_acc:.3f}') print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(device)}') plt.show() batch_size = 256 train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size) lr, num_epochs = 0.9, 10 lenet = LeNet5() train(lenet, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())","s":"代码实现","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#代码实现","p":1371},{"i":1377,"t":"在分类模型中，最后两个全连接层之间不要使用ReLU激活函数。因为ReLU的范围是[0, +∞)，它会将所有负数都变成0。而最后一层全连接层输出了类别信息，倒数第二层的输出值包含着非常重要的类别信息，此时使用激活函数很可能会导致信息丢失。","s":"问题","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#问题","p":1371},{"i":1379,"t":"原文链接：https://arxiv.org/pdf/2406.11838 参考资料：何恺明：Autoregressive Image Generation without Vector Quantization.","s":"Autoregressive Image Generation without Vector Quantization","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"","p":1378},{"i":1381,"t":"Conventional wisdom holds that autoregressive models for image generation are typically accompanied by vector-quantized tokens. We observe that while a discrete-valued space can facilitate representing a categorical distribution, it is not a necessity for autoregressive modeling. In this work, we propose to model the per-token probability distribution using a diffusion procedure, which allows us to apply autoregressive models in a continuous-valued space. Rather than using categorical cross-entropy loss, we define a Diffusion Loss function to model the per-token probability. This approach eliminates the need for discrete-valued tokenizers. We evaluate its effectiveness across a wide range of cases, including standard autoregressive models and generalized masked autoregressive (MAR) variants. By removing vector quantization, our image generator achieves strong results while enjoying the speed advantage of sequence modeling. We hope this work will motivate the use of autoregressive generation in other continuous-valued domains and applications.","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#摘要","p":1378},{"i":1383,"t":"由于语言先天的离散性质，在自然语言领域的自回归模型都是在离散的隐空间中学习数据的概率分布。因此，当自回归模型推广到连续的数据空间（如图像生成）进行发展时，研究人员将主要的精力放在了如何更有效地将连续数据离散化上，如 VQGAN、VQVAE、VAR、MaskGIT 等。 然而，本文作者从 Autoregressive 模型的性质本身（即根据先前的 token 预测下一个 token）出发进行思考，产生了自回归模型是否有必要与向量量化（Vector Quantization）表示相结合的疑问，作者发现，自回归生成模型与 token 是离散表示的还是连续表示的并没有关系，真正需要解决的问题是如何对每个 token 的概率分布进行建模，同时该概率分布可以通过损失函数来学习和约束（训练），并用于从中进行采样（生成）。","s":"研究动机","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#研究动机","p":1378},{"i":1385,"t":"本文提出的模型融合了目前图像生成领域的三大主流范式的思想，分别为自回归生成、掩码生成以及扩散生成： 模型首先根据自回归模型性质为每个 token 生成条件向量（conditional vector）zzz 之后使用扩散过程建模每个 token 的概率分布 最后结合掩码生成的思想加速训练和推理过程","s":"主要方法与实现","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#主要方法与实现","p":1378},{"i":1387,"t":"具体而言，如下图所示，假设连续值向量 x∈Rdx \\in \\mathbb{R}^dx∈Rd，是当前位置要预测的 token。自回归模型在这个位置产生一个条件向量 z∈RDz \\in \\mathbb{R}^Dz∈RD​​ 。 本文使用 Diffusion Loss 根据 zzz 对 xxx 建模概率分布 p(x∣z)p(x \\mid z)p(x∣z)​ 。 L(z,x)=Eε,t[∥ε−εθ(xt∣t,z)∥2]L(z, x)=\\mathbb{E}_{\\varepsilon, t}\\left[\\left\\|\\varepsilon-\\varepsilon_\\theta\\left(x_t \\mid t, z\\right)\\right\\|^2\\right]L(z,x)=Eε,t​[∥ε−εθ​(xt​∣t,z)∥2] 其中： ε∈Rd\\varepsilon \\in \\mathbb{R}^dε∈Rd 是从 N(0,I)\\mathcal{N}(0, \\mathbf{I})N(0,I) 采样的噪声向量 xt=αˉtx+1−αˉtεx_t=\\sqrt{\\bar{\\alpha}_t x}+\\sqrt{1-\\bar{\\alpha}_t} \\varepsilonxt​=αˉt​x​+1−αˉt​​ε，其中 αˉt\\bar{\\alpha}_tαˉt​ 定义了一个 noise schedule ttt 是 noise schedule 的时间步 噪声预测网络 εθ\\varepsilon_\\thetaεθ​ 由参数 θ\\thetaθ 控制，是一个小型 MLP 网络，εθ(xt∣t,z)\\varepsilon_\\theta\\left(x_t \\mid t, z\\right)εθ​(xt​∣t,z) 表示此网络将 xtx_txt​ 作为输入，并且以 ttt 和 zzz​​​ 作为条件。MLP 网络的具体组成如下所示： 对于扩散过程，作者采用了 cosine 函数作为 noise schedule，在训练过程中设定为 1000 步，在推理过程中设定为 100 步。同时，Diffusion Loss 原生支持 CFG 策略。","s":"Diffusion Loss","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#diffusion-loss","p":1378},{"i":1389,"t":"在推理时，需要从分布 p(x∣z)p(x \\mid z)p(x∣z) 中采样样本。采样是通过逆扩散过程进行的： xt−1=1αt(xt−1−αt1−αˉtϵθ(xt∣t,z))+σtδx_{t-1}=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar{\\alpha}_t}} \\epsilon_\\theta\\left(x_t \\mid t, z\\right)\\right)+\\sigma_t \\deltaxt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​∣t,z))+σt​δ 这里 δ\\deltaδ 是从高斯分布 N(0,I)\\mathcal{N}(0, I)N(0,I) 中采样的， σt\\sigma_tσt​ 是时间步 ttt 的噪声水平。以 xT∼N(0,I)x_T \\sim \\mathcal{N}(0, I)xT​∼N(0,I) 开始，此过程生成一个样本 x0x_0x0​ 使得 x0∼p(x∣z)x_0 \\sim p(x \\mid z)x0​∼p(x∣z)​。","s":"采样","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#采样","p":1378},{"i":1392,"t":"本文为了提高生成速度，结合了 MAE 和 MaskGIT 模型的思想，如下图的 b 和 c 所示，将随机顺序生成的思想和每次预测出一个 patch 的 token 的思想加入到本文的模型中。 掩码信息通过位置编码送入 Decoder 中，使模型在以随机顺序预测序列时获取到 token 的位置信息。","s":"结合掩码生成模型的思想 MAR","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#结合掩码生成模型的思想-mar","p":1378},{"i":1399,"t":"对于 MAR 模型，AR 步数越小，每次预测的一个 patch 的 token 数越大，速度越快，精度越低，默认设置为 64 步。","s":"MAR 模型速度与效果的 trade-off","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#mar-模型速度与效果的-trade-off","p":1378},{"i":1401,"t":"原文链接：https://arxiv.org/pdf/2406.06525","s":"Autoregressive Model Beats Diffusion: Llama for Scalable Image Generation","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"","p":1400},{"i":1403,"t":"We introduce LlamaGen, a new family of image generation models that apply original “next-token prediction” paradigm of large language models to visual generation domain. It is an affirmative answer to whether vanilla autoregressive models, e.g., Llama, without inductive biases on visual signals can achieve state-of-the-art image generation performance if scaling properly. We reexamine design spaces of image tokenizers, scalability properties of image generation models, and their training data quality. The outcome of this exploration consists of: (1) An image tokenizer with downsample ratio of 16, reconstruction quality of 0.94 rFID and codebook usage of 97% on ImageNet benchmark. (2) A series of class-conditional image generation models ranging from 111M to 3.1B parameters, achieving 2.18 FID on ImageNet 256×256 benchmarks, outperforming the popular diffusion models such as LDM, DiT. (3) A text-conditional image generation model with 775M parameters, from two-stage training on LAION-COCO and high aesthetics quality images, demonstrating competitive performance of visual quality and text alignment. (4) We verify the effectiveness of LLM serving frameworks in optimizing the inference speed of image generation models and achieve 326% - 414% speedup. We release all models and codes to facilitate open-source community of visual generation and multimodal foundation models.","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#摘要","p":1400},{"i":1405,"t":"文章首先介绍了在 NLP 领域发展迅猛的 Autoregressive 模型，引出了在视觉领域的 Autoregressive 模型的发展。VQVAE、VQGA、DALL-E 和 Parti 等。同时指出了先前视觉 AR 模型存在开源社区发展不足，限制了 AR 方法继续研究的问题。此外，作者还提到了以 MaskGIT 为代表的 Masked-prediction Model 以及 VAR 方法，但是仍然体现出了与语言 LLMs 流行使用的自回归方法的较大差异。 同时还介绍了与 AR 思想不同的 Diffusion Models，作者指出，由于 DMs 与在 NLP 的 LLMs 常用的自回归思想有较大的差异，因此给语言和视觉的统一带来了很大的挑战。 作者同时总结了图像生成模型的三个要点： 优秀的 image compressor，即 AR 模型所使用的 image tokenizer、quantizer scalable image generation models，即模型的可扩展性（指参数量方面） 高质量的训练数据 可以看出，本文作者从统一语言和视觉两个模态的想法出发，强调与语言 LLMs 统一，而不是在视觉归纳偏置的引导下改进模型的结构，引出了本文的工作。 图像重建能力高、Codebook 利用率高达 97% 的 image tokenizer 基于语言模态中的 SOTA 模型 Llama 的可扩展的图像生成模型 高质量的训练数据，本文提出的文本条件图像生成模型，首先在 LAION-COCO 的 50 million 子集上进行训练，然后在 10 million 高质量图像上进行微调。展示出了视觉质量和文本对齐的竞争性能。 使用 语言模态中常用的 LLM serving framework vLLM 来优化图像生成模型的推理速度。","s":"Motivation 与主要贡献","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#motivation-与主要贡献","p":1400},{"i":1408,"t":"使用了与 VQGAN 相同的 encoder-quantizer-decoder 结构。 作者认为 Codebook 会极大地影响 image tokenization 的表现，因此对 Codebook 做出了以下优化，这种设计极大地增强了图像重建质量和 Codebook 的利用率。 对 Codebook 中的向量施加 l2l_2l2​-normalization，降低 Codebook 中向量的维度 CCC，增加 Codebook 的容量大小 KKK​​。 Codebook 以及 Image Tokenizer 的训练损失函数如下所示。","s":"Image Tokenizer","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-tokenizer","p":1400},{"i":1410,"t":"本文的 Autoregressive Model 的结构主要参考了 Llama 的结构，将语言模态中的 SOTA 模型直接引入至图像生成中，统一语言和视觉模态的操作。同时，这样做的好处是可以让视觉生成模型充分利用语言模态的 LLMs 社区中取得的前沿技术。 使用 RMSNorm 进行归一化，RMSNorm 是对 Layer Normalization 的一种改进。 RMSNorm 使用平方根的均值来归一化，而不是像 LayerNorm 那样使用整个样本的均值和方差。 RMSNorm 移除了 LayerNorm 中的 re-center 操作（即移除了均值项），可以看作 LayerNorm 在均值为 0 时的一个特例。 RMSNorm(x)=x1n∑i=1nxi2∗gRMSNorm(x)=\\frac x{\\sqrt{\\frac1n\\sum_{i=1}^nx_i^2}}*gRMSNorm(x)=n1​∑i=1n​xi2​​x​∗g 其中，xxx 是输入向量，nnn 是向量维度，ggg​ 是可缩放的参数。 RMSNorm 的优势在于其计算简单，尤其是在处理较长序列时，可以更有效地进行归一化。 使用 SwiGLU 激活函数，SwiGLU 结合了 GLU（Gated Linear Unit）和 Swish 函数，引入了门控机制来控制输入信号的传递方式。 组成部分： GLU 部分：使用 sigmoid 函数作为门控器，对输入信号进行筛选和选择性放大。 Swish 部分：非线性函数，类似于 ReLU，但在负值区域有平滑的非线性特性。 SwiGLU(x)=σ(xW1+b1)⊙(xW2+b2)\\mathrm{SwiGLU}(x)=\\sigma(xW_1+b_1)\\odot(xW_2+b_2)SwiGLU(x)=σ(xW1​+b1​)⊙(xW2​+b2​) 其中，xxx 是输入向量，W1,W2W_{1}, W_{2}W1​,W2​ 是权重矩阵，b1,b2b_1, b_2b1​,b2​ 是偏置向量，σ\\sigmaσ 是激活函数，通常为 GELU（高斯误差线性单元），⊙\\odot⊙ 表示逐元素乘法。 SwiGLU 引入两个线性变换和一个门控机制来增强模型的表现力，优点在于通过门控机制对输入进行加权，能够更灵活地捕捉复杂的输入模式。 本文提出的LlamaGen 模型的每一层都使用了 2D RoPE。 RoPE（Rotary Position Embedding）是一种位置编码方法，旨在解决绝对位置编码在处理较长序列时的局限性。RoPE 通过将位置信息引入到输入向量的相位中，增强了模型对相对位置的敏感度。其基本思想是将输入向量按位旋转，旋转角度与位置相关。 RoPE⁡(xi)=xi⋅cos⁡(θi)+xi+1⋅sin⁡(θi)\\operatorname{RoPE}\\left(x_i\\right)=x_i \\cdot \\cos \\left(\\theta_i\\right)+x_{i+1} \\cdot \\sin \\left(\\theta_i\\right)RoPE(xi​)=xi​⋅cos(θi​)+xi+1​⋅sin(θi​) xix_ixi​ 是输入向量的第 iii 个元素。 θi\\theta_iθi​ 是位置 iii 处的旋转角度，通常由固定的正弦和余弦函数生成。 RoPE 的优势在于能够更好地捕捉序列中的相对位置关系，提高模型的长距离依赖能力。 为了与语言模态的 LLMs 保持统一，作者没有使用 AdaLN。 AdaLN（Adaptive Layer Normalization）是一种自适应层归一化方法，旨在为不同的样本动态调整归一化参数。与传统的层归一化方法不同，AdaLN 根据输入数据自适应地调整均值和方差，从而更好地适应不同的输入特征。 AdaLN⁡(x)=x−μ(x)σ(x)⋅γ+β\\operatorname{AdaLN}(x)=\\frac{x-\\mu(x)}{\\sigma(x)} \\cdot \\gamma+\\betaAdaLN(x)=σ(x)x−μ(x)​⋅γ+β xxx 是输入向量。 μ(x)\\mu(x)μ(x) 和 σ(x)\\sigma(x)σ(x) 分别是输入 xxx 的均值和标准差。 γ\\gammaγ 和 β\\betaβ 是可训练的缩放和平移参数。 在 AdaLN 中，均值 μ(x)\\mu(x)μ(x) 和标准差 σ(x)\\sigma(x)σ(x)​ 是通过一个子网络（通常是一个简单的前馈网络）从输入数据中动态预测的。这使得归一化过程更加灵活，能够适应更复杂的输入模式。 LlamaGen 的训练使用了 CFG（Classifier-free Guidance）策略来提高视觉质量和文本-图像对齐。 训练阶段： 在训练期间，条件信息被随机丢弃，并用一个空的无条件嵌入进行替换。这种方法有助于减少模型对特定条件的依赖性，从而改善生成结果的一般化能力。 推理阶段： 对于每个 token，其 logit ℓg\\ell_gℓg​ 是通过以下方式形成的： ℓg=ℓu+s(ℓc−ℓu)\\ell_g = \\ell_u + s(\\ell_c - \\ell_u)ℓg​=ℓu​+s(ℓc​−ℓu​) 其中： ℓc\\ell_cℓc​ 表示条件logit，即基于输入文本提示的信息生成的logit。 ℓu\\ell_uℓu​ 表示无条件logit，即不考虑任何条件信息时生成的logit。 sss 是Classifier-free Guidance的比例因子，用于控制条件logit和无条件logit之间的平衡。 通过这种方式，模型可以利用无条件logit提供的通用信息，同时保留条件logit中的特定上下文信息。这种混合方法有助于提高生成图像的质量和与输入文本的对齐程度。 作者在文章的实验部分给出了使用 CFG 的结果，实验表明，CFG 过高会导致 FID 分数的下降，可以看作是多样性和保真度之间的权衡（trade-off），随着 CFG 的提高，准确率的提高和召回率的降低证明了这点。","s":"Image Generation Autoregressive Model","u":"/en/docs/Deep-Learning/论文笔记/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-generation-autoregressive-model","p":1400},{"i":1412,"t":"相关链接 原文链接：https://arxiv.org/abs/2407.07614 参考资料：自回归扳回一城！阿里等提出MARS：超越PixArt-α、SD-XL等的文本到图像生成框架","s":"MARS: Mixture of Auto-Regressive Models for  Fine-grained Text-to-image Synthesis","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"","p":1411},{"i":1414,"t":"Auto-regressive models have made significant progress in the realm of language generation, yet do not perform on par with diffusion models in the domain of image synthesis. In this work, we introduce MARS, a novel framework for T2I generation that incorporates a specially designed Semantic Vision-Language Integration Expert (SemVIE). This innovative component integrates pre-trained LLMs by independently processing linguistic and visual information—freezing the textual component while fine-tuning the visual component. This methodology preserves the NLP capabilities of LLMs while imbuing them with exceptional visual understanding. Building upon the powerful base of the pre-trained Qwen-7B, MARS stands out with its bilingual generative capabilities corresponding to both English and Chinese language prompts and the capacity for joint image and text generation. The flexibility of this framework lends itself to migration towards any-to-any task adaptability. Furthermore, MARS employs a multi-stage training strategy that first establishes robust image-text alignment through complementary bidirectional tasks and subsequently concentrates on refining the T2I generation process, significantly augmenting text-image synchrony and the granularity of image details. Notably, MARS requires only 9% of the GPU days needed by SD1.5, yet it achieves remarkable results across a variety of benchmarks, illustrating the training efficiency and the potential for swift deployment in various applications. Code will be available at https://github.com/fusiming3/MARS. 自回归模型在语言生成领域取得了显著进展，但在图像合成领域的表现却不如扩散模型。本文介绍了 MARS 方法，一种用于文本到图像生成的新框架。 该框架结合了专门设计的语言-视觉语言集成专家（Semantic Vision-Language Integration Expert，SemVIE）。通过独立处理语言和视觉信息来整合预训练的 LLM，冻结语言部分的同时微调视觉部分。 这种方法保留了 LLM 的自然语言处理能力，同时赋予其卓越的视觉理解能力。 基于强大的预训练模型 Qwen-7B，MARS 在生成能力上脱颖而出，能够处理汉英双语的 T2I 生成任务，并具备联合图像和文本生成的能力。 此外，MARS 采用了多阶段训练策略，首先通过互补的双向任务建立强大的图文对齐，然后专注于精细化文本到图像的生成过程，显著提高了文本和图像的同步性和图像细节的细腻程度。 值得注意的是，MARS 的训练仅需 Stable Diffusion v1-5 训练所需 GPU 天数的 9%，同时在各种基准测试中取得了显著成果，展示了训练效率和在各种应用中快速部署的潜力。","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#摘要","p":1411},{"i":1417,"t":"MARS 是一个将大语言模型（LLM）与视觉生成能力结合在统一框架内的创新系统，体现了一种平衡的多模态架构，包含了独特但协调一致的视觉和语言专家模型，如下图所示。","s":"总体结构","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#总体结构","p":1411},{"i":1419,"t":"分词（Tokenization）​ 在本研究中，预训练的 LLM Qwen-7B 作为基础语言框架，利用其分词器将文本数据拆解为一系列代表性 tokens。同时，在视觉模态中，使用受 VQ-GAN 架构启发的编码器将图像转换为特征图，其中，预定义为量化参数 16，D 表示特征维度。特征图随后使用视觉码本 VQ-GAN 进行量化，将其映射为一系列离散的代码索引 。这个过程有效地将 256×256 像素的图像重构为一系列 256 个 token，其中每个 token 代表 16×16 像素的图像段。值得注意的是，视觉码本由 8192 个唯一编码组成。 在 MARS 的词汇表中，这些视觉组件与传统的文本 token 交织在一起，形成一个综合的多模态词汇表。语言 LLM 的原始词汇表包含 151,936 个条目，结合视觉码本和 6 个专门设计用于表示图像序列开始和结束的特殊 token 后，形成了一个 160,136 大小的多模态词汇表。在 MARS 的架构中，由 VQ-GAN 范式合成的视觉 token 与文本 token 享有同等地位。视觉词汇的初始嵌入是从预训练文本 token 的聚合均值嵌入中得出的，建立了跨模态集成的基础。 语义视觉-语言集成专家​","s":"语义视觉-语言集成专家","u":"/en/docs/Deep-Learning/论文笔记/MARS-Mixture-of-Auto-Regressive-Models-for-Fine-grained-Text-to-image-Synthesis","h":"#语义视觉-语言集成专家","p":1411},{"i":1421,"t":"相关链接 原文链接：https://arxiv.org/pdf/2112.10752 参考资料：Stable Diffusion 原理介绍与源码分析（一、总览）、Stable Diffusion 原理介绍与源码分析（二、DDPM、DDIM、PLMS算法分析）、Latent Diffusion Models 论文解读","s":"CVPR 2022: High-Resolution Image Synthesis with Latent Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"","p":1420},{"i":1423,"t":"By decomposing the image formation process into a sequential application of denoising autoencoders, diffusion models (DMs) achieve state-of-the-art synthesis results on image data and beyond. Additionally, their formulation allows for a guiding mechanism to control the image generation process without retraining. However, since these models typically operate directly in pixel space, optimization of powerful DMs often consumes hundreds of GPU days and inference is expensive due to sequential evaluations. To enable DM training on limited computational resources while retaining their quality and flexibility, we apply them in the latent space of powerful pretrained autoencoders. In contrast to previous work, training diffusion models on such a representation allows for the first time to reach a near-optimal point between complexity reduction and detail preservation, greatly boosting visual fidelity. By introducing cross-attention layers into the model architecture, we turn diffusion models into powerful and flexible generators for general conditioning inputs such as text or bounding boxes and high-resolution synthesis becomes possible in a convolutional manner. Our latent diffusion models (LDMs) achieve new state of the art scores for image inpainting and class-conditional image synthesis and highly competitive performance on various tasks, including unconditional image generation, text-to-image synthesis, and super-resolution, while significantly reducing computational requirements compared to pixel-based DMs.","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#摘要","p":1420},{"i":1426,"t":"基于 GAN 的生成模型可以很好地采样出感知质量（语义质量）很好的高分辨率图像，但优化起来成本很高，而且多样性较差，不能很好地捕捉全面的概率分布 VQVAE、VQGAN 等其它似然模型可以实现较好的密度估计，但是采样质量不如 GAN 模型 Autoregressive 模型由于序列性质的结构，需要较大的计算量和时间成本，因此只能限制于低分辨率采样 近期，扩散模型在密度估计和采样质量上都取得了 SOTA 效果，但直接在像素空间进行扩散过程会导致较低的推理速度以及高昂的训练成本 作者提出，几乎所有基于似然的生成模型都分为两个阶段： 感知压缩阶段（Perceptual Compression Stage）：移除图像中的高频细节，但是仍然学习到少量的语义信息 语义压缩阶段（Semantic Compression Stage）：生成模型学习图像语义以及数据的组成概念 本篇工作主要从感知压缩阶段出发，试图找到一个具有一定的感知能力，但是计算量更合适的空间，来训练 Diffusion Model，以克服目前的 Diffusion Models 存在的缺点","s":"主要问题","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#主要问题","p":1420},{"i":1428,"t":"提出在隐空间（Latent Space）中训练 Diffusion Model，在计算量和细节保真度的平衡之间找到更优解 引入交叉注意力（Cross Attention），使降噪模型可以以文字等其它模态的信息作为条件进行多模态预测噪声","s":"主要贡献","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#主要贡献","p":1420},{"i":1431,"t":"感知压缩本质上是一个在计算量和细节保真度之间的 tradeoff，之前的 Diffusion Model 在像素空间上训练模型，如果期望模型可以采样出一张分辨率很高的图片，需要在高维的空间中训练模型，训练和推理的计算成本和时间成本都很高昂。引入感知压缩就是通过 Autoencoder 对原图片进行处理，忽略掉图片中的高频信息，只保留重要、基础的一些特征。这种方法带来的的好处能够大幅降低训练和采样阶段的计算复杂度，大大降低了文生图等任务的落地门槛。 感知压缩主要利用一个预训练的自编码模型，该模型能够学习到一个在感知上等同于图像像素空间的潜在表示空间（Latent Space）。这种方法的一个优势是只需要训练一个通用的自编码模型，就可以用于不同的扩散模型的训练，在不同的任务上使用。 文章提出的基于感知压缩的 Diffusion Model 是一个两阶段训练的过程，第一阶段需要训练一个 Autoencoder，第二阶段才需要训练扩散模型本身。 在第一阶段训练自编码器时，为了避免潜在表示空间出现高度的异化，文章提出了两种正则化放啊，一种是 KL-rrg（类似于 VAE），另一种是 VQ-reg（类似于 VQGAN）。在官方发布的一阶段预训练模型中，会看到 KL 和 VQ 两种实现。在 Stable Diffusion 中主要采用 AutoencoderKL 这种实现。 采样因子​ 具体来说，给定图像 x∈RH×W×3x \\in \\mathbb{R}^{H \\times W \\times 3}x∈RH×W×3，模型首先利用一个编码器 E\\mathcal{E}E 来将图像编码到潜在表示空间 z=E(x)z=\\mathcal{E}(x)z=E(x)，其中 z∈Rh×w×cz \\in \\mathbb{R}^{h \\times w \\times c}z∈Rh×w×c，然后再用解码器从潜在表示空间重建图片 x~=D(z)=D(E(x))\\tilde{x}=\\mathcal{D}(z)=\\mathcal{D}(\\mathcal{E}(x))x~=D(z)=D(E(x)) 。在感知压缩压缩的过程中，下采样因子的大小为 f=H/h=W/wf=H / h=W / wf=H/h=W/w，它是 2 的次方，即 f=2mf=2^mf=2m 。","s":"图像压缩模型（感知压缩）","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#图像压缩模型感知压缩","p":1420},{"i":1433,"t":"在像素空间的普通 Diffusion Model 可以解释为一个时序去噪自编码器（equally weighted sequence of denoising autoencoders），ϵθ(xt,t);t=1…T\\epsilon_\\theta\\left(x_t, t\\right) ; t=1 \\ldots Tϵθ​(xt​,t);t=1…T ，其目标是根据输入 xtx_txt​ 去预测一个对应去噪后的变体，即预测噪音，其中 xtx_txt​ 是输入 xxx 的加噪版本。相应的目标函数可以写成如下形式： LDM=Ex,ϵ∼N(0,1),t[∥ϵ−ϵθ(xt,t)∥22]L_{D M}=\\mathbb{E}_{x, \\epsilon \\sim \\mathcal{N}(0,1), t}\\left[\\left\\|\\epsilon-\\epsilon_\\theta\\left(x_t, t\\right)\\right\\|_2^2\\right]LDM​=Ex,ϵ∼N(0,1),t​[∥ϵ−ϵθ​(xt​,t)∥22​] 其中，ttt 从 {1,…,T}\\{1, \\ldots, T\\}{1,…,T} 中均匀采样获得。 而在 LDM 中，引入了预训练的感知压缩模型，它包括一个编码器 E\\mathcal{E}E 和一个解码器 D\\mathcal{D}D 。这样在训练时就可以利用编码器得到 ztz_tzt​，从而让扩散模型在潜在表示空间中学习，通过降噪得到图像在隐空间的表示，最终再通过解码器恢复到像素空间。在维度较低的隐空间中进行扩散训练实现了较低的计算量。相应的目标函数可以写成如下形式： LLDM:=EE(x),ϵ∼N(0,1),t[∥ϵ−ϵθ(zt,t)∥22]L_{L D M}:=\\mathbb{E}_{\\mathcal{E}(x), \\epsilon \\sim \\mathcal{N}(0,1), t}\\left[\\left\\|\\epsilon-\\epsilon_\\theta\\left(z_t, t\\right)\\right\\|_2^2\\right]LLDM​:=EE(x),ϵ∼N(0,1),t​[∥ϵ−ϵθ​(zt​,t)∥22​]","s":"隐空间的扩散模型","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#隐空间的扩散模型","p":1420},{"i":1435,"t":"文章通过对普通的 LDM 进行拓展得到条件时序去噪自编码器（conditional denoising autoencoder）ϵθ(zt,t,y)\\epsilon_\\theta\\left(z_t, t, y\\right)ϵθ​(zt​,t,y) 来实现多模态的条件生成，其中 yyy 作为条件来控制图片合成的过程。 具体来说，论文通过在 UNet 主干网络上增加交叉注意力机制（Cross Attention）来实现。为了能够从多个不同的模态获得 yyy，本文引入了一个领域特定的编码器（domain specific encoder）τθ\\tau_\\thetaτθ​，它用来将 yyy 映射为一个中间表示 τθ(y)∈RM×dτ\\tau_\\theta(y) \\in \\mathbb{R}^{M \\times d_\\tau}τθ​(y)∈RM×dτ​，便于引入各种模态的条件（文本、类别、layout 等）。最终模型就可以通过一个 Cross Attention 层映射将控制信息融入到 UNet 的中间层，Cross Attention 实现如下： Attention⁡(Q,K,V)=softmax⁡(QKTd)⋅V\\operatorname{Attention}(Q, K, V)=\\operatorname{softmax}\\left(\\frac{Q K^T}{\\sqrt{d}}\\right) \\cdot VAttention(Q,K,V)=softmax(d​QKT​)⋅V 其中， Q=WQ(i)⋅φi(zt),K=WK(i)⋅τθ(y),V=WV(i)⋅τθ(y)Q=W_Q^{(i)} \\cdot \\varphi_i\\left(z_t\\right), K=W_K^{(i)} \\cdot \\tau_\\theta(y), V=W_V^{(i)} \\cdot \\tau_\\theta(y)Q=WQ(i)​⋅φi​(zt​),K=WK(i)​⋅τθ​(y),V=WV(i)​⋅τθ​(y) 其中 φi(zt)∈RN×dϵi\\varphi_i\\left(z_t\\right) \\in \\mathbb{R}^{N \\times d_\\epsilon^i}φi​(zt​)∈RN×dϵi​ 是 UNet 的一个中间表示。相应的目标函数可以写成如下形式: LLDM:=EE(x),y,ϵ∼N(0,1),t[∥ϵ−ϵθ(zt,t,τθ(y))∥22]L_{L D M}:=\\mathbb{E}_{\\mathcal{E}(x), y, \\epsilon \\sim \\mathcal{N}(0,1), t}\\left[\\left\\|\\epsilon-\\epsilon_\\theta\\left(z_t, t, \\tau_\\theta(y)\\right)\\right\\|_2^2\\right]LLDM​:=EE(x),y,ϵ∼N(0,1),t​[∥ϵ−ϵθ​(zt​,t,τθ​(y))∥22​]","s":"条件机制：Cross Attention","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#条件机制cross-attention","p":1420},{"i":1438,"t":"采样因子 fff 的大小为 f=H/h=W/wf=H / h=W / wf=H/h=W/w，如果 f=1f=1f=1 就是在像素空间进行扩散过程的特殊情况。如果 fff 越大，则信息压缩越严重，可能会噪声图片失真，但同时训练资源占用的也越少。文章对比了 fff 在分别 {1,2,4,8,16,32}\\{1,2,4,8,16,32\\}{1,2,4,8,16,32} 下的效果，发现 fff 在 {4−16}\\{4-16\\}{4−16} 之间可以比较好的平衡压缩效率与视觉感知效果。作者重点推荐了 LDM-4 和 LDM-8。 值得注意的是，Stable Diffusion v2-1 常用的下采样因子是 8，而 Stable Cascade 的下采样可高达 42，将 102421024^210242 的图像压缩至 24224^2242 进行扩散过程。","s":"感知压缩","u":"/en/docs/Deep-Learning/论文笔记/Latent-Diffusion-Models","h":"#感知压缩","p":1420},{"i":1440,"t":"相关链接 论文：arXiv 代码：GitHub 参考资料： 54、Probabilistic Diffusion Model概率扩散模型理论与完整PyTorch代码详细解读 【论文精读】Diffusion Model 开山之作DDPM","s":"NeurIPS 2020: Denoising Diffusion Probabilistic Models","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"","p":1439},{"i":1443,"t":"条件概率的定义​ 条件概率是指在给定另一个事件发生的条件下，某一事件发生的概率。条件概率通常用符号P(A∣B)P(A\\mid B)P(A∣B)表示，读作“在 B 发生的条件下 A 发生的概率”。 条件概率的计算公式为： P(A∣B)=P(A,B)P(B)P(A\\mid B)=\\frac{P(A,B)}{P(B)}P(A∣B)=P(B)P(A,B)​ 其中： P(A,B)P(A,B)P(A,B)是事件AAA、BBB同时发生的概率，也叫联合概率 P(B)P(B)P(B)是事件BBB独立发生的概率 全概率公式​ 对于事件AAA而言，假设有一组互斥且穷尽的条件事件B1,B2,…BnB_{1},B_{2},\\ldots B_{n}B1​,B2​,…Bn​构成一个完备事件组，则事件AAA的概率等于事件AAA在每个条件事件BiB_iBi​下发生的概率与该条件事件发生概率的乘积和。 P(A)=∑i=1nP(A∣Bi)⋅P(Bi)P(A)=\\sum_{i=1}^nP(A\\mid B_i)\\cdot P(B_i)P(A)=i=1∑n​P(A∣Bi​)⋅P(Bi​) 可以看出，全概率公式是由“因”（条件事件BiB_iBi​）推“果”（结果事件AAA）的过程，即当知道某结果事件的原因后，推断由该原因导致这件事发生的概率是多少。 贝叶斯公式​ 贝叶斯公式在观测到结果事件AAA发生后，计算其条件事件BiB_iBi​在事件AAA已经发生的条件下而发生的后验概率。 继续沿用上述全概率公式的符号定义，则有： P(Bi∣A)=P(A∣Bi)⋅P(Bi)P(A)P(B_i\\mid A)=\\frac{P(A\\mid B_i)\\cdot P(B_i)}{P(A)}P(Bi​∣A)=P(A)P(A∣Bi​)⋅P(Bi​)​ 其中： P(Bi)P(B_i)P(Bi​)以及P(A)P(A)P(A)称为先验概率 P(Bi∣A)P(B_i\\mid A)P(Bi​∣A)称为后验概率 P(A∣Bi)P(A\\mid B_i)P(A∣Bi​)称为似然","s":"先验概率与后验概率","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#先验概率与后验概率","p":1439},{"i":1445,"t":"条件概率的一般形式​ P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣A,B)⋅P(B∣A)⋅P(A)P(A,B,C)=P(C\\mid A,B)\\cdot P(A,B)=P(C\\mid A,B)\\cdot P(B\\mid A)\\cdot P(A)P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣A,B)⋅P(B∣A)⋅P(A)P(B,C∣A)=P(B∣A)⋅P(C∣A,B)P(B,C\\mid A)=P(B\\mid A)\\cdot P(C\\mid A,B)P(B,C∣A)=P(B∣A)⋅P(C∣A,B) 其中，第二行公式的推导如下： P(B,C∣A)=P(A,B,C)P(A)=P(A,B,C)P(A,B,C)P(C∣A,B)⋅P(B∣A)=P(B∣A)⋅P(C∣A,B)\\begin{align*} P(B,C \\mid A) &= \\frac{P(A,B,C)}{P(A)} \\\\ &= \\frac{P(A,B,C)}{\\frac{P(A,B,C)}{P(C \\mid A,B) \\cdot P(B \\mid A)}} \\\\ &= P(B \\mid A) \\cdot P(C \\mid A,B) \\end{align*}P(B,C∣A)​=P(A)P(A,B,C)​=P(C∣A,B)⋅P(B∣A)P(A,B,C)​P(A,B,C)​=P(B∣A)⋅P(C∣A,B)​ 高斯分布的KL散度​ 对于两个单一变量的高斯分布p∼N(μ1,σ12)p\\sim \\mathcal{N}(\\mu_1,\\sigma_1^2)p∼N(μ1​,σ12​)和q∼N(μ2,σ22)q\\sim \\mathcal{N}(\\mu_2,\\sigma_2^2)q∼N(μ2​,σ22​)而言，它们的KL散度定义为： DKL(p,q)=log⁡σ2σ1+σ12+(μ1−μ2)22σ22−12D_{KL}(p,q)=\\log\\frac{\\sigma_2}{\\sigma_1}+\\frac{\\sigma_1^2+(\\mu_1-\\mu_2)^2}{2\\sigma_2^2}-\\frac12DKL​(p,q)=logσ1​σ2​​+2σ22​σ12​+(μ1​−μ2​)2​−21​","s":"条件概率与高斯分布的KL散度","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#条件概率与高斯分布的kl散度","p":1439},{"i":1447,"t":"马尔科夫链指当前状态的概率只与上一时刻有关，例如若满足马尔科夫关系A→B→CA\\to B\\to CA→B→C，则有： P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣B)⋅P(B∣A)⋅P(A)P(A,B,C) =P(C\\mid A,B)\\cdot P(A,B)=P(C\\mid B)\\cdot P(B\\mid A)\\cdot P(A)P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣B)⋅P(B∣A)⋅P(A)P(B,C∣A)=P(B∣A)⋅P(C∣B)P(B,C\\mid A)=P(B\\mid A)\\cdot P(C\\mid B)P(B,C∣A)=P(B∣A)⋅P(C∣B)","s":"马尔科夫链条件概率形式","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#马尔科夫链条件概率形式","p":1439},{"i":1449,"t":"从任意高斯分布N(μ,σ2)\\mathcal{N}(\\mu,\\sigma^2)N(μ,σ2)采样xxx时，可以先从标准高斯分布N(0,1)\\mathcal{N}(0,1)N(0,1)中sample出zzz，再令 x=σ∗z+μx=\\sigma * z + \\mux=σ∗z+μ 优势： 由于线性变化，采样过程中对其他参数都有明确的导数，可以进行反向传播 可以通过线性变换来控制参数化的采样 标准正态分布具有易采样的性质","s":"参数重整化技巧","u":"/en/docs/Deep-Learning/论文笔记/Denoising-Diffusion-Probabilistic-Models","h":"#参数重整化技巧","p":1439},{"i":1451,"t":"相关资料 Meta 官方博客：https://ai.meta.com/blog/movie-gen-media-foundation-models-generative-ai-video/ Meta 官方技术报告：https://ai.meta.com/static-resource/movie-gen-research-paper","s":"Movie Gen: A Cast of Media Foundation Models","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"","p":1450},{"i":1453,"t":"Meta Movie Gen 可以实现具有同步音频的视频生成、个性化角色的视频生成并支持视频编辑。 Movie Gen 实现的主要功能来自于提出的两个 foundation model，分别为 Movie Gen Video 以及 Movie Gen Audio。 Movie Gen Video：30B 参数的大模型，支持 T2I 以及 T2V 的联合生成，最高可根据输入的文本提示生成 16 秒的 1080P HD 视频。 Movie Gen Audio：13B 参数的大模型，支持 V2A 以及 T2A，最高可根据输入的视频以及文本提示生成 48kHz 的高质量同步音频。","s":"主要功能展示","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#主要功能展示","p":1450},{"i":1460,"t":"Meta 提出了 Movie Gen Video 这个统一的大模型来同时完成 T2I 以及 T2V 任务，模型将静态图像视为视频中的一帧，从而进行图像和视频生成的联合训练，即 Joint Image and Video Generation，使得模型可以同时生成图像和视频。 作者认为视频数据较为复杂，文本图像对的训练数据可以更好地帮助模型提高泛化性能。 下图展示了图像和视频联合生成的 pipeline。","s":"Joint Image and Video Generation（图像视频联合生成）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#joint-image-and-video-generation图像视频联合生成","p":1450},{"i":1462,"t":"为了提高训练效率和模型的扩展能力，作者采用了多阶段的训练过程。 首先是 T2I 预热训练阶段。作者发现直接从头训练图像视频联合生成模型 T2I/V 会导致拟合缓慢，因此首先单独对 T2I 模型进行训练，作为预热阶段，并且在预热训练在较低分辨率（256 px）上进行，可以在相同的计算开销上以更大的 batch size 训练更多的数据。 其次是图像视频联合生成模型 T2I/V 训练阶段。 为了可以成功实现联合训练，作者双倍增加了的空间位置编码层（spatial positional embedding layers）来适应更丰富的宽高比，同时增加了更多的时间位置编码层（temporal positional embedding layers）来支持多帧数图像（视频）的输入。 然后进行高分辨率的 T2I/V 联合训练。 在高质量的视频数据集上通过 Supervised Finetuing（监督微调，SFT）来优化生成质量。 最后可以后训练（Post Training）的方式来为 Movie Gen 增加个性化角色视频生成以及视频精确编辑等能力。","s":"多阶段训练策略","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#多阶段训练策略","p":1450},{"i":1464,"t":"为了提高效率，作者提出了 TAE 模型将像素空间的视频和图像压缩到经过学习的时空压缩隐式空间（learned spatial-temporally compreseed latent space），并且学习从隐空间中生成视频。 TAE Architecture（TAE 结构）​ TAE 的设计采用了 LDM 使用的 Image Encoder 结构并且在时间维度进行扩展： 1D 时间卷积（Temporal Convolution）：在每个二维空间卷积（2D spatial convolution）之后加入 1D 的时间卷积。这使得模型能够捕捉数据的时间变化特征，从而适应视频的帧间动态变化。 在视频生成中，帧之间存在时间上的连续性，时间卷积通过沿时间维度进行卷积操作，使得模型能够从连续帧中提取时间相关的信息。每一帧不仅通过空间卷积捕捉其内容，还通过时间卷积捕捉其与前后帧之间的动态关系。这种操作通过引入 1D 卷积来进行，保证了时间维度上的特征捕获。 1D 时间注意力机制（Temporal Attention）：在每次空间注意力（spatial attention）之后加入 1D 的时间注意力机制，帮助模型更好地关注视频序列中不同时间点的重要特征。在每个 2D 的空间卷积之后加入了 1D 的时间卷机，在每个 2D 的空间注意力之后加入了 1D 的时间注意力。 通过在空间注意力之后加入 1D 的时间注意力，模型可以更好地理解视频序列中的时间依赖关系，即哪些时间点的特征对最终生成结果至关重要。这种注意力机制使模型能够在生成过程中关注到不同帧之间的关键时刻，提高视频的生成质量。 在降采样过程中，模型采用步长为 2 的卷积操作对视频数据进行压缩，通过这种方式减少时间维度上的冗余信息。而在上采样过程中，模型使用最近邻插值法恢复时间维度的信息，再通过卷积来平滑和补充细节。这一过程保证了视频长度的灵活性，能够处理不同长度的视频序列。 在下采样中采用在时间维度进行有步长的卷积方式来完成可以使模型能够处理任意帧长度的视频，包括图像（单帧视频），下图展示了时间维度卷积下采样的流程以及计算。 Improvements to the Training Objective（损失函数的优化）​ 作者发现如果 TAE 使用经典的 VAE 损失函数（Reconstruction Loss、Discriminator Loss、Perceptual Loss）进行训练会在数据空间解码出的视频中出现伪影点，如下图所示。 在 Latent Code 中伪影点位置出现了方差较大的取值","s":"TAE（Temporal AutoEncoder）","u":"/en/docs/Deep-Learning/论文笔记/Meta-Movie-Gen","h":"#taetemporal-autoencoder","p":1450},{"i":1471,"t":"相关链接 论文：CVPR 2023 open access 代码：Piscart-AI-Research 文章的命名风格借鉴了CVPR 2022的文章Few Shot Generative Model Adaption via Relaxed Spatial Structural Alignment","s":"CVPR 2023: Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"","p":1470},{"i":1473,"t":"本文提出了Image-specific Prompt Learning（IPL）方法来解决风格迁移任务中生成模型从源域到目标域的适应问题。一个Latent Mapper来从源域图像中学习出包含图像特征且适应目标域的prompt，从而指导目标域生成器的训练。 This produces a more precise adaptation direction for every cross-domain image pair, endowing the target-domain generator with greatly enhanced flexibility. 训练资料是源域和目标域的文字标签以及源域的图像，并不需要目标域的图像。此外，IPL独立于生成模型，可以自由选择Diffusion Model或GAN等。","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#摘要","p":1470},{"i":1476,"t":"Generative Model Adaption的任务是使在大规模源域图片上训练的生成模型适应到数据有限的目标域中，根据目标域训练资料的大小可以分为few-shot和zero-shot。 few-shot​ 对于few-shot任务，一般是通过有限的目标域训练集资料fine-tune预训练模型。 然而，fine-tune通常会导致过拟合。为了解决过拟合问题，通常使用的方法是施加强正则化、使用扰动法、跨域对齐或数据增强。 相关文献方法 强正则化：Han Zhang, Zizhao Zhang, Augustus Odena, and Honglak Lee. Consistency regularization for generative adversarial networks. In ICLR, 2019. 扰动法：Sangwoo Mo, Minsu Cho, and Jinwoo Shin. Freeze the discriminator: a simple baseline for fine-tuning GANs. In CVPR Workshops, 2020. 跨域对齐：Utkarsh Ojha, Yijun Li, Jingwan Lu, Alexei A Efros, Yong Jae Lee, Eli Shechtman, and Richard Zhang. Fewshot image generation via cross-domain correspondence. In CVPR, 2021. 数据增强：Ngoc-Trung Tran, Viet-Hung Tran, Ngoc-Bao Nguyen, Trung-Kien Nguyen, and Ngai-Man Cheung. On data augmentation for GAN training. TIP, 2021. zero-shot​ 对于零样本的图像生成模型的适应任务，NADA率先引入了CLIP模型来获取必须的先验知识，通过预训练大模型的语言理解能力实现在目标域只需要文字标签而不需要图片，将源域和目标域之间的差距编码为在CLIP空间上文字引导的适应方向。 此后，CVPR 2022发表的DiffusionCLIP使用了Diffusion模型代替NADA中的StyleGANs，获得了更好的特征保存能力。 然而这些方法都是采用了固定的适应方向，只包含基础的域知识，而不是图片特定的特征。在本文中，作者发现这种共享的、固定的适应方向会导致Mode Collapse（模式坍塌），因此提出了从每个源域图像中学习出多样且准确的prompt，为生成模型向目标域的适应提供更精确的方向。","s":"Generative Model Adaption","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#generative-model-adaption","p":1470},{"i":1478,"t":"Prompt工程最初是一种Knowledge Probing（知识探测）方法，给定完形填空（cloze-style）类的prompt，引导模型产生相对应的答案。 然而人工设计的prompt通常不是最优的，可能提供不准确的适应方向。为了解决这个问题，在NLP领域的Prompt Learning发展迅速，并随着视觉-语言大模型的发展，应用在了视觉任务中。 Kaiyang Zhou等人首先在图像分类任务中采用上下文优化，在词嵌入空间中对具有连续向量的上下文词进行建模。随后Prompt Learning在计算机视觉中的许多下游任务都得到了探索，例如目标检测、视频理解和迁移学习等。","s":"Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#prompt-learning","p":1470},{"i":1481,"t":"IPL方法分两个阶段。 第一阶段：训练Latent Mapper​ 第一阶段的主要任务是训练Lantent Mapper来为每一个训练集的源域图片生成一组prompt。Latent Mapper接收源域图像的latent representation，生成一组prompt向量。第一阶段需要解决两个问题，即在zero-shot的背景下，如何实现prompt与源域图像特征的对齐以及prompt与目标域空间的对齐，因此第一阶段的训练分两部分进行。 第一部分是Latent Mapper输出的prompt与目标域标签concat后送入来自CLIP的Text Encoder得到目标域图片prompt在CLIP空间的编码表示，并与目标域标签经过Text Encoder后的编码共同作为Domain Loss的输入来约束从源域中学习到的prompt与目标域空间对齐。 第二部分是Latent Mapper输出的prompt与源域标签concat后送入来自CLIP的Text Encoder得到源域图片prompt描述在CLIP空间的编码表示，同时源域图像再经过来自CLIP的Image Encoder后得到其在CLIP空间的编码表示。将源域的prompt文字和图像编码表示作为contrastive learning loss的输入，约束学习到的prompt与源域图像的特征对齐。 第二阶段：将Latent Mapper插入目标域生成器的训练过程​ 第二阶段利用Directional CLIP Loss来训练目标域生成器，使源于生成器向目标域迁移学习。需要输入源域以及目标域图像、源域以及目标域的prompt描述。源域图像的latent representation分别输入至源域生成器和目标域生成器中得到对应的图像，同时指导风格迁移方向的源域以及目标域的prompt描述由Latent Mapper接收源域图像的隐式表示后输出再分别与源域和目标域标签concat而得到。分别将源域图像、生成的目标域图像以及源域、目标域的图片prompt描述一起输入至Directional CLIP Loss，从而约束由源域图像生成器初始化的目标域图像生成器向目标域的迁移学习。","s":"概述","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot-Generative-Model-Adaptation-via-Image-specific-Prompt-Learning","h":"#概述","p":1470},{"i":1485,"t":"We present Visual AutoRegressive modeling (VAR), a new generation paradigm that redefines the autoregressive learning on images as coarse-to-fine “next-scale prediction” or “next-resolution prediction”, diverging from the standard raster-scan “next-token prediction”. This simple, intuitive methodology allows autoregressive (AR) transformers to learn visual distributions fast and can generalize well: VAR, for the first time, makes GPT-style AR models surpass diffusion transformers in image generation. On ImageNet 256×256 benchmark, VAR significantly improve AR baseline by improving Fréchet inception distance (FID) from 18.65 to 1.73, inception score (IS) from 80.4 to 350.2, with 20× faster inference speed. It is also empirically verified that VAR outperforms the Diffusion Transformer (DiT) in multiple dimensions including image quality, inference speed, data efficiency, and scalability. Scaling up VAR models exhibits clear power-law scaling laws similar to those observed in LLMs, with linear correlation coefficients near −0.998 as solid evidence. VAR further showcases zero-shot generalization ability in downstream tasks including image in-painting, out-painting, and editing. These results suggest VAR has initially emulated the two important properties of LLMs: Scaling Laws and zero-shot generalization. We have released all models and codes to promote the exploration of AR/VAR models for visual generation and unified learning.","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#摘要","p":1483},{"i":1487,"t":"通过回顾先前的视觉 Autoregressive 模型（即采用 next-token 范式进行生成），从 scaling laws 和性能的角度将其与 NLP 领域的 LLMs 进行比较，宏观上说明了传统视觉 AR 模型存在的问题。 传统视觉 AR 模型是否遵循 scaling laws 有待探索和验证 性能有待提升 上图展示了传统 Visual AR 模型在 scaling laws 方面的局限性，并以 FID 作为评价指标，展示了性能效果方面的不足。","s":"研究背景与动机","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#研究背景与动机","p":1483},{"i":1489,"t":"首先文章花费了大量篇幅来用数学语言描述以 next-token prediction 作为生成范式的传统视觉自回归模型的定义和流程，大致包括以下流程： 输入 raw image，Encoder 得到对应的 feature map。 f=E(im)f=\\mathcal{E}(im)f=E(im) 输入feature map，Quantizer 得到对应的量化 image token。 q=Q(f)q=\\mathcal{Q}(f)q=Q(f) 在量化步骤，会将每个特征向量映射到与其在欧几里得意义上最接近的 Codebook ZZZ 中的 code。 q(i,j)=(arg⁡min⁡v∈[V]∥lookup(Z,v)−f(i,j)∥2)∈[V]q^{(i,j)}=\\left(\\arg\\min_{v\\in[V]}\\|\\text{lookup}(Z,v)-f^{(i,j)}\\|_2\\right)\\in[V]q(i,j)=(argv∈[V]min​∥lookup(Z,v)−f(i,j)∥2​)∈[V] Decoder 通过接收在 Codebook 中查找得到的 f^\\hat{f}f^​ 生成重构的图像。 f^=lookup⁡(Z,q)\\hat{f}=\\operatorname{lookup}(Z,q)f^​=lookup(Z,q) im^=D(f^)\\hat{im}=\\mathcal{D}(\\hat{f})im^=D(f^​) L=∥im−im^∥2+∥f−f^∥2+λPLP(im^)+λGLG(im^)\\mathcal{L}=\\|im-i\\hat{m}\\|_2+\\|f-\\hat{f}\\|_2+\\lambda_\\text{P}\\mathcal{L}_\\text{P}(i\\hat{m})+\\lambda_\\text{G}\\mathcal{L}_\\text{G}(i\\hat{m})L=∥im−im^∥2​+∥f−f^​∥2​+λP​LP​(im^)+λG​LG​(im^) 下图展示了传统 VAR 方法与本文提出的 VAR 方法的对比。其中图（a）展示了 NLP 领域的 next-token prediction，图（b）展示了上述公式定义的 next-image-token prediction 的过程，包含量化与展平的步骤，图（c）展示了本文提出的 next-scale prediction。 文章发现了目前传统 VAR 模型存在的三个问题。 VQGAN 违反了 Autoregressive 的数学前提。Autoregressive 模型假设当前时间步的 token xtx_txt​ 只取决于其之前时间步的 token 前缀 (x1,x2,...,xt−1)(x_1, x_2, ..., x_{t-1})(x1​,x2​,...,xt−1​)，具有单向相关性（unidirectional）。而 VQGAN 中的 image encoder 直接从具有双向相关性（bidirectional）的 feature map 中进行量化和展平，因此得到的 image tokens 同样具有双向相关性，违反了数学假设。 作者在附录中检查了 VQGAN 模型在量化步骤之前的注意力层输出的图像注意力分数，证明了较强的双向相关性。 作者解释，这是因为在图像 VAE 以及其他类似的工作的自注意力层中，并没有使用任何注意力掩码机制，如 sequence mask 以及 causal attention 等，导致了双向相关性。 This is not surprising since the VQVAE model, trained to reconstruct images, leverages self-attention layers without any attention mask. Some work [67] has used causal attention in self-attention layers of a video VAE, but we did not find any image VAE work uses causal self-attention. image tokens 的空间结构性被破坏。由于先前的 VAR 工作均是采用类似于先列后行的一维顺序存储 image tokens 并进行 Autoregressive 生成，image tokens 的扁平化破坏了图像特征图固有的空间局部性。 时间复杂度过高，影响生成效率。使用传统的视觉 Autoregressive 方法生成 x=(x1,x2,…,xn×n)x=(x_1,x_2,\\ldots,x_{n\\times n})x=(x1​,x2​,…,xn×n​) 的 token 序列，需要 O(n2)\\mathcal{O}(n^{2})O(n2) 的注意力步骤以及 O(n6)\\mathcal{O}(n^{6})O(n6) 的计算复杂度。","s":"问题发现与提出","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#问题发现与提出","p":1483},{"i":1492,"t":"本文的工作重新考虑了以什么样的顺序生成图像。人类通常以分层的方式感知或创建图像，首先捕获全局结构，然后捕获局部细节。这种多尺度、由粗到精（coarse-to-fine）的方法很自然地给图像暗示了一种顺序。此外，受广泛使用的多尺度（multi-scale）设计工作的启发，本文将图像的自回归学习定义为下图展示的 next-scale prediction。 自回归过程从分辨率为 1×11\\times11×1​ 的 token map 开始，并逐步扩大分辨率：在每一步，Transformer 以之前生成的所有分辨率的 token maps 为条件预测下一大分辨率的 token map。 通过从 next-token prediction 策略转变为 next-scale prediction 策略，重新概念化了对图像的自回归建模。在这里，自回归单元是整个 token map，而不是传统方法的单个 token。先将特征图 f∈Rh×w×Cf \\in \\mathbb{R}^{h \\times w \\times C}f∈Rh×w×C 量化为 KKK 个多尺度标记图 (r1,r2,…,rK)(r_1, r_2, \\ldots, r_K)(r1​,r2​,…,rK​)，每个图的分辨率 hk×wkh_k \\times w_khk​×wk​ 逐步增加，最终达到 rKr_KrK​ 与原始特征图的分辨率 h×wh \\times wh×w 匹配。自回归似然性公式为： p(r1,r2,…,rK)=∏k=1Kp(rk∣r1,r2,…,rk−1)p(r_1, r_2, \\ldots, r_K) = \\prod_{k=1}^{K} p(r_k \\mid r_1, r_2, \\ldots, r_{k-1})p(r1​,r2​,…,rK​)=k=1∏K​p(rk​∣r1​,r2​,…,rk−1​) 其中每个自回归单元 rk∈[V]hk×wkr_k \\in [V]^{h_k \\times w_k}rk​∈[V]hk​×wk​ 是包含 hk×wkh_k \\times w_khk​×wk​ 个标记的第 kkk 个尺度的标记图，而序列 (r1,r2,…,rk−1)(r_1, r_2, \\ldots, r_{k-1})(r1​,r2​,…,rk−1​) 作为 rkr_krk​ 的“前缀”。在第 kkk 个自回归步骤中，所有 rkr_krk​ 中的 h_k \\times w_k 标记的分布将并行生成，并以 rkr_krk​ 的前缀和关联的第 kkk 个位置嵌入图为条件。如下图所示。 请注意，在 VAR 的训练中，使用逐块的因果注意力掩码，以确保每个 rkr_krk​ 只能关注其前缀 r≤kr_{\\leq k}r≤k​，从而满足 Autoregressive 模型的数学假设前提。 本文在结构上的主要贡献是开发了适用于 next-scale prediction 的 multi-scale VQ quantizer，同时结合新的 VQ quantizer 提出了新的图像自回归生成模型，并进一步论证了该方法展示出的与 LLMs 类似的 scaling laws 能力。","s":"主要方法","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法","p":1483},{"i":1494,"t":"Multi-scale VQ quantizer​ 首先，需要设计一个满足多尺度要求的 VQ tokenizer，作者使用了与 VQVAE 相同的框架，并采用了改进的多尺度量化层，并加入了对 feature map 的残差设计：对 encoder 输出的 feature map 进行 interpolate 构建不同尺度的 feature map，不同 feature map 之间通过计算残差的方式进行连接，并结合 quantizer 得到离散序列。VQ quantizer（VAR tokenizer）的具体算法如下图所示。 VAR Transformer​ 作者将重点放在了 VAR tokenizer 的理念和设计上，在 VAR Transformer 中保持了与 GPT-2 和 VQGAN 相同的简洁设计，在结构设计上只融合了 adaptive normalization（AdaLN）。 在训练完 VQ tokenizer 后，需要在离散化后的序列上训练生成模型，上图中 r1,...,rkr_1,...,r_kr1​,...,rk​ 分别表示不同尺度的离散序列。作者将传统的单向自回归模型修改为双向与单向混合的模式，同一个尺度的图片内部使用双向 attention，token 彼此可见，不同尺度的图片之间使用单向 attention ，具有从粗粒度到细粒度的 causal dependency，保证了满足 Autoregressive 假设的数学前提。 单个尺度的图片可以一步生成，生成所需的迭代步数取决于 VQ tokenizer 设计的尺度层数 KKK。","s":"模型主要结构","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#模型主要结构","p":1483},{"i":1496,"t":"本文主要从视觉 Autoregressive 模型生成图像像素的顺序出发，重新思考，通过人类感知图像的方式设计了 next-scale 的生成范式，每一步迭代生成一张完整的图像，但生成图像的分辨率逐步提升，最终得到高像素目标图像。 对文章开篇提出的问题的解决： 使用 causal attention 对自注意力进行掩码，从而满足 Autoregressive 模型对时间序列的数学假设。 在 quantization 步骤使用二维的方式存储整个 image token map，保证了结构的完整性。 得益于多尺度思想的生成方式，时间复杂度和计算开销显著降低。以生成 n2n^2n2 个 image tokens 为例，传统的视觉 Autoregressive 生成需要 O(n2)\\mathcal{O}(n^2)O(n2) 次解码迭代和 O(n6)\\mathcal{O}(n^6)O(n6) 次总计算。相比之下，本文提出的 VAR 只需要 O(log(n))\\mathcal{O}(log(n))O(log(n)) 次迭代和 O(n4)\\mathcal{O}(n^4)O(n4)​ 次总计算量。 文章还论证了 VAR 模型展现出的与 LLMs 相同的 scaling laws 能力。","s":"总结","u":"/en/docs/Deep-Learning/论文笔记/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#总结","p":1483},{"i":1498,"t":"参考资料 论文原文：https://arxiv.org/pdf/2208.11970 论文阅读 - Understanding Diffusion Models: A Unified Perspective","s":"Understanding Diffusion Models: A Unified Perspective","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"","p":1497},{"i":1500,"t":"作者认为，生成模型可以分为三大类： GAN：通过对抗的方式进行学习 likelihood-based：学习一个使得当前数据集出现概率最高的模型，包括 autoregressive models，normalizing flows 和 VAEs 等等 energy-based：将分布学习为任意灵活的能量函数，然后归一化。score-based 和 energy-based 很相似，学习的是 energy-based model 的 score。 本文重点讨论的 Diffusion Model，既可以用 likelihood-based 的观点来解释，也可以使用 score-based 的观点来解释。","s":"简介 Introduction","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#简介-introduction","p":1497},{"i":1502,"t":"地穴寓言（Allegory of the Cave）讲的是一群人一生都被锁在洞穴里，只能看到投射到他们面前墙壁上的二维阴影，这些阴影是由看不见的三维物体在大火前经过而产生的。对这样的人来说，他们所观察到的一切实际上都是由他们永远看不到的高维抽象概念所决定的。 作者从地穴寓言（Allegory of the Cave）中引出 VAE 和 DM 的直观思想，即观测到的数据 xxx 是由隐变量 zzz 生成的，通过观测到的数据来估计隐变量的分布，就可以通过采样隐变量来生成数据。","s":"背景 Background","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#背景-background","p":1497},{"i":1504,"t":"作者首先从似然模型的角度引出证据下界（ELBO）。 直接最大化似然存在对于如自然图像生成等复杂的自然情况是不现实的，因此引入证据下界：证据在这里即是观测数据的似然，下界代表 ELBO 是似然的下界，即： 其中，qϕ(z∣x)q_{\\phi}(z|x)qϕ​(z∣x) 是变分分布（variational distribution），即带有参数的模型，根据观测值来预测隐变量，类似于 VAE 中的编码器 Encoder，通过优化参数来逼近隐变量的真实分布 p(z∣x)p(z|x)p(z∣x)。 作者给出了 ELBO 的两种证明方式，分别为使用 Jensen's Inequlity，以及通过引入 KL 散度。 Jensen's Inequlity： 引入 KL 散度：通过引入 KL 散度，可以更直观的体现证据下界的由来，由于 KL 散度适中大于等于 0，因此","s":"证据下界 Evidence Lower Bound","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#证据下界-evidence-lower-bound","p":1497},{"i":1506,"t":"进一步对 ELBO 的公式进行推导： 引入 VAE 的解码器 Decoder pθ(x∣z)p_{\\theta}(x|z)pθ​(x∣z)，将隐变量映射为数据空间的可观测数据，带有可训练的参数 θ\\thetaθ。 变分自编码器可以分为两部分： 变分：引入了变分分布，即 Encoder 项，预测真实的隐变量分布，在上述 ELBO 推导中体现为 prior matching term。 自编码器：VAE 将数据空间的可观测数据映射到隐空间，再从隐空间中恢复出来，在上述 ELBO 推导中可以体现为 reconstruction term。 重参数化技巧​ VAE 的 Encoder 通常被设计为对角方差的多元高斯，所谓对角方差，就是没有协方差的意思。 qϕ(z∣x)=N(z;μϕ(x),σϕ2(x)I)q_\\phi(z | x)=N\\left(z ; \\mu_\\phi(x), \\sigma_\\phi^2(x) I\\right)qϕ​(z∣x)=N(z;μϕ​(x),σϕ2​(x)I) 与其对应的先验 Prior 为标准的多元高斯， p(z)=N(z;0,I)p(z)=N(z ; 0, I)p(z)=N(z;0,I) 下界的 KL 散度项即 prior matching term 是可以算出解析解的，而前一项即 reconstruction term 则通过蒙特卡洛估计得到，也就是连续离散，使用有限的数据集来估计期望 Eqϕ(z∣x)[log⁡pθ(x∣z)]E_{q_\\phi(z|x)}\\left[\\log p_\\theta(x|z)\\right]Eqϕ​(z∣x)​[logpθ​(x∣z)] 。 我们的目标函数可以写成 arg⁡max⁡ϕ,θEqϕ(z∣x)[log⁡pθ(x∣z)]−DKL(qϕ(z∣x)∥p(z))=arg⁡max⁡ϕ,θ∑l=1Llog⁡pθ(x∣z(l))−DKL(qϕ(z∣x)∥p(z))\\begin{gathered} \\arg \\max _{\\phi, \\theta} E_{q_\\phi(z | x)}\\left[\\log p_\\theta(x | z)\\right]-D_{K L}\\left(q_\\phi(z | x) \\| p(z)\\right)= \\\\ \\arg \\max _{\\phi, \\theta} \\sum_{l=1}^L \\log p_\\theta\\left(x | z^{(l)}\\right)-D_{K L}\\left(q_\\phi(z | x) \\| p(z)\\right) \\end{gathered}argϕ,θmax​Eqϕ​(z∣x)​[logpθ​(x∣z)]−DKL​(qϕ​(z∣x)∥p(z))=argϕ,θmax​l=1∑L​logpθ​(x∣z(l))−DKL​(qϕ​(z∣x)∥p(z))​ 其中， z(l)l=1Lz^{(l)}{ }_{l=1}^Lz(l)l=1L​ 是从 qϕ(z∣x)q_\\phi(z | x)qϕ​(z∣x) 中采样得到的，每个 z(l)z^{(l)}z(l) 都是通过随机高斯分布采样的过程得到的，无法进行求导。 为了解决这个问题，引入重参数化技巧，重参化的精妙之处在于使用标准的随机过程构造任意随机过程， 学习只学习构造的参数， 而随机过程是不参与梯度计算的。 假设随机过程为 x∼N(x;μ,σ2)x \\sim N\\left(x;\\mu,\\sigma^2\\right)x∼N(x;μ,σ2)，则可以写作： x=μ+σϵ,ϵ∼N(0,I)x=\\mu+\\sigma \\epsilon, \\epsilon \\sim N(0, I)x=μ+σϵ,ϵ∼N(0,I) 在 VAE 当中， 任意一次从 qϕ(z∣x)q_\\phi(z|x)qϕ​(z∣x) 中对 zzz 的采样可以表示为： z=μϕ(x)+σϕ(x)⊙ϵ,ϵ∼N(0,I)z=\\mu_\\phi(x)+\\sigma_\\phi(x) \\odot \\epsilon, \\epsilon \\sim N(0,I)z=μϕ​(x)+σϕ​(x)⊙ϵ,ϵ∼N(0,I) 其中， ⊙\\odot⊙ 表示 element-wise 的乘积。 VAE 就是借助与重参化的技巧和蒙特卡洛估计来同时更新 ϕ\\phiϕ 和 θ\\thetaθ 的。训练完成后，只需要在 p(z)=N(z;0,I)p(z)=N(z;0,I)p(z)=N(z;0,I) 上进行采样， 输入 decoder 就可以得到预测的结果了，encoder 已经不需要了。 zzz 的维度通常大大小于 xxx，这样可以迫使模型学习最有用的特征表示。","s":"变分自编码器 Variational Autoencoders","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#变分自编码器-variational-autoencoders","p":1497},{"i":1508,"t":"在 VAE 的基础上嵌套多层 VAE，增加更深层的隐变量即得到了多层变分自编码器 HVAE。 一般情况下，HVAE 中的每一层隐变量 ztz_{t}zt​ 是由其之前的所有隐变量决定的，不过本文只针对马尔可夫过程的 HVAE，也就是仅由 zt−1 z_{t-1}zt−1​ 决定，这也被称为 MHVAE。","s":"多层变分自编码器 Hierachical Variational Autoencoders","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#多层变分自编码器-hierachical-variational-autoencoders","p":1497},{"i":1510,"t":"一种理解 VDM 最简单的思路，就是将 VDM 看成 MHVAE，同时需要满足三个额外的限制： 隐变量的维度需要和输入图片维度一致 Encoder 的每一步 encode 并不是学习得到的，而是实现设计好的高斯分布的融合。换句话说，每一步是以上一步为中心的高斯分布 每一步的高斯分布参数会发生一定的变化，使得最后一步接近标准高斯分布 其中，最重要的假设是第 2 条，去掉了 HVAE 中 Encoder qϕ(z∣x)q_{\\phi}(z|x)qϕ​(z∣x) 的参数 ϕ\\phiϕ。","s":"变分扩散模型 Variational Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#变分扩散模型-variational-diffusion-models","p":1497},{"i":1512,"t":"根据第一点限制，模型不需要再区分隐变量 zzz 和数据空间的 xxx 了，统一使用 xtx_txt​ 来表示任意时刻的数据即可。当 t=0t=0t=0 时，x0x_0x0​ 指的是原始图片。当 t∈[1,T]t \\in[1, T]t∈[1,T] 时，表示对应步数的数据。 qϕ(x1:T∣x0)=∏t=1Tqϕ(xt∣xt−1)q_\\phi\\left(x_{1: T} \\mid x_0\\right)=\\prod_{t=1}^T q_\\phi\\left(x_t \\mid x_{t-1}\\right)qϕ​(x1:T​∣x0​)=t=1∏T​qϕ​(xt​∣xt−1​) 根据第二点限制，每一步的高斯参数人为设计为 μt(xt)=αtxt−1,Σt(xt)=(1−αt)I\\mu_t\\left(x_t\\right)=\\sqrt{\\alpha_t} x_{t-1}, \\Sigma_t\\left(x_t\\right)=\\left(1-\\alpha_t\\right) Iμt​(xt​)=αt​​xt−1​,Σt​(xt​)=(1−αt​)I，其中 αt\\alpha_tαt​ 是一个潜在的可学习的参数，这里是个超参数，随着步数的变化而变化，即引入了 Noise Schedule。因此，有 q(xt∣xt−1)=N(xt;αtxt−1,(1−αt)I)q\\left(x_t \\mid x_{t-1}\\right)=N\\left(x_t ; \\sqrt{\\alpha_t} x_{t-1},\\left(1-\\alpha_t\\right) I\\right)q(xt​∣xt−1​)=N(xt​;αt​​xt−1​,(1−αt​)I) 根据第三点限制，最终的分布 p(xT)p\\left(x_T\\right)p(xT​) 是一个标准的高斯分布，其本质是真实分布逐渐变为标准高斯分布的过程。 p(x0:T)=p(xT)∏t=1Tpθ(xt−1∣xt)p\\left(x_{0: T}\\right)=p\\left(x_T\\right) \\prod_{t=1}^T p_\\theta\\left(x_{t-1} \\mid x_t\\right)p(x0:T​)=p(xT​)t=1∏T​pθ​(xt−1​∣xt​) 其中，p(xT)=N(xT;0,I)p\\left(x_T\\right)=N\\left(x_T ; 0, I\\right)p(xT​)=N(xT​;0,I) 。 将三个假设对应的数学表示带入 HVAE 的下界公式中，得到如下的新形式： reconstruction term：在原始 VAE 下界公式中也出现了，通过给定的第一步加噪版本来预测原始图像 prior matching term：没有可训练的参数，当 T 步数足够大时，最终的分布是标准高斯分布，该项值为0 consistency term：维持加噪与降噪的一致性，训练 VDM 的开销也主要来自该项，因为需要在每个时间步进行优化 但是通过蒙特卡罗方法进行优化并不是最优的选择，因为某些项中具有多个随机变量，通过蒙特卡罗方法计算多个随机变量的数学期望会导致方差过大，因此通过贝叶斯法则进行优化可以得到： 优化后 ELBO 的前两项没有发生本质的变化，着重解释第三项 denoising matching term。 reconstruction term：在原始 VAE 下界公式中也出现了，通过给定的第一步加噪版本来预测原始图像 prior matching term：没有可训练的参数，当 T 步数足够大时，最终的分布是标准高斯分布，该项值为0 denoising matching term：其中，pθ(xt−1∣xt)p_{\\theta}(x_{t-1}|x_t)pθ​(xt−1​∣xt​) 可以看作是待学习的降噪模型，而 q(xt−1∣xt,x0)q(x_{t-1}|x_t,x_0)q(xt−1​∣xt​,x0​) 可以看作是真实的降噪过程的标签，最大化 ELBO 即最小化 denosing matching term","s":"引入 Noise Schedule","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#引入-noise-schedule","p":1497},{"i":1514,"t":"结合贝叶斯法则和重参数化技巧： 可以得到如下推导： 在这里，通过原始图像 x0x_0x0​ 和时间步的参数 ttt，我们可以直接获得任意时间步对应的原始图像加噪版本，换句话说，DM 的扩散过程是确定的，不需要根据时间步一步一步迭代得到相应的结果。","s":"确定的扩散过程","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#确定的扩散过程","p":1497},{"i":1516,"t":"通过对 denoising matching term 进行不同侧重的进一步推导，可以得到对扩散模型的三种等价的解释。 训练扩散模型等价于训练一个模型来预测原始图片 x0x_0x0​： 训练扩散模型等价于训练一个模型来预测初始噪声 ϵ0\\epsilon_0ϵ0​： 训练扩散模型等价于训练一个模型来预测 score function，即任意噪声等级下的图像的分数 ∇xtlog p(xt)\\nabla_{x_t}log\\space p(x_t)∇xt​​log p(xt​)：","s":"三种等价的解释","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#三种等价的解释","p":1497},{"i":1518,"t":"首先从 Yann LeCun 等人提出的 energy-based models 开始分析，任意概率分布可由如下形式表示： 其中，fθ(x)f_\\theta(x)fθ​(x) 是 energy function， ZθZ_\\thetaZθ​ 是标准化常量。 标准化常量的作用是确保： 从而得出： 直接对 pθ(x)p_\\theta(x)pθ​(x) 进行最大似然估计是不现实的，因为对于复杂的 energy function，很难找出对应的标准化常量来进行优化，因此一种可能的解决方式是，使用神经网络 sθ(x)s_\\theta(x)sθ​(x) 来学习 score function。 分数模型可以通过最小化二者之间的 Fisher Divergence 来优化： 其中，score function 的真实标签 ∇xlog p(x)\\nabla_{x}log \\space p(x)∇x​log p(x) 描述在数据空间中使似然增加的方向。 引入朗格文动力学公式： 使用 score function 来表示分布并通过马尔可夫蒙特卡罗技巧进行采样成为 Score-based Generative Modeling。","s":"基于分数的生成模型 Score-based Generative Models","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#基于分数的生成模型-score-based-generative-models","p":1497},{"i":1520,"t":"到目前为止，文章的重心都放在真实数据的分布 p(x)p(x)p(x) 上，但我们通常更加关注某些条件下的真实数据分布 p(x∣y)p(x | y)p(x∣y) 。这可以让我们在一定程度上控制生成的图片。 一个很自然的想法就是在每一噪声等级的时间步上都加上条件信息，于是有 p(x0:T∣y)=p(xT)∏t=1Tpθ(xt−1∣xt,y)p\\left(x_{0: T} | y\\right)=p\\left(x_T\\right) \\prod_{t=1}^T p_\\theta\\left(x_{t-1} | x_t, y\\right)p(x0:T​∣y)=p(xT​)t=1∏T​pθ​(xt−1​∣xt​,y) yyy 可以是文本，可以是其他图片，也可以是一个类别。对应到上述阐明的 VDM 的三种解释，VDM的目标就变成了： x^θ(xt,t,y)≈x0\\hat{x}_\\theta\\left(x_t, t, y\\right) \\approx x_0x^θ​(xt​,t,y)≈x0​ ϵ^θ(xt,t,y)≈ϵ\\hat{\\epsilon}_\\theta\\left(x_t, t, y\\right) \\approx \\epsilonϵ^θ​(xt​,t,y)≈ϵ sθ(xt,t,y)≈∇log⁡p(xt∣y)s_\\theta\\left(x_t, t, y\\right) \\approx \\nabla \\log p\\left(x_t | y\\right)sθ​(xt​,t,y)≈∇logp(xt​∣y) 目前有两种主流的 Guidance 方式，分别是 Classifier Guidance 和 Classifier-Free Guidance。","s":"引导 Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#引导-guidance","p":1497},{"i":1522,"t":"以 score-based model 为例，通过贝叶斯法则，可以得到： 该式可以理解为无条件分数和一个分类器 p(y∣xt)p\\left(y|x_t\\right)p(y∣xt​) 的梯度。 为了更加细粒度地控制条件的重要程度，还会加上一个超参数 γ\\gammaγ，于是就有 ∇log⁡p(xt∣y)=∇log⁡p(xt)+γ∇log⁡p(y∣xt)\\nabla \\log p\\left(x_t | y\\right)=\\nabla \\log p\\left(x_t\\right)+\\gamma \\nabla \\log p\\left(y | x_t\\right)∇logp(xt​∣y)=∇logp(xt​)+γ∇logp(y∣xt​) 当 γ=0\\gamma=0γ=0 时，就是无条件的扩散生成；当 γ\\gammaγ 很大时，模型的生成会更加依赖于条件信息，同时会损失生成结果的多样性。 Classifier Guidance 的缺点是需要处理任意噪声输入，因此没有可以直接使用的预训练好的 classifier，需要和 VDM 一起进行训练。","s":"Classifier Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#classifier-guidance","p":1497},{"i":1524,"t":"Classifier-Free Guidance 的方案不需要单独的分类模型。对 Classifier Guidance 的公式进行移项得到： ∇log⁡p(y∣xt)=∇log⁡p(xt∣y)−∇log⁡p(xt)\\nabla \\log p\\left(y | x_t\\right)=\\nabla \\log p\\left(x_t | y\\right)-\\nabla \\log p\\left(x_t\\right)∇logp(y∣xt​)=∇logp(xt​∣y)−∇logp(xt​) 将其代入 Classfier Guidance 的公式中，消去 noisy classifier 项可以得到： ∇log⁡p(xt∣y)=∇log⁡p(xt)+γ(∇log⁡p(xt∣y)−∇log⁡p(xt))=∇log⁡p(xt)+γ∇log⁡p(xt∣y)−γ∇log⁡p(xt)=γ∇log⁡p(xt∣y)⏟conditional score +(1−γ)∇log⁡p(xt)⏟unconditional score \\begin{aligned} \\nabla \\log p\\left(\\boldsymbol{x}_t | y\\right) & =\\nabla \\log p\\left(\\boldsymbol{x}_t\\right)+\\gamma\\left(\\nabla \\log p\\left(\\boldsymbol{x}_t | y\\right)-\\nabla \\log p\\left(\\boldsymbol{x}_t\\right)\\right) \\\\ & =\\nabla \\log p\\left(\\boldsymbol{x}_t\\right)+\\gamma \\nabla \\log p\\left(\\boldsymbol{x}_t | y\\right)-\\gamma \\nabla \\log p\\left(\\boldsymbol{x}_t\\right) \\\\ & =\\underbrace{\\gamma \\nabla \\log p\\left(\\boldsymbol{x}_t | y\\right)}_{\\text {conditional score }}+\\underbrace{(1-\\gamma) \\nabla \\log p\\left(\\boldsymbol{x}_t\\right)}_{\\text {unconditional score }} \\end{aligned}∇logp(xt​∣y)​=∇logp(xt​)+γ(∇logp(xt​∣y)−∇logp(xt​))=∇logp(xt​)+γ∇logp(xt​∣y)−γ∇logp(xt​)=conditional score γ∇logp(xt​∣y)​​+unconditional score (1−γ)∇logp(xt​)​​​ 同样， γ\\gammaγ 是一个控制学习的条件模型对条件信息的关注程度的超参数。 当 γ=0\\gamma=0γ=0 时，学习的条件模型完全忽略条件器并学习无条件扩散模型；当 γ=1\\gamma=1γ=1 时，该模型在没有指导的情况下显式地学习条件分布；当 γ>1\\gamma>1γ>1 时，扩散模型不仅优先考虑条件得分函数，而且在远离无条件得分函数的方向上移动。换句话说，它降低了生成不使用条件信息的样本的概率，有利于显式地使用条件信息的样本。 由于学习两个独立的扩散模型开销过大，利用 Classifer-Free Guidance 可以同时训练条件依赖和无条件扩散模型。无条件扩散模型可以通过用诸如零的固定常数值替换条件信息来训练，本质上是对条件信息进行 dropout。","s":"Classifier-Free Guidance","u":"/en/docs/Deep-Learning/论文笔记/Understanding-Diffusion-Models-A-Unified-Perspective","h":"#classifier-free-guidance","p":1497},{"i":1526,"t":"原文链接：https://arxiv.org/pdf/2406.06525","s":"自回归模型：LlamaGen","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"","p":1525},{"i":1528,"t":"We introduce LlamaGen, a new family of image generation models that apply original “next-token prediction” paradigm of large language models to visual generation domain. It is an affirmative answer to whether vanilla autoregressive models, e.g., Llama, without inductive biases on visual signals can achieve state-of-the-art image generation performance if scaling properly. We reexamine design spaces of image tokenizers, scalability properties of image generation models, and their training data quality. The outcome of this exploration consists of: (1) An image tokenizer with downsample ratio of 16, reconstruction quality of 0.94 rFID and codebook usage of 97% on ImageNet benchmark. (2) A series of class-conditional image generation models ranging from 111M to 3.1B parameters, achieving 2.18 FID on ImageNet 256×256 benchmarks, outperforming the popular diffusion models such as LDM, DiT. (3) A text-conditional image generation model with 775M parameters, from two-stage training on LAION-COCO and high aesthetics quality images, demonstrating competitive performance of visual quality and text alignment. (4) We verify the effectiveness of LLM serving frameworks in optimizing the inference speed of image generation models and achieve 326% - 414% speedup. We release all models and codes to facilitate open-source community of visual generation and multimodal foundation models.","s":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#摘要","p":1525},{"i":1530,"t":"文章首先介绍了在 NLP 领域发展迅猛的 Autoregressive 模型，引出了在视觉领域的 Autoregressive 模型的发展。VQVAE、VQGA、DALL-E 和 Parti 等。同时指出了先前视觉 AR 模型存在开源社区发展不足，限制了 AR 方法继续研究的问题。此外，作者还提到了以 MaskGIT 为代表的 Masked-prediction Model 以及 VAR 方法，但是仍然体现出了与语言 LLMs 流行使用的自回归方法的较大差异。 同时还介绍了与 AR 思想不同的 Diffusion Models，作者指出，由于 DMs 与在 NLP 的 LLMs 常用的自回归思想有较大的差异，因此给语言和视觉的统一带来了很大的挑战。 作者同时总结了图像生成模型的三个要点： 优秀的 image compressor，即 AR 模型所使用的 image tokenizer、quantizer scalable image generation models，即模型的可扩展性（指参数量方面） 高质量的训练数据 可以看出，本文作者从统一语言和视觉两个模态的想法出发，强调与语言 LLMs 统一，而不是在视觉归纳偏置的引导下改进模型的结构，引出了本文的工作。 图像重建能力高、Codebook 利用率高达 97% 的 image tokenizer 基于语言模态中的 SOTA 模型 Llama 的可扩展的图像生成模型 高质量的训练数据，本文提出的文本条件图像生成模型，首先在 LAION-COCO 的 50 million 子集上进行训练，然后在 10 million 高质量图像上进行微调。展示出了视觉质量和文本对齐的竞争性能。 使用语言模态中常用的 LLM serving framework vLLM 来优化图像生成模型的推理速度。","s":"Motivation 与主要贡献","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#motivation-与主要贡献","p":1525},{"i":1533,"t":"使用了与 VQGAN 相同的 encoder-quantizer-decoder 结构。 作者认为 Codebook 会极大地影响 image tokenization 的表现，因此对 Codebook 做出了以下优化，这种设计极大地增强了图像重建质量和 Codebook 的利用率。 对 Codebook 中的向量施加 l2l_2l2​-normalization，降低 Codebook 中向量的维度 CCC，增加 Codebook 的容量大小 KKK​​。 Codebook 以及 Image Tokenizer 的训练损失函数如下所示。","s":"Image Tokenizer","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-tokenizer","p":1525},{"i":1535,"t":"本文的 Autoregressive Model 的结构主要参考了 Llama 的结构，将语言模态中的 SOTA 模型直接引入至图像生成中，统一语言和视觉模态的操作。同时，这样做的好处是可以让视觉生成模型充分利用语言模态的 LLMs 社区中取得的前沿技术。 使用 RMSNorm 进行归一化，RMSNorm 是对 Layer Normalization 的一种改进。 RMSNorm 使用平方根的均值来归一化，而不是像 LayerNorm 那样使用整个样本的均值和方差。 RMSNorm 移除了 LayerNorm 中的 re-center 操作（即移除了均值项），可以看作 LayerNorm 在均值为 0 时的一个特例。 RMSNorm(x)=x1n∑i=1nxi2∗gRMSNorm(x)=\\frac x{\\sqrt{\\frac1n\\sum_{i=1}^nx_i^2}}*gRMSNorm(x)=n1​∑i=1n​xi2​​x​∗g 其中，xxx 是输入向量，nnn 是向量维度，ggg​ 是可缩放的参数。 RMSNorm 的优势在于其计算简单，尤其是在处理较长序列时，可以更有效地进行归一化。 使用 SwiGLU 激活函数，SwiGLU 结合了 GLU（Gated Linear Unit）和 Swish 函数，引入了门控机制来控制输入信号的传递方式。 组成部分： GLU 部分：使用 sigmoid 函数作为门控器，对输入信号进行筛选和选择性放大。 Swish 部分：非线性函数，类似于 ReLU，但在负值区域有平滑的非线性特性。 SwiGLU(x)=σ(xW1+b1)⊙(xW2+b2)\\mathrm{SwiGLU}(x)=\\sigma(xW_1+b_1)\\odot(xW_2+b_2)SwiGLU(x)=σ(xW1​+b1​)⊙(xW2​+b2​) 其中，xxx 是输入向量，W1,W2W_{1}, W_{2}W1​,W2​ 是权重矩阵，b1,b2b_1, b_2b1​,b2​ 是偏置向量，σ\\sigmaσ 是激活函数，通常为 GELU（高斯误差线性单元），⊙\\odot⊙ 表示逐元素乘法。 SwiGLU 引入两个线性变换和一个门控机制来增强模型的表现力，优点在于通过门控机制对输入进行加权，能够更灵活地捕捉复杂的输入模式。 本文提出的 LlamaGen 模型的每一层都使用了 2D RoPE。 RoPE（Rotary Position Embedding）是一种位置编码方法，旨在解决绝对位置编码在处理较长序列时的局限性。RoPE 通过将位置信息引入到输入向量的相位中，增强了模型对相对位置的敏感度。其基本思想是将输入向量按位旋转，旋转角度与位置相关。 RoPE⁡(xi)=xi⋅cos⁡(θi)+xi+1⋅sin⁡(θi)\\operatorname{RoPE}\\left(x_i\\right)=x_i \\cdot \\cos \\left(\\theta_i\\right)+x_{i+1} \\cdot \\sin \\left(\\theta_i\\right)RoPE(xi​)=xi​⋅cos(θi​)+xi+1​⋅sin(θi​) xix_ixi​ 是输入向量的第 iii 个元素。 θi\\theta_iθi​ 是位置 iii 处的旋转角度，通常由固定的正弦和余弦函数生成。 RoPE 的优势在于能够更好地捕捉序列中的相对位置关系，提高模型的长距离依赖能力。 为了与语言模态的 LLMs 保持统一，作者没有使用 AdaLN。 AdaLN（Adaptive Layer Normalization）是一种自适应层归一化方法，旨在为不同的样本动态调整归一化参数。与传统的层归一化方法不同，AdaLN 根据输入数据自适应地调整均值和方差，从而更好地适应不同的输入特征。 AdaLN⁡(x)=x−μ(x)σ(x)⋅γ+β\\operatorname{AdaLN}(x)=\\frac{x-\\mu(x)}{\\sigma(x)} \\cdot \\gamma+\\betaAdaLN(x)=σ(x)x−μ(x)​⋅γ+β xxx 是输入向量。 μ(x)\\mu(x)μ(x) 和 σ(x)\\sigma(x)σ(x) 分别是输入 xxx 的均值和标准差。 γ\\gammaγ 和 β\\betaβ 是可训练的缩放和平移参数。 在 AdaLN 中，均值 μ(x)\\mu(x)μ(x) 和标准差 σ(x)\\sigma(x)σ(x)​ 是通过一个子网络（通常是一个简单的前馈网络）从输入数据中动态预测的。这使得归一化过程更加灵活，能够适应更复杂的输入模式。 LlamaGen 的训练使用了 CFG（Classifier-free Guidance）策略来提高视觉质量和文本-图像对齐。 训练阶段： 在训练期间，条件信息被随机丢弃，并用一个空的无条件嵌入进行替换。这种方法有助于减少模型对特定条件的依赖性，从而改善生成结果的一般化能力。 推理阶段： 对于每个 token，其 logit ℓg\\ell_gℓg​ 是通过以下方式形成的： ℓg=ℓu+s(ℓc−ℓu)\\ell_g = \\ell_u + s(\\ell_c - \\ell_u)ℓg​=ℓu​+s(ℓc​−ℓu​) 其中： ℓc\\ell_cℓc​ 表示条件logit，即基于输入文本提示的信息生成的logit。 ℓu\\ell_uℓu​ 表示无条件logit，即不考虑任何条件信息时生成的logit。 sss 是Classifier-free Guidance的比例因子，用于控制条件logit和无条件logit之间的平衡。 通过这种方式，模型可以利用无条件logit提供的通用信息，同时保留条件logit中的特定上下文信息。这种混合方法有助于提高生成图像的质量和与输入文本的对齐程度。 作者在文章的实验部分给出了使用 CFG 的结果，实验表明，CFG 过高会导致 FID 分数的下降，可以看作是多样性和保真度之间的权衡（trade-off），随着 CFG 的提高，准确率的提高和召回率的降低证明了这点。","s":"Image Generation Autoregressive Model","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Model-Beats-Diffusion-Llama-for-Scalable-Image-Generation","h":"#image-generation-autoregressive-model","p":1525},{"i":1537,"t":"原文链接：https://arxiv.org/pdf/2406.11838 参考资料：何恺明：Autoregressive Image Generation without Vector Quantization.","s":"自回归模型：MAR","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"","p":1536},{"i":1539,"t":"Conventional wisdom holds that autoregressive models for image generation are typically accompanied by vector-quantized tokens. We observe that while a discrete-valued space can facilitate representing a categorical distribution, it is not a necessity for autoregressive modeling. In this work, we propose to model the per-token probability distribution using a diffusion procedure, which allows us to apply autoregressive models in a continuous-valued space. Rather than using categorical cross-entropy loss, we define a Diffusion Loss function to model the per-token probability. This approach eliminates the need for discrete-valued tokenizers. We evaluate its effectiveness across a wide range of cases, including standard autoregressive models and generalized masked autoregressive (MAR) variants. By removing vector quantization, our image generator achieves strong results while enjoying the speed advantage of sequence modeling. We hope this work will motivate the use of autoregressive generation in other continuous-valued domains and applications.","s":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#摘要","p":1536},{"i":1541,"t":"由于语言先天的离散性质，在自然语言领域的自回归模型都是在离散的隐空间中学习数据的概率分布。因此，当自回归模型推广到连续的数据空间（如图像生成）进行发展时，研究人员将主要的精力放在了如何更有效地将连续数据离散化上，如 VQGAN、VQVAE、VAR、MaskGIT 等。 然而，本文作者从 Autoregressive 模型的性质本身（即根据先前的 token 预测下一个 token）出发进行思考，产生了自回归模型是否有必要与向量量化（Vector Quantization）表示相结合的疑问，作者发现，自回归生成模型与 token 是离散表示的还是连续表示的并没有关系，真正需要解决的问题是如何对每个 token 的概率分布进行建模，同时该概率分布可以通过损失函数来学习和约束（训练），并用于从中进行采样（生成）。","s":"研究动机","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#研究动机","p":1536},{"i":1543,"t":"本文提出的模型融合了目前图像生成领域的三大主流范式的思想，分别为自回归生成、掩码生成以及扩散生成： 模型首先根据自回归模型性质为每个 token 生成条件向量（conditional vector）zzz 之后使用扩散过程建模每个 token 的概率分布 最后结合掩码生成的思想加速训练和推理过程","s":"主要方法与实现","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#主要方法与实现","p":1536},{"i":1545,"t":"具体而言，如下图所示，假设连续值向量 x∈Rdx \\in \\mathbb{R}^dx∈Rd，是当前位置要预测的 token。自回归模型在这个位置产生一个条件向量 z∈RDz \\in \\mathbb{R}^Dz∈RD​​ 。 本文使用 Diffusion Loss 根据 zzz 对 xxx 建模概率分布 p(x∣z)p(x \\mid z)p(x∣z)​ 。 L(z,x)=Eε,t[∥ε−εθ(xt∣t,z)∥2]L(z, x)=\\mathbb{E}_{\\varepsilon, t}\\left[\\left\\|\\varepsilon-\\varepsilon_\\theta\\left(x_t \\mid t, z\\right)\\right\\|^2\\right]L(z,x)=Eε,t​[∥ε−εθ​(xt​∣t,z)∥2] 其中： ε∈Rd\\varepsilon \\in \\mathbb{R}^dε∈Rd 是从 N(0,I)\\mathcal{N}(0, \\mathbf{I})N(0,I) 采样的噪声向量 xt=αˉtx+1−αˉtεx_t=\\sqrt{\\bar{\\alpha}_t x}+\\sqrt{1-\\bar{\\alpha}_t} \\varepsilonxt​=αˉt​x​+1−αˉt​​ε，其中 αˉt\\bar{\\alpha}_tαˉt​ 定义了一个 noise schedule ttt 是 noise schedule 的时间步 噪声预测网络 εθ\\varepsilon_\\thetaεθ​ 由参数 θ\\thetaθ 控制，是一个小型 MLP 网络，εθ(xt∣t,z)\\varepsilon_\\theta\\left(x_t \\mid t, z\\right)εθ​(xt​∣t,z) 表示此网络将 xtx_txt​ 作为输入，并且以 ttt 和 zzz​​​ 作为条件。MLP 网络的具体组成如下所示： 对于扩散过程，作者采用了 cosine 函数作为 noise schedule，在训练过程中设定为 1000 步，在推理过程中设定为 100 步。同时，Diffusion Loss 原生支持 CFG 策略。","s":"Diffusion Loss","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#diffusion-loss","p":1536},{"i":1547,"t":"在推理时，需要从分布 p(x∣z)p(x \\mid z)p(x∣z) 中采样样本。采样是通过逆扩散过程进行的： xt−1=1αt(xt−1−αt1−αˉtϵθ(xt∣t,z))+σtδx_{t-1}=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t-\\frac{1-\\alpha_t}{\\sqrt{1-\\bar{\\alpha}_t}} \\epsilon_\\theta\\left(x_t \\mid t, z\\right)\\right)+\\sigma_t \\deltaxt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​∣t,z))+σt​δ 这里 δ\\deltaδ 是从高斯分布 N(0,I)\\mathcal{N}(0, I)N(0,I) 中采样的， σt\\sigma_tσt​ 是时间步 ttt 的噪声水平。以 xT∼N(0,I)x_T \\sim \\mathcal{N}(0, I)xT​∼N(0,I) 开始，此过程生成一个样本 x0x_0x0​ 使得 x0∼p(x∣z)x_0 \\sim p(x \\mid z)x0​∼p(x∣z)​。","s":"采样","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#采样","p":1536},{"i":1550,"t":"本文为了提高生成速度，结合了 MAE 和 MaskGIT 模型的思想，如下图的 b 和 c 所示，将随机顺序生成的思想和每次预测出一个 patch 的 token 的思想加入到本文的模型中。 掩码信息通过位置编码送入 Decoder 中，使模型在以随机顺序预测序列时获取到 token 的位置信息。","s":"结合掩码生成模型的思想 MAR","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#结合掩码生成模型的思想-mar","p":1536},{"i":1557,"t":"对于 MAR 模型，AR 步数越小，每次预测的一个 patch 的 token 数越大，速度越快，精度越低，默认设置为 64 步。","s":"MAR 模型速度与效果的 trade-off","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Image-Generation-without-Vector-Quantization","h":"#mar-模型速度与效果的-trade-off","p":1536},{"i":1559,"t":"自回归模型（Autoregressive Models）在图像生成领域扮演着重要角色，它们基于一个核心假设：当前像素值依赖于之前的像素值。这种依赖关系可以通过条件概率来表达，其中每一个像素的生成都是基于之前已经生成的像素的条件分布。在传统的视觉自回归图像生成任务中，这通常意味着从左到右和从上到下的顺序生成每个像素。","s":"图像生成：自回归模型","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"","p":1558},{"i":1561,"t":"自回归（Autoregressive，简称AR）模型是一种统计模型，用于描述时间序列中的每个值作为其之前值的函数。在机器学习中，自回归模型被广泛应用于序列数据的生成任务，如文本、语音和图像生成。自回归模型通过逐步预测下一个值，依次生成整个序列。 假设有一个序列 x=(x1,x2,…,xT)x=\\left(x_1, x_2, \\ldots, x_T\\right)x=(x1​,x2​,…,xT​) ，自回归模型的目标是学习条件概率分布 p(xt∣x<t)p\\left(x_t \\mid x_{<t}\\right)p(xt​∣x<t​) ， 即在给定序列前面部分 x<t=(x1,x2,…,xt−1)x_{<t}=\\left(x_1, x_2, \\ldots, x_{t-1}\\right)x<t​=(x1​,x2​,…,xt−1​) 的情况下，预测当前值 xtx_txt​ 。 对于一个给定的序列 xxx ，自回归模型的联合概率分布可以分解为以下形式: p(x)=∏t=1Tp(xt∣x<t)p(x)=\\prod_{t=1}^T p\\left(x_t \\mid x_{<t}\\right)p(x)=t=1∏T​p(xt​∣x<t​) 在图像生成任务中，图像被看作是一个二维序列。在传统的自回归图像生成模型（VQVAE、VQGAN 等）将图像的像素视作一个一维序列，通过条件概率分布 p(xi,j∣x<i,j)p\\left(x_{i, j} \\mid x_{<i, j}\\right)p(xi,j​∣x<i,j​) 来生成每个像素值 xi,jx_{i, j}xi,j​ 。","s":"自回归模型的数学定义","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#自回归模型的数学定义","p":1558},{"i":1564,"t":"PixelRNN 是早期的自回归模型之一，它使用循环神经网络（RNN）来建模条件概率分布。由于 RNN 能够捕捉长序列依赖性，PixelRNN 能够生成高质量的图像，但是计算效率较低，因为每次生成一个像素都需要遍历整个序列。","s":"PixelRNN（2016）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#pixelrnn2016","p":1558},{"i":1566,"t":"为了克服 PixelRNN 的计算瓶颈，PixelCNN 使用卷积神经网络（CNN）并引入了遮罩技术，确保每个像素仅依赖于其上方和左侧的像素。","s":"PixelCNN（2016）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#pixelcnn2016","p":1558},{"i":1568,"t":"学习链接 Variant AutoEncoder(VAE)和 VQVAE 学习笔记和代码 68、VQVAE预训练模型的论文原理及PyTorch代码逐行讲解 在科学空间：VQ-VAE 的简明介绍中，提到了 VQ-VAE 与之前的 PixelCNN 和 PixelRNN 的关系。 受 PixelCNN 和 PixelRNN 专注于像素级的生成的启发，VQ-VAE（Vector Quantized Variational Autoencoder）提出了另一种方法，通过离散的潜在空间来建模数据。VQ-VAE 的主要贡献在于引入了向量量化层，将连续的潜在变量映射到一组离散的嵌入向量上，从而能够更高效地学习复杂的数据分布。 主要思想：VQ-VAE（Vector Quantized Variational AutoEncoder）通过将连续的图像表示量化为离散的代码来进行图像生成。它引入了一个离散的代码本，将连续的潜在向量映射到离散的代码上，进行编码和解码。 主要贡献： 采用向量量化方法，使得生成模型能够高效地处理离散代码。 在生成模型中，离散化的潜在空间简化了模型的训练和推理过程。 与之前模型的关系： VQ-VAE 在 VAEs（Variational AutoEncoders）的基础上，引入了离散的潜在空间，使得生成效果更好，训练更稳定。","s":"VQ-VAE（2017）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vq-vae2017","p":1558},{"i":1570,"t":"VQVAE-2 是 VQ-VAE 的一个扩展版本，它引入了层次化的结构，使用多个层次的量化向量来建模不同尺度的特征，从而提高了模型的灵活性和生成图像的质量。 主要思想：VQ-VAE-2 引入了多层级的离散潜在变量，通过多层级的自回归模型进行生成。它使用了层次化的编码器和解码器结构，更好地捕捉图像中的复杂结构。 主要贡献： 引入了层次化的离散潜在空间，提高了生成图像的质量和分辨率。 在多个层级上进行自回归生成，提高了模型对图像全局和局部信息的捕捉能力。 改进点： 相较于 VQ-VAE，VQ-VAE-2 通过层次化的设计，显著提升了生成图像的细节和清晰度。","s":"VQVAE-2（2019）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vqvae-22019","p":1558},{"i":1572,"t":"VQGAN 结合了 VQ-VAE 的思想和生成对抗网络（GANs）的优点。它使用编码器和解码器之间的量化瓶颈，并利用 GAN 框架来优化图像质量。VQGAN 在高分辨率图像生成方面表现出了强大的能力。 主要思想：VQGAN（Vector Quantized Generative Adversarial Networks）结合了 VQ-VAE 的离散潜在表示和 GAN（Generative Adversarial Networks）的对抗训练，提升了生成图像的质量。 主要贡献： 利用对抗训练，生成的图像更加逼真和细腻。 通过结合 VQ-VAE 和 GAN 的优势，解决了各自方法的一些固有缺陷。 改进点： 相较于 VQ-VAE-2，VQGAN 通过对抗训练机制，进一步提升了生成图像的视觉质量。","s":"VQGAN（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#vqgan2021","p":1558},{"i":1574,"t":"RQTransformer 是一种改进的自回归模型，它利用了自注意力机制，能够有效地处理序列数据。相比于传统的自回归模型，RQTransformer 在大规模数据集上展现了更好的性能，尤其是在自然语言处理和图像生成任务中。 主要思想：RQ-Transformer（Residual Quantization Transformer）结合了残差量化和 Transformer 架构，通过对潜在空间进行分块量化来提高生成效率和质量。 主要贡献： 引入残差量化方法，提高了潜在空间的表示能力。 结合 Transformer 架构，增强了对复杂图像结构的建模能力。 改进点： 相较于 VQ-VAE 和 VQGAN，RQ-Transformer 在潜在空间表示上更为灵活，提高了生成图像的分辨率和质量。","s":"RQTransformer（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#rqtransformer2021","p":1558},{"i":1576,"t":"主要思想：DALL-E 是 OpenAI 提出的一个基于 Transformer 的图像生成模型，能够根据文本描述生成图像。它使用了大规模的文本-图像对数据进行训练，并采用了自回归生成策略。其创新之处在于如何将文本和图像模态融合在一起。 主要贡献： 展示了基于文本描述生成图像的强大能力。 引入了大规模数据和 Transformer 架构，使得生成效果更加多样化和逼真。 改进点： 相较于之前的图像生成模型，DALL-E 在生成多样性和一致性上有了显著提升，特别是在文本到图像的生成任务中表现出色。","s":"DALL-E（2021）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#dall-e2021","p":1558},{"i":1578,"t":"Parti 是谷歌研究团队提出的一种模型，专注于分层次的图像生成。它首先生成图像的组成部分（如物体或场景元素），然后将这些部分组合成完整的图像。Parti 在保持图像细节的同时，还能够控制图像的语义内容。 主要思想：Parti 是一个基于 Transformer 的图像生成模型，能够通过部分图像生成剩余部分。它采用了多阶段生成策略，通过逐步细化生成图像，保证生成效果的一致性和逼真性。 主要贡献： 引入了多阶段的生成策略，提高了生成图像的一致性。 在部分图像生成任务中表现出色，能够根据现有图像生成补全部分。 改进点： 相较于 DALL-E 和其他自回归模型，Parti 在生成图像的一致性和细节捕捉上有了显著改进。","s":"Parti（2022）","u":"/en/docs/Deep-Learning/生成模型总结/Autoregressive-Models","h":"#parti2022","p":1558},{"i":1581,"t":"参考链接 原文 URL：Recent Advances in (Image) Generative Foundation Models","s":"图像生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#图像生成基座模型","p":1579},{"i":1583,"t":"GAN​ 使用对抗生成策略，判别器根据真实图像判断生成器生成的图像是否逼真，二者交替训练。 Autoregressive（AR）​ 自回归生成范式，利用输入自身之前各期 [x1,...,xt−1][x_1,...,x_{t-1}][x1​,...,xt−1​] 来预测本期 xtx_txt​​​ 的表现。在图像生成中，自回归模型可以逐像素或逐块生成图像，每一步的生成基于之前已经生成的部分。自回归模型的优点在于能够捕捉图像中的复杂依赖关系，从而生成更加逼真的图像。 代表模型：VAE、VQVAE（2017）​ 参考资料 VQ-VAE 的简明介绍：量子化子编码器 Variant AutoEncoder（VAE）和 VQ-VAE 学习笔记和代码 VAE 和 VQ-VAE 都通过学习数据分布的潜在表示来生成新的样本。VAE 使用高斯分布来表示潜在空间，而 VQ-VAE 使用离散的代码簿来表示潜在空间。 具体来说，VAE 的工作原理是通过一个编码器将输入数据映射到一个潜在空间，然后通过一个解码器将潜在空间中的向量重构为原始数据。在训练过程中，VAE 会学习到数据分布的潜在表示，并能够生成与训练数据类似的新样本。 VQ-VAE 的工作原理与 VAE 类似，但它使用离散的代码簿来表示潜在空间。VQ-VAE 首先将编码器输出的向量进行量化，将其映射到代码簿中的最近向量。然后，解码器使用代码簿中的向量来重构原始数据。VQ-VAE 的优势在于，它可以学习到数据中的离散结构和语义信息，并可以避免过拟合。 代表模型：VQGAN（2021）​ 代表模型：ViT-VQGAN（2022）​ VQ (Vector Quantization) 的改进：在原有的 VQ-VAE 基础上进行了改进，通过引入更复杂的量化器和更强大的解码器，使得生成的图像质量得到了显著提升。 GAN (Generative Adversarial Network) 的结合：将 VQ 和 GAN 结合，利用 Style-GAN 的判别器来提升生成图像的细节和逼真度。 Transformer 的使用：将 VQ-VAE 和 VQGAN 的 Encoder、Decoder 中原来使用的 CNN 结构替换为 ViT。一是因为数据量丰富，二是 CNN 的归纳偏置对模型的约束是有限的，三是计算效率和重建质量更显著。 代表模型：VAR​ 上图展示了不同方式的自回归生成模型，VAR 方法在每个时间序列节点上都根据之前各时间步的输出预测出当前时间步的，且每个时间步均预测出完整的目标图像，且分辨率随时间推移逐步提升至高清图像，即 next-resolution prediction。 Masked-prediction model（Non-AR）​ 参考资料 生成周刊·第一期 代表模型：MaskGIT: Masked Generative Image Transformer​ 这种生成模型依赖一个预训练好的 VQGAN，能将图片 tokenize 成一组量化后的 visual tokens。VQGAN 编码图片得到的 tokens 是离散的，所有可能的 tokens 构成一个 codebook，假设其中包含 KKK 个 token 选项。MVTM 训练就是指给定 masked tokens，让网络预测这些被 masked 掉的 tokens。对于每个被 masked 掉的 token，网络给出一个 KKK 维向量预测当前 token 属于 codebook 中每个 token 的可能性，类似于完成一个 KKK 分类任务。 上图展示了传统 AR 模型和 MaskGIT 在推理过程中的区别。与之前 SOTA 使用的 Autoregressive 方法——逐行再逐列依次生成 image token 不同，MaskGIT 在推理时的每次迭代从一组 masked tokens 中预测出每个位置出现 visual token 的可能性，然后仅保留那些置信度足够高的位置的 visual token，然后继续将当前预测结果再送入网络进行下一轮预测，直到所有位置的 visual token 都被预测出来。与之前常用的自回归方法不同，每轮预测都是基于对图片的全局感知，可以并行预测。这样网络仅需 8 次前向传播就能生成高质量的图片。 顺序解码与 MaskGIT 计划并行解码的比较。第 1 行和第 3 行是每次迭代时的输入潜在掩码，第 2 行和第 4 行是每次迭代时每个模型生成的样本。MaskGIT 的解码从所有未知代码（浅灰色标记）开始，逐渐用更多更分散的预测并行填充潜表征（深灰色标记），预测标记的数量随着迭代急剧增加。MaskGIT 只用了 8 次迭代就完成了解码，而顺序法需要 256 轮。 代表模型：MAGE: MAsked Generative Encoder to Unify Representation Learning and Image Synthesis​ Diffusion Model​ 参考链接 深度理解变分自编码器(VAE) | 从入门到精通","s":"四种生成范式","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#四种生成范式","p":1579},{"i":1585,"t":"数据：Re-caption 与 text encoder（T5） 结构：从 U-Net 到纯 Transformer，代表论文 Scalable Diffusion Models with Transformers 训练范式：使用 Rectified Flow 加速生成过程，参考链接 Diffusion学习笔记（十二）——Rectified Flow","s":"如何训练优秀的生成基座模型？","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#如何训练优秀的生成基座模型","p":1579},{"i":1587,"t":"参考链接 原文 URL：Video and 3D Generation","s":"视频生成基座模型","u":"/en/docs/Deep-Learning/生成模型总结/Image-and-Video-Generative-Foundation-Model","h":"#视频生成基座模型","p":1579},{"i":1590,"t":"给 ｢大模型初学者｣ 的 LLaMA 3 核心技术剖析","s":"Llama 3","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#llama-3","p":1588},{"i":1592,"t":"自回归模型，与 GPT 相同预测下一个 token。","s":"整体结构","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#整体结构","p":1588},{"i":1595,"t":"在生成文本之前，SwiGLU 会根据每个单词（word）或短语（phrase）与上下文的相关性（relevance）调整其重要性（importance）。","s":"SwiGLU 激活函数","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#swiglu-激活函数","p":1588},{"i":1597,"t":"旋转编码（Rotary Embeddings），简称 RoPE ，是 LLaMA 3 中采用的一种位置编码方式（position embedding）。 因此，在处理文本的过程中，RoPE 并未简单地将位置编码视作固定、静态的（fixed and static）元素，而是巧妙地融入了旋转（rotational）这一概念，使得表示方式更加灵活、多样化，能够更精准地把握文本序列内词语间的变化关系。这种灵活性赋予了 ChatGPT 等模型更强的能力，使其能更深刻地理解和生成自然流畅、逻辑连贯的文本内容，就如同在教室中采用动态座位布局（dynamic seating arrangement）能够激发更多互动式的讨论一样。","s":"旋转位置编码（Rotary Positional Embedding）","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#旋转位置编码rotary-positional-embedding","p":1588},{"i":1599,"t":"LLaMA 3 采用由 OpenAI 推出的 tiktoken 库中的字节对编码（Byte Pair Encoding, BPE），而 LLaMA 2 的 BPE 分词机制基于 sentencepiece 库。两者虽有微妙差异，但目前的首要任务是理解 BPE 究竟是什么。 先从一个简单的例子开始：假设有一个文本语料库（text corpus），内含 \"ab\", \"bc\", \"bcd\", 和 \"cde\" 这些词语。我们将语料库中所有单词拆分为单个字符纳入词汇表，此时的词汇表为 {\"a\", \"b\", \"c\", \"d\", \"e\"}。 接下来，计算各字符在文本语料库中的出现次数。在本例中，统计结果为 {\"a\": 1, \"b\": 3, \"c\": 3, \"d\": 2, \"e\": 1}。 随后，进入核心环节 ------ 合并阶段（merging process）。重复执行以下操作直至词汇表达到预定规模：第一步，找出频次最高的连续字符组合。 在本例中，频次最高的一对字符是 \"bc\"，频次为 2。然后，我们将这对字符合并，生成新的子词单元（subword unit）\"bc\"。合并后，更新字符频次，更新后的频次为 {\"a\": 1, \"b\": 2, \"c\": 2, \"d\": 2, \"e\": 1, \"bc\": 2}。我们将新的子词单元 \"bc\" 加入词汇表，使之扩充至 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\"}。 重复循环这一过程。 下一个出现频次最高的词对是 \"cd\"，将其合并生成新的子词单元 \"cd\"，并同步更新频次。更新后为 {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1, \"e\": 1, \"bc\": 2, \"cd\": 2}。然后我们将 \"cd\" 加入词汇表，得到 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\", \"cd\"}。 延续此流程，下一个频繁出现的词对是 \"de\"，将其合并为子词单元 \"de\"，并将频次更新至 {\"a\": 1, \"b\": 2, \"c\": 1, \"d\": 1, \"e\": 0, \"bc\": 2, \"cd\": 1, \"de\": 1}。然后将 \"de\" 添加到词汇表中，使其更新为 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\", \"cd\", \"de\"}。 接下来，我们发现 \"ab\" 是出现频次最高的词对，将其合并为子词单元 \"ab\"，同步更新频次为 {\"a\": 0, \"b\": 1, \"c\": 1, \"d\": 1, \"e\": 0, \"bc\": 2, \"cd\": 1, \"de\": 1, \"ab\": 1}。再将 \"ab\" 添加至词汇表中，使其扩容至 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\", \"cd\", \"de\", \"ab\"}。 再往后，\"bcd\" 成为了下一个出现频次最高的词对，将其合并为子词单元 \"bcd\"，更新频次至 {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"bc\": 1, \"cd\": 0, \"de\": 1, \"ab\": 1, \"bcd\": 1}。将 \"bcd\" 添入词汇表，使其升级为 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\", \"cd\", \"de\", \"ab\", \"bcd\"}。 最后，出现频次最高的词对是 \"cde\"，将其合并为子词单元 \"cde\"，更新频次至 {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"bc\": 1, \"cd\": 0, \"de\": 0, \"ab\": 1, \"bcd\": 1, \"cde\": 1}。将 \"cde\" 添加入词汇表，这样词汇表就变为了 {\"a\", \"b\", \"c\", \"d\", \"e\", \"bc\", \"cd\", \"de\", \"ab\", \"bcd\", \"cde\"}。 此方法能够显著提升大语言模型（LLMs）的性能，同时能够有效处理生僻词及词汇表之外的词汇。TikToken BPE 与 sentencepiece BPE 的主要区别在于：TikToken BPE 不会盲目将已知的完整词汇分割。 比如，若 \"hugging\" 已存在于词汇表中，它会保持原样，不会被拆解成 [\"hug\",\"ging\"]。","s":"新的字节对编码（Tiktoken BPE）","u":"/en/docs/Deep-Learning/生成模型总结/Quick-Notes-about-Main-Techs","h":"#新的字节对编码tiktoken-bpe","p":1588},{"i":1601,"t":"important 这里记录着在学习过程中发现的理解或操作方面出现的错误，温故知新。","s":"查漏补缺","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"","p":1600},{"i":1603,"t":"进行广播的条件：两个矩阵的后缘维度相同或其中一方的维度为1。 后缘维度相同：A为（3，4，5）的三维数据，B为（4，5）的二维数组。由于A和B的后缘维度都为（4，5），所以可以进行广播。同理，当A为（3，4）的二维数组，B为（4，）的数组，他们的后缘维度都是4，所以可以进行广播。 后缘维度中有一方维度为1：A为（4，5）的二维数组，B为（4，1）的二维数组，其中一方维度为1，可以进行广播。 广播的原理：在运算过程中，Python逐步对数组进行广播，并不进行实际的复制操作，节省内存。 以下是举出具体例子进行分析： import numpy as np import torch x = torch.tensor(np.arange(9), dtype=torch.float32) x = torch.reshape(x, (3, 3)) print(x) x1 = x[:, :, None] # (3, 3, 1) print(x1) \"\"\" tensor([[[0.], [1.], [2.]], [[3.], [4.], [5.]], [[6.], [7.], [8.]]]) \"\"\" x2 = x[:, None] # (3, 1, 3) print(x2) \"\"\" tensor([[[0., 1., 2.]], [[3., 4., 5.]], [[6., 7., 8.]]]) \"\"\" output = x1 + x2 print(output) \"\"\" tensor([[[ 0., 1., 2.], [ 1., 2., 3.], [ 2., 3., 4.]], [[ 6., 7., 8.], [ 7., 8., 9.], [ 8., 9., 10.]], [[12., 13., 14.], [13., 14., 15.], [14., 15., 16.]]]) \"\"\" 由于x1与x2在第0维度上维度相同，所以Python可以直接进行逐元素相加，即依次进行如下运算 x1[0,:,:]+x2[0,:,:](1)x1[0, :, :] + x2[0, :, :] \\tag{1}x1[0,:,:]+x2[0,:,:](1) x1[1,:,:]+x2[1,:,:](2)x1[1, :, :] + x2[1, :, :] \\tag{2}x1[1,:,:]+x2[1,:,:](2) x1[2,:,:]+x2[2,:,:](3)x1[2, :, :] + x2[2, :, :] \\tag{3}x1[2,:,:]+x2[2,:,:](3) 但在第0维度的相加过程中出现了shape为(3, 1)的矩阵与shape为(1, 3)的矩阵相加的情况，此时进行广播，将(3, 1)的每一列复制三次为(3, 3)，将(1, 3)的每一行复制三次为(3, 3)，再进行逐元素相加。 其实，上述的过程还可以再细分为，x1[0, 0, :]与x2[0, 0, :]相加时出现了第一次广播，将x1[0, 0, :]复制了三次与x2[0,0, :]完成相加，这里不再赘述，最终想表达的原理是广播机制是在运算过程当中进行的，并非一次性将二者全部复制为对应的最小公倍数形状后再进行运算。","s":"Python的广播机制","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#python的广播机制","p":1600},{"i":1605,"t":"点积在Python中对应的运算符为*，进行矩阵之间的逐元素乘法。在点积运算中，运算矩阵二者形状不一样时可能涉及到广播机制； 矩阵乘法在Python中对应的运算符为@，进行常规矩阵乘法。遵守左矩阵的列数必须等于右矩阵的行数，且输出矩阵的行数等于左矩阵的行数、输出矩阵的列数等于右矩阵的列数的规则。","s":"点积（dot product）与矩阵乘法（matmul product）","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#点积dot-product与矩阵乘法matmul-product","p":1600},{"i":1607,"t":"当你有多个列表（或其他可迭代对象）时，zip函数可以将它们逐个配对成元组。而*操作符用于解压元组，将元组中的元素分别作为参数传递给函数。 以下是一个简单的例子： # zip函数的例子 list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] list3 = ['x', 'y', 'z'] # 使用zip将多个列表配对成元组 zipped_lists = zip(list1, list2, list3) # 打印配对后的元组 for item in zipped_lists: print(item) 输出： (1, 'a', 'x') (2, 'b', 'y') (3, 'c', 'z') 在这个例子中，zip将list1、list2和list3中相同位置的元素组合成元组。 接下来，我们可以使用 * 操作符解压这些元组： # *解压操作的例子 unzipped_lists = zip(*zipped_lists) # 打印解压后的列表 for item in unzipped_lists: print(item) 输出： (1, 2, 3) ('a', 'b', 'c') ('x', 'y', 'z') 在这个例子中，*操作符将先前由zip组合的元组解压，分别放回原始的列表。","s":"zip函数与解压操作*","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#zip函数与解压操作","p":1600},{"i":1609,"t":"参考资料 https://www.jianshu.com/p/41c15d301542 对于不同的网络层，输入的维度虽然不同，但是通常输入的第一个维度都是batch_size，比如torch.nn.Linear的输入(batch_size,in_features)，torch.nn.Conv2d的输入(batch_size, C, H, W)。 而RNN的输入是(seq_len, batch_size, input_size)，batch_size位于第二维度！虽然可以将batch_size和序列长度seq_len对换位置，此时只需令batch_first=True。 但是为什么RNN输入默认不是batch first=True？这是为了便于并行计算。 因为cuDNN中RNN的API就是batch_size在第二维度。进一步讲，batch first意味着模型的输入（一个Tensor）在内存中存储时，先存储第一个sequence，再存储第二个，而如果是seq_len first，模型的输入在内存中，先存储每一个sequence的第一个元素，然后是第二个元素，两种区别如下图所示： seq_len first意味着不同序列中同一个时刻对应的输入单元在内存中是毗邻的，这样才能做到真正的batch计算。","s":"对batch_first参数的理解","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#对batch_first参数的理解","p":1600},{"i":1611,"t":"原文链接：https://arxiv.org/pdf/2404.02905","s":"自回归模型：VAR","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"","p":1610},{"i":1613,"t":"We present Visual AutoRegressive modeling (VAR), a new generation paradigm that redefines the autoregressive learning on images as coarse-to-fine “next-scale prediction” or “next-resolution prediction”, diverging from the standard raster-scan “next-token prediction”. This simple, intuitive methodology allows autoregressive (AR) transformers to learn visual distributions fast and can generalize well: VAR, for the first time, makes GPT-style AR models surpass diffusion transformers in image generation. On ImageNet 256×256 benchmark, VAR significantly improve AR baseline by improving Fréchet inception distance (FID) from 18.65 to 1.73, inception score (IS) from 80.4 to 350.2, with 20× faster inference speed. It is also empirically verified that VAR outperforms the Diffusion Transformer (DiT) in multiple dimensions including image quality, inference speed, data efficiency, and scalability. Scaling up VAR models exhibits clear power-law scaling laws similar to those observed in LLMs, with linear correlation coefficients near −0.998 as solid evidence. VAR further showcases zero-shot generalization ability in downstream tasks including image in-painting, out-painting, and editing. These results suggest VAR has initially emulated the two important properties of LLMs: Scaling Laws and zero-shot generalization. We have released all models and codes to promote the exploration of AR/VAR models for visual generation and unified learning.","s":"摘要","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#摘要","p":1610},{"i":1615,"t":"通过回顾先前的视觉 Autoregressive 模型（即采用 next-token 范式进行生成），从 scaling laws 和性能的角度将其与 NLP 领域的 LLMs 进行比较，宏观上说明了传统视觉 AR 模型存在的问题。 传统视觉 AR 模型是否遵循 scaling laws 有待探索和验证 性能有待提升 上图展示了传统 Visual AR 模型在 scaling laws 方面的局限性，并以 FID 作为评价指标，展示了性能效果方面的不足。","s":"研究背景与动机","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#研究背景与动机","p":1610},{"i":1617,"t":"首先文章花费了大量篇幅来用数学语言描述以 next-token prediction 作为生成范式的传统视觉自回归模型的定义和流程，大致包括以下流程： 输入 raw image，Encoder 得到对应的 feature map。 f=E(im)f=\\mathcal{E}(im)f=E(im) 输入feature map，Quantizer 得到对应的量化 image token。 q=Q(f)q=\\mathcal{Q}(f)q=Q(f) 在量化步骤，会将每个特征向量映射到与其在欧几里得意义上最接近的 Codebook ZZZ 中的 code。 q(i,j)=(arg⁡min⁡v∈[V]∥lookup(Z,v)−f(i,j)∥2)∈[V]q^{(i,j)}=\\left(\\arg\\min_{v\\in[V]}\\|\\text{lookup}(Z,v)-f^{(i,j)}\\|_2\\right)\\in[V]q(i,j)=(argv∈[V]min​∥lookup(Z,v)−f(i,j)∥2​)∈[V] Decoder 通过接收在 Codebook 中查找得到的 f^\\hat{f}f^​ 生成重构的图像。 f^=lookup⁡(Z,q)\\hat{f}=\\operatorname{lookup}(Z,q)f^​=lookup(Z,q) im^=D(f^)\\hat{im}=\\mathcal{D}(\\hat{f})im^=D(f^​) L=∥im−im^∥2+∥f−f^∥2+λPLP(im^)+λGLG(im^)\\mathcal{L}=\\|im-i\\hat{m}\\|_2+\\|f-\\hat{f}\\|_2+\\lambda_\\text{P}\\mathcal{L}_\\text{P}(i\\hat{m})+\\lambda_\\text{G}\\mathcal{L}_\\text{G}(i\\hat{m})L=∥im−im^∥2​+∥f−f^​∥2​+λP​LP​(im^)+λG​LG​(im^) 下图展示了传统 VAR 方法与本文提出的 VAR 方法的对比。其中图（a）展示了 NLP 领域的 next-token prediction，图（b）展示了上述公式定义的 next-image-token prediction 的过程，包含量化与展平的步骤，图（c）展示了本文提出的 next-scale prediction。 文章发现了目前传统 VAR 模型存在的三个问题。 VQGAN 违反了 Autoregressive 的数学前提。Autoregressive 模型假设当前时间步的 token xtx_txt​ 只取决于其之前时间步的 token 前缀 (x1,x2,...,xt−1)(x_1, x_2, ..., x_{t-1})(x1​,x2​,...,xt−1​)，具有单向相关性（unidirectional）。而 VQGAN 中的 image encoder 直接从具有双向相关性（bidirectional）的 feature map 中进行量化和展平，因此得到的 image tokens 同样具有双向相关性，违反了数学假设。 作者在附录中检查了 VQGAN 模型在量化步骤之前的注意力层输出的图像注意力分数，证明了较强的双向相关性。 作者解释，这是因为在图像 VAE 以及其他类似的工作的自注意力层中，并没有使用任何注意力掩码机制，如 sequence mask 以及 causal attention 等，导致了双向相关性。 This is not surprising since the VQVAE model, trained to reconstruct images, leverages self-attention layers without any attention mask. Some work [67] has used causal attention in self-attention layers of a video VAE, but we did not find any image VAE work uses causal self-attention. image tokens 的空间结构性被破坏。由于先前的 VAR 工作均是采用类似于先列后行的一维顺序存储 image tokens 并进行 Autoregressive 生成，image tokens 的扁平化破坏了图像特征图固有的空间局部性。 时间复杂度过高，影响生成效率。使用传统的视觉 Autoregressive 方法生成 x=(x1,x2,…,xn×n)x=(x_1,x_2,\\ldots,x_{n\\times n})x=(x1​,x2​,…,xn×n​) 的 token 序列，需要 O(n2)\\mathcal{O}(n^{2})O(n2) 的注意力步骤以及 O(n6)\\mathcal{O}(n^{6})O(n6) 的计算复杂度。","s":"问题发现与提出","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#问题发现与提出","p":1610},{"i":1620,"t":"本文的工作重新考虑了以什么样的顺序生成图像。人类通常以分层的方式感知或创建图像，首先捕获全局结构，然后捕获局部细节。这种多尺度、由粗到精（coarse-to-fine）的方法很自然地给图像暗示了一种顺序。此外，受广泛使用的多尺度（multi-scale）设计工作的启发，本文将图像的自回归学习定义为下图展示的 next-scale prediction。 自回归过程从分辨率为 1×11\\times11×1​ 的 token map 开始，并逐步扩大分辨率：在每一步，Transformer 以之前生成的所有分辨率的 token maps 为条件预测下一大分辨率的 token map。 通过从 next-token prediction 策略转变为 next-scale prediction 策略，重新概念化了对图像的自回归建模。在这里，自回归单元是整个 token map，而不是传统方法的单个 token。先将特征图 f∈Rh×w×Cf \\in \\mathbb{R}^{h \\times w \\times C}f∈Rh×w×C 量化为 KKK 个多尺度标记图 (r1,r2,…,rK)(r_1, r_2, \\ldots, r_K)(r1​,r2​,…,rK​)，每个图的分辨率 hk×wkh_k \\times w_khk​×wk​ 逐步增加，最终达到 rKr_KrK​ 与原始特征图的分辨率 h×wh \\times wh×w 匹配。自回归似然性公式为： p(r1,r2,…,rK)=∏k=1Kp(rk∣r1,r2,…,rk−1)p(r_1, r_2, \\ldots, r_K) = \\prod_{k=1}^{K} p(r_k \\mid r_1, r_2, \\ldots, r_{k-1})p(r1​,r2​,…,rK​)=k=1∏K​p(rk​∣r1​,r2​,…,rk−1​) 其中每个自回归单元 rk∈[V]hk×wkr_k \\in [V]^{h_k \\times w_k}rk​∈[V]hk​×wk​ 是包含 hk×wkh_k \\times w_khk​×wk​ 个标记的第 kkk 个尺度的标记图，而序列 (r1,r2,…,rk−1)(r_1, r_2, \\ldots, r_{k-1})(r1​,r2​,…,rk−1​) 作为 rkr_krk​ 的“前缀”。在第 kkk 个自回归步骤中，所有 rkr_krk​ 中的 h_k \\times w_k 标记的分布将并行生成，并以 rkr_krk​ 的前缀和关联的第 kkk 个位置嵌入图为条件。如下图所示。 请注意，在 VAR 的训练中，使用逐块的因果注意力掩码，以确保每个 rkr_krk​ 只能关注其前缀 r≤kr_{\\leq k}r≤k​，从而满足 Autoregressive 模型的数学假设前提。 本文在结构上的主要贡献是开发了适用于 next-scale prediction 的 multi-scale VQ quantizer，同时结合新的 VQ quantizer 提出了新的图像自回归生成模型，并进一步论证了该方法展示出的与 LLMs 类似的 scaling laws 能力。","s":"主要方法","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#主要方法","p":1610},{"i":1622,"t":"Multi-scale VQ quantizer​ 首先，需要设计一个满足多尺度要求的 VQ tokenizer，作者使用了与 VQVAE 相同的框架，并采用了改进的多尺度量化层，并加入了对 feature map 的残差设计：对 encoder 输出的 feature map 进行 interpolate 构建不同尺度的 feature map，不同 feature map 之间通过计算残差的方式进行连接，并结合 quantizer 得到离散序列。VQ quantizer（VAR tokenizer）的具体算法如下图所示。 VAR Transformer​ 作者将重点放在了 VAR tokenizer 的理念和设计上，在 VAR Transformer 中保持了与 GPT-2 和 VQGAN 相同的简洁设计，在结构设计上只融合了 adaptive normalization（AdaLN）。 在训练完 VQ tokenizer 后，需要在离散化后的序列上训练生成模型，上图中 r1,...,rkr_1,...,r_kr1​,...,rk​ 分别表示不同尺度的离散序列。作者将传统的单向自回归模型修改为双向与单向混合的模式，同一个尺度的图片内部使用双向 attention，token 彼此可见，不同尺度的图片之间使用单向 attention ，具有从粗粒度到细粒度的 causal dependency，保证了满足 Autoregressive 假设的数学前提。 单个尺度的图片可以一步生成，生成所需的迭代步数取决于 VQ tokenizer 设计的尺度层数 KKK​。","s":"模型主要结构","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#模型主要结构","p":1610},{"i":1624,"t":"期待更好的 VQVAE tokenizer 可以提升 VAR 模型的能力。 本文只实现了 class-conditional generation，可以继续扩展为多模态任务，text-prompt generation。目前我认为比较常见的一个想法就是结合 T5 text-encoder，将文字 视频生成。可以将视频看作是 3D pyramids，尝试 3D next-scale prediction。 作者表示，与 Diffusion Model-based 的视频生成模型 SORA 相比，由于 VAR 模型在结构与上与 LLMs 更相似，可以更好地与 LLMs 的技术相结合。","s":"局限性与展望","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#局限性与展望","p":1610},{"i":1626,"t":"本文主要从视觉 Autoregressive 模型生成图像像素的顺序出发，重新思考，通过人类感知图像的方式设计了 next-scale 的生成范式，每一步迭代生成一张完整的图像，但生成图像的分辨率逐步提升，最终得到高像素目标图像。 对文章开篇提出的问题的解决： 使用 causal attention 对自注意力进行掩码，从而满足 Autoregressive 模型对时间序列的数学假设。 在 quantization 步骤使用二维的方式存储整个 image token map，保证了结构的完整性。 得益于多尺度思想的生成方式，时间复杂度和计算开销显著降低。以生成 n2n^2n2 个 image tokens 为例，传统的视觉 Autoregressive 生成需要 O(n2)\\mathcal{O}(n^2)O(n2) 次解码迭代和 O(n6)\\mathcal{O}(n^6)O(n6) 次总计算。相比之下，本文提出的 VAR 只需要 O(log(n))\\mathcal{O}(log(n))O(log(n)) 次迭代和 O(n4)\\mathcal{O}(n^4)O(n4)​ 次总计算量。 文章还论证了 VAR 模型展现出的与 LLMs 相同的 scaling laws 能力。","s":"总结","u":"/en/docs/Deep-Learning/生成模型总结/Visual-Autoregressive-Modeling-Scalable-Image-Generation-via-Next-Scale-Prediction","h":"#总结","p":1610},{"i":1628,"t":"参考资料： CVPR 2023 Tutorial: Denoising Diffusion Models: A Generative Learning Big Bang CVPR 2024 Tutorial: Diffusion-based Video Generative Models 【较真系列】讲人话- Diffusion Model 全解（原理+代码+公式）","s":"图像生成：扩散模型","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"","p":1627},{"i":1631,"t":"基于 U-Net 结构：被广泛用于 text-to-image Diffusion Model 中 Imagen Stable Diffusion eDiff-I 基于 Transformer 结构：将图像分割为 patch 后作为 tokens 输入至 Transformer 中 Scalable Diffusion Models with Transformers One Transformer Fits All Distributions in Multi-Modal Diffusion at Scale Simple Diffusion: End-to-end Diffusion for High Resolution Images","s":"Diffusion Model 的结构","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#diffusion-model-的结构","p":1627},{"i":1633,"t":"目前有三种常见的引导（Guidance）方法： RGB Pixel Guidance Text Guidance Reference Image Guidance RGB Pixel Guidance​ ICLR 2022, SDEdit: Guided Image Synthesis and Editing with Stochastic Differential Equations​ Given an input image with user guide in a form of manipulating RGB pixels, SDEdit first adds noise to the input, then subsequently denoises the resulting image through the SDE prior to increase its realism. 通过用户在原图上给出一些引导，比如 RGB 像素的涂鸦（stroke painting），甚至可以不给定原图，直接纯手工绘制一个涂鸦画作为输入，模型首先对输入添加噪声，最后通过随机微分方程的先验增加图片的真实性，最终根据输入的带有引导信息的图像生成对应的结果。 Synthesizing images from strokes with SDEdit. The blue dots illustrate the editing process of our method. The green and blue contour plots represent the distributions of images and stroke paintings, respectively. Given a stroke painting, we first perturb it with Gaussian noise and progressively remove the noise by simulating the reverse SDE. This process gradually projects an unrealistic stroke painting to the manifold of natural images. 下图中的蓝点代表本文的编辑过程，绿色分布代表真实图像的分布，蓝色分布代表 stroke paintings 的分布。 当模型首先被输入 stroke painting 后，使用高斯噪声进行扰动，然后通过模拟反向随机微分方程逐步移除噪声。这一过程逐步将不真实的 stroke painting 投影到自然、真实图像的分布中。 Text Guidance​ ICLR 2023, DiffEdit: Diffusion-based semantic image editing with mask guidance​ 论文引入一个掩码生成模块，该模块确定图像的哪一部分应该被编辑，然后只对掩码部分执行基于文本的扩散。 首先用户输入参考图像以及两个查询文本和参考文本，查询文本 Query 是参考图像的标题或用于描述图像，参考文本 R 用于描述想要替换的效果。 掩码生成模块首先为输入图像添加噪声，并进行两次去噪，一次通过参考文本 R 进行，一次通过查询文本 Q 进行，并根据去噪结果的差异推导出参考图像中的掩码区域。 CVPR 2023, Imagic: Text-Based Real Image Editing with Diffusion Models​ 模型接受真实图像（参考图像）和目标图像文本描述 TTT 作为输入。 模型首先对目标文本进行编码，得到初始嵌入表示 etgte_{tgt}etgt​，然后优化 etgte_{tgt}etgt​ 对原始图像进行重构，得到优化后的目标文本嵌入表示 eopte_{opt}eopt​。​ 目标文本首先通过一个文本编码器，该编码器输出其对应的文本嵌入 etgt∈RT×d\\mathbf{e}_{t g t} \\in \\mathbb{R}^{T \\times d}etgt​∈RT×d，其中 TTT 是给定目标文本中的 token 数量，而 ddd 是 token 的嵌入维度。固定生成扩散模型 f0f_0f0​ 的参数，并使用重构损失来优化目标文本嵌入 ： L(x,e,θ)=Et,ϵ[∥ϵ−fθ(xt,t,e)∥22]\\mathcal{L}(\\mathbf{x}, \\mathbf{e}, \\theta)=\\mathbb{E}_{t, \\epsilon}\\left[\\left\\|\\boldsymbol{\\epsilon}-f_\\theta\\left(\\mathbf{x}_t, t, \\mathbf{e}\\right)\\right\\|_2^2\\right]L(x,e,θ)=Et,ϵ​[∥ϵ−fθ​(xt​,t,e)∥22​] 其中 t∼Uniform⁡[1,T]t \\sim \\operatorname{Uniform}[1, T]t∼Uniform[1,T]，xt\\mathbf{x}_txt​ 是输入图像 x\\mathbf{x}x 的噪声版本，θ\\thetaθ 是预训练的扩散模型权重。这使输入的图像尽可能接近的文本嵌入表示，即只更新 Text Embedding 的参数，从而得到 eopt\\mathbf{e}_{\\text {opt}}eopt​​。 这种邻近性使得在嵌入空间中进行有意义的线性插值成为可能，而对于远距离的嵌入表示来说并不表现出线性行为。 此时使用的是低分辨率版本的 Diffusion Model，分辨率 64×6464 \\times 6464×64，训练设定为 100 次迭代。 由于第一步进行的 Text Embedding Optimization 步数较少，优化后的 eopte_{opt}eopt​ 并不能直接与输入图像对齐。 因此第二步固定优化后的目标文本嵌入表示 eopte_{opt}eopt​​，仍使用第一步中的 Reconstrcution Loss 对第一步使用的 64×6464 \\times 6464×64 分辨率的预训练 Diffusion Model 进行微调，设定为 1500 次迭代。 同时，为了捕获原始图像中的细节，保持高保真度，文章还会使用初始的 Text Embedding 层，即 etgte_{tgt}etgt​ 以及原始图像通过 Reconstruction Loss 再 fine-tune 一个从 64×6464 \\times 6464×64 到 256×256256 \\times 256256×256 的超分辨率 Diffusion Model，设定为 1500 次迭代。 使用初始目标文本嵌入表示 etgte_{tgt}etgt​ 插值优化后的目标文本表示 eopte_{opt}eopt​​​，插值方式如下： eˉ=η⋅etgt+(1−η)⋅eopt\\bar{\\mathbf{e}}=\\eta\\cdot\\mathbf{e}_{tgt}+(1-\\eta)\\cdot\\mathbf{e}_{opt}eˉ=η⋅etgt​+(1−η)⋅eopt​ 插值得到的文本嵌入表示分别通过 64×6464 \\times 6464×64 的基础 Diffusion Model、从 64×6464 \\times 6464×64 到 256×256256 \\times 256256×256 的超分辨率 Diffusion Model，以及最终的从 256×256256 \\times 256256×256 到 1024×10241024 \\times 10241024×1024 的超分辨率 Diffusion Model 得到最终的目标图像。 InstructPix2Pix: Learning to Follow Image Editing Instructions​ 主要方法​ Our method consists of two parts: generating an image editing dataset, and training a diffusion model on that dataset. (a) We first use a finetuned GPT-3 to generate instructions and edited captions. (b) We then use StableDiffusion [52] in combination with Prompt-to-Prompt [17] to generate pairs of images from pairs of captions. We use this procedure to create a dataset (c) of over 450,000 training examples. (d) Finally, our InstructPix2Pix diffusion model is trained on our generated data to edit images from instructions. At inference time, our model generalizes to edit real images from human-written instructions. 论文使用现有的 LLMs 工具生成训练数据集，再使用上述生成的数据微调 Stable Diffusion Model，最终得到可以根据指令 caption 进行图像编辑的 Diffusion Model。 训练数据生成阶段： 首先使用 Input Caption 描述一张图像，并使用 GPT-3 通过指令 Instruction 生成修改过后的图像描述 Edited Caption，如 Input Caption “一张女孩骑在马上的图片”通过指令 Instruction “让她骑在龙上”得到 Edited Caption “一张女孩骑在龙上的图片” 使用 Stable Diffusion 以及 Prompt2Prompt 通过 Input Caption 以及 Edited Caption 生成一组图像对 最终得到图像对以及指令 Instruction 组成一组训练数据 使用上述训练数据微调 Stable Diffusion： 首先，对于一张图像 xxx，我们将其通过编码器 E\\mathcal{E}E 转换为对应的潜变量 z=E(x)z=\\mathcal{E}(x)z=E(x) 。然后，通过一系列的时间步长 t∈Tt \\in \\mathrm{T}t∈T，我们将噪声逐步加入到潜变量 zzz 中，得到带有噪声的潜变量 ztz_tzt​ 。这里的噪声水平随着时间步长的增加而增大。 接下来，我们训练一个网络 ϵθ\\epsilon_\\thetaϵθ​ ，使其能够在给定图像条件 cIc_IcI​ 和文本指令条件 cTc_TcT​ 的情况下，预测出在当前时间步长 ttt，ztz_tzt​ 所加入的噪声。 为了达到这一目标，我们需要最小化以下目标函数 Latent Diffusion Objective： L=EE(x),E(cI),cT,ε∼N(0,1),t[∥ε−ϵθ(zt,t,E(cI),cT))∥22]\\left.L=\\mathbb{E}_{\\mathcal{E}(x), \\mathcal{E}\\left(c_I\\right), c_T, \\varepsilon \\sim N(0,1), t}\\left[\\| \\varepsilon-\\epsilon_\\theta\\left(z_t, t, \\mathcal{E}\\left(c_I\\right), c_T\\right)\\right) \\|_2^2\\right]L=EE(x),E(cI​),cT​,ε∼N(0,1),t​[∥ε−ϵθ​(zt​,t,E(cI​),cT​))∥22​] E\\mathbb{E}E 代表数学期望，训练网络 ϵθ\\epsilon_\\thetaϵθ​​​ 使其预测的噪声与真实噪声之间的差距尽可能小，即最小化它们之间的欧几里得距离。 To support image conditioning, we add additional input channels to the first convolutional layer, concatenating ztz_tzt​ and E(cI)\\mathcal{E}(c_I)E(cI​). 为了可以使 Stable Diffusion 支持以图像为条件，作者在第一个卷积层中将 ztz_tzt​ 与 E(cI)\\mathcal{E}(c_I)E(cI​)​​​ 进行 concat，同时扩充对应网络的 channel 数。 在微调之前，预训练扩散模型通过 Stable Diffusion v1.5 checkpoint 进行初始化，额外增加通道数的卷积参数都被初始化为 0。 训练设置与参数​ 模型在 256×256256 \\times 256256×256​ 分辨率上的 batch size 为 1024，Stable Diffusion 的扩散步数设置为 10, 000，在 8 张 40 GB 显存的 NVIDIA A100 GPU 上训练了 25.5 小时。 推理设置与参数​ 虽然训练过程在 256×256256 \\times 256256×256 分辨率上进行，但是在推理阶段直接生成 512×512512 \\times 512512×512 分辨率的图像效果仍然很好，推理过程扩散步数设置为 100，在 NVIDIA A100 GPU 上推理速度为 9 秒。 Reference Image Guidance​ CVPR 2023, DreamBooth: Fine Tuning Text-to-Image Diffusion Models for Subject-Driven Generation​ 通过接收一组（3~5 张）相同目标（文中称为主题 Subject）的图像，模型可以根据用户提供的 Text Guidance 生成统一主题但不同姿势、不同场景的语义上新的图像。 Text-to-Image Diffusion Model​ 本文首先使用了一个预训练的 Text-to-Image Diffusion Model x^θ\\hat{x}_\\thetax^θ​，该模型在给定初始噪声图 ϵ∼N(0,I)\\epsilon \\sim \\mathcal{N}(0, \\mathbf{I})ϵ∼N(0,I) 和由文本编码器 Γ\\GammaΓ 和文本提示 PPP 生成的条件向量 c=Γ(P)\\mathbf{c} = \\Gamma(P)c=Γ(P) 的情况下，生成图像 xgen=x^θ(ϵ,c)x_{gen} = \\hat{x}_\\theta(\\epsilon, \\mathbf{c})xgen​=x^θ​(ϵ,c)。使用平方误差损失计算重构损失进行训练，以对噪声图像 zt:=αtx+σtϵz_t := \\alpha_t \\mathbf{x} + \\sigma_t \\epsilonzt​:=αt​x+σt​ϵ 进行去噪，如下所示： Ex,c,ϵ,t[wt∥x~θ(αtx+σtϵ,c)−x∥22]\\mathbb{E}_{\\mathbf{x}, \\mathbf{c}, \\epsilon, t} \\left[ w_t \\| \\tilde{x}_\\theta (\\alpha_t \\mathbf{x} + \\sigma_t \\epsilon, \\mathbf{c}) - \\mathbf{x} \\|_2^2 \\right] \\quadEx,c,ϵ,t​[wt​∥x~θ​(αt​x+σt​ϵ,c)−x∥22​] 其中 x\\mathbf{x}x 是训练集中的 ground-truth 图像，c\\mathbf{c}c 是文本提示 PPP​ 生成的条件向量。 Unique Subject Identifier​ Our first task is to implant the subject instance into the output domain of the model such that we can query the model for varied novel images of the subject. 为了使生成模型生成更多主题不变的相关图像，首要的任务是将参考图像的主题植入到生成模型的输出域中。 一种自然的想法就是微调模型，然而在大规模语料库上预训练的 LLMs 在少量样本上进行 few-shot 微调时很容易产生**过拟合（overfitting）以及语言漂移（language drift）**问题，因此本文设计了一种新颖的微调方法，为输入的每组主题图像匹配 Subject Indentifier。 具体而言，首先模型为每一组特定主题的图像产生一个形如“A [identifier] [class noun]”的标签，其中： [identifier] 是与主题相关的唯一标识，也是模型可以保存主题特征的重要原因。 本文提出的 Subject Identifier 产生方法是从 Vocabulary 中找出罕见的 tokens，并将其映射到文字空间，以减少 identifier 中包含的先验。 For Imagen, we find that using uniform random sampling of tokens that correspond to 3 or fewer Unicode characters (without spaces) and using tokens in the T5-XXL tokenizer range of {5000, ..., 10000} works well. 对于 Imagen 作为生成模型的情况，作者发现 identifier 所包含的 token 数小于等于 3 时效果最好，当使用 T5-XXL Tokenizer 时，选择 {5000, ... , 10000} 的 token 效果较好。 [class noun] 是类别标签，可以通过用户提供或分类器生成，将模型对类别具有的先验融合到主题标识中。 Class-specific Prior Preservation Loss​ 在微调生成模型时会面临两个主要的问题：语言漂移（Language Drift）和多样性下降。 为了解决上述问题，作者提出了 Class-specific Prior Preservation Loss。 首先使用使用固定参数的 Text-to-Image Diffusion Model 产生 ground-truth 图像 xpr=x^θ(zt1,cpr)x_{pr} = \\hat{x}_\\theta(z_{t_1}, c_{pr})xpr​=x^θ​(zt1​​,cpr​)，其中随机初始噪声 zt1∼N(0,I)z_{t_1} \\sim \\mathcal{N}(0, \\mathbf{I})zt1​​∼N(0,I) 和条件向量 cpr:=Γ(f(\\mathbf{c}_{\\mathrm{pr}}:=\\Gamma(f(cpr​:=Γ(f(\"A [class noun]\" ))))))。损失变为： Ex,c,ϵ,ϵ′,t[wt∥x^θ(αtx+σtϵ,c)−x∥22+λwt′∥x^θ(αt′xpr+σt′ϵ′,cpr)−xpr∥22]\\mathbb{E}_{\\mathbf{x}, \\mathbf{c}, \\epsilon, \\epsilon', t} \\left[ w_t \\| \\hat{x}_\\theta (\\alpha_t \\mathbf{x} + \\sigma_t \\epsilon, \\mathbf{c}) - \\mathbf{x} \\|_2^2 + \\lambda w_{t'} \\| \\hat{x}_\\theta (\\alpha_{t'} x_{pr} + \\sigma_{t'} \\epsilon', c_{pr}) - x_{pr} \\|_2^2 \\right]Ex,c,ϵ,ϵ′,t​[wt​∥x^θ​(αt​x+σt​ϵ,c)−x∥22​+λwt′​∥x^θ​(αt′​xpr​+σt′​ϵ′,cpr​)−xpr​∥22​] 其中第二项是作者提出的用于保持模型对类别先验的损失函数，λ\\lambdaλ 控制该项的相对权重。 微调 Diffusion Model​ 在微调过程中，每次迭代输入 3~5 张主题图像，进行 1000 次迭代就可以达到比较好的效果。 当生成模型为 Imagen 时，在 TPUv4 上耗时 5 min；当生成模型为 Stable Diffusion 时，在 NVIDIA A100 GPU 上耗时 5 min。 其他细节​ 本文使用的 Tokenizer 是 SentencePiece，编码文本的语言模型是 T5-XXL。 训练数据来自于作者的搜集，共包含 30 个主题，其中 21 个主题是物体，其余 9 个主题是动物。","s":"使用 Diffusion Model 对图像进行编辑和定制","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#使用-diffusion-model-对图像进行编辑和定制","p":1627},{"i":1636,"t":"NeurIPS 2022, Video Diffusion Models​ 2022, Imagen Video: High Definition Video Generation with Diffusion Models​ ICLR 2023, Make-A-Video: Text-to-Video Generation without Text-Video Data​ CVPR 203, Align your Latents: High-Resolution Video Synthesis with Latent Diffusion Models (Video LDM)​","s":"视频生成模型","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#视频生成模型","p":1627},{"i":1638,"t":"arXiv 2023, Structure and Content-Guided Video Synthesis with Diffusion Models (Gen-1)​ arXiv 2023, Pix2Video: Video Editing Using Image Diffusion​","s":"视频的风格转换（Style Transfer）和编辑（editing）方法","u":"/en/docs/Deep-Learning/生成模型总结/Diffusion-Models","h":"#视频的风格转换style-transfer和编辑editing方法","p":1627},{"i":1640,"t":"介绍 欢迎来到笔记本的深度学习部分 若更新不及时，欢迎通过 GitHub 联系交流 有关论文笔记的说明 为了节省写作时间，论文笔记部分的文章通常只讲述文章的方法论，Introduction 以及 Related Work 详情可以参考论文原文","s":"Welcome","u":"/en/docs/Deep-Learning/intro","h":"","p":1639},{"i":1642,"t":"如果可以帮到你的话就给个免费的 Star 吧！","s":"支持我！","u":"/en/docs/Deep-Learning/intro","h":"#支持我","p":1639},{"i":1644,"t":"告示栏的启用 在docusaurus.config.js的themeConfig中加入以下代码 announcementBar: { id: 'announcementBar-3', content: 'Welcome to my notebook!', isCloseable: false, }, 告示栏的背景个性化 在custom.css中加入以下代码 div[class^='announcementBar_'] { background: repeating-linear-gradient( -35deg, var(--ifm-color-primary-lighter), var(--ifm-color-primary-lighter) 20px, var(--ifm-color-primary-lightest) 10px, var(--ifm-color-primary-lightest) 40px ); font-weight: 700; }","s":"告示栏","u":"/en/docs/Others/博客搭建/announcement_bar","h":"","p":1643},{"i":1646,"t":"按照官方文档将 Docusaurus 从 V2.4.3 升级至 V3.5.2，记录以下主要问题。","s":"更新至 Docusaurus V3","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"","p":1645},{"i":1648,"t":"升级至 V3 版本需要升级 MDX 版本至 V3，升级后在渲染 mardown 文件时出现了大量报错，这是因为在新的 MDX 中默认将将 .md 文件也当作 .mdx 文件进行渲染了，在 docusaurus.config.js 中进行如下声明即可。 markdown:{ format: \"detect\" },","s":"MDX 升级后的大量渲染报错","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#mdx-升级后的大量渲染报错","p":1645},{"i":1650,"t":"If you use Docusaurus to render Math Equations, you should upgrade the MDX plugins. Make sure to use remark-math 6 and rehype-katex 7 for Docusaurus v3 (using MDX v3). We can't guarantee other versions will work. Docusaurus 默认使用 katex 进行 LaTex 公式渲染，需要同步升级 remark-math 以及 rehype-katex。","s":"升级后的数学公式渲染问题","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#升级后的数学公式渲染问题","p":1645},{"i":1652,"t":"Docusaurus now implements admonitions with Markdown Directives (implemented with remark-directive). Docusaurus 在升级后需要额外安装 remark-directive 来实现 Admonitions 的渲染，执行下面的命令安装插件。 npm install --save remark-directive","s":"Admonitions 无法正常渲染","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#admonitions-无�法正常渲染","p":1645},{"i":1654,"t":"按照官方文档的说明修改 package.json 文件中的各种依赖包的版本，在升级过程中最好首先删除原项目中的 node_modules 文件夹，在修改完所有版本后，直接执行 npm install 来避免更新过程中新版本包和其它旧版本包的依赖关系发生冲突。","s":"更新方式","u":"/en/docs/Others/博客搭建/upgrade_to_docusaurusv3","h":"#更新方式","p":1645},{"i":1656,"t":"tip 欢迎来到笔记本的其他部分","s":"Welcome","u":"/en/docs/Others/intro","h":"","p":1655},{"i":1658,"t":"如果可以帮到你的话就给个免费的 Star 吧！","s":"支持我！","u":"/en/docs/Others/intro","h":"#支持我","p":1655},{"i":1661,"t":"dock显示的图标是全局图标，程序启动器的desktop文件位于/usr/share/applications中，全局主题中图标主题的程序logo位于~/.local/share/icons/Mkos-Big-Sur-Night/128x128/apps(deppending on specific situation)中。在logo文件夹中挑选想要的logo，在desktop中的icon位置修改即可 应用更新的时候会同时更新.desktop文件，因此在更换图标是最好直接更换在主题文件中替换icon，而不是更改desktop的icon路径 Finder小组件中application title文字不能垂直居中，可以更换为Window title插件","s":"一、latte-dock","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#一latte-dock","p":1659},{"i":1663,"t":"Finder栏中Plasmoids左半部分从左至右依次为： kpple menu application title/window titile(if the text of application title can't be centered vertically) global menu 右半部分从左至右依次为： resources monitor (fork) mcOS BS Inline Battery 网络 Control Center(replace the icon with search icon) Control Center(replace the icom with menu icon) Better Inline Clock 安装方法： plasmpkg2 -u xxx.plasmoid","s":"二、Kde Plasmoids","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#二kde-plasmoids","p":1659},{"i":1666,"t":"未知，可能是由Windows休眠模式导致","s":"一、发生原因","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#一发生原因","p":1664},{"i":1668,"t":"使用ntfsfix修复ntfs磁盘 安装ntfsfix yay -S ntfsfix 查看问题分区 df -h 修复 sudo ntfsfix /dev/your_partition 重启 reboot","s":"二、解决方案","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#二解决方案","p":1664},{"i":1671,"t":"树的性质： 一棵 N 个结点的树有 N-1 条边 树的总度数+1=树的结点数 树的度=树中度最大结点的度数 二叉树的性质： 叶子结点数等于度为 2 的结点数加 1，即n0 = n2 + 1 树转化为二叉树： 参考资料：知乎 **加线。**在所有的兄弟结点之间加一条线。 去线。树中的每个结点，只保留它与第一个孩子结点的连线，删除其他孩子结点之间的连线。 调整。每个结点的原来的孩子是结点的左孩子，由原来的兄弟结点转过来的孩子是结点的右孩子。 二叉排序树：每个结点的左子树上的所有结点值都更小，每个结点的右子树上的所有结点的值都更大。 平衡二叉排序树：要么是空树，要么左子树的高度与右子树的高度之差小于等于1。","s":"树","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#树","p":1669},{"i":1673,"t":"图的表示： 邻接矩阵 邻接表**：每一行表示的是一个顶点所连接的顶点，链表不具有指向性** 邻接表的搜索 最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。 Kruskal算法 Prim算法 最短路径 ​ ​","s":"图","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#图","p":1669},{"i":1675,"t":"通过编写脚本函数的方式，手动开启代理","s":"终端代理","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"","p":1674},{"i":1677,"t":"新建脚本文件terminal_proxy.sh # 开启代理 function proxy_on(){ export ALL_PROXY=socks5://127.0.0.1:7890 export http_proxy=http://127.0.0.1:7890 export https_proxy=https://127.0.0.1:7890 echo -e \"已开启代理\" } # 关闭代理 function proxy_off(){ unset ALL_PROXY unset http_proxy unset https_proxy echo -e \"已关闭代理\" }","s":"一、编写脚本","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#一编写脚本","p":1674},{"i":1679,"t":"fish的配置文件：~/.config/fish/config.fish zsh的配置文件：~/.zshrc bash的配置文件：~/.bashrc 在配置文件末尾添加以下代码 source /path/terminal_proxy.sh","s":"二、关联终端配置文件","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#二关联终端配置文件","p":1674},{"i":1681,"t":"在终端中输入以下命令即可开启代理 proxy_on 在终端中输入以下命令即可关闭代理 proxy_off","s":"三、使用","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#三使用","p":1674},{"i":1683,"t":"tip 大数除法是指被除数大小超出long long范围，而导致必须使用字符串存储的除法，属于简单模拟的范畴","s":"大数除法","u":"/en/docs/Tui-Mian/机试/大数除法","h":"","p":1682},{"i":1685,"t":"通过模拟列竖式手动计算除法，实现使用字符串存储被除数的大数除法","s":"思路","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#思路","p":1682},{"i":1687,"t":"string division(string s, int divisor) { /* * 通过模拟列竖式手算除法完成字符串存储的大数除法 */ string quotient; // 商 int idx = 0; // 当前处理的数字在原始字符串中的位置 int remainder = 0; // 余数 int temp = 0; while (idx < s.size()) { // 一直循环处理到索引等于长度 temp = remainder * 10 + (s[idx] - '0'); // 当前进行除法运算的temp if (temp >= divisor) { // 如果能除的动，则将当前的商插入quotient，并更新余数 quotient.push_back(temp / divisor + '0'); remainder = temp % divisor; } else { // 除不动时分两种情况 if (!quotient.empty()) { // 商目前不为空，此时按照竖式方法，需要向商中加入0，再接着下一次循环 quotient.push_back('0'); } remainder = temp; // 商目前为空，按照竖式计算方法，只更新余数，商保持为空 } idx++; // 更新索引位置 } if (quotient.empty()) { // 如果一直除不动，循环结束商还为空，则赋值为0字符串 quotient.assign(\"0\"); } return quotient; // 返回商字符串 }","s":"参考代码","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#参考代码","p":1682},{"i":1689,"t":"将大数除法与进制转换相结合。 tip 北京大学机试真题，N诺链接 完整代码如下： #include <bits/stdc++.h> using namespace std; string division(string s, int divisor) { /* * 通过模拟列竖式手算除法完成字符串存储的大数除法 */ string quotient; // 商 int idx = 0; // 当前处理的数字在原始字符串中的位置 int remainder = 0; // 余数 int temp = 0; while (idx < s.size()) { // 一直循环处理到索引等于长度 temp = remainder * 10 + (s[idx] - '0'); // 当前进行除法运算的temp if (temp >= divisor) { // 如果能除的动，则将当前的商插入quotient，并更新余数 quotient.push_back(temp / divisor + '0'); remainder = temp % divisor; } else { // 除不动时分两种情况 if (!quotient.empty()) { // 商目前不为空，此时按照竖式方法，需要向商中加入0，再接着下一次循环 quotient.push_back('0'); } remainder = temp; // 商目前为空，按照竖式计算方法，只更新余数，商保持为空 } idx++; // 更新索引位置 } if (quotient.empty()) { // 如果一直除不动，循环结束商还为空，则赋值为0字符串 quotient.assign(\"0\"); } return quotient; // 返回商字符串 } int main() { string s; while (cin >> s) { vector<int> vec; int len = s.size(); while (s != \"0\") { int remainder = (s[len - 1] - '0') % 2; vec.push_back(remainder); s = division(s, 2); len = s.size(); } if (vec.empty()) { cout << \"0\"; } else { for (auto it = vec.rbegin(); it != vec.rend(); it++) { cout << *it; } } cout << endl; } return 0; }","s":"扩展","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#扩展","p":1682},{"i":1692,"t":"简述大数定理。 大数定理描述了大样本情况下随机变量的均值与其期望值之间的关系。对于独立同分布的随机变量序列，随着样本数量的增加，样本均值会以较高的概率接近其期望值。 简述中心极限定理。 当独立随机变量的数量足够大时，它们的和（或平均值）的分布会逐渐接近一个正态分布。即使原始随机变量不服从正态分布，但当样本容量足够大时，和（或平均值）的分布仍然呈现出正态分布的特征。 什么是全概率公式。 对于事件A而言，假设有一组互斥且穷尽的条件事件B，则事件A的概率等于事件A在每个条件事件下发生的概率与该条件事件发生概率的乘积和。 什么是最大似然估计。 基本思想是在已知观测数据的情况下，通过调整参数的取值，找到使得观测数据出现概率最大的参数值。 大致过程： 构建参数化的概率模型，即构建似然函数，表示在给定参数下观测数据出现的概率 取似然函数的对数，方便计算与优化 最大化似然函数，求解参数的最优值 简述贝叶斯定理。 贝叶斯定理描述了在给定观测数据的条件下，计算事件的后验概率的方法。 P(A∣B)=P(B∣A)∗P(A)P(B)P(A|B) = \\frac{P(B|A) * P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)∗P(A)​ 其中： P(A∣B)P(A|B)P(A∣B)表示在观测到事件 B 发生的条件下，事件 A 发生的概率，称为后验概率 P(B∣A)P(B|A)P(B∣A)表示在事件 A 发生的条件下，事件 B 发生的概率，称为似然； P(A)P(A)P(A)和P(B)P(B)P(B)分别是事件 A 和事件 B 独立发生的先验概率。 优点：它能够将主观先验知识与观测数据相结合，通过不断更新后验概率来进行推断和决策。 P问题、NP问题以及NP完全问题 tip P stands for Polynomial 意为多项式 P问题是可以在多项式时间内解决的问题 NP问题是可以在多项式时间内验证解的正确性的问题 NP完全问题是一类特殊的NP问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的NP问题","s":"面试常考问题","u":"/en/docs/Tui-Mian/数学/概率论","h":"#面试常考问题","p":1690},{"i":1694,"t":"tip 欢迎来到笔记本的推免复习部分","s":"Welcome","u":"/en/docs/Tui-Mian/intro","h":"","p":1693},{"i":1696,"t":"如果可以帮到你的话就给个免费的 Star 吧！","s":"支持我！","u":"/en/docs/Tui-Mian/intro","h":"#支持我","p":1693},{"i":1699,"t":"线性相关与线性无关：向量组中的任一向量都不能被其它向量线性表示，就说向量组线性无关；否则就是线性相关。 矩阵转置：将矩阵的行和列互相交换 矩阵求逆：对于方阵A，若存在方阵B使得AB=BA=单位方阵I，则方阵B为方阵A的逆矩阵，记为A−1A^{-1}A−1 线性代数中的初等行变换。 交换两行 用非零常数乘以某一行 用一行的倍数加到另一行上 如何理解矩阵的秩。 矩阵的秩是指矩阵的列空间（或行空间）的维数，简而言之是矩阵中所有非零行（或列）向量构成的集合所组成的最大线性无关组的向量个数。 tip 宋浩八字**：非零子式的最高阶数** 任意矩阵的行秩都等于列秩。 矩阵的秩与线性方程组解的关系。 对于n元线性方程组而言： 当系数矩阵的秩等于增广矩阵的秩且秩等于n时，有唯一解 当系数矩阵的秩等于增广矩阵的秩且秩大于n时，有无穷多解 当系数矩阵的秩不等于增广矩阵的秩时，无解 tip 当系数矩阵的秩小于增广矩阵的秩时，说明系数矩阵中的某一列向量（或行向量）可以被其他列向量（或行向量）线性表示，此时该行不能提供额外的线性独立信息 简述向量组线性无关的含义。 含义：若一个向量组是线性无关的，则该向量组中的每个向量都不能表示成其他向量的线性组合。 意义：如果一个向量组线性无关，那么该向量组所张成的空间就是一个最小维度的向量空间，并且该向量空间中的任何向量都可由这些向量线性组合表示。 判定方法：如果一个向量组中的所有向量都不可以由其他向量线性组合得到，则称该向量组为线性无关的。否则，如果存在某个向量可以表示成其他向量的线性组合，则该向量组就不是线性无关的。 解释正定矩阵以及半正定矩阵。 简述特征值的含义。 特征值描述了矩阵在特定方向（特征向量方向）上的缩放因子，特征向量表示矩阵在这个特定方向上的不变性。 简述矩阵分解的物理意义。 矩阵分解是将一个矩阵表示为一些特定形式的矩阵乘积的过程。 矩阵分解的种类以及物理意义： LU分解：将矩阵分解为一个下三角矩阵和一个上三角矩阵的乘积。物理意义包括解线性方程组、计算矩阵的行列式和逆矩阵等。 QR分解：将矩阵分解为一个正交矩阵和一个上三角矩阵的乘积。物理意义包括最小二乘问题、矩阵的特征值计算等。 特征值分解：将矩阵分解为一个特征向量矩阵和一个对角矩阵的乘积。物理意义包括矩阵的幂、指数和对称矩阵的对角化等。 奇异值分解（SVD）：将矩阵分解为一个正交矩阵、一个对角矩阵和一个正交矩阵的乘积。物理意义包括降维、矩阵逼近和图像压缩等。","s":"一、线性代数","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#一线性代数","p":1697},{"i":1701,"t":"简述大数定理。 大数定理描述了大样本情况下随机变量的均值与其期望值之间的关系。对于独立同分布的随机变量序列，随着样本数量的增加，样本均值会以较高的概率接近其期望值。 简述中心极限定理。 当独立随机变量的数量足够大时，它们的和（或平均值）的分布会逐渐接近一个正态分布。即使原始随机变量不服从正态分布，但当样本容量足够大时，和（或平均值）的分布仍然呈现出正态分布的特征。 什么是全概率公式。 对于事件A而言，假设有一组互斥且穷尽的条件事件B，则事件A的概率等于事件A在每个条件事件下发生的概率与该条件事件发生概率的乘积和。 什么是最大似然估计。 基本思想是在已知观测数据的情况下，通过调整参数的取值，找到使得观测数据出现概率最大的参数值。 大致过程： 构建参数化的概率模型，即构建似然函数，表示在给定参数下观测数据出现的概率 取似然函数的对数，方便计算与优化 最大化似然函数，求解参数的最优值 简述贝叶斯定理。 贝叶斯定理描述了在给定观测数据的条件下，计算事件的后验概率的方法。 P(A∣B)=P(B∣A)∗P(A)P(B)P(A|B) = \\frac{P(B|A) * P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)∗P(A)​ 其中： P(A∣B)P(A|B)P(A∣B)表示在观测到事件 B 发生的条件下，事件 A 发生的概率，称为后验概率 P(B∣A)P(B|A)P(B∣A)表示在事件 A 发生的条件下，事件 B 发生的概率，称为似然； P(A)P(A)P(A)和P(B)P(B)P(B)分别是事件 A 和事件 B 独立发生的先验概率。 优点：它能够将主观先验知识与观测数据相结合，通过不断更新后验概率来进行推断和决策。 P问题、NP问题以及NP完全问题 tip P stands for Polynomial 意为多项式 P问题是可以在多项式时间内解决的问题 NP问题是可以在多项式时间内验证解的正确性的问题 NP完全问题是一类特殊的NP问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的NP问题","s":"二、概率论","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#二概率论","p":1697},{"i":1703,"t":"tip 参考链接： 线性代数极简入门 《线性代数》高清教学视频 “惊叹号”系列 宋浩老师","s":"线性代数","u":"/en/docs/Tui-Mian/数学/线性代数","h":"","p":1702},{"i":1705,"t":"线性相关与线性无关：向量组中的任一向量都不能被其它向量线性表示，就说向量组线性无关；否则就是线性相关。 矩阵转置：将矩阵的行和列互相交换 矩阵求逆：对于方阵A，若存在方阵B使得AB=BA=单位方阵I，则方阵B为方阵A的逆矩阵，记为A−1A^{-1}A−1","s":"一、基础知识","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#一基础知识","p":1702},{"i":1707,"t":"线性代数中的初等行变换。 交换两行 用非零常数乘以某一行 用一行的倍数加到另一行上 如何理解矩阵的秩。 矩阵的秩是指矩阵的列空间（或行空间）的维数，简而言之是矩阵中所有非零行（或列）向量构成的集合所组成的最大线性无关组的向量个数。 tip 宋浩八字**：非零子式的最高阶数** 任意矩阵的行秩都等于列秩。 矩阵的秩与线性方程组解的关系。 对于n元线性方程组而言： 当系数矩阵的秩等于增广矩阵的秩且秩等于n时，有唯一解 当系数矩阵的秩等于增广矩阵的秩且秩大于n时，有无穷多解 当系数矩阵的秩不等于增广矩阵的秩时，无解 tip 当系数矩阵的秩小于增广矩阵的秩时，说明系数矩阵中的某一列向量（或行向量）可以被其他列向量（或行向量）线性表示，此时该行不能提供额外的线性独立信息 简述向量组线性无关的含义。 含义：若一个向量组是线性无关的，则该向量组中的每个向量都不能表示成其他向量的线性组合。 意义：如果一个向量组线性无关，那么该向量组所张成的空间就是一个最小维度的向量空间，并且该向量空间中的任何向量都可由这些向量线性组合表示。 判定方法：如果一个向量组中的所有向量都不可以由其他向量线性组合得到，则称该向量组为线性无关的。否则，如果存在某个向量可以表示成其他向量的线性组合，则该向量组就不是线性无关的。 解释正定矩阵以及半正定矩阵。 简述特征值的含义。 特征值描述了矩阵在特定方向（特征向量方向）上的缩放因子，特征向量表示矩阵在这个特定方向上的不变性。 简述矩阵分解的物理意义。 矩阵分解是将一个矩阵表示为一些特定形式的矩阵乘积的过程。 矩阵分解的种类以及物理意义： LU分解：将矩阵分解为一个下三角矩阵和一个上三角矩阵的乘积。物理意义包括解线性方程组、计算矩阵的行列式和逆矩阵等。 QR分解：将矩阵分解为一个正交矩阵和一个上三角矩阵的乘积。物理意义包括最小二乘问题、矩阵的特征值计算等。 特征值分解：将矩阵分解为一个特征向量矩阵和一个对角矩阵的乘积。物理意义包括矩阵的幂、指数和对称矩阵的对角化等。 奇异值分解（SVD）：将矩阵分解为一个正交矩阵、一个对角矩阵和一个正交矩阵的乘积。物理意义包括降维、矩阵逼近和图像压缩等。","s":"二、面试常考问题","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#二面试常考问题","p":1702},{"i":1710,"t":"自己在准备夏令营和预推免期间浏览了很多经验贴，按照科协的传统，也支持一下互联网精神，还是给师弟师妹们留下点文字资料吧。 希望可以帮到大家，也感谢那些曾经帮助过我的经验贴和师兄师姐。 文章均为个人经历与想法，不代表任何单位的官方立场，仅供参考。","s":"前言","u":"/en/docs/Tui-Mian/Summary","h":"#前言","p":1708},{"i":1712,"t":"常见名词 含义解释 928/929 每年的公历9月28日（2023年是9月29日），是研招网全国推免系统开放的日子，也是已经拿到offer的推免生上岸的日子。 没offer的也不用着急，因为每个学生只能上一个学校，928/929当天就算手里一堆offer的学生也是只能选择最想去的学校而释放掉其他offer。稳住心态沉住气，一般10月20日推免系统才关闭，这段时间足够联系导师上岸了。 优营 优营就是夏令营的优秀营员。 不同学校优营的效力不同，有些学校的优营直接等于拟录取，928/929当天填报系统即可上岸；但有些学校的优营只能保证在后期的预推免或九推的初筛中不被刷掉，仍需参加后续考核才能获得拟录取资格。 wl/waiting list wl就是递补名单，有些学校的夏令营优营评选中设置递补名单。如果后期有其他优营学生放鸽子不来的话，就会按顺序补录到递补名单中的学生。","s":"扫盲","u":"/en/docs/Tui-Mian/Summary","h":"#扫盲","p":1708},{"i":1714,"t":"本科学校：理工类普通一本（四非） 专业：计算机科学与技术CS rank：前1%（非rank 1 or 2的top选手） 英语：四级594 & 六级586 竞赛：非ACMer，一个CV类比赛国一，其他都是更不上台面的奖项了 奖学金：国家奖学金（夏令营结束之后才拿的，基本没用到）、省人民政府奖学金、CASC奖学金 科研及论文：无正经科研经历，EI水会一篇 从某种程度上来说，本科出身和rank基本上决定了上限。","s":"个人情况","u":"/en/docs/Tui-Mian/Summary","h":"#个人情况","p":1708},{"i":1722,"t":"显著性目标检测Salient Object Detection，相当于语义分割中的二分类任务，只有前景和背景","s":"（一）SOD任务","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一sod任务","p":1719},{"i":1724,"t":"下图为U-2-Net的整体结构 tip residual [rɪˈzɪdjuəl] 在encoder阶段，每个block之后使用maxpooling下采样两倍 在decoder阶段，每个block之后使用双线性插值上采样两倍 下图为Residual U-block的结构 tip 卷积是如何改变输出的通道数的？ 卷积核的通道数等于输入的通道数，卷积核的个数等于输出的通道数 图片来源知乎 在特征融合阶段，每一层的encoder-decoder输出，使用3x3卷积以及双线性插值上采样到原始分辨率得到该层的特征图，且卷积核的个数为1，输出的feature map通道数也为1。将每一层的feature map进行concat拼接，得到6通道的融合feature map，最后使用1x1卷积以及sigmoid激活函数得到最终的融合特征图输出","s":"（二）网络结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二网络结构","p":1719},{"i":1726,"t":"损失函数是7个损失项的加权求和 共有6层encoder-decoder结构，将每一层对应的feature map与ground truth做BCE Loss得到6个损失项 第7个损失项是最终融合得到的feature map与ground truth的BCE Loss 在论文中，每个损失项的权重都为1 canny边缘检测： 使用高斯滤波进行平滑 计算像素梯度 非极大值抑制 双阈值检测强边缘、弱边缘 边缘连接","s":"（三）损失函数","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三损失函数","p":1719},{"i":1728,"t":"深度可分离卷积的优点是可以在大致保持卷积效果的情况下减少参数量 在实现原理上可分为两个步骤：深度卷积（depth wise）以及逐点（point wise）卷积 深度卷积是一种在每个输入通道上分别进行卷积操作的卷积方法，每个输入通道只与对应的卷积核进行卷积。 逐点卷积通过使用1×11 \\times 11×1卷积对深度卷积的结果再次卷积","s":"（四）深度可分离卷积","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四深度可分离卷积","p":1719},{"i":1731,"t":"PR曲线所围成的面积即使该类的AP值","s":"（一）mAP","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一map","p":1719},{"i":1733,"t":"tip 参考资料：【精读AI论文】YOLO V1目标检测，看我就够了 1.预测阶段​ 下图为YOLOv1的算法框架 下图为YOLOv1的网络结构 输入[448, 448, 3]图像，输出[7, 7, 30]的tensor（包含所有预测框的坐标、置信度和类别结果），通过解析输出的tensor得到预测结果 首先将输入图片划分为S×SS \\times SS×S个grid cell。在YOLOv1中S=7S=7S=7 每个grid cell预测出BBB个bounding box预测框（bbox），每个bbox的中心点都落在该grid cell中。在YOLOv1中B=2B=2B=2 每个bbox包含(x, y, h, w, c)五种信息，其中x, y为bbox左上角坐标，h, w为bbox的宽高，c为该bbox是否存在object的概率 同时每个grid cell预测出一组与数据集有关的条件类别概率。在YOLOv1论文使用的数据集Pascal VOC中，类别种类为20类，因此在预测阶段输出的[7, 7, 30]的tensor含义如下图所示 每个grid cell选出条件类别概率最大的类别，因此每个grid cell只能检测一个物体 tip 这也是YOLOv1小目标和密集目标识别能力差的原因 每个bbox的置信度与其父grid cell的类别概率相乘得到全概率，如下图所示 进行NMS后处理： 对某一特定类别，首先根据全概率置信度排序 将此时最大置信度的bbox与其他所有置信度更小的bbox做IoU判断，若IoU大于设置的阈值，则抹除置信度小的bbox 将剩余的次大的置信度重复步骤2，抹除所有置信度更小的其IoU超过阈值的bbox tip 非极大值抑制只在预测阶段进行 在训练阶段，所有bbox都会在Loss Function中起到更新的作用，因此不进行NMS 2. 训练过程的损失函数​","s":"（二）YOLOv1","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov1","p":1719},{"i":1735,"t":"1. BN层​ 2. 高分辨率训练​ 3. Anchor​ YOLOv2引入了anchor机制代替bbox，将图像划分为13×1313 \\times 1313×13个grid cell，每个grid cell生成5个anchor anchor是通过k-means聚类在数据集上生成的不同尺寸的先验框 对数据集进行anchor宽高比的聚类，聚类数越大，覆盖的IoU越大，但同时模型也更复杂","s":"（二）YOLOv2","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov2","p":1719},{"i":1737,"t":"1. 特征融合​ YOLOv5使用CSPNet实现特征融合，CSP模块由主干和分支构成，主干提取低维特征，分支提取高维特征 主干通过卷积和池化提取特征，形成不同尺寸的特征图 分支将主干输出的特征图作为输入，逐步卷积和上采样提取高级别语义特征 主干特征图通过卷积对通道数降维之后与分支在通道维度上concat tip 在特征提取以及融合阶段可以加入Canny边缘检测得到的特征图进行特征融合 2. 前处理​ 对填充黑色像素进行了改善，以填充更少的黑像素，提高了精度 3. 特征金字塔FCN​","s":"（三）YOLOv5","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三yolov5","p":1719},{"i":1739,"t":"tip 有关CSP特征融合可以参考：https://blog.csdn.net/weixin_55073640/article/details/122614176 CBAM是通道+空间注意力机制（SENet是通道注意力机制）","s":"三、CBAM","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三cbam","p":1719},{"i":1741,"t":"通道注意力：原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]经过通道注意力机制算法得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，代表不同通道之间的重要程度，将其与原始特征图相乘 空间注意力：经过通道注意力的特征图[b,c,h,w][b, c, h, w][b,c,h,w]经过空间注意力机制算法得到[b,1,h,w][b, 1, h, w][b,1,h,w]的tensor，代表宽高维度的像素之间的重要程度，将其与原始特征图相乘","s":"（一）总体结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一总体结构","p":1719},{"i":1743,"t":"原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]分别经过最大池化和平均池化来压缩空间维度、学习通道之间的特征，得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，再送入共享的多层感知机网络进行降维再升维，最后将二者相加再经过sigmoid函数产生最终的通道注意力特征图","s":"（二）通道注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二通道注意力","p":1719},{"i":1745,"t":"原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]分别经过最大池化和平均池化（通过torch.max和torch.mean函数实现）得到[b,1,h,w][b, 1, h, w][b,1,h,w]的tensor，再将二者concat后通过7×77 \\times 77×7卷积学习特征并降维，最后送入sigmoid函数得到最终的空间注意力特征图","s":"（三）空间注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三空间注意力","p":1719},{"i":1747,"t":"作者分别对通道注意力以及空间注意力使用最大池化还是平均池化做了消融实验，结果反映二者都用最大池化以及平均池化再相加效果最好（且对于7×77 \\times 77×7卷积与3×33 \\times 33×3卷积的消融实验发现，7×77 \\times 77×7卷积效果更好） 作者对先通道注意力还是先空间注意力做了消融实验，结果发现先通道再空间效果更好","s":"（四）其他注意事项","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四其他注意事项","p":1719},{"i":1749,"t":"Focal Loss通过引入修正项和样本关注度超参数，增加困难样本的关注度，来解决类别不均衡问题。 YOLO损失函数分为分类损失以及回归损失，可以在分类损失中引入Focal Loss代替原来的交叉熵损失","s":"四、Focal Loss","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四focal-loss","p":1719},{"i":1751,"t":"Squeeze and Excitation Squeeze挤压操作就是将[b,c,h,w][b, c, h, w][b,c,h,w]的特征图通过池化挤压宽高维度，得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，该tensor还要经过所示的全连接层-ReLU-全连接层结构 Excitation激励操作就是通过sigmoid函数得到每个通道之间的重要程度系数","s":"五、SENet","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#五senet","p":1719},{"i":1753,"t":"自注意力机制通过计算元素之间的相似度来确定它们之间的关联性，并对其进行加权处理以获得上下文信息。 自注意力机制通过对输入的元素进行线性变换来得到查询（Query）向量、键（Key）向量和值（Value）向量。 通过点积和缩放点积计算相似程度 通过自注意力机制，每个元素都可以通过与其他元素的相似度计算和加权求和，获取到与它们相关的上下文信息。相似度高的元素将获得更高的权重，因此更受到关注和影响，从而建立起元素之间的关联性。","s":"六、自注意力机制","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#六自注意力机制","p":1719},{"i":1756,"t":"This content has been encrypted.","s":"（一）英文自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一英文自我介绍","p":1719},{"i":1758,"t":"1. 英文自我介绍​ This content has been encrypted. 2. 中文自我介绍​ This content has been encrypted.","s":"（二）西电广研院自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二西电广研院自我介绍","p":1719},{"i":1760,"t":"1. 英文自我介绍​ This content has been encrypted. 2. 中文自我介绍​ This content has been encrypted.","s":"（三）电子科技大学自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三电子科技大学自我介绍","p":1719},{"i":1764,"t":"GeekOS是一个基于x86体系结构的微操作系统内核. 由美国马理兰大学的教师开发, 主要用于操作系统课程设计的教育. 出于教学目的, 这个系统内核设计简单, 却又兼备实用性, 它可以运行在真正的X86 PC硬件平台. 在下载好GeekOS后, 在geekos-version/src/目录下会存在project0-project6这7个文件夹, 分别代表GeekOS设计的7个学习任务. 在环境搭建完成之后, 我们进行的每一个项目的代码编写几乎都在geekos-version/src/projecti/src/geekos/文件夹下, 每一个项目的编译都在geekos-version/src/projecti/build文件夹下进行, 即要在终端中通过cd进入该目录, 再执行make depend和make命令.","s":"GeekOS:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#geekos","p":1761},{"i":1766,"t":"bochs是一个x86硬件平台的模拟器. GeekOS运行依托于bochs. 在安装好Linux操作系统后需要安装bochs以及nasm, 以完成GeekOS环境的搭建.","s":"bochs:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#bochs","p":1761},{"i":1768,"t":"GeekOS的开发环境可分为两部分, 一部分是编译环境, 一部分是运行环境. 在编译过程中, 使用Linux自带的编译环境以及编译命令对特定的GeekOS project进行编译即可. 首先在终端中通过cd命令进入geekos-version/src/projecti/build目录, 再执行make depend和make命令. 编译后生成bochs的镜像文件fd.img, 这是bochs运行所必须的文件,也是GeekOS运行环境的前置配置.","s":"二者之间的关系","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#二者之间的关系","p":1761},{"i":1770,"t":"安装其实非常简单, 这里主要花篇幅介绍安装后解决报错的配置.","s":"安装与配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#安装与配置","p":1761},{"i":1772,"t":"需要下载GeekOS Files, 安装bochs, nasm等. GeekOS直接下载压缩包, 解压即可. arch系用户通过以下命令即可完成bochs和nasm的安装. yay -S bochs nasm 其他发行版的安装方法这里不再赘述, 可选择从群文件里下载源文件并编译安装, 师兄师姐也在群文件里给了一些教程指导.","s":"安装","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#安装","p":1761},{"i":1774,"t":"完成安装后, 我们就可以开始对project0中的代码进行完善了, 并在geekos-version/src/project0/build目录下执行make depend以及make命令, 目的是编译project0的代码, 生成bochs的镜像文件fd.img以构建GeekOS的运行环境. 但很多报错就是在make这一步产生的, 因此在安装完成后还需要进行配置. 配置分为两部分, 一个是对GeekOS中makefile的修改, 另一部分是对bochs的配置文件的修改. GeekOS中makefile的配置​ 综合网上很多师兄师姐的博客，这三个错误应该是每个人都会遇到的，所以当你不确定自己能不能运行时，请全部完成这三个步骤. 问题: warnings being treated as errors 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件(由于每个project下都存在一个对应的makefile文件, 所以在每个项目编译前都要修改一次) // 修改第149行： CC_GENERAL_OPTS := $(GENERAL_OPTS) -Werror // 修改后： CC_GENERAL_OPTS := $(GENERAL_OPTS) 问题: X86_64与i386输出不兼容 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件 # Target C compiler. gcc 2.95.2 or later should work. 100行 TARGET_CC := $(TARGET_CC_PREFIX)gcc -m32 # Host C compiler. This is used to compile programs to execute on # the host platform, not the target (x86) platform. On x86/ELF # systems, such as Linux and FreeBSD, it can generally be the same # as the target C compiler. 106行 HOST_CC := gcc -m32 # Target linker. GNU ld is probably to only one that will work.109行 TARGET_LD := $(TARGET_CC_PREFIX)ld -m elf_i386 问题: undefined reference to '__stack_chk_fail' 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件 # Flags used for all C source files // 修改前：148行 GENERAL_OPTS := -O -Wall $(EXTRA_C_OPTS) // 修改后： GENERAL_OPTS := -O -Wall -fno-stack-protector $(EXTRA_C_OPTS) bochs配置文件的修改​ 在geekos-version/src/projecti/build目录下创建.bochsrc文件 # An example .bochsrc file. # You will need to edit these lines to reflect your system. vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # 请根据自己的实际安装路径更改 romimage: file=/usr/local/share/bochs/BIOS-bochs-latest # 请根据自己的实际安装路径更改 megs: 8 boot: a floppya: 1_44=fd.img, status=inserted #floppya: 1_44=fd_aug.img, status=inserted log: ./bochs.out # keyboard_serial_delay: 200 # vga_update_interval: 300000 mouse: enabled=0 private_colormap: enabled=0 # i440fxsupport: enabled=0 # Uncomment this to write all bochs debugging messages to # bochs.out. This produces a lot of output, but can be very # useful for debugging the kernel. #debug: action=report 到此为止, 所有的配置工作已经完成, 可以正常的进行下一步的代码完善. 如果需要验证自己是否配置成功, 可以参照下一篇博客GeekOS project 0的实现, 在本篇博客中会有完整的C语言代码编写以及编译、使用bochs执行的过程.","s":"配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#配置","p":1761}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/890",[0,0.544,1,6.869,2,8.562]],["t/892",[0,0.529]],["t/894",[3,3.72,4,9.047]],["t/896",[0,0.579,5,3.053,6,3.77,7,2.53,8,3.77,9,3.77,10,5.322,11,3.6,12,3.459,13,4.699,14,5.829,15,3.459,16,6.004,17,3.431,18,4.715,19,3.983,20,3.983,21,3.338]],["t/898",[0,0.58,10,4.879,14,5.634,16,5.025,17,3.632,18,5.411,22,5.21,23,1.912,24,3.3,25,7.151,26,4.18,27,4.731]],["t/900",[3,3.342,23,2.983,28,8.126,29,9.762,30,8.126,31,8.126,32,8.126]],["t/902",[0,0.577,5,2.396,6,2.958,7,1.985,8,2.958,9,2.958,10,5.17,11,2.825,17,3.954,18,2.181,19,4.801,20,4.801,21,2.619,23,2.532,24,3.588,26,2.958,27,3.348,33,2.825,34,3.348,35,6.899,36,6.264,37,3.687,38,5.665,39,7.08,40,3.348,41,3.687,42,3.687]],["t/904",[0,0.54,43,4.097,44,7.61,45,7.61,46,9.38,47,7.61,48,7.61,49,7.61]],["t/908",[0,0.582]],["t/910",[0,0.565]],["t/912",[0,0.469]],["t/915",[24,5.941,50,8.517,51,7.61,52,6.449,53,7.61,54,6.449,55,6.91,56,6.91,57,7.61,58,7.61]],["t/917",[24,5.061,52,6.772,54,6.772,59,7.991,60,7.256,61,7.753,62,7.991,63,7.991]],["t/919",[0,0.477,17,2.752,23,2.346,50,5.804,52,5.417,54,5.417,55,5.804,56,7.622,60,5.804,61,5.128,64,6.392,65,4.705,66,6.392,67,8.394,68,6.392,69,3.501,70,6.392,71,6.392,72,6.392,73,6.392]],["t/921",[0,0.469]],["t/925",[0,0.542,3,3.88,23,2.378,74,9.085,75,6.478,76,6.478,77,6.478,78,6.478,79,6.478,80,6.478,81,6.478,82,6.478,83,6.478]],["t/929",[0,0.523,84,8.879]],["t/932",[0,0.496,3,3.342,85,8.868,86,8.126,87,8.126]],["t/934",[3,3.72,88,9.047]],["t/937",[0,0.46,3,3.72]],["t/939",[89,8.812]],["t/941",[0,0.578,90,9.664]],["t/944",[0,0.548,3,3.585]],["t/946",[0,0.548,91,7.916]],["t/949",[0,0.565]],["t/951",[0,0.553,74,8.899,92,3.893,93,6.146,94,6.146,95,5.581,96,6.146,97,6.146,98,5.581,99,6.146,100,6.146,101,5.581,102,6.146,103,6.146,104,6.146,105,6.146,106,6.146]],["t/954",[0,0.578]],["t/956",[0,0.587,3,3.051,24,5.407,92,3.373,95,6.737,98,6.737,101,4.837,107,5.326,108,5.326,109,2.774,110,5.684,111,3.557]],["t/958",[0,0.567,24,5.236,110,6.333]],["t/960",[0,0.565,24,6.183,110,6.226]],["t/962",[0,0.565]],["t/964",[0,0.517,3,3.13,17,4.569,112,7.61,113,7.61,114,7.61,115,7.61]],["t/966",[0,0.579,5,2.324,6,2.87,7,1.925,8,2.87,9,2.87,10,5.502,11,2.74,17,3.75,21,2.541,23,2.484,116,3.248,117,3.577,118,3.923,119,4.398,120,5.534,121,4.074,122,5.534,123,3.577,124,3.577,125,3.577,126,6.769,127,6.457,128,5.837,129,3.577]],["t/968",[0,0.406,17,3.44,130,7.991,131,7.991,132,7.991,133,7.991,134,7.991,135,7.991,136,7.991]],["t/970",[17,3.894,137,9.047]],["t/972",[0,0.567,5,4.985,7,0.875,10,1.915,11,1.245,39,1.377,43,2.855,65,1.196,138,2.037,139,1.625,140,1.625,141,3.85,142,2.604,143,2.868,144,2.868,145,2.868,146,2.868,147,2.868,148,6.732,149,2.868,150,2.868,151,2.868,152,2.868,153,2.868,154,4.646,155,2.868,156,2.868,157,2.868,158,2.868,159,2.868,160,2.868,161,3.195,162,2.868,163,2.868,164,2.868,165,2.868,166,5.856,167,2.868,168,1.773,169,2.868,170,2.604,171,3.85,172,1.625,173,1.625,174,1.085,175,1.625,176,1.625,177,1.625,178,1.625,179,1.117,180,1.625,181,1.625,182,1.625,183,1.625,184,1.625,185,1.625,186,1.625,187,1.625,188,1.625,189,1.625,190,1.625,191,1.625,192,1.625,193,1.245,194,1.625,195,1.625,196,1.625,197,1.625,198,1.625,199,1.625,200,1.625,201,1.625,202,1.625,203,1.625,204,1.625,205,1.625,206,1.625,207,3.263,208,1.245,209,1.625,210,1.625,211,1.625,212,1.625,213,1.625,214,1.117,215,1.625,216,1.625,217,1.625,218,1.625,219,1.625,220,1.625,221,1.625,222,1.625,223,1.625,224,1.625,225,1.625,226,1.625,227,1.625,228,2.868,229,1.625,230,1.625,231,1.625,232,1.625,233,1.625,234,1.475,235,1.625,236,1.475,237,1.625,238,1.625,239,1.475,240,1.625]],["t/974",[0,0.543,7,1.985,43,1.985,138,2.619,193,2.825,207,3.125,241,3.687,242,3.783,243,3.125,244,3.687,245,3.687,246,3.125,247,3.348,248,2.825,249,2.714,250,3.348,251,3.348,252,3.348,253,3.348,254,3.348,255,3.348,256,5.144,257,3.348,258,3.348,259,6.561,260,3.348,261,2.619,262,3.348,263,5.144,264,3.348,265,5.144,266,3.348,267,2.714,268,5.144,269,3.348,270,3.348,271,3.348,272,3.348,273,3.348,274,6.264,275,3.348,276,3.348,277,3.348,278,3.348,279,6.264,280,3.348,281,2.958,282,3.348,283,2.396,284,3.125,285,3.348,286,2.536]],["t/976",[0,0.46,3,3.72]],["t/978",[0,0.523,287,6.803]],["t/980",[0,0.46,3,3.72]],["t/982",[0,0.523,287,6.803]],["t/984",[3,3.652,288,8.879,289,3.228]],["t/986",[0,0.402,214,4.021,289,2.125,290,7.909,291,5.846,292,5.846,293,4.303,294,4.69,295,5.309,296,5.309,297,3.459,298,5.309,299,5.846,300,5.846,301,5.846,302,4.69,303,4.69,304,2.785,305,4.954,306,5.846,307,5.846,308,5.846,309,5.846,310,5.846,311,5.846,312,2.487,313,4.479,314,5.309,315,5.846]],["t/988",[0,0.364,293,5.267,294,5.74,316,7.155,317,7.155,318,7.155,319,7.155,320,7.155,321,7.155,322,7.155,323,7.155,324,7.155,325,7.155,326,7.155,327,7.155,328,6.498]],["t/990",[0,0.369,329,4.298,330,7.264,331,7.264,332,7.264,333,7.264,334,7.264,335,7.264,336,6.156,337,7.264,338,7.264,339,7.264,340,7.264,341,7.264,342,7.264]],["t/992",[0,0.443,343,8.718,344,6.679,345,8.718]],["t/995",[69,4.956,346,9.047]],["t/997",[0,0.469]],["t/999",[0,0.593,347,5.81]],["t/1001",[0,0.406,69,4.377,344,6.122,347,5.192,348,7.256,349,7.991,350,3.4,351,4.728,352,6.772]],["t/1003",[0,0.513,350,4.617,353,4.867,354,7.872,355,7.491,356,4.745]],["t/1005",[0,0.544,352,7.256,353,5.563]],["t/1007",[0,0.544,357,6.567,358,6.567,359,6.567,360,6.567,361,6.567,362,6.567,363,8.544,364,6.567,365,6.567,366,6.567,367,6.567,368,6.567,369,6.567,370,6.567,371,6.567]],["t/1009",[0,0.546,372,6.305,373,3.797,374,7.137,375,7.137,376,5.583,377,7.137]],["t/1011",[378,8.373]],["t/1014",[329,5.158,373,4.211,379,7.916,380,7.916]],["t/1016",[381,6.402,382,6.402,383,6.402,384,6.402,385,6.402,386,6.402,387,6.402,388,6.402,389,6.402,390,6.402,391,6.402,392,6.402,393,6.402,394,4.465,395,4.581,396,6.402,397,6.402]],["t/1018",[398,6.553,399,7.022,400,7.022,401,5.493,402,4.782,403,7.022,404,7.022,405,7.022,406,7.022,407,7.022,408,7.022]],["t/1020",[409,7.638,410,7.638,411,7.638,412,7.638,413,7.638,414,7.638]],["t/1022",[0,0.408,3,1.952,25,4.022,127,4.022,128,3.636,401,6.229,402,5.747,415,4.022,416,4.31,417,4.31,418,2.935,419,4.31,420,4.31,421,2.751,422,4.31,423,4.31,424,4.022,425,4.31,426,2.869,427,5.207,428,4.108,429,4.31,430,4.31,431,6.208,432,4.31,433,4.31,434,4.31,435,4.31,436,4.31,437,4.31,438,4.31,439,4.31,440,2.935,441,4.31,442,4.31,443,4.31]],["t/1026",[0,0.582,304,4.884,373,4.418,444,6.339,445,4.731,446,3.584,447,3.584]],["t/1028",[448,7.506,449,7.506,450,6.632,451,7.506,452,7.506,453,7.506,454,7.506]],["t/1030",[0,0.51,17,3.405,23,2.146,426,3.534,428,2.996,450,4.69,455,5.309,456,5.309,457,5.309,458,5.309,459,5.309,460,5.309,461,5.309,462,5.309,463,5.309,464,5.309,465,5.309,466,4.021,467,5.309,468,4.479,469,3.389,470,5.309,471,5.309,472,5.309,473,5.309,474,5.309]],["t/1032",[3,2.738,475,6.658,476,6.046,477,6.658,478,8.62,479,6.658,480,6.658,481,6.658,482,6.046,483,6.658,484,5.643,485,6.658,486,6.658,487,6.658,488,6.658,489,6.658,490,6.658,491,6.658,492,6.658,493,6.658]],["t/1035",[0,0.554,494,9.38,495,7.61,496,7.61,497,7.61,498,7.61,499,7.61]],["t/1037",[0,0.556,14,5.556,16,5.723,500,6.308,501,6.308,502,6.308,503,6.308,504,6.308,505,6.308,506,6.308,507,6.308,508,6.308,509,6.308,510,6.308,511,6.308,512,6.308]],["t/1039",[513,7.638,514,8.412,515,8.412,516,8.412,517,8.412,518,8.412]],["t/1043",[0,0.569,356,2.919,519,4.609,520,2.525,521,4.609,522,4.609,523,7.882,524,4.609,525,4.609,526,4.609,527,4.609,528,4.609,529,6.694,530,4.609,531,4.609,532,4.609,533,4.609,534,4.609,535,4.609,536,4.609,537,4.609,538,4.609,539,4.609,540,4.609,541,4.609,542,4.609,543,4.609,544,4.609,545,4.609,546,4.609,547,4.609,548,4.609,549,4.609]],["t/1046",[0,0.582]],["t/1048",[0,0.523,550,8.879]],["t/1050",[0,0.523,551,8.879]],["t/1053",[0,0.592,3,3.033]],["t/1055",[0,0.583,110,4.833,552,7.052,553,6.308,554,8.321,555,6.308,556,6.308,557,5.346,558,6.308,559,6.308]],["t/1057",[0,0.585,23,4.041,520,2.886,560,4.586]],["t/1059",[0,0.529]],["t/1061",[0,0.502,3,2.292,561,7.656,562,4.724,563,5.574,564,5.574,565,5.574,566,5.574,567,5.574,568,5.062,569,5.574,570,5.574,571,5.574,572,5.574,573,5.574,574,5.574,575,5.574,576,5.574,577,5.574,578,5.574,579,5.574,580,5.574,581,5.574,582,5.574,583,5.062,584,5.062,585,5.574,586,4.724,587,5.574,588,5.574]],["t/1063",[0,0.509,568,5.883,583,5.883,584,5.883,586,5.49,589,6.478,590,6.478,591,6.478,592,6.478,593,6.478,594,6.478,595,6.478,596,6.478,597,6.478,598,6.478,599,6.478,600,6.478,601,6.478,602,6.478,603,6.478]],["t/1065",[0,0.554,586,7.578,604,7.05,605,7.05,606,7.05,607,7.05,608,7.05,609,7.05,610,7.05,611,7.05,612,7.05]],["t/1068",[118,5.345]],["t/1072",[0,0.593]],["t/1074",[0,0.548,613,8.718]],["t/1077",[0,0.507,614,8.412,615,8.412,616,8.412,617,8.412]],["t/1079",[0,0.578]],["t/1081",[0,0.588,618,6.567,619,6.567,620,6.567,621,5.963,622,6.567,623,5.566,624,5.963]],["t/1083",[0,0.599,118,3.348,621,7.123]],["t/1085",[350,3.778,625,6.536,626,4.864]],["t/1087",[0,0.46,625,6.659]],["t/1089",[0,0.565]],["t/1091",[0,0.552]],["t/1093",[0,0.469]],["t/1095",[0,0.57,627,8.699,628,6.752,629,6.752,630,6.752,631,5.722,632,4.796,633,6.752,634,6.752,635,6.752,636,6.752]],["t/1097",[0,0.564,23,1.644,179,6.913,626,3.592,637,7.697,638,4.068,639,4.068,640,3.297,641,4.068,642,4.068,643,6.556,644,4.48,645,6.221,646,4.48,647,2.837,648,4.48,649,4.48,650,4.48,651,4.48,652,4.48,653,4.068,654,4.068,655,4.48,656,4.48,657,4.068]],["t/1099",[0,0.562,23,1.599,179,5.249,626,2.387,637,3.693,638,3.957,639,5.834,640,4.729,641,3.957,642,3.957,647,2.76,653,5.834,654,3.957,657,3.957,658,4.729,659,4.358,660,4.358,661,4.358,662,4.358,663,4.358,664,4.358,665,4.358,666,7.648,667,4.358,668,3.957,669,6.425,670,4.358,671,4.358,672,4.358,673,4.358,674,4.358,675,4.358,676,4.358]],["t/1101",[0,0.536,179,5.685,637,8.358,658,6.085]],["t/1104",[677,9.221]],["t/1106",[289,2.954,305,6.887,373,3.926,678,8.126,679,8.126,680,8.126,681,8.126,682,5.28]],["t/1108",[683,9.221]],["t/1110",[295,7.256,296,7.256,297,4.728,329,4.728,520,4.377,684,7.991,685,7.991,686,7.991,687,7.991]],["t/1112",[312,3.778,688,5.769,689,8.879]],["t/1114",[0,0.38,289,2.274,304,2.981,312,2.662,350,1.789,351,2.488,444,2.6,520,2.303,625,3.095,626,4.534,688,4.065,690,4.205,691,4.205,692,2.189,693,4.205,694,4.205,695,4.794,696,4.205,697,4.205,698,4.205,699,4.205,700,4.205,701,4.205,702,4.205,703,4.205,704,4.205,705,4.205,706,4.093,707,7.098,708,5.02,709,5.725,710,5.995,711,3.373,712,3.095,713,4.205,714,3.221,715,4.205,716,4.205,717,1.768,718,4.205,719,2.892,720,3.373]],["t/1116",[466,5.531,469,4.661,717,2.52,719,4.121,721,5.992,722,5.992,723,4.591,724,4.591,725,5.992,726,5.992,727,5.992,728,5.992,729,5.992,730,5.992,731,5.992,732,5.992,733,5.992,734,6.681,735,5.992,736,5.078,737,3.226,738,5.992,739,5.992,740,5.992,741,5.992]],["t/1118",[0,0.419,289,1.815,294,4.006,350,4.033,351,5.309,444,3.088,695,6.316,742,4.993,743,4.993,744,4.993,745,4.993,746,4.993,747,4.993,748,4.993,749,4.993,750,4.993,751,4.993,752,4.993,753,4.993,754,4.993,755,4.993,756,4.232,757,4.993,758,4.993,759,4.993,760,4.993,761,4.993,762,4.993,763,4.993,764,4.993,765,4.993,766,4.993,767,4.993,768,4.993]],["t/1120",[312,3.849,769,9.047]],["t/1122",[3,3.286,302,6.411,303,6.411,304,3.807,305,6.772,329,4.728,770,7.991,771,7.991,772,7.991]],["t/1124",[304,4.31,773,9.047]],["t/1126",[774,9.221]],["t/1128",[214,5.073,294,5.917,312,3.914,775,7.376,776,7.376,777,7.376,778,7.376,779,7.376,780,7.376,781,7.376,782,7.376,783,7.376,784,7.376]],["t/1130",[0,0.521,289,2.811,350,3.29,785,6,786,5.924,787,5.493,788,5.164,789,6.553]],["t/1133",[161,5.589,785,6.183,790,7.832,791,6.887,792,7.379,793,7.379]],["t/1135",[0,0.471,43,4.441,790,4.995,794,6.991,795,5.653,796,7.547,797,7.088,798,5.653,799,5.653,800,5.653,801,6.991,802,5.653,803,5.653,804,5.653,805,5.653,806,5.653]],["t/1137",[0,0.549,807,6.122,808,6.122,809,7.256,810,7.256,811,7.256]],["t/1141",[0,0.579,692,3.12,812,6.452,813,5.441,814,6.303,815,7.302,816,7.302,817,5.441,818,5.441,819,5.441]],["t/1143",[0,0.557,10,2.223,23,2.924,658,3.851,692,2.725,734,3.851,814,4.2,820,2.083,821,4.751,822,4.751,823,3.022,824,8.32,825,4.751,826,2.45,827,4.751,828,4.751,829,6.654,830,5.87,831,4.751,832,4.751,833,4.751,834,4.751,835,4.751,836,3.022,837,2.45,838,3.022,839,3.022,840,3.022,841,3.022,842,3.022,843,2.45,844,3.022,845,3.022,846,3.851,847,4.751,848,3.022,849,3.022]],["t/1145",[0,0.566,692,4.41,814,5.502,820,3.371,826,6.944,837,4.768,850,3.916,851,5.883,852,5.883,853,5.49]],["t/1147",[0,0.578,17,1.115,23,0.951,69,2.342,351,1.533,353,2.778,394,1.641,395,1.683,421,1.502,692,4.157,846,5.555,850,2.584,854,2.352,855,2.352,856,2.352,857,2.352,858,2.352,859,2.196,860,3.147,861,2.352,862,2.352,863,7.486,864,5.205,865,4.555,866,1.84,867,2.529,868,2.352,869,3.882,870,3.882,871,2.352,872,2.352,873,2.352,874,3.882,875,2.352,876,2.352,877,2.352,878,2.352,879,1.683,880,2.078,881,2.352,882,2.352]],["t/1149",[0,0.575,17,1.404,289,1.185,329,1.929,394,3.26,395,3.345,421,1.89,560,1.493,692,1.698,717,1.371,734,2.4,737,1.755,788,3.437,864,4.676,865,3.345,866,2.316,879,2.118,883,2.961,884,2.961,885,2.763,886,5.792,887,2.961,888,2.961,889,2.961,890,5.792,891,2.961,892,2.961,893,2.316,894,2.961,895,2.961,896,2.961,897,4.674,898,2.065,899,2.961,900,2.316,901,2.961,902,2.763,903,1.786,904,2.616,905,2.961,906,2.961,907,4.674,908,4.13,909,2.961,910,2.961,911,2.616,912,2.961]],["t/1151",[0,0.57,12,2.69,18,2.162,119,1.758,289,0.553,347,0.989,353,0.989,418,0.941,469,2.568,717,0.64,723,5.904,724,1.166,785,4.119,807,1.166,808,1.166,850,1.636,860,3.261,865,2.374,867,0.9,898,0.964,913,5.109,914,1.382,915,0.941,916,2.932,917,1.221,918,2.457,919,1.289,920,4.024,921,1.382,922,1.382,923,1.382,924,1.382,925,1.081,926,1.382,927,1.382,928,2.293,929,2.69,930,2.457,931,4.024,932,2.457,933,1.382,934,1.382,935,1.382,936,1.382,937,2.932,938,1.382,939,1.382,940,1.382,941,3.656,942,2.293,943,2.457,944,1.382,945,1.382,946,1.382,947,1.289,948,1.382,949,1.289,950,2.457,951,1.382,952,1.221,953,1.081,954,1.382,955,1.382,956,1.382,957,1.382,958,7.387,959,2.457,960,1.382,961,1.382,962,1.382,963,2.457,964,3.395,965,1.382,966,1.382,967,1.382,968,2.457,969,2.457,970,1.382,971,1.382,972,1.382,973,2.457,974,2.073,975,2.457,976,2.457,977,2.457,978,1.382,979,1.382,980,1.382,981,5.109,982,2.457,983,2.457,984,2.457,985,1.382,986,1.382]],["t/1154",[0,0.582,168,4.504,304,3.47,351,4.309,625,2.965,864,4.063,865,2.617,987,5.502,988,7.357,989,3.658,990,3.658,991,5.135,992,3.658,993,3.658,994,3.658,995,5.502,996,5.502,997,4.304,998,3.231,999,3.658,1000,3.658,1001,3.658,1002,3.658]],["t/1156",[0,0.586,304,2.687,796,4.321,865,5.015,998,4.524,1003,5.121,1004,4.78,1005,5.121,1006,8.591,1007,5.121,1008,5.121,1009,5.121]],["t/1159",[0,0.564,304,1.784,329,2.215,373,3.77,421,2.171,692,1.95,846,2.756,850,3.466,864,2.089,908,3.004,1010,2.433,1011,3.4,1012,3.4,1013,3.4,1014,3.4,1015,3.174,1016,3.174,1017,5.206,1018,5.588,1019,3.4,1020,3.174,1021,3.4,1022,3.4,1023,3.4,1024,3.4,1025,3.4,1026,3.4,1027,3.4,1028,3.4,1029,3.4,1030,3.4,1031,3.4,1032,3.4,1033,3.4,1034,3.4,1035,3.4,1036,3.4,1037,5.206,1038,5.206,1039,5.206,1040,3.4,1041,3.4,1042,3.4,1043,3.4,1044,3.4,1045,3.4]],["t/1161",[0,0.581,23,1.666,297,2.685,312,1.186,394,2.874,395,2.949,560,2.078,688,1.811,692,5.192,717,2.784,785,2.874,812,6.608,814,2.949,826,2.051,850,4.723,879,2.949,903,2.486,911,2.236,1046,2.53,1047,6.01,1048,2.53,1049,3.949,1050,4.399,1051,2.53,1052,2.53,1053,2.53,1054,2.53,1055,2.051,1056,2.53]],["t/1163",[0,0.562,33,2.416,283,2.049,297,4.207,350,1.342,394,1.997,447,2.169,626,1.727,692,5.444,717,2.109,785,3.175,814,3.257,837,2.321,850,4.994,880,2.53,893,4.432,898,1.997,903,2.746,904,2.53,974,2.416,1010,2.049,1049,3.448,1055,3.69,1057,2.863,1058,2.863,1059,2.863,1060,2.106,1061,2.863,1062,2.321,1063,2.863,1064,2.863,1065,2.863,1066,2.863,1067,2.863,1068,2.863,1069,2.863,1070,2.672,1071,3.69,1072,2.416,1073,2.863,1074,1.95,1075,2.863]],["t/1165",[0,0.46,3,3.72]],["t/1167",[0,0.529]],["t/1169",[1076,7.397]],["t/1171",[0,0.537,304,3.263,446,4.71,447,4.71,695,5.247,1060,4.573,1076,8.197,1077,6.849,1078,6.849,1079,6.849,1080,6.219,1081,5.494]],["t/1173",[0,0.353,424,5.888,426,4.2,466,4.779,719,4.779,756,5.888,1082,5.323,1083,6.948,1084,6.948,1085,6.948,1086,6.948,1087,6.948,1088,6.948,1089,6.948,1090,6.948,1091,6.948,1092,4.027,1093,4.111]],["t/1175",[0,0.472,719,4.303,720,3.373,736,3.563,1060,2.808,1076,5.02,1081,3.373,1094,4.205,1095,5.5,1096,6.257,1097,4.205,1098,4.205,1099,4.205,1100,4.205,1101,6.257,1102,3.373,1103,4.205,1104,5.303,1105,3.818,1106,2.987,1107,4.205,1108,5.682,1109,4.205,1110,4.205,1111,4.205,1112,3.563,1113,4.205,1114,3.818,1115,4.205,1116,4.205,1117,3.563,1118,4.205,1119,3.818,1120,4.205,1121,4.205,1122,6.257,1123,4.205,1124,4.205,1125,4.205,1126,4.205,1127,4.205,1128,4.205,1129,4.205,1130,4.205,1131,2.808,1132,4.205,1133,4.205,1134,4.205,1135,4.205]],["t/1177",[0,0.572,373,3.309,398,5.804,843,5.041,1076,8.197,1136,6.849,1137,6.849,1138,6.849]],["t/1179",[903,4.69,1139,8.562,1140,8.562,1141,8.562,1142,7.256]],["t/1181",[0,0.413,85,6.887,373,3.926,1143,8.126,1144,8.126,1145,6.519,1146,6.887,1147,8.126]],["t/1183",[7,4.231,373,4.622,898,4.978,1074,4.86,1148,5.583,1149,7.137,1150,7.137,1151,7.86,1152,6.305]],["t/1185",[0,0.426,89,3.66,193,3.308,737,2.325,796,3.308,807,3.308,808,3.308,1149,3.921,1153,3.66,1154,6.433,1155,6.382,1156,3.921,1157,4.318,1158,6.382,1159,3.464,1160,4.318,1161,6.382,1162,6.382,1163,4.318,1164,4.318,1165,4.318,1166,6.382,1167,5.448,1168,7.591,1169,4.318,1170,4.318,1171,4.318,1172,4.318,1173,3.921,1174,4.318,1175,3.921,1176,4.318,1177,4.318,1178,6.382,1179,5.409,1180,6.382,1181,3.464,1182,4.318,1183,3.464,1184,4.318,1185,4.318,1186,4.318]],["t/1187",[1187,8.718,1188,8.718,1189,8.718,1190,8.718]],["t/1190",[0,0.521,261,5.493,1191,6.553,1192,7.022,1193,4.576,1194,7.022,1195,7.733,1196,7.733]],["t/1192",[0,0.502,1191,7.006,1193,3.993,1197,7.506,1198,7.506,1199,7.506]],["t/1194",[3,3.652,1200,8.879,1201,8.879]],["t/1196",[797,6.803,801,7.525,1202,7.123]],["t/1199",[0,0.428,1071,6.191,1202,7.994,1203,7.638,1204,8.412]],["t/1201",[0,0.557,17,2.579,520,3.282,903,3.282,1202,7.282,1205,5.441,1206,5.992,1207,5.992,1208,8.242,1209,5.992,1210,5.992,1211,5.441,1212,7.302,1213,5.992,1214,5.441,1215,5.992]],["t/1203",[0,0.489,17,3.745,520,3.699,1202,7.72,1205,6.131,1208,7.899,1211,6.131,1212,6.131,1216,6.752,1217,6.752,1218,6.752,1219,6.752,1220,6.752,1221,6.752]],["t/1205",[0,0.42,402,6.098,428,5.055,520,4.528,1222,7.006]],["t/1208",[0,0.587,23,3.079,109,4.74,286,6.26,520,2.823,1223,5.154,1224,5.154,1225,4.135,1226,5.154,1227,5.154,1228,4.68,1229,5.154]],["t/1210",[0,0.42,3,3.4,1230,8.358,1231,8.266,1232,8.266,1233,8.266]],["t/1213",[21,3.959,283,4.975,402,5.822,428,5.226,466,5.266,469,3.231,476,5.062,708,4.472,1072,4.27,1082,5.866,1234,7.656,1235,5.574,1236,5.574,1237,4.472,1238,4.724,1239,4.103,1240,7.656,1241,4.27,1242,4.472,1243,5.574,1244,5.574,1245,5.574]],["t/1215",[1246,8.373]],["t/1217",[0,0.535,7,0.924,17,4.029,23,3.492,89,1.455,92,1.087,109,3.789,161,1.181,168,0.571,208,0.707,236,4.991,239,0.838,242,0.617,283,2.304,284,0.783,329,1.016,353,0.6,402,2.192,418,1.062,428,1.817,468,2.307,469,3.508,520,1.942,560,1.841,706,0.941,737,0.497,1018,1.377,1082,4.824,1156,0.838,1159,1.377,1179,0.783,1241,0.707,1246,0.838,1247,0.838,1248,0.783,1249,1.559,1250,0.838,1251,0.923,1252,2.039,1253,1.717,1254,1.717,1255,4.387,1256,0.923,1257,0.923,1258,0.923,1259,0.923,1260,0.783,1261,2.844,1262,0.923,1263,1.717,1264,0.838,1265,1.717,1266,0.923,1267,0.838,1268,0.923,1269,0.923,1270,0.783,1271,0.923,1272,0.923,1273,5.254,1274,5.705,1275,3.011,1276,3.011,1277,3.011,1278,1.455,1279,3.011,1280,4.387,1281,1.717,1282,1.717,1283,1.717,1284,0.923,1285,0.923,1286,0.923,1287,1.717,1288,3.011,1289,1.717,1290,1.559,1291,4.021,1292,1.717,1293,1.559,1294,1.717,1295,1.931,1296,1.717,1297,0.923,1298,1.717,1299,1.717,1300,1.717,1301,1.717,1302,3.769,1303,3.408,1304,3.011,1305,1.717,1306,1.717,1307,0.923,1308,0.923,1309,1.717,1310,0.923,1311,0.923,1312,0.923,1313,1.717,1314,0.923,1315,0.741,1316,0.923,1317,0.923,1318,0.923,1319,1.717,1320,0.923,1321,0.838,1322,0.838,1323,0.923,1324,1.455,1325,0.838,1326,0.923,1327,0.923,1328,0.923,1329,0.923,1330,0.707,1331,0.707,1332,0.923,1333,0.741,1334,0.783,1335,0.707,1336,0.923,1337,0.838]],["t/1219",[0,0.503,401,5.083,402,4.425,428,3.668,466,4.921,1303,6.064,1338,7.155,1339,7.155,1340,7.155,1341,7.155,1342,7.155,1343,7.155,1344,7.155,1345,7.155]],["t/1221",[402,5.49,428,4.551,1346,8.879]],["t/1223",[0,0.548,373,3.047,401,4.48,402,5.145,427,4.098,428,4.265,520,3.455,557,5.346,1018,6.676,1238,5.346,1247,5.728,1248,5.346,1249,7.556,1250,5.728,1347,5.346]],["t/1225",[0,0.532,557,6.887,1193,3.926,1347,6.887,1348,8.126,1349,8.126]],["t/1227",[0,0.575,179,4.987,1193,4.052,1248,6.145,1290,6.584,1302,4.368,1303,4.368,1350,5.154,1351,5.154,1352,6.584,1353,5.154,1354,5.154,1355,5.154,1356,5.154,1357,5.154,1358,6.145,1359,5.154,1360,5.154,1361,5.154]],["t/1229",[401,6.192,427,5.664,428,4.468,1352,7.916]],["t/1231",[0,0.528,373,3.457,1193,4.777,1362,7.155,1363,7.155,1364,9.026,1365,9.026,1366,7.155,1367,7.155]],["t/1233",[0,0.528,3,3.286,428,4.096,444,4.941,1368,7.991,1369,7.991,1370,5.676]],["t/1235",[0,0.521,289,2.811,350,3.29,785,6,786,5.924,787,5.493,788,5.164,789,6.553]],["t/1238",[161,5.589,785,6.183,790,7.832,791,6.887,792,7.379,793,7.379]],["t/1240",[0,0.471,43,4.441,790,4.995,794,6.991,795,5.653,796,7.547,797,7.088,798,5.653,799,5.653,800,5.653,801,6.991,802,5.653,803,5.653,804,5.653,805,5.653,806,5.653]],["t/1242",[0,0.549,807,6.122,808,6.122,809,7.256,810,7.256,811,7.256]],["t/1246",[0,0.579,692,3.12,812,6.452,813,5.441,814,6.303,815,7.302,816,7.302,817,5.441,818,5.441,819,5.441]],["t/1248",[0,0.557,10,2.223,23,2.924,658,3.851,692,2.725,734,3.851,814,4.2,820,2.083,821,4.751,822,4.751,823,3.022,824,8.32,825,4.751,826,2.45,827,4.751,828,4.751,829,6.654,830,5.87,831,4.751,832,4.751,833,4.751,834,4.751,835,4.751,836,3.022,837,2.45,838,3.022,839,3.022,840,3.022,841,3.022,842,3.022,843,2.45,844,3.022,845,3.022,846,3.851,847,4.751,848,3.022,849,3.022]],["t/1250",[0,0.566,692,4.41,814,5.502,820,3.371,826,6.944,837,4.768,850,3.916,851,5.883,852,5.883,853,5.49]],["t/1252",[0,0.578,17,1.115,23,0.951,69,2.342,351,1.533,353,2.778,394,1.641,395,1.683,421,1.502,692,4.157,846,5.555,850,2.584,854,2.352,855,2.352,856,2.352,857,2.352,858,2.352,859,2.196,860,3.147,861,2.352,862,2.352,863,7.486,864,5.205,865,4.555,866,1.84,867,2.529,868,2.352,869,3.882,870,3.882,871,2.352,872,2.352,873,2.352,874,3.882,875,2.352,876,2.352,877,2.352,878,2.352,879,1.683,880,2.078,881,2.352,882,2.352]],["t/1254",[0,0.575,17,1.404,289,1.185,329,1.929,394,3.26,395,3.345,421,1.89,560,1.493,692,1.698,717,1.371,734,2.4,737,1.755,788,3.437,864,4.676,865,3.345,866,2.316,879,2.118,883,2.961,884,2.961,885,2.763,886,5.792,887,2.961,888,2.961,889,2.961,890,5.792,891,2.961,892,2.961,893,2.316,894,2.961,895,2.961,896,2.961,897,4.674,898,2.065,899,2.961,900,2.316,901,2.961,902,2.763,903,1.786,904,2.616,905,2.961,906,2.961,907,4.674,908,4.13,909,2.961,910,2.961,911,2.616,912,2.961]],["t/1256",[0,0.57,12,2.69,18,2.162,119,1.758,289,0.553,347,0.989,353,0.989,418,0.941,469,2.568,717,0.64,723,5.904,724,1.166,785,4.119,807,1.166,808,1.166,850,1.636,860,3.261,865,2.374,867,0.9,898,0.964,913,5.109,914,1.382,915,0.941,916,2.932,917,1.221,918,2.457,919,1.289,920,4.024,921,1.382,922,1.382,923,1.382,924,1.382,925,1.081,926,1.382,927,1.382,928,2.293,929,2.69,930,2.457,931,4.024,932,2.457,933,1.382,934,1.382,935,1.382,936,1.382,937,2.932,938,1.382,939,1.382,940,1.382,941,3.656,942,2.293,943,2.457,944,1.382,945,1.382,946,1.382,947,1.289,948,1.382,949,1.289,950,2.457,951,1.382,952,1.221,953,1.081,954,1.382,955,1.382,956,1.382,957,1.382,958,7.387,959,2.457,960,1.382,961,1.382,962,1.382,963,2.457,964,3.395,965,1.382,966,1.382,967,1.382,968,2.457,969,2.457,970,1.382,971,1.382,972,1.382,973,2.457,974,2.073,975,2.457,976,2.457,977,2.457,978,1.382,979,1.382,980,1.382,981,5.109,982,2.457,983,2.457,984,2.457,985,1.382,986,1.382]],["t/1259",[0,0.582,168,4.504,304,3.47,351,4.309,625,2.965,864,4.063,865,2.617,987,5.502,988,7.357,989,3.658,990,3.658,991,5.135,992,3.658,993,3.658,994,3.658,995,5.502,996,5.502,997,4.304,998,3.231,999,3.658,1000,3.658,1001,3.658,1002,3.658]],["t/1261",[0,0.586,304,2.687,796,4.321,865,5.015,998,4.524,1003,5.121,1004,4.78,1005,5.121,1006,8.591,1007,5.121,1008,5.121,1009,5.121]],["t/1264",[0,0.564,304,1.784,329,2.215,373,3.77,421,2.171,692,1.95,846,2.756,850,3.466,864,2.089,908,3.004,1010,2.433,1011,3.4,1012,3.4,1013,3.4,1014,3.4,1015,3.174,1016,3.174,1017,5.206,1018,5.588,1019,3.4,1020,3.174,1021,3.4,1022,3.4,1023,3.4,1024,3.4,1025,3.4,1026,3.4,1027,3.4,1028,3.4,1029,3.4,1030,3.4,1031,3.4,1032,3.4,1033,3.4,1034,3.4,1035,3.4,1036,3.4,1037,5.206,1038,5.206,1039,5.206,1040,3.4,1041,3.4,1042,3.4,1043,3.4,1044,3.4,1045,3.4]],["t/1266",[0,0.581,23,1.666,297,2.685,312,1.186,394,2.874,395,2.949,560,2.078,688,1.811,692,5.192,717,2.784,785,2.874,812,6.608,814,2.949,826,2.051,850,4.723,879,2.949,903,2.486,911,2.236,1046,2.53,1047,6.01,1048,2.53,1049,3.949,1050,4.399,1051,2.53,1052,2.53,1053,2.53,1054,2.53,1055,2.051,1056,2.53]],["t/1268",[0,0.562,33,2.416,283,2.049,297,4.207,350,1.342,394,1.997,447,2.169,626,1.727,692,5.444,717,2.109,785,3.175,814,3.257,837,2.321,850,4.994,880,2.53,893,4.432,898,1.997,903,2.746,904,2.53,974,2.416,1010,2.049,1049,3.448,1055,3.69,1057,2.863,1058,2.863,1059,2.863,1060,2.106,1061,2.863,1062,2.321,1063,2.863,1064,2.863,1065,2.863,1066,2.863,1067,2.863,1068,2.863,1069,2.863,1070,2.672,1071,3.69,1072,2.416,1073,2.863,1074,1.95,1075,2.863]],["t/1270",[3,3.13,111,6.263,867,4.502,1193,3.676,1371,7.61,1372,7.61,1373,7.61,1374,7.61,1375,7.61,1376,7.61,1377,7.61]],["t/1272",[0,0.472,92,4.745,109,4.837,1193,4.878,1378,7.491,1379,7.491,1380,7.491,1381,7.491,1382,7.491]],["t/1274",[0,0.393,109,4.933,1193,4.947,1383,7.733,1384,7.733,1385,7.733,1386,7.733,1387,7.733]],["t/1276",[0,0.459,3,2.943,23,2.626,92,4.532,109,3.726,867,4.233,1193,5.016,1388,6.498,1389,7.155,1390,7.155,1391,6.498,1392,7.155]],["t/1280",[0,0.502,14,5.113,17,2.399,18,3.298,23,2.81,69,3.053,119,3.622,520,4.194,1331,4.27,1333,4.472,1393,5.574,1394,5.574,1395,5.574,1396,5.574,1397,5.574,1398,5.062,1399,6.489,1400,5.574,1401,5.574,1402,4.27,1403,4.472,1404,3.834,1405,5.062,1406,5.636,1407,5.574,1408,5.574]],["t/1282",[0,0.533,14,6.53,17,4.21,18,2.894,23,1.795,520,3.827,626,2.679,666,6.344,1331,3.747,1333,3.924,1398,4.442,1403,3.924,1404,3.364,1405,4.442,1406,5.143,1409,4.891,1410,4.442,1411,6.987,1412,6.987,1413,4.891,1414,4.891,1415,4.891,1416,4.891,1417,4.891]],["t/1285",[0,0.506,16,4.996,1410,6.596,1418,7.264,1419,7.264,1420,7.264,1421,9.112,1422,7.264,1423,7.264,1424,7.264,1425,7.264,1426,7.264]],["t/1287",[0,0.557,15,2.82,23,1.823,69,4.656,109,3.038,283,2.489,440,1.405,520,1.244,560,1.754,562,1.925,925,3.529,1093,2.939,1293,2.063,1358,4.944,1403,1.822,1427,2.271,1428,2.271,1429,2.271,1430,1.925,1431,3.831,1432,2.271,1433,2.271,1434,2.271,1435,2.271,1436,2.271,1437,2.271,1438,2.271,1439,2.271,1440,5.833,1441,2.271,1442,2.271,1443,2.271,1444,2.271,1445,2.271,1446,2.271,1447,2.271,1448,2.271,1449,2.271,1450,2.271,1451,2.271,1452,2.271,1453,2.271,1454,2.271,1455,2.271,1456,2.271,1457,2.271,1458,2.271,1459,3.831,1460,2.271,1461,2.271,1462,2.271,1463,2.271,1464,2.271,1465,2.271,1466,2.271,1467,2.271,1468,2.271,1469,2.271,1470,2.271,1471,3.831,1472,2.271,1473,2.271,1474,2.271,1475,2.271,1476,2.271,1477,2.271,1478,2.271,1479,2.271,1480,2.271,1481,2.271,1482,2.271,1483,2.063,1484,3.831,1485,2.271,1486,3.831,1487,2.935,1488,2.271,1489,5.833,1490,3.247,1491,2.271,1492,3.831,1493,2.271,1494,2.271,1495,2.271,1496,2.271]],["t/1290",[0,0.435,1497,8.562,1498,8.562,1499,8.562,1500,8.562]],["t/1292",[1501,7.123,1502,7.525,1503,8.879]],["t/1294",[0,0.536,1167,5.371,1502,7.006,1504,8.266,1505,7.006]],["t/1296",[0,0.46,3,3.72]],["t/1298",[1055,6.417,1506,8.718,1507,8.718,1508,8.718]],["t/1300",[69,5.202,118,3.807,864,3.663,1509,5.963,1510,8.544,1511,7.758,1512,6.567,1513,5.963,1514,6.567,1515,5.963,1516,5.963,1517,6.567,1518,6.546,1519,6.567,1520,6.567,1521,6.567,1522,5.963]],["t/1302",[0,0.518,118,4.171,864,5.329,1513,4.631,1515,6.535,1516,6.535,1523,5.1,1524,5.1,1525,7.196,1526,5.1,1527,7.573,1528,5.1,1529,5.1,1530,4.322,1531,7.196,1532,5.1,1533,5.1,1534,7.196,1535,5.1,1536,5.1,1537,5.1,1538,4.631,1539,5.1,1540,5.1,1541,5.1]],["t/1305",[7,4.155,179,5.308,289,2.805,440,4.772,737,3.036,1072,4.321,1074,3.487,1154,4.78,1183,6.192,1193,3.729,1542,8.591,1543,5.64,1544,5.64,1545,4.524,1546,4.151,1547,5.64,1548,5.64,1549,5.64,1550,5.64,1551,5.154,1552,5.64,1553,6.192,1554,5.64]],["t/1307",[7,4.542,179,3.584,214,3.584,281,4.18,440,3.222,708,4.18,737,2.805,1072,6.464,1183,4.18,1193,2.517,1260,7.151,1270,4.416,1542,8.304,1546,3.835,1551,4.879,1553,5.861,1555,7.306,1556,4.416,1557,5.21,1558,5.21,1559,5.21,1560,4.416,1561,4.731,1562,5.21,1563,3.584,1564,5.21,1565,5.21,1566,5.21,1567,5.21]],["t/1309",[7,3.852,289,2.601,737,4.859,1152,5.74,1183,5.74,1260,8.38,1270,6.064,1553,7.241,1568,7.155,1569,7.155,1570,7.155,1571,6.498]],["t/1312",[1193,4.814,1572,8.412,1573,8.412,1574,8.412,1575,7.638]],["t/1314",[0,0.49,174,6.107,864,2.906,1193,5.351,1575,4.731,1576,5.21,1577,5.21,1578,5.21,1579,7.306,1580,5.21,1581,5.21,1582,5.21,1583,5.21,1584,5.21,1585,5.21,1586,5.21,1587,4.731,1588,4.731,1589,5.21,1590,5.21,1591,5.21]],["t/1317",[0,0.565]],["t/1319",[0,0.528,560,3.276,707,5.74,1592,7.155,1593,7.155,1594,7.155,1595,7.155,1596,7.155,1597,7.155,1598,7.155,1599,7.155,1600,7.155,1601,7.155]],["t/1321",[0,0.521,1587,7.022,1588,7.022,1602,7.733,1603,7.733,1604,7.733,1605,7.733,1606,7.733,1607,7.733]],["t/1324",[1608,8.879,1609,8.063,1610,8.879]],["t/1326",[0,0.452,513,8.063,1402,6.803]],["t/1328",[1611,9.221]],["t/1330",[0,0.507,17,1.734,23,1.478,109,3.793,111,5.801,286,4.167,560,3.977,1261,3.231,1264,3.658,1278,3.414,1490,3.414,1612,4.028,1613,4.028,1614,4.028,1615,4.028,1616,4.028,1617,3.658,1618,5.502,1619,3.658,1620,4.028,1621,4.028,1622,4.028,1623,4.028,1624,4.028,1625,3.658,1626,4.028,1627,5.502,1628,4.028,1629,4.028,1630,4.028,1631,4.028,1632,4.028,1633,4.028,1634,4.028,1635,3.658,1636,4.028,1637,4.028,1638,4.028,1639,4.028,1640,3.658,1641,4.028,1642,3.658,1643,4.028,1644,3.414,1645,4.028,1646,4.028,1647,4.028]],["t/1333",[0,0.469]],["t/1335",[0,0.558,17,3.611,118,4.862,128,3.949,208,3.949,864,4.679,1148,3.661,1522,4.68,1560,4.368,1648,5.154,1649,5.154,1650,5.154,1651,5.154,1652,5.154,1653,5.154,1654,5.154,1655,5.154,1656,5.154,1657,8.388,1658,5.154,1659,5.154,1660,5.154,1661,5.154]],["t/1337",[23,3.259,1662,7.525,1663,8.879]],["t/1340",[0,0.529]],["t/1342",[0,0.573]],["t/1344",[0,0.529]],["t/1347",[0,0.553,15,3.499,17,1.568,23,1.745,43,3.387,92,3.554,109,4.983,111,4.202,118,4.458,121,1.575,283,2.366,286,4.327,560,3.344,853,3.086,893,1.52,1050,1.639,1071,1.575,1278,1.813,1295,1.716,1490,1.813,1625,1.943,1627,3.307,1635,1.943,1640,1.943,1642,1.943,1664,2.14,1665,1.943,1666,2.14,1667,3.642,1668,2.14,1669,2.14,1670,2.14,1671,2.14,1672,2.14,1673,2.14,1674,2.14,1675,2.14,1676,3.642,1677,2.14,1678,2.14,1679,2.14,1680,2.14,1681,2.14,1682,2.14,1683,2.14,1684,2.14,1685,2.14,1686,2.14,1687,2.14,1688,2.14,1689,1.943,1690,2.14,1691,2.14,1692,2.14,1693,3.307,1694,2.14,1695,3.642,1696,2.14,1697,3.642,1698,2.14,1699,2.14,1700,2.14,1701,2.14,1702,2.14,1703,2.14,1704,4.754,1705,3.307,1706,3.642,1707,2.14,1708,2.14,1709,2.14,1710,2.14,1711,2.14,1712,2.14,1713,2.14]],["t/1349",[0,0.546,372,6.305,373,3.797,374,7.137,375,7.137,376,5.583,377,7.137]],["t/1351",[378,8.373]],["t/1354",[329,5.158,373,4.211,379,7.916,380,7.916]],["t/1356",[381,6.402,382,6.402,383,6.402,384,6.402,385,6.402,386,6.402,387,6.402,388,6.402,389,6.402,390,6.402,391,6.402,392,6.402,393,6.402,394,4.465,395,4.581,396,6.402,397,6.402]],["t/1358",[398,6.553,399,7.022,400,7.022,401,5.493,402,4.782,403,7.022,404,7.022,405,7.022,406,7.022,407,7.022,408,7.022]],["t/1360",[409,7.638,410,7.638,411,7.638,412,7.638,413,7.638,414,7.638]],["t/1362",[0,0.408,3,1.952,25,4.022,127,4.022,128,3.636,401,6.229,402,5.747,415,4.022,416,4.31,417,4.31,418,2.935,419,4.31,420,4.31,421,2.751,422,4.31,423,4.31,424,4.022,425,4.31,426,2.869,427,5.207,428,4.108,429,4.31,430,4.31,431,6.208,432,4.31,433,4.31,434,4.31,435,4.31,436,4.31,437,4.31,438,4.31,439,4.31,440,2.935,441,4.31,442,4.31,443,4.31]],["t/1366",[0,0.582,304,4.884,373,4.418,444,6.339,445,4.731,446,3.584,447,3.584]],["t/1368",[448,7.506,449,7.506,450,6.632,451,7.506,452,7.506,453,7.506,454,7.506]],["t/1370",[0,0.51,17,3.405,23,2.146,426,3.534,428,2.996,450,4.69,455,5.309,456,5.309,457,5.309,458,5.309,459,5.309,460,5.309,461,5.309,462,5.309,463,5.309,464,5.309,465,5.309,466,4.021,467,5.309,468,4.479,469,3.389,470,5.309,471,5.309,472,5.309,473,5.309,474,5.309]],["t/1373",[111,5.821,1714,8.718,1715,8.718,1716,7.916]],["t/1375",[0,0.531,14,4.413,16,4.545,17,0.609,18,1.499,21,2.982,23,1.972,91,3.128,110,1.083,111,2.3,286,0.972,468,2.639,520,3.2,737,1.364,859,2.919,860,1.041,893,1.004,903,1.388,942,1.198,1010,1.647,1015,5.296,1016,2.148,1020,2.148,1214,1.284,1331,2.639,1333,1.134,1334,1.198,1335,1.083,1402,1.083,1403,1.134,1404,0.972,1483,2.301,1553,2.033,1617,3.812,1619,1.284,1693,1.284,1716,1.284,1717,2.534,1718,1.414,1719,1.414,1720,1.414,1721,1.414,1722,1.414,1723,1.414,1724,1.414,1725,1.414,1726,1.414,1727,1.414,1728,2.534,1729,1.414,1730,2.534,1731,1.414,1732,1.414,1733,1.414,1734,1.414,1735,1.414,1736,1.414,1737,2.534,1738,1.414,1739,3.444,1740,2.534,1741,2.534,1742,1.414,1743,1.083,1744,1.414,1745,1.414,1746,1.414,1747,1.414,1748,1.414,1749,1.414,1750,1.414,1751,2.534,1752,2.534,1753,1.414,1754,1.414,1755,1.414,1756,1.414,1757,1.414,1758,2.534,1759,1.414,1760,1.414,1761,3.444,1762,2.534,1763,1.414,1764,2.534,1765,2.534,1766,2.534,1767,2.534,1768,1.414,1769,1.414,1770,3.444,1771,4.198,1772,4.833,1773,1.414,1774,2.534,1775,1.414,1776,1.414,1777,1.414,1778,1.414,1779,1.414,1780,1.083,1781,1.414,1782,1.414,1783,1.414,1784,1.414,1785,1.414,1786,1.414,1787,1.414,1788,1.414,1789,1.414,1790,4.198,1791,1.414,1792,1.414,1793,1.414,1794,1.414,1795,1.414,1796,3.558,1797,1.414,1798,1.414,1799,1.414,1800,1.414,1801,1.414,1802,1.414,1803,1.414,1804,1.414,1805,1.414,1806,1.414,1807,1.414,1808,2.534,1809,2.534,1810,2.534,1811,2.534,1812,2.534,1813,1.414,1814,1.414,1815,1.414,1816,1.414,1817,1.414,1818,1.414,1819,1.414,1820,1.414,1821,1.414,1822,1.134,1823,1.414,1824,1.414,1825,1.414,1826,1.414]],["t/1377",[17,3.894,1827,9.047]],["t/1379",[350,3.517,717,3.477,900,5.872,1828,7.506,1829,3.885,1830,5.52,1831,4.528]],["t/1381",[5,2.118,7,3.434,69,2.82,248,2.498,289,3.19,297,1.929,312,2.19,350,3.082,376,2.316,418,3.183,426,1.971,440,2.016,645,4.13,717,2.165,820,2.884,900,3.656,903,2.82,1142,2.763,1181,2.616,1239,2.4,1252,2.763,1274,6.14,1404,2.243,1545,2.616,1563,2.243,1644,4.363,1829,3.94,1831,2.82,1832,2.961,1833,2.961,1834,2.961,1835,2.763,1836,2.961,1837,2.616,1838,4.674,1839,2.616,1840,4.674,1841,2.961,1842,3.345,1843,2.961,1844,4.674,1845,2.763,1846,2.498,1847,2.961,1848,2.961,1849,2.616,1850,2.961,1851,2.498,1852,2.961,1853,2.616,1854,2.316,1855,2.616,1856,2.763,1857,2.4,1858,2.961,1859,2.961,1860,2.4,1861,2.961,1862,2.961,1863,2.961,1864,2.498]],["t/1383",[0,0.568,820,3.991,1829,3.467,1831,4.04,1865,6.698,1866,6.698]],["t/1385",[0,0.562,356,5.061,820,3.847,1867,7.256]],["t/1387",[0,0.57,12,2.756,293,5.127,312,2.439,632,4.072,647,4.412,820,1.491,903,3.14,915,2.316,1406,2.756,1518,2.869,1868,3.4,1869,3.4,1870,3.4,1871,3.4,1872,3.943,1873,3.004,1874,3.004,1875,3.4,1876,3.4,1877,3.4,1878,3.4,1879,3.943,1880,3.4,1881,3.4,1882,3.4,1883,3.004,1884,3.4,1885,3.4,1886,3.4,1887,3.004,1888,3.4,1889,3.4,1890,5.903,1891,3.4,1892,5.206,1893,3.4,1894,3.4,1895,2.575,1896,3.4,1897,3.004]],["t/1389",[0,0.546,336,4.617,632,3.869,647,5.472,1873,4.37,1874,4.37,1879,3.747,1883,4.37,1887,4.37,1898,4.946,1899,4.946,1900,4.946,1901,4.617,1902,4.946,1903,4.946,1904,4.946,1905,4.946,1906,4.946,1907,4.946,1908,5.547,1909,4.617,1910,4.946,1911,4.173,1912,4.946,1913,4.617,1914,4.946]],["t/1392",[0,0.578,43,3.74,118,4.027,444,4.296,820,3.527,1915,6.309,1916,5.323,1917,5.323]],["t/1399",[0,0.559,682,5.107,820,3.129,1854,5.583,1917,6.022,1918,7.137]],["t/1401",[1919,8.373]],["t/1403",[23,0.888,69,1.326,92,1.533,109,1.26,168,1.497,289,3.162,297,1.432,312,1.03,350,3.453,356,2.559,560,1.108,626,2.214,706,1.326,712,4.471,717,3.545,719,1.665,737,2.175,820,2.071,879,1.573,929,2.974,941,1.573,953,1.719,997,1.719,1010,1.573,1062,1.782,1092,1.403,1093,1.432,1095,2.974,1104,2.051,1106,1.719,1152,3.242,1153,2.051,1167,1.573,1324,2.051,1546,2.974,1743,1.854,1780,1.854,1829,1.138,1830,1.616,1839,1.942,1846,1.854,1849,1.942,1851,1.854,1857,3.829,1860,1.782,1920,1.942,1921,1.942,1922,1.854,1923,2.198,1924,1.942,1925,4.056,1926,2.198,1927,2.198,1928,2.198,1929,2.198,1930,1.616,1931,2.198,1932,2.198,1933,2.198,1934,2.051,1935,2.051,1936,2.198,1937,2.198,1938,2.051,1939,1.665,1940,1.942,1941,2.198,1942,1.942,1943,2.198,1944,2.198,1945,1.665,1946,2.198,1947,2.198,1948,1.616,1949,2.198,1950,1.942,1951,2.198,1952,2.198,1953,2.198,1954,2.198,1955,1.854,1956,1.942,1957,2.198,1958,1.854,1959,1.665,1960,1.942,1961,2.198,1962,1.854,1963,1.942,1964,1.942,1965,1.854,1966,2.198,1967,2.198,1968,2.051,1969,1.942,1970,1.303,1971,1.942,1972,1.854,1973,2.198,1974,2.198,1975,2.198,1976,1.942,1977,2.051,1978,2.198,1979,2.198,1980,1.854]],["t/1405",[0,0.582,18,2.165,119,2.377,289,2.496,312,1.557,350,1.557,426,2.212,682,5.01,717,3.243,820,1.456,1093,2.165,1829,2.647,1916,2.803,1930,2.443,1939,2.516,1948,2.443,1950,2.935,1963,2.935,1964,2.935,1970,4.151,1971,2.935,1972,2.803,1981,4,1982,3.322,1983,3.101,1984,2.121,1985,2.935,1986,3.322,1987,3.322,1988,2.693,1989,3.322,1990,5.114,1991,3.322]],["t/1408",[0,0.575,304,2.719,329,3.376,444,3.529,717,3.273,820,3.097,1551,3.811,1831,3.126,1948,7.017,1992,3.811,1993,5.182,1994,5.182]],["t/1410",[0,0.579,17,0.964,61,1.797,65,2.786,289,0.814,329,1.325,421,2.194,466,1.54,484,1.898,631,3.208,820,0.892,915,3.574,941,1.455,1148,1.591,1399,1.898,1402,1.716,1501,1.797,1829,1.053,1897,3.945,1921,3.037,1930,1.495,1970,2.038,1988,1.648,1995,5.868,1996,4.465,1997,1.898,1998,1.898,1999,2.034,2000,2.034,2001,2.034,2002,4.167,2003,2.034,2004,1.716,2005,2.034,2006,3.437,2007,2.034,2008,2.034,2009,2.034,2010,2.034,2011,2.034,2012,2.034,2013,2.034,2014,1.898,2015,3.208,2016,2.034,2017,1.797,2018,2.034,2019,2.034,2020,3.945,2021,2.034,2022,2.034,2023,2.034,2024,2.034,2025,2.034,2026,3.437,2027,2.034,2028,2.034,2029,2.034,2030,2.034,2031,2.034,2032,3.437,2033,3.437,2034,1.716,2035,2.034,2036,1.648,2037,2.034,2038,2.034,2039,2.034,2040,2.034,2041,2.034,2042,2.034,2043,2.034,2044,2.034,2045,2.034,2046,2.034,2047,2.034,2048,2.034,2049,2.034,2050,2.034]],["t/1412",[0,0.435,2051,8.562,2052,8.562,2053,8.562,2054,8.562]],["t/1414",[0,0.444,15,2.64,111,1.404,168,1.3,214,2.467,248,1.61,289,1.304,297,1.244,303,1.686,312,1.526,350,2.649,427,1.366,446,1.446,447,1.446,626,2.57,688,1.366,692,1.095,714,1.61,717,2.619,719,3.815,720,1.686,736,3.04,737,2.986,788,1.404,879,1.366,997,1.493,1004,1.781,1060,2.395,1095,1.547,1108,1.909,1114,1.909,1131,1.404,1222,1.781,1242,1.686,1505,1.781,1546,1.547,1563,1.446,1609,1.909,1842,1.366,1854,5.144,1857,1.547,1864,1.61,1920,1.686,1925,3.133,1938,1.781,1970,2.986,1972,2.748,1981,1.493,2055,2.102,2056,2.102,2057,1.909,2058,2.102,2059,2.102,2060,1.547,2061,1.909,2062,3.764,2063,2.102,2064,2.102,2065,3.04,2066,3.587,2067,4.692,2068,2.102,2069,2.102,2070,2.102,2071,4.692,2072,2.102,2073,2.102,2074,1.781,2075,1.781,2076,3.587,2077,2.102,2078,2.102,2079,2.102,2080,2.102,2081,1.686,2082,3.257,2083,1.909,2084,1.781,2085,2.102,2086,1.781,2087,2.102,2088,2.102,2089,2.102,2090,2.102,2091,1.909,2092,1.781,2093,2.102,2094,2.102,2095,2.102,2096,2.102,2097,2.102,2098,2.102,2099,2.102,2100,1.61,2101,2.102,2102,2.102,2103,1.909,2104,2.102,2105,1.781,2106,1.909,2107,2.102,2108,2.102,2109,2.102,2110,2.102,2111,1.909,2112,2.102,2113,1.909,2114,3.04,2115,1.909,2116,2.102,2117,1.781,2118,2.102,2119,1.781,2120,2.102,2121,2.102,2122,1.909,2123,2.102,2124,2.102,2125,2.102,2126,2.102,2127,1.909]],["t/1417",[1854,6.426,1970,4.87]],["t/1419",[0,0.583,286,3.11,347,5.066,820,4.091,1822,3.628,1854,4.689,1955,3.464,1970,3.554,2082,4.106,2083,4.106,2128,4.938,2129,4.522,2130,4.522,2131,4.522,2132,4.522,2133,4.522]],["t/1421",[0,0.487,289,2.857,312,4.388,688,6.216,2134,7.86,2135,7.86]],["t/1423",[5,1.549,69,2.186,170,2.165,214,2.744,289,2.633,312,2.56,350,2.56,351,2.361,354,2.021,356,2.527,421,1.382,428,1.222,440,1.474,469,1.382,626,2.186,695,1.827,712,1.755,714,1.827,717,3.234,737,2.148,1010,1.549,1060,1.592,1080,2.165,1082,1.827,1106,1.694,1131,1.592,1145,1.913,1167,1.549,1175,2.165,1193,1.152,1225,1.913,1238,2.021,1239,2.937,1280,3.623,1322,2.165,1325,2.165,1545,1.913,1546,1.755,1563,1.64,1689,2.165,1780,3.057,1830,1.592,1835,2.021,1842,1.549,1846,1.827,1857,2.937,1864,1.827,1920,1.913,1922,1.827,1925,1.592,1934,3.382,1935,3.382,1958,3.057,1959,1.64,1965,1.827,1968,2.021,1985,4.827,2060,4.428,2075,2.021,2081,4.128,2092,3.382,2100,1.827,2111,2.165,2113,2.165,2114,2.021,2115,2.165,2122,2.165,2136,2.384,2137,2.165,2138,3.99,2139,1.694,2140,3.382,2141,2.384,2142,2.384,2143,2.384,2144,2.165,2145,2.384,2146,2.384,2147,2.384,2148,3.623,2149,2.384,2150,2.384,2151,2.384,2152,2.384,2153,2.384,2154,2.384,2155,2.165,2156,2.384,2157,2.384,2158,2.384,2159,2.384,2160,2.021,2161,2.384,2162,2.384,2163,2.165,2164,2.384,2165,2.384,2166,2.384,2167,2.384,2168,2.384,2169,2.937,2170,2.384,2171,2.384,2172,2.384,2173,2.384,2174,2.384,2175,2.384]],["t/1426",[0,0.568,289,3.025,312,3.54,347,5.407,879,5.407,1829,2.965,1988,4.643,2065,5.346,2176,5.728,2177,6.308,2178,8.321]],["t/1428",[69,4.608,289,3.058,312,3.579,351,4.977,428,4.311,440,5.201]],["t/1431",[0,0.566,69,2.409,289,2.351,312,3.264,351,2.602,560,2.013,688,2.857,864,3.608,925,4.594,1193,4.087,1992,2.936,2128,4.097,2140,5.482,2179,4.398,2180,4.398,2181,2.549,2182,4.398,2183,4.398,2184,4.398,2185,5.482,2186,4.398,2187,3.727,2188,3.993,2189,4.398,2190,4.398,2191,4.398,2192,3.993,2193,3.993,2194,3.993,2195,4.398]],["t/1433",[0,0.548,121,3.459,289,1.708,312,1.999,376,3.338,632,3.338,640,4.997,915,2.906,1261,3.77,1895,4.669,1901,3.983,1908,4.997,1959,3.232,2139,3.338,2187,3.983,2196,4.699,2197,4.699,2198,4.699,2199,4.699,2200,4.699,2201,4.699,2202,4.699,2203,5.446,2204,6.164,2205,6.164,2206,4.699,2207,4.699,2208,4.699,2209,4.699,2210,4.267,2211,4.699,2212,4.267,2213,3.983,2214,4.699]],["t/1435",[0,0.533,16,2.818,121,3.015,179,2.818,356,2.595,428,3.771,440,4.55,917,4.923,1049,2.818,1193,2.965,1879,4.221,1908,3.015,1959,2.818,2020,6.555,2139,2.91,2203,3.287,2204,3.72,2205,3.72,2212,3.72,2213,3.472,2215,4.097,2216,4.097,2217,7.358,2218,4.097,2219,4.097,2220,4.097,2221,4.097,2222,4.097,2223,4.097,2224,4.097,2225,4.097,2226,4.097,2227,4.097,2228,4.097,2229,4.097,2230,4.097,2231,4.097,2232,4.097,2233,4.097,2234,4.097,2235,4.097,2236,4.097,2237,4.097]],["t/1438",[0,0.571,23,1.933,92,3.336,261,5.229,312,2.241,688,4.784,1191,7.788,1197,4.783,1959,5.064,2192,4.783,2193,4.783,2194,4.783,2238,5.268,2239,5.268,2240,5.268,2241,5.268,2242,5.268,2243,5.268,2244,5.268,2245,5.268]],["t/1440",[0,0.487,289,2.857,312,4.07,372,6.305,1146,6.661,2246,7.86,2247,7.86,2248,7.86]],["t/1443",[0,0.553,118,3.348,2249,5.776,2250,5.776,2251,5.776,2252,5.776,2253,5.776,2254,5.776,2255,5.776,2256,5.776,2257,5.776,2258,7.844,2259,5.776,2260,5.776,2261,5.776,2262,5.776,2263,5.776,2264,5.776,2265,5.776,2266,5.776,2267,5.776,2268,5.776,2269,5.776]],["t/1445",[0,0.52,647,6.075,925,3.661,2020,5.817,2270,5.154,2271,6.584,2272,4.68,2273,4.68,2274,6.584,2275,5.154,2276,4.68,2277,4.68,2278,5.154,2279,5.154,2280,5.154,2281,5.154,2282,5.154,2283,7.251,2284,7.251,2285,5.154,2286,5.154,2287,5.154,2288,5.154,2289,5.154,2290,5.154,2291,5.154,2292,5.154]],["t/1447",[2271,6.596,2272,6.596,2273,6.596,2274,8.274,2276,6.596,2277,8.274,2293,7.264,2294,7.264,2295,7.264,2296,7.264,2297,7.264,2298,7.264,2299,7.264]],["t/1449",[0,0.569,863,6.305,2300,7.86,2301,7.86,2302,7.86]],["t/1451",[0,0.364,289,2.601,350,3.044,949,6.064,1117,6.064,1662,6.064,1980,5.482,2303,7.65,2304,7.155,2305,6.915,2306,7.155,2307,4.921,2308,7.155,2309,7.155]],["t/1453",[0,0.557,289,1.958,1173,4.891,1743,4.126,1980,4.126,2062,4.321,2303,4.565,2305,7.729,2307,3.704,2310,8.55,2311,5.386,2312,4.891,2313,5.386,2314,5.386,2315,5.386,2316,5.386,2317,5.386,2318,5.386]],["t/1460",[0,0.554,350,3,717,2.965,2062,5.656,2091,6.402,2303,5.975,2305,5.401,2307,6.15,2310,5.975,2312,6.402,2319,7.05]],["t/1462",[0,0.563,421,3.308,707,4.578,737,3.072,843,5.727,1796,4.836,1822,4.578,2017,6.242,2062,6.242,2305,4.372,2310,4.836,2320,8.853,2321,5.707,2322,4.836,2323,5.707,2324,5.707,2325,5.707,2326,5.707]],["t/1464",[0,0.571,69,2.283,168,2.577,304,1.986,351,3.678,428,2.136,560,1.908,711,3.344,717,1.753,737,2.244,903,2.283,1074,2.577,1225,3.344,1945,2.867,1959,2.867,2014,5.268,2181,2.416,2322,5.268,2327,8.241,2328,7.434,2329,4.168,2330,4.168,2331,9.844,2332,4.168,2333,4.168,2334,3.532,2335,4.168,2336,4.168]],["t/1471",[0,0.348,289,2.489,350,2.914,787,4.865,788,4.573,952,5.494,997,4.865,1117,5.804,1662,5.804,1977,5.804,2322,5.804,2337,6.725,2338,5.247,2339,6.849,2340,6.849,2341,6.849,2342,6.219,2343,6.849]],["t/1473",[281,5.197,297,5.01,350,2.756,440,4.006,692,3.373,708,5.197,717,3.562,788,4.326,1049,4.456,1102,5.197,2092,5.49,2163,5.883,2344,6.478,2345,6.478,2346,6.478,2347,5.49,2348,6.478,2349,5.883,2350,6.478,2351,6.478,2352,6.478]],["t/1476",[0,0.166,3,1.341,289,1.185,297,1.929,344,2.498,347,3.345,350,2.714,352,2.763,353,2.118,440,2.016,446,3.541,447,4.387,482,2.961,717,1.371,737,1.755,786,2.498,787,4.531,885,2.763,947,2.763,953,2.316,1055,2.4,1167,2.118,1330,2.498,1505,2.763,2086,2.763,2337,4.887,2342,2.961,2353,3.261,2354,3.261,2355,4.674,2356,3.261,2357,3.261,2358,6.378,2359,3.261,2360,3.261,2361,3.261,2362,3.261,2363,5.148,2364,2.763,2365,3.261,2366,3.261,2367,3.261,2368,3.261,2369,3.261,2370,3.261,2371,2.763,2372,3.261,2373,3.261,2374,3.261,2375,3.261,2376,3.261,2377,3.261,2378,2.763,2379,3.261,2380,3.261,2381,3.261,2382,3.261,2383,3.261,2384,3.261,2385,3.261,2386,3.261,2387,5.148,2388,5.148,2389,5.148,2390,5.148,2391,3.261,2392,3.261,2393,3.261,2394,5.148,2395,3.261,2396,3.261,2397,3.261,2398,3.261,2399,3.261,2400,3.261,2401,3.261,2402,3.261]],["t/1478",[0,0.406,1074,5.975,2403,7.991,2404,7.991,2405,7.991,2406,7.991,2407,7.991,2408,7.991]],["t/1481",[351,5.769,734,5.969,785,3.843,850,4.902,903,3.324,1074,3.752,2347,5.143,2409,6.068,2410,6.068,2411,6.068,2412,6.068,2413,6.068,2414,6.068,2415,6.068,2416,6.068,2417,6.068,2418,6.068,2419,6.068,2420,6.068,2421,6.068,2422,6.068,2423,6.068,2424,6.068]],["t/1485",[5,2.55,168,1.446,208,1.791,242,1.561,249,1.721,289,2.407,312,1.67,313,1.791,350,3.051,373,2.451,418,1.446,446,1.608,469,1.355,520,1.281,682,3.296,706,3.255,711,3.149,712,1.721,714,1.791,717,2.499,723,3.007,724,1.791,786,3.007,787,2.788,820,0.931,866,1.661,929,1.721,937,1.876,941,1.519,964,3.007,1060,1.561,1074,3.137,1081,1.876,1092,2.94,1093,3.001,1095,1.721,1106,2.788,1112,1.981,1167,1.519,1193,1.129,1239,1.721,1242,1.876,1295,1.876,1315,1.876,1330,1.791,1563,1.608,1829,2.384,1837,1.876,1853,1.876,1860,2.889,1922,1.791,1924,1.876,1925,3.387,1939,1.608,1940,1.876,1942,1.876,1955,1.791,1956,1.876,1960,1.876,1962,1.791,1969,1.876,1970,2.113,1976,1.876,1984,4.417,2004,1.791,2074,1.981,2081,1.876,2100,1.791,2119,1.981,2160,1.981,2169,1.721,2371,1.981,2425,2.123,2426,2.123,2427,1.876,2428,1.981,2429,2.123,2430,2.123,2431,2.123,2432,2.123,2433,1.721,2434,2.123,2435,2.123,2436,2.123,2437,2.123,2438,2.123,2439,2.123,2440,2.123,2441,2.123,2442,2.123,2443,2.123,2444,2.123,2445,2.123,2446,3.489,2447,2.123,2448,2.123,2449,2.123,2450,2.123,2451,2.123,2452,2.123,2453,2.123,2454,2.123,2455,2.123,2456,2.123,2457,2.123,2458,2.123,2459,2.123]],["t/1487",[0,0.579,682,5.824,706,4.91,820,2.327,941,3.798,1092,3.389,1829,2.748,1925,3.904,1970,3.147,1981,4.152,2446,6.165]],["t/1489",[0,0.562,7,2.157,43,1.29,168,1.482,289,0.871,304,1.142,376,1.702,402,3.193,421,2.323,426,2.422,428,3.721,444,1.482,706,1.313,717,3.532,737,1.29,820,3.544,867,2.371,898,3.271,1092,3.498,1093,3.055,1159,1.922,1241,1.836,1370,3.668,1430,2.031,1829,2.837,1830,1.6,1842,2.604,1872,1.648,1895,1.648,1945,1.648,1948,2.676,1981,1.702,1984,3.498,1992,3.448,2105,2.031,2181,2.993,2307,1.648,2460,2.176,2461,2.176,2462,2.176,2463,2.176,2464,2.176,2465,2.176,2466,2.176,2467,2.176,2468,2.176,2469,2.176,2470,2.176,2471,2.176,2472,2.176,2473,2.176,2474,2.031,2475,1.922,2476,2.176,2477,1.702,2478,2.176,2479,2.176,2480,2.176,2481,2.176,2482,2.176,2483,2.176]],["t/1492",[0,0.563,373,1.323,427,1.779,552,6.12,640,4.822,647,1.735,706,4.245,820,3.085,864,1.528,867,3.876,1092,3.797,1093,3.876,1193,3.95,1551,4.375,1829,1.287,1831,2.451,1970,1.474,1984,1.587,2128,2.834,2185,2.321,2427,2.197,2446,1.884,2484,2.487,2485,2.487,2486,2.487,2487,2.487,2488,2.487,2489,5.949,2490,2.487,2491,4.063,2492,4.063,2493,2.487,2494,2.487,2495,2.487,2496,2.487,2497,2.487,2498,2.487,2499,2.487,2500,4.063,2501,2.487,2502,2.487,2503,2.487,2504,2.487,2505,2.487,2506,2.487,2507,2.487,2508,2.487,2509,2.487,2510,2.487]],["t/1494",[0,0.567,243,3.563,304,2.003,373,3.023,427,2.732,428,2.155,560,1.925,706,2.303,788,2.808,820,3.522,867,4.897,898,5.242,1370,2.987,1551,2.808,1829,1.976,1831,3.427,1984,4.331,1992,2.808,2128,5.604,2433,3.095,2477,2.987,2511,3.818,2512,3.818,2513,3.818,2514,3.818,2515,3.818]],["t/1496",[0,0.583,428,2.559,706,3.884,717,2.982,820,2.822,867,2.954,1092,2.894,1370,3.547,1829,3.875,1831,2.735,1970,2.688,1984,4.11,2446,3.434,2516,4.534,2517,4.534,2518,4.534,2519,4.534,2520,4.534]],["t/1498",[0,0.496,289,2.954,312,3.457,313,6.226,314,7.379,720,6.519,2521,8.126]],["t/1500",[0,0.554,289,2.875,312,2.487,347,3.798,469,4.584,1131,6.906,1829,2.748,2181,3.389,2522,7.909,2523,5.846,2524,5.309,2525,8.139,2526,5.846]],["t/1502",[0,0.54,915,4.706,1872,5.234,1985,6.105,2181,4.411,2527,9.38,2528,9.38]],["t/1504",[0,0.564,17,2.612,302,4.868,304,2.891,418,3.752,925,6.926,2181,3.517,2529,7.741,2530,5.51,2531,6.068,2532,8.11,2533,8.11]],["t/1506",[0,0.579,14,2.676,17,1.032,267,1.764,304,2.46,394,1.518,395,1.557,444,2.478,915,1.482,925,1.702,1237,4.842,1518,4.624,1872,2.756,1908,3.801,1945,2.756,2181,3.892,2203,4.842,2529,4.376,2534,2.396,2535,4.376,2536,3.396,2537,2.396,2538,2.396,2539,2.396,2540,2.396,2541,2.396,2542,2.396,2543,2.396,2544,2.396,2545,2.396,2546,2.396,2547,4.007,2548,4.007,2549,4.007,2550,2.396,2551,2.396,2552,2.396,2553,2.396,2554,4.007,2555,4.007,2556,4.007,2557,2.396,2558,2.396,2559,2.396,2560,2.396,2561,2.396,2562,2.396,2563,2.396,2564,2.396,2565,2.396,2566,2.396,2567,2.396,2568,2.396,2569,2.396,2570,2.396,2571,2.396,2572,2.396,2573,4.007,2574,2.396,2575,2.176,2576,2.396]],["t/1508",[0,0.547,2181,5.282,2577,8.438,2578,7.264,2579,7.264,2580,7.264,2581,7.264,2582,6.596]],["t/1510",[0,0.578,304,4.554,560,3.048,2530,6.046,2575,6.046,2577,5.643,2582,6.046,2583,6.916]],["t/1512",[0,0.554,17,2.663,23,1.821,293,2.291,647,4.47,915,1.925,953,2.211,1237,6.914,1872,2.141,1879,4.255,1890,2.638,1895,2.141,1911,2.384,1945,3.412,2139,3.524,2181,2.876,2475,5.662,2529,4.205,2535,4.205,2536,6.533,2577,2.638,2583,2.497,2584,3.112,2585,3.112,2586,3.112,2587,3.112,2588,3.112,2589,3.112,2590,3.112,2591,3.112,2592,3.112,2593,3.112,2594,4.961,2595,3.112,2596,3.112,2597,3.112,2598,3.112,2599,3.112,2600,3.112,2601,3.112,2602,3.112,2603,3.112,2604,3.112,2605,2.826,2606,2.826,2607,3.112,2608,3.112,2609,3.112,2610,3.112,2611,3.112,2612,3.112,2613,3.112,2614,3.112]],["t/1514",[0,0.567,1911,6.333,2615,8.266]],["t/1516",[0,0.544,469,4.148,1237,5.74,1404,4.921,1911,5.482,2139,5.083,2536,6.064,2616,7.155,2617,7.155,2618,7.155,2619,7.155,2620,7.155]],["t/1518",[0,0.571,69,2.679,289,2.54,350,2.081,469,5.153,1131,4.665,1404,6.467,1913,4.145,2428,4.145,2525,7.401,2621,4.891,2622,4.891,2623,4.891,2624,4.891,2625,4.891,2626,4.891,2627,4.891,2628,4.891,2629,4.891,2630,4.891]],["t/1520",[0,0.549,23,1.742,65,3.493,267,3.493,917,3.807,1148,4.856,1879,6.031,2036,5.899,2583,5.485,2605,4.31,2606,4.31,2631,4.746,2632,4.746,2633,4.746,2634,4.746,2635,4.746,2636,4.746,2637,4.746,2638,4.746,2639,7.277,2640,8.014,2641,4.746,2642,4.746,2643,4.746,2644,4.746,2645,4.022,2646,3.807,2647,4.746]],["t/1522",[0,0.568,267,6.516,289,2.074,469,3.308,1131,3.811,1148,5.527,2034,5.961,2036,4.201,2583,4.578,2645,4.836,2646,4.578,2648,5.707,2649,5.707,2650,5.707,2651,5.707,2652,5.182,2653,5.707,2654,5.182]],["t/1524",[0,0.558,65,3.709,267,7.269,354,2.69,356,2.01,469,4.803,1148,4.452,1502,2.69,2034,4.801,2036,5.253,2639,6.48,2645,7.867,2646,2.546,2652,2.882,2654,2.882,2655,3.174,2656,3.174,2657,3.174,2658,3.174,2659,3.174,2660,3.174,2661,3.174,2662,3.174,2663,7.136,2664,3.174,2665,3.174,2666,3.174,2667,3.174,2668,3.174,2669,3.174,2670,3.174,2671,3.174,2672,3.174,2673,3.174,2674,3.174,2675,3.174,2676,3.174,2677,3.174]],["t/1526",[1919,8.373]],["t/1528",[23,0.888,69,1.326,92,1.533,109,1.26,168,1.497,289,3.162,297,1.432,312,1.03,350,3.453,356,2.559,560,1.108,626,2.214,706,1.326,712,4.471,717,3.545,719,1.665,737,2.175,820,2.071,879,1.573,929,2.974,941,1.573,953,1.719,997,1.719,1010,1.573,1062,1.782,1092,1.403,1093,1.432,1095,2.974,1104,2.051,1106,1.719,1152,3.242,1153,2.051,1167,1.573,1324,2.051,1546,2.974,1743,1.854,1780,1.854,1829,1.138,1830,1.616,1839,1.942,1846,1.854,1849,1.942,1851,1.854,1857,3.829,1860,1.782,1920,1.942,1921,1.942,1922,1.854,1923,2.198,1924,1.942,1925,4.056,1926,2.198,1927,2.198,1928,2.198,1929,2.198,1930,1.616,1931,2.198,1932,2.198,1933,2.198,1934,2.051,1935,2.051,1936,2.198,1937,2.198,1938,2.051,1939,1.665,1940,1.942,1941,2.198,1942,1.942,1943,2.198,1944,2.198,1945,1.665,1946,2.198,1947,2.198,1948,1.616,1949,2.198,1950,1.942,1951,2.198,1952,2.198,1953,2.198,1954,2.198,1955,1.854,1956,1.942,1957,2.198,1958,1.854,1959,1.665,1960,1.942,1961,2.198,1962,1.854,1963,1.942,1964,1.942,1965,1.854,1966,2.198,1967,2.198,1968,2.051,1969,1.942,1970,1.303,1971,1.942,1972,1.854,1973,2.198,1974,2.198,1975,2.198,1976,1.942,1977,2.051,1978,2.198,1979,2.198,1980,1.854]],["t/1530",[0,0.581,18,2.181,119,2.396,289,2.508,312,1.569,350,1.569,426,2.229,682,5.03,717,3.256,820,1.468,1093,2.181,1829,2.663,1916,2.825,1930,2.462,1939,2.536,1948,2.462,1950,2.958,1963,2.958,1964,2.958,1970,4.167,1971,2.958,1972,2.825,1981,4.024,1982,3.348,1983,3.125,1984,2.137,1985,2.958,1986,3.348,1987,3.348,1988,2.714,1989,3.348,1990,5.144,1991,3.348]],["t/1533",[0,0.575,304,2.719,329,3.376,444,3.529,717,3.273,820,3.097,1551,3.811,1831,3.126,1948,7.017,1992,3.811,1993,5.182,1994,5.182]],["t/1535",[0,0.579,17,0.96,61,1.788,65,2.775,289,0.81,329,1.319,421,2.186,466,1.533,484,1.889,631,3.196,820,0.887,915,3.564,941,1.448,1148,1.583,1399,1.889,1402,1.708,1501,1.788,1829,1.048,1897,3.931,1921,3.025,1930,1.489,1970,2.03,1988,1.641,1995,5.852,1996,4.45,1997,1.889,1998,1.889,1999,2.024,2000,2.024,2001,2.024,2002,4.153,2003,2.024,2004,1.708,2005,2.024,2006,3.424,2007,2.024,2008,2.024,2009,2.024,2010,2.024,2011,2.024,2012,2.024,2013,2.024,2014,1.889,2015,3.196,2016,2.024,2017,1.788,2018,2.024,2019,2.024,2020,3.931,2021,2.024,2022,2.024,2023,2.024,2024,2.024,2025,2.024,2026,3.424,2027,2.024,2028,2.024,2029,2.024,2030,2.024,2031,2.024,2032,3.424,2033,3.424,2034,1.708,2035,2.024,2036,1.641,2037,2.024,2038,2.024,2039,2.024,2040,2.024,2041,2.024,2042,2.024,2043,2.024,2044,2.024,2045,2.024,2046,2.024,2047,2.024,2048,2.024,2049,2.024,2050,2.024]],["t/1537",[350,3.517,717,3.477,900,5.872,1828,7.506,1829,3.885,1830,5.52,1831,4.528]],["t/1539",[5,2.118,7,3.434,69,2.82,248,2.498,289,3.19,297,1.929,312,2.19,350,3.082,376,2.316,418,3.183,426,1.971,440,2.016,645,4.13,717,2.165,820,2.884,900,3.656,903,2.82,1142,2.763,1181,2.616,1239,2.4,1252,2.763,1274,6.14,1404,2.243,1545,2.616,1563,2.243,1644,4.363,1829,3.94,1831,2.82,1832,2.961,1833,2.961,1834,2.961,1835,2.763,1836,2.961,1837,2.616,1838,4.674,1839,2.616,1840,4.674,1841,2.961,1842,3.345,1843,2.961,1844,4.674,1845,2.763,1846,2.498,1847,2.961,1848,2.961,1849,2.616,1850,2.961,1851,2.498,1852,2.961,1853,2.616,1854,2.316,1855,2.616,1856,2.763,1857,2.4,1858,2.961,1859,2.961,1860,2.4,1861,2.961,1862,2.961,1863,2.961,1864,2.498]],["t/1541",[0,0.568,820,3.991,1829,3.467,1831,4.04,1865,6.698,1866,6.698]],["t/1543",[0,0.562,356,5.061,820,3.847,1867,7.256]],["t/1545",[0,0.57,12,2.756,293,5.127,312,2.439,632,4.072,647,4.412,820,1.491,903,3.14,915,2.316,1406,2.756,1518,2.869,1868,3.4,1869,3.4,1870,3.4,1871,3.4,1872,3.943,1873,3.004,1874,3.004,1875,3.4,1876,3.4,1877,3.4,1878,3.4,1879,3.943,1880,3.4,1881,3.4,1882,3.4,1883,3.004,1884,3.4,1885,3.4,1886,3.4,1887,3.004,1888,3.4,1889,3.4,1890,5.903,1891,3.4,1892,5.206,1893,3.4,1894,3.4,1895,2.575,1896,3.4,1897,3.004]],["t/1547",[0,0.546,336,4.617,632,3.869,647,5.472,1873,4.37,1874,4.37,1879,3.747,1883,4.37,1887,4.37,1898,4.946,1899,4.946,1900,4.946,1901,4.617,1902,4.946,1903,4.946,1904,4.946,1905,4.946,1906,4.946,1907,4.946,1908,5.547,1909,4.617,1910,4.946,1911,4.173,1912,4.946,1913,4.617,1914,4.946]],["t/1550",[0,0.578,43,3.74,118,4.027,444,4.296,820,3.527,1915,6.309,1916,5.323,1917,5.323]],["t/1557",[0,0.559,682,5.107,820,3.129,1854,5.583,1917,6.022,1918,7.137]],["t/1559",[289,3.288,1829,4.252]],["t/1561",[0,0.557,640,5.504,647,5.44,915,3.331,1895,3.704,2176,4.891,2474,6.337,2475,4.321,2646,4.321,2678,5.386,2679,5.386,2680,5.386,2681,5.386,2682,5.386,2683,5.386,2684,5.386,2685,5.386,2686,5.386,2687,5.386,2688,5.386,2689,5.386,2690,5.386,2691,5.386,2692,5.386]],["t/1564",[0,0.435,2693,8.534,2694,10.07]],["t/1566",[0,0.443,1230,7.388,2693,7.388,2695,7.916]],["t/1568",[0,0.567,302,5.861,1831,4.002,1855,4.18,2128,6.099,2140,6.192,2181,5.301,2477,3.701,2693,6.192,2695,6.634,2696,5.21,2697,5.21,2698,7.306,2699,5.21,2700,5.21]],["t/1570",[0,0.57,560,4.406,2128,6.095,2181,5.578,2477,4.796,2701,6.752]],["t/1572",[0,0.563,344,5.961,347,5.752,348,5.182,350,2.428,353,5.055,1831,3.126,1992,5.196,2128,6.022,2181,5.511,2702,5.707,2703,5.707]],["t/1574",[0,0.572,373,4.859,1831,3.597,2128,4.159,2181,3.807,2704,8.544,2705,6.567,2706,6.567,2707,6.567]],["t/1576",[0,0.579,119,5.81,373,4.32,2708,8.12,2709,6.402]],["t/1578",[0,0.576,119,4.649,373,3.457,1983,8.8,2708,6.498]],["t/1581",[0,0.496,289,2.954,350,3.457,717,3.418,1980,6.226,2710,8.126,2711,8.126]],["t/1583",[0,0.576,23,0.742,92,1.281,109,1.053,261,2.465,289,0.735,304,0.963,312,0.86,313,1.549,344,1.549,347,3.512,350,1.939,353,1.314,373,1.676,426,4.294,560,0.926,682,2.255,695,1.549,717,1.917,820,3.577,866,1.436,900,1.436,1074,1.25,1092,1.172,1093,2.053,1230,2.941,1551,3.044,1822,1.622,1829,0.95,1831,1.108,1855,1.622,1895,1.391,1916,5.087,1925,3.61,1948,2.317,1984,2.011,1988,1.488,1992,2.317,2060,1.488,2128,5.307,2169,1.488,2181,5.302,2712,2.022,2713,2.022,2714,2.022,2715,2.022,2716,2.022,2717,2.022,2718,3.47,2719,2.022,2720,2.022,2721,2.022,2722,2.022,2723,2.022,2724,2.022]],["t/1585",[0,0.535,289,2.454,312,2.873,373,4.202,626,3.699,709,5.173,710,5.417,1939,4.644,1997,5.722,2524,7.899,2725,6.131,2726,6.752,2727,6.752,2728,6.752]],["t/1587",[0,0.512,350,3.643,2729,8.562,2730,7.775]],["t/1590",[0,0.558,109,4.38,1930,5.617]],["t/1592",[0,0.518,820,3.47,2433,6.417]],["t/1595",[2002,7.667,2731,9.047]],["t/1597",[0,0.369,109,3.783,843,6.707,1930,4.851,2015,7.723,2017,5.828,2732,7.264,2733,7.264,2734,7.264,2735,7.264,2736,7.264,2737,7.264,2738,7.264]],["t/1599",[0,0.509,17,3.798,23,3.652,43,4.568,109,2.083,118,4.918,119,5.513,121,6.245,214,1.173,304,0.813,560,3.696,626,0.934,1102,1.368,1119,1.549,1930,1.999,2709,1.549,2739,2.993,2740,1.706,2741,6.028,2742,2.718,2743,7.56,2744,8.662,2745,6.902,2746,6.028,2747,1.706,2748,1.706,2749,1.706,2750,7.528,2751,7.832,2752,1.706,2753,1.706,2754,1.706]],["t/1601",[0,0.46,520,4.956]],["t/1603",[0,0.562,14,4.121,15,3.038,17,2.657,18,1.469,23,2.875,92,3.355,109,4.692,111,2.756,261,4.865,283,1.613,286,3.643,468,3.163,520,2.261,560,3.136,1071,1.828,1255,2.255,1331,1.903,1334,2.105,1335,1.903,1391,2.255,1487,4.728,1743,1.903,2755,2.483,2756,2.483,2757,2.483,2758,2.483,2759,2.483,2760,4.128,2761,2.483,2762,4.128,2763,4.128,2764,2.483,2765,2.483,2766,2.483,2767,4.128,2768,5.297,2769,4.128,2770,2.483,2771,2.483,2772,4.128,2773,2.483,2774,2.483,2775,2.483,2776,2.483,2777,2.483,2778,2.483,2779,2.483,2780,2.483,2781,2.483,2782,2.483,2783,2.483,2784,2.483,2785,2.483,2786,4.128,2787,2.483]],["t/1605",[1071,7.653]],["t/1607",[0,0.565,14,4.99,16,5.139,23,2.743,43,4.023,109,3.891,118,4.331,560,3.421,863,5.995,1705,7.516,2788,4.205,2789,6.257,2790,6.257,2791,6.257,2792,4.205,2793,6.257,2794,6.257,2795,4.205,2796,6.257,2797,4.205]],["t/1609",[0,0.364,43,3.852,174,4.778,860,5.267,864,3.991,2798,7.155,2799,7.155,2800,7.155,2801,7.155,2802,7.155,2803,7.155,2804,7.155,2805,7.155,2806,7.155,2807,7.155,2808,7.155]],["t/1611",[2809,9.221]],["t/1613",[5,2.55,168,1.446,208,1.791,242,1.561,249,1.721,289,2.407,312,1.67,313,1.791,350,3.051,373,2.451,418,1.446,446,1.608,469,1.355,520,1.281,682,3.296,706,3.255,711,3.149,712,1.721,714,1.791,717,2.499,723,3.007,724,1.791,786,3.007,787,2.788,820,0.931,866,1.661,929,1.721,937,1.876,941,1.519,964,3.007,1060,1.561,1074,3.137,1081,1.876,1092,2.94,1093,3.001,1095,1.721,1106,2.788,1112,1.981,1167,1.519,1193,1.129,1239,1.721,1242,1.876,1295,1.876,1315,1.876,1330,1.791,1563,1.608,1829,2.384,1837,1.876,1853,1.876,1860,2.889,1922,1.791,1924,1.876,1925,3.387,1939,1.608,1940,1.876,1942,1.876,1955,1.791,1956,1.876,1960,1.876,1962,1.791,1969,1.876,1970,2.113,1976,1.876,1984,4.417,2004,1.791,2074,1.981,2081,1.876,2100,1.791,2119,1.981,2160,1.981,2169,1.721,2371,1.981,2425,2.123,2426,2.123,2427,1.876,2428,1.981,2429,2.123,2430,2.123,2431,2.123,2432,2.123,2433,1.721,2434,2.123,2435,2.123,2436,2.123,2437,2.123,2438,2.123,2439,2.123,2440,2.123,2441,2.123,2442,2.123,2443,2.123,2444,2.123,2445,2.123,2446,3.489,2447,2.123,2448,2.123,2449,2.123,2450,2.123,2451,2.123,2452,2.123,2453,2.123,2454,2.123,2455,2.123,2456,2.123,2457,2.123,2458,2.123,2459,2.123]],["t/1615",[0,0.579,682,5.824,706,4.91,820,2.327,941,3.798,1092,3.389,1829,2.748,1925,3.904,1970,3.147,1981,4.152,2446,6.165]],["t/1617",[0,0.562,7,2.157,43,1.29,168,1.482,289,0.871,304,1.142,376,1.702,402,3.193,421,2.323,426,2.422,428,3.721,444,1.482,706,1.313,717,3.532,737,1.29,820,3.544,867,2.371,898,3.271,1092,3.498,1093,3.055,1159,1.922,1241,1.836,1370,3.668,1430,2.031,1829,2.837,1830,1.6,1842,2.604,1872,1.648,1895,1.648,1945,1.648,1948,2.676,1981,1.702,1984,3.498,1992,3.448,2105,2.031,2181,2.993,2307,1.648,2460,2.176,2461,2.176,2462,2.176,2463,2.176,2464,2.176,2465,2.176,2466,2.176,2467,2.176,2468,2.176,2469,2.176,2470,2.176,2471,2.176,2472,2.176,2473,2.176,2474,2.031,2475,1.922,2476,2.176,2477,1.702,2478,2.176,2479,2.176,2480,2.176,2481,2.176,2482,2.176,2483,2.176]],["t/1620",[0,0.563,373,1.323,427,1.779,552,6.12,640,4.822,647,1.735,706,4.245,820,3.085,864,1.528,867,3.876,1092,3.797,1093,3.876,1193,3.95,1551,4.375,1829,1.287,1831,2.451,1970,1.474,1984,1.587,2128,2.834,2185,2.321,2427,2.197,2446,1.884,2484,2.487,2485,2.487,2486,2.487,2487,2.487,2488,2.487,2489,5.949,2490,2.487,2491,4.063,2492,4.063,2493,2.487,2494,2.487,2495,2.487,2496,2.487,2497,2.487,2498,2.487,2499,2.487,2500,4.063,2501,2.487,2502,2.487,2503,2.487,2504,2.487,2505,2.487,2506,2.487,2507,2.487,2508,2.487,2509,2.487,2510,2.487]],["t/1622",[0,0.567,243,3.563,304,2.003,373,3.023,427,2.732,428,2.155,560,1.925,706,2.303,788,2.808,820,3.522,867,4.897,898,5.242,1370,2.987,1551,2.808,1829,1.976,1831,3.427,1984,4.331,1992,2.808,2128,5.604,2433,3.095,2477,2.987,2511,3.818,2512,3.818,2513,3.818,2514,3.818,2515,3.818]],["t/1624",[0,0.561,289,2.026,304,2.656,312,2.372,350,2.372,356,3.53,626,3.053,692,2.903,706,3.053,820,2.219,1010,3.622,1092,3.231,1093,3.298,1131,3.722,1970,4.121,1984,4.438,2477,3.959,2730,6.952,2810,5.574,2811,5.062,2812,5.574,2813,5.574]],["t/1626",[0,0.583,428,2.559,706,3.884,717,2.982,820,2.822,867,2.954,1092,2.894,1370,3.547,1829,3.875,1831,2.735,1970,2.688,1984,4.11,2446,3.434,2516,4.534,2517,4.534,2518,4.534,2519,4.534,2520,4.534]],["t/1628",[0,0.48,289,3.429,312,4.014,350,3.603,1074,4.006,1131,4.326,1530,5.49,2139,4.602,2307,4.456,2337,6.488,2338,4.963,2814,8.468,2815,6.478,2816,6.478]],["t/1631",[0,0.531,128,5.555,289,2.636,312,4.233,373,4.397,418,3.187,427,3.349,626,2.823,688,3.349,706,2.823,709,3.949,710,4.135,717,3.05,820,2.052,1330,3.949,1556,4.368,1917,3.949,1939,3.545,1965,3.949,2169,3.794,2817,4.368,2818,5.154,2819,5.154,2820,5.154]],["t/1633",[0,0.558,7,1.302,12,0.423,15,0.808,17,0.247,18,0.34,40,0.522,43,0.309,69,0.315,85,0.487,109,1.049,111,0.733,118,0.333,121,0.423,214,0.755,246,0.487,249,3.345,261,0.408,283,0.373,289,2.149,293,1.16,297,0.34,298,0.522,312,2.819,328,0.997,350,1.188,351,0.34,356,0.364,415,0.487,418,0.355,421,0.333,426,0.347,446,0.755,447,0.755,625,0.423,626,2.355,632,0.78,668,0.997,688,1.814,692,0.572,707,0.461,717,2.675,719,0.395,737,0.848,756,0.93,787,0.408,791,0.487,794,1.335,820,1.607,843,1.16,902,0.487,903,1.103,915,0.355,919,0.93,928,0.93,953,0.408,964,2.404,974,0.44,991,0.487,1010,1.571,1049,0.755,1050,0.44,1060,0.384,1074,0.355,1082,2.139,1102,0.881,1105,0.522,1106,0.408,1131,0.733,1145,0.881,1150,0.997,1154,1.335,1167,0.373,1179,0.487,1181,0.461,1192,0.522,1193,2.412,1194,0.522,1198,0.522,1199,0.522,1222,0.487,1225,0.461,1228,1.829,1241,0.44,1267,0.522,1273,0.997,1302,0.487,1315,0.461,1337,0.522,1347,0.487,1358,0.487,1406,0.808,1509,0.997,1511,2.849,1518,0.44,1527,0.997,1538,0.997,1563,0.395,1571,0.522,1780,0.44,1796,0.487,1830,0.384,1842,0.373,1845,0.487,1851,0.44,1856,0.487,1872,0.395,1879,1.663,1908,1.483,1909,0.93,1945,0.395,1958,0.44,1962,0.44,1970,0.591,2034,0.44,2036,2.766,2057,0.522,2060,0.423,2061,0.522,2065,0.487,2075,0.93,2086,0.487,2100,1.853,2103,0.522,2106,0.522,2114,1.335,2139,0.408,2148,1.431,2187,0.487,2188,0.522,2203,2.239,2210,1.431,2213,0.487,2334,0.487,2337,0.841,2338,1.207,2355,0.522,2364,0.93,2433,0.808,2535,1.335,2725,3.412,2742,0.522,2811,1.431,2817,1.335,2821,0.997,2822,0.522,2823,1.576,2824,0.575,2825,0.575,2826,0.522,2827,0.575,2828,0.575,2829,0.575,2830,1.098,2831,1.098,2832,0.575,2833,0.575,2834,3.459,2835,0.575,2836,1.098,2837,1.098,2838,0.575,2839,0.575,2840,0.575,2841,0.575,2842,0.575,2843,0.575,2844,0.487,2845,0.575,2846,0.575,2847,0.575,2848,1.098,2849,1.098,2850,2.014,2851,2.014,2852,0.575,2853,0.575,2854,0.575,2855,0.575,2856,0.575,2857,0.575,2858,0.575,2859,0.575,2860,0.575,2861,0.575,2862,0.575,2863,0.575,2864,0.575,2865,0.575,2866,1.098,2867,0.575,2868,0.575,2869,2.418,2870,2.418,2871,0.575,2872,1.098,2873,2.418,2874,2.418,2875,0.575,2876,0.575,2877,1.098,2878,3.137,2879,0.575,2880,0.575,2881,0.575,2882,0.575,2883,0.575,2884,0.575,2885,0.575,2886,0.575,2887,0.575,2888,0.575,2889,0.575,2890,0.575,2891,0.575,2892,0.575,2893,0.575,2894,0.575,2895,0.575,2896,1.098,2897,0.575,2898,1.098,2899,0.575,2900,0.575,2901,0.575,2902,0.575,2903,0.575,2904,0.575,2905,0.575,2906,1.098,2907,0.575,2908,1.098,2909,0.575,2910,0.575,2911,0.575,2912,0.575,2913,0.575,2914,1.576,2915,0.575,2916,0.575,2917,0.575,2918,1.098,2919,0.575,2920,0.575,2921,0.575,2922,0.575,2923,0.575,2924,0.575,2925,0.575,2926,0.575,2927,0.575,2928,1.576,2929,2.418,2930,1.576,2931,0.575,2932,0.575,2933,2.014,2934,1.098,2935,0.575,2936,1.576,2937,0.575,2938,0.575,2939,1.098,2940,0.575,2941,0.575,2942,2.791,2943,0.575,2944,0.575,2945,0.575,2946,1.098,2947,0.575,2948,1.576,2949,0.575,2950,0.575,2951,0.575,2952,1.576,2953,0.575,2954,0.575,2955,0.575,2956,0.575,2957,0.575,2958,0.575,2959,0.575,2960,1.098,2961,0.575,2962,0.575,2963,1.098,2964,0.575,2965,0.575,2966,0.575,2967,0.575,2968,0.575]],["t/1636",[242,3.597,289,3.122,312,3.654,350,3.181,351,4.424,626,4.096,997,3.826,1167,3.5,1830,3.597,1959,3.704,1965,5.728,2060,3.965,2169,3.965,2307,7.255,2337,4.126,2338,4.126,2364,4.565,2817,4.565,2822,6.79,2969,5.386,2970,5.386,2971,5.386]],["t/1638",[7,3.687,23,2.514,249,5.041,289,2.489,312,3.735,372,7.042,717,2.881,952,5.494,1145,5.494,2060,5.041,2305,5.247,2307,6.038,2338,6.725,2972,5.247,2973,6.849]],["t/1640",[0,0.574,1146,6.553,1842,5.024,2974,7.733,2975,7.733]],["t/1642",[0,0.523,287,6.803]],["t/1644",[0,0.507,109,2.471,1261,3.807,1560,4.022,1618,4.31,1984,5.083,2004,3.636,2972,3.636,2976,4.746,2977,6.837,2978,4.746,2979,4.746,2980,4.746,2981,4.746,2982,4.746,2983,4.746,2984,4.746,2985,4.746,2986,4.746,2987,8.769,2988,8.769,2989,8.769,2990,6.837,2991,4.746,2992,6.837,2993,4.746,2994,4.746,2995,4.746,2996,4.746]],["t/1646",[0,0.54,1,6.748,2997,8.412,2998,8.412]],["t/1648",[0,0.57,916,6.979,2137,6.131,2999,8.739,3000,6.752,3001,6.752,3002,6.752,3003,6.131,3004,6.131]],["t/1650",[0,0.474,1,6.932,7,4.651,242,3.637,286,3.747,916,6.046,1321,4.946,1487,4.173,1842,3.539,2117,6.387,2826,4.946,2999,6.843,3005,5.447,3006,8.64,3007,5.447,3008,5.447,3009,7.536,3010,8.64,3011,4.946,3012,5.447,3013,5.447,3014,5.447]],["t/1652",[0,0.486,1,6.916,39,5.643,797,5.101,2117,8.102,2347,8.568,3003,6.046,3015,8.62,3016,8.62,3017,6.046,3018,6.658]],["t/1654",[0,0.552,797,6.226,3017,7.379,3019,8.126,3020,8.126]],["t/1656",[0,0.46,3,3.72]],["t/1658",[0,0.523,287,6.803]],["t/1661",[1049,5.406,1530,6.661,3021,7.86,3022,7.86,3023,7.86,3024,7.86,3025,7.86,3026,7.86,3027,7.86,3028,7.137]],["t/1663",[0,0.432,626,2.886,709,4.036,789,4.464,1864,5.64,1998,4.464,2144,6.685,2155,4.783,3011,4.783,3028,4.783,3029,5.268,3030,5.268,3031,8.487,3032,5.268,3033,5.268,3034,5.268,3035,5.268,3036,5.268,3037,5.268,3038,5.268,3039,7.362,3040,5.268,3041,7.362,3042,8.487,3043,5.268,3044,5.268,3045,5.268,3046,5.268,3047,5.268,3048,5.268]],["t/1666",[3049,9.221]],["t/1668",[0,0.51,24,4.672,174,4.925,3050,7.376,3051,10.026,3052,6.698,3053,7.376,3054,7.376,3055,7.376,3056,7.376]],["t/1671",[0,0.587,23,3.634,161,5.723,560,2.888,3057,6.308,3058,6.308]],["t/1673",[0,0.581,3059,7.86,3060,7.86]],["t/1675",[0,0.469]],["t/1677",[0,0.55,119,5.225,234,7.302,1404,5.531,3061,5.992,3062,5.441,3063,9.077,3064,5.992,3065,5.992,3066,5.992,3067,5.441,3068,9.077,3069,5.992,3070,5.992,3071,5.992]],["t/1679",[0,0.428,1062,6.191,3072,8.412,3073,8.412,3074,8.412,3075,8.412]],["t/1681",[0,0.518,3062,7.916,3067,7.916]],["t/1683",[3,3.652,3076,10.286]],["t/1685",[0,0.469]],["t/1687",[0,0.589,10,4.893,17,3.808,18,1.969,21,2.364,24,2.108,26,2.67,33,4.008,3077,3.022,3078,6.654,3079,5.87,3080,5.87,3081,6.654,3082,7.679,3083,3.022,3084,3.022,3085,4.751,3086,3.022,3087,3.022]],["t/1689",[0,0.587,3,0.925,5,1.462,6,1.805,7,1.211,8,1.805,9,1.805,10,4.997,11,1.724,17,3.75,18,1.331,19,4.181,20,1.907,21,2.7,23,0.826,24,4.104,26,3.958,33,3.78,34,2.043,116,2.043,161,1.548,303,1.805,560,1.74,3077,2.043,3078,5.265,3079,4.48,3080,4.48,3081,5.883,3082,6.383,3083,2.043,3084,2.043,3085,3.451,3086,2.043,3087,2.043,3088,2.25,3089,3.801,3090,2.25,3091,2.25,3092,2.25,3093,2.25,3094,2.25,3095,2.25]],["t/1692",[0,0.588,3,2.12,118,4.862,658,5.337,1335,3.949,2084,4.368,3096,4.68,3097,4.68,3098,4.68,3099,4.68,3100,4.68,3101,4.68,3102,4.68,3103,4.68,3104,4.68,3105,4.68]],["t/1694",[0,0.46,3,3.72]],["t/1696",[0,0.523,287,6.803]],["t/1699",[0,0.593,3,3.174,161,6.052,2378,4.78,3106,5.121,3107,5.121,3108,5.121,3109,5.121]],["t/1701",[0,0.588,3,2.12,118,4.862,658,5.337,1335,3.949,2084,4.368,3096,4.68,3097,4.68,3098,4.68,3099,4.68,3100,4.68,3101,4.68,3102,4.68,3103,4.68,3104,4.68,3105,4.68]],["t/1703",[0,0.57,3,3.459]],["t/1705",[0,0.518,3106,7.916,3107,7.916]],["t/1707",[0,0.593,3,3.28,161,6.203,2378,5.016,3108,5.374,3109,5.374]],["t/1710",[0,0.552]],["t/1712",[0,0.543,893,5.493,3110,9.473,3111,7.733,3112,7.733,3113,7.733,3114,7.733]],["t/1714",[0,0.477,23,2.793,3115,7.61,3116,7.61,3117,7.61,3118,7.61,3119,7.61,3120,7.61,3121,7.61,3122,7.61,3123,7.61]],["t/1722",[2334,7.525,3004,8.063,3124,8.879]],["t/1724",[0,0.489,3,3.577,304,3.217,560,3.091,709,6.664,710,5.417,3125,8.699,3126,6.752,3127,6.752,3128,6.752,3129,6.752,3130,6.752,3131,6.752,3132,6.752,3133,6.752]],["t/1726",[0,0.542,23,2.588,623,5.975,903,3.862,1487,5.401,3134,7.05,3135,7.05,3136,8.942,3137,7.05,3138,7.05,3139,7.05,3140,7.05]],["t/1728",[0,0.496,395,5.28,1193,3.926,1388,7.379,3141,8.126,3142,8.126,3143,8.126]],["t/1731",[3144,9.221]],["t/1733",[0,0.412,3,3.333,16,3.33,23,1.777,174,3.233,560,2.217,624,4.397,864,2.701,1193,2.339,1487,5.314,2127,4.397,3145,4.842,3146,8.104,3147,6.936,3148,4.842,3149,4.842,3150,4.842,3151,4.842,3152,4.842,3153,8.104,3154,4.842,3155,4.842,3156,4.842,3157,4.842,3158,4.842,3159,4.842,3160,4.842,3161,4.842,3162,4.842,3163,4.842,3164,4.842,3165,6.936,3166,4.842,3167,4.842,3168,4.842,3169,4.842,3170,4.842]],["t/1735",[0,0.375,23,2.707,109,3.841,560,3.377,562,6.251,1193,3.563,3171,7.376,3172,7.376,3173,7.376,3174,7.376,3175,7.376,3176,7.376,3177,7.376,3178,7.376]],["t/1737",[0,0.552,3,3.081,23,2.749,109,3.901,560,3.429,623,6.349,1050,5.739,3179,7.491,3180,7.491]],["t/1739",[3,3.652,3181,8.879,3182,8.879]],["t/1741",[23,3.377,43,5.397,174,6.695,3183,7.797,3184,7.376,3185,7.376,3186,7.376,3187,7.376]],["t/1743",[23,3.034,43,5.309,174,5.52,3183,7.006,3188,8.266,3189,8.266]],["t/1745",[23,2.933,43,4.301,174,6.453,1193,3.86,3183,6.772,3190,7.991,3191,7.991,3192,7.991]],["t/1747",[0,0.413,1193,5.055,3193,8.126,3194,8.126,3195,8.126,3196,8.126]],["t/1749",[903,5.575,3197,8.718,3198,8.718]],["t/1751",[0,0.387,23,2.793,43,5.049,174,5.082,1501,6.105,3199,7.61,3200,7.61,3201,7.61,3202,7.61,3203,7.61,3204,7.61]],["t/1753",[0,0.548,3205,8.718]],["t/1756",[2972,6.931,3206,7.667]],["t/1758",[0,0.496,23,2.983,560,3.72,2972,7.479,3206,8.273]],["t/1760",[0,0.496,23,2.983,560,3.72,2972,7.479,3206,8.273]],["t/1764",[0,0.546,138,7.181,242,4.446,2750,6.046,3207,6.658,3208,6.046,3209,6.658,3210,6.658,3211,6.658,3212,6.658,3213,6.658,3214,6.046,3215,6.046]],["t/1766",[138,6.192,3216,8.718,3217,8.718,3218,8.718]],["t/1768",[0,0.517,138,5.405,242,5.082,2844,6.449,3214,6.91,3215,6.91,3219,7.61,3220,7.61,3221,7.61,3222,7.61]],["t/1770",[0,0.529]],["t/1772",[0,0.534,24,4.672,138,6.535,193,5.651,259,7.797,3052,6.698,3223,9.2,3224,7.376]],["t/1774",[0,0.557,7,2.342,17,0.819,36,1.727,43,2.792,138,4.559,142,2.989,193,2.522,207,1.612,242,1.27,246,1.612,247,1.727,248,1.457,249,1.4,250,1.727,251,1.727,252,2.989,253,1.727,254,1.727,255,1.727,256,2.989,257,1.727,258,1.727,259,4.395,260,1.727,261,1.351,262,1.727,263,2.989,264,1.727,265,2.989,266,1.727,267,1.4,268,2.989,269,1.727,270,1.727,271,1.727,272,1.727,273,1.727,274,3.951,275,1.727,276,1.727,277,1.727,278,1.727,279,3.951,280,1.727,281,1.526,282,1.727,283,1.236,284,1.612,285,1.727,350,0.809,645,1.526,1062,1.4,1070,1.612,1203,1.727,1406,1.4,1556,1.612,1561,1.727,1665,1.727,1842,1.236,1958,1.457,2349,4.709,2821,1.727,2844,1.612,3208,1.727,3225,1.902,3226,1.902,3227,1.902,3228,3.291,3229,1.902,3230,1.902,3231,1.902,3232,1.902,3233,1.902,3234,3.291,3235,5.186,3236,1.902,3237,1.902,3238,3.291,3239,5.186,3240,3.291,3241,1.902,3242,1.902,3243,1.902,3244,1.902,3245,3.291,3246,3.291,3247,1.902,3248,1.902,3249,3.291,3250,1.902,3251,1.902,3252,1.902,3253,1.902,3254,1.902,3255,1.902,3256,1.902,3257,1.902,3258,1.902,3259,1.902,3260,1.902,3261,1.902,3262,1.902,3263,1.902,3264,1.902,3265,3.291,3266,3.291,3267,3.291,3268,1.902,3269,1.902,3270,1.902,3271,1.902]]],"invertedIndex":[["",{"_index":0,"t":{"890":{"position":[[0,9],[21,6],[41,4]]},"892":{"position":[[0,39],[40,24]]},"896":{"position":[[57,1],[70,1],[80,2],[94,1],[102,1],[106,1],[113,1],[127,1],[132,1],[136,1],[140,1],[145,1],[149,1],[157,2],[164,1],[172,2],[178,1],[185,2],[190,2],[199,1],[201,1],[213,1]]},"898":{"position":[[0,20],[94,1],[99,1],[103,1],[107,1],[112,1],[116,1],[122,2],[125,5],[133,2],[140,1],[165,1],[181,1],[188,1],[205,1],[211,1],[217,1],[222,1],[230,1]]},"902":{"position":[[57,1],[73,2],[88,1],[98,1],[132,1],[142,1],[158,1],[165,1],[182,1],[188,1],[194,1],[199,1],[213,1],[223,1],[228,2],[234,1],[241,1],[251,1],[269,1],[271,1],[328,2],[334,1],[341,2],[349,2],[368,1],[375,1],[382,2],[388,2],[397,1],[399,1]]},"904":{"position":[[19,19],[71,8],[83,1],[98,1]]},"908":{"position":[[0,23],[24,25],[50,23],[74,6],[81,4],[86,6],[93,17]]},"910":{"position":[[0,20],[21,36],[58,13],[72,22]]},"912":{"position":[[0,14]]},"919":{"position":[[72,31],[277,5],[283,5]]},"921":{"position":[[0,57]]},"925":{"position":[[234,3],[370,11],[382,7],[403,5],[413,28],[442,39]]},"929":{"position":[[33,44],[78,47]]},"932":{"position":[[55,19],[75,13]]},"937":{"position":[[4,19]]},"941":{"position":[[0,10],[19,31],[51,5],[65,20],[86,7],[94,7],[102,15]]},"944":{"position":[[0,37],[42,23],[66,30]]},"946":{"position":[[0,7],[8,20],[39,13]]},"949":{"position":[[0,15],[16,43],[60,15],[76,22]]},"951":{"position":[[12,9],[22,24],[90,2],[93,4],[107,1],[270,1],[444,1],[631,1]]},"954":{"position":[[0,61],[62,42],[105,56],[162,39],[202,32],[235,47]]},"956":{"position":[[0,40],[41,61],[174,7],[182,4],[208,13],[258,5],[264,42],[309,5],[315,32],[350,5],[356,20],[379,5],[385,46],[434,5],[456,4],[463,5],[469,54],[526,4],[531,27],[559,6],[566,17],[584,22]]},"958":{"position":[[0,42],[45,5],[51,32],[86,5],[92,20]]},"960":{"position":[[0,46],[49,5],[71,4],[78,5],[84,54]]},"962":{"position":[[0,27],[28,6],[35,17],[53,22]]},"964":{"position":[[4,93],[98,5],[264,5]]},"966":{"position":[[57,1],[131,1],[139,2],[144,2],[149,2],[155,1],[164,1],[179,2],[182,6],[198,1],[204,1],[206,2],[209,6],[216,1],[218,2],[221,5],[238,1],[245,1],[267,1],[279,2],[297,1],[352,1],[364,2],[369,2],[376,2],[382,1],[391,1],[404,1],[415,2],[428,1],[457,1],[459,1],[471,1]]},"968":{"position":[[0,47]]},"972":{"position":[[123,1],[159,1],[184,1],[200,1],[220,2],[232,1],[256,9],[266,1],[282,1],[292,1],[315,1],[347,2],[374,1],[415,1],[417,8],[441,1],[472,1],[479,1],[493,1],[495,1],[497,1],[499,1],[501,1],[572,1],[630,4],[635,2],[638,1],[666,1],[736,1],[805,1],[863,1],[881,1],[883,1],[885,1],[936,1],[1002,2],[1335,1],[1371,1],[1396,1],[1412,1],[1432,2],[1444,1],[1468,9],[1478,1],[1494,1],[1504,1],[1527,1],[1559,2],[1586,1],[1656,1],[1687,1],[1694,1],[1708,1],[1710,1],[1712,1],[1714,1],[1716,1],[1718,2],[1721,1],[1750,1],[1803,1],[1830,2],[1871,1],[2145,2],[2254,1],[2312,2],[2340,2],[2352,1]]},"974":{"position":[[67,2],[225,15],[365,1],[393,1],[514,1],[516,14],[587,1],[589,14],[718,1],[747,1],[822,1],[849,1],[907,1],[967,1],[1024,13],[1053,36]]},"976":{"position":[[4,14]]},"978":{"position":[[0,15],[21,2]]},"980":{"position":[[4,12]]},"982":{"position":[[0,15],[21,2]]},"986":{"position":[[0,30],[232,7]]},"988":{"position":[[0,12]]},"990":{"position":[[187,15]]},"992":{"position":[[0,4]]},"997":{"position":[[0,137]]},"999":{"position":[[10,8],[19,19],[39,15],[55,21],[77,6],[84,21],[106,6],[113,52],[166,3],[170,32],[203,6],[210,6],[217,16],[234,6],[241,26]]},"1001":{"position":[[244,51]]},"1003":{"position":[[0,3],[87,3],[91,53]]},"1005":{"position":[[0,3],[96,3],[100,53]]},"1007":{"position":[[0,32],[33,82],[116,43],[504,27],[663,17],[681,118]]},"1009":{"position":[[0,4],[14,5],[66,3],[113,40]]},"1022":{"position":[[0,5],[389,4],[812,13]]},"1026":{"position":[[0,1],[24,2],[64,39],[116,18],[154,25],[199,19],[219,5],[225,25],[259,14],[274,5],[280,38],[327,1],[338,10],[357,1],[410,5],[424,32],[465,1],[505,46],[560,1],[621,10]]},"1030":{"position":[[790,31],[1546,15],[1590,1],[1616,2],[1635,1]]},"1035":{"position":[[86,3],[151,24],[176,3],[180,84],[265,18]]},"1037":{"position":[[77,18],[96,3],[100,3],[104,5],[110,7],[171,5],[266,4],[363,4]]},"1043":{"position":[[45,8],[54,8],[63,4],[68,9],[88,10],[99,64],[164,56],[221,54],[276,8],[285,9],[404,10],[518,9],[699,10],[878,8],[887,9],[1009,10],[1148,9],[1344,10]]},"1046":{"position":[[0,19],[20,5],[26,5],[32,5],[38,4],[43,3],[47,2]]},"1048":{"position":[[0,16],[42,33]]},"1050":{"position":[[0,7],[25,3]]},"1053":{"position":[[0,5],[6,39],[46,7],[54,6],[61,6],[68,6],[75,6],[82,22],[105,22],[128,73],[202,3],[206,64],[275,74]]},"1055":{"position":[[0,7],[8,3],[12,50],[63,3],[261,12],[274,3],[278,7],[286,3],[290,26],[317,3],[321,40],[362,3],[509,10],[520,3]]},"1057":{"position":[[0,23],[24,5],[40,6],[47,3],[51,3],[55,12],[68,7],[76,6],[83,6],[90,4],[95,8],[104,4],[109,5],[115,5],[121,5],[127,53],[181,3],[185,12],[198,39],[238,19],[282,19]]},"1059":{"position":[[0,76],[77,34]]},"1061":{"position":[[0,17],[358,42],[884,60],[1113,2],[1168,2]]},"1063":{"position":[[0,14],[169,27],[630,2],[685,2]]},"1065":{"position":[[0,5],[6,38],[45,13],[359,5],[365,40],[406,13]]},"1072":{"position":[[0,5],[6,15],[22,12],[35,23],[59,29],[89,14],[104,5],[110,84],[195,16],[212,22],[235,20],[256,77],[334,90]]},"1074":{"position":[[99,10],[110,5],[116,39]]},"1077":{"position":[[0,6],[160,6]]},"1079":{"position":[[0,9],[10,45],[56,8],[65,30],[96,26],[123,27]]},"1081":{"position":[[10,7],[18,34],[53,13],[76,7],[84,17],[102,13],[127,7],[135,37],[173,13],[198,7],[206,17],[272,10],[283,9],[326,16],[343,6]]},"1083":{"position":[[0,10],[11,64],[76,56],[133,54],[188,11],[200,19],[220,24],[245,25],[271,18],[290,21],[312,26],[362,18],[433,35],[469,38],[508,27],[536,49],[586,12],[599,46],[646,68],[715,8],[724,3],[728,3],[732,12],[745,25],[771,46],[818,56],[875,17],[896,4],[901,2]]},"1087":{"position":[[102,50]]},"1089":{"position":[[0,171],[172,34],[207,31],[239,41]]},"1091":{"position":[[0,100],[101,123],[225,116]]},"1093":{"position":[[0,41]]},"1095":{"position":[[0,75],[76,12],[181,1],[357,9],[385,1],[392,1],[399,36],[441,1],[448,37]]},"1097":{"position":[[6,35],[44,28],[79,20],[102,27],[130,11],[212,3],[220,7],[228,8],[239,15],[264,2],[276,31],[310,21],[332,8],[595,1],[601,1],[648,3],[673,11]]},"1099":{"position":[[6,6],[21,24],[48,18],[69,10],[80,11],[162,3],[170,7],[178,28],[356,3],[417,5],[431,14],[470,2],[482,31],[516,20],[704,1],[710,1],[780,11]]},"1101":{"position":[[0,61],[68,1],[76,51]]},"1114":{"position":[[201,18],[285,17],[562,26]]},"1118":{"position":[[256,10],[917,5],[923,10]]},"1130":{"position":[[0,8],[13,13],[74,11]]},"1135":{"position":[[0,3],[19,2],[30,9]]},"1137":{"position":[[0,13],[27,2],[45,8],[69,5]]},"1141":{"position":[[9,7],[71,1],[88,1],[90,1],[92,1],[94,1],[130,1],[147,1],[149,1],[151,1],[153,1],[174,8],[198,1],[209,15]]},"1143":{"position":[[0,19],[55,1],[122,1],[230,1],[330,1],[397,1],[502,1],[586,1],[593,4],[605,19],[637,2],[650,19],[674,5],[685,5],[719,2],[748,8],[782,1],[809,5],[824,17],[870,1],[948,1],[1022,1],[1100,1]]},"1145":{"position":[[0,1],[9,2],[20,3],[32,11],[53,8],[124,17],[146,32],[195,17],[220,50]]},"1147":{"position":[[9,1],[31,1],[91,1],[120,1],[159,1],[181,3],[187,3],[237,5],[245,8],[278,33],[312,1],[327,8],[340,8],[351,3],[359,30],[413,14],[430,10],[441,1],[456,9],[514,1],[526,2],[595,1],[724,1],[726,1],[739,1],[766,3],[772,6],[779,1],[790,9],[802,5],[810,7],[820,16],[839,13],[855,27],[885,1],[889,7],[917,22],[940,5],[959,6],[1008,5],[1022,12],[1043,10],[1062,5],[1081,32],[1130,6],[1145,28],[1182,13],[1204,14],[1276,6]]},"1149":{"position":[[0,15],[155,5],[170,7],[221,1],[269,1],[293,1],[323,1],[392,1],[505,1],[516,14],[531,1],[587,46],[649,10],[660,3],[666,5],[681,24],[744,33],[803,13],[826,11],[912,6],[921,13],[937,13],[953,44],[998,5],[1012,6],[1029,3],[1118,2],[1134,11],[1154,5],[1177,8],[1210,9],[1228,1],[1277,5],[1298,8]]},"1151":{"position":[[0,4],[10,2],[59,7],[87,11],[99,9],[113,2],[129,6],[141,4],[237,30],[268,4],[273,46],[345,7],[356,26],[396,10],[407,5],[416,11],[447,1],[618,8],[736,2],[817,7],[843,6],[850,4],[871,5],[883,10],[897,4],[907,10],[921,1],[973,17],[1018,4],[1028,7],[1050,2],[1057,3],[1072,1],[1086,1],[1092,7],[1104,1],[1113,2],[1127,1],[1142,1],[1148,10],[1162,3],[1183,2],[1236,8],[1245,2],[1251,20],[1295,13],[1322,4],[1351,12],[1373,20],[1400,1],[1473,28],[1512,43],[1560,15],[1590,2],[1597,3],[1612,1],[1626,1],[1632,7],[1644,1],[1653,2],[1667,1],[1682,1],[1688,10],[1703,3],[1710,2],[1765,29],[1816,4],[1855,3],[1944,13],[1964,24],[2028,11],[2064,11],[2076,7],[2105,3],[2109,6],[2461,3],[2465,6]]},"1154":{"position":[[0,19],[31,2],[46,12],[69,2],[74,4],[133,9],[176,3],[191,6],[210,7],[258,17],[276,5],[282,9],[302,5],[319,15],[344,1],[348,6],[365,7],[373,8],[414,2],[441,20],[474,35],[510,19],[535,3],[548,5],[578,3],[602,15],[620,3],[642,2],[649,1],[667,33]]},"1156":{"position":[[0,2],[7,4],[31,7],[46,11],[68,16],[94,3],[98,21],[125,14],[140,45],[217,23],[244,12],[282,15],[307,7],[315,8],[324,3],[328,18],[347,24],[372,18],[391,23]]},"1159":{"position":[[7,5],[15,31],[56,4],[68,3],[110,3],[282,3],[373,1],[391,1],[406,1],[408,2],[411,1],[461,1],[502,1],[585,1],[629,1],[723,1],[819,1],[909,1],[911,17],[947,1],[972,1],[1071,1]]},"1161":{"position":[[0,1],[6,14],[29,6],[100,2],[138,12],[171,1],[195,7],[207,35],[278,3],[305,14],[328,1],[338,2],[361,4],[388,8],[404,11],[425,7],[446,32],[479,4],[509,3],[536,12],[556,17],[583,7],[604,11],[642,4],[657,27],[698,3],[702,2],[710,8],[722,5],[728,1],[758,9],[795,5],[819,24],[867,11],[891,5],[905,17],[923,3],[931,3],[942,4],[1008,24],[1041,11],[1061,11],[1081,15],[1097,12],[1117,37],[1163,9],[1181,9],[1208,3],[1220,10]]},"1163":{"position":[[107,13],[154,8],[194,50],[252,39],[292,15],[316,13],[337,40],[385,7],[401,9],[411,4],[424,1],[446,6],[570,6],[890,1],[909,4],[918,15],[942,24],[975,14],[1013,1],[1037,14],[1070,7],[1086,8],[1103,8],[1145,14],[1160,1],[1184,4],[1193,14]]},"1165":{"position":[[4,33]]},"1167":{"position":[[0,89],[90,157]]},"1171":{"position":[[191,2],[199,8],[242,16],[286,31],[354,31]]},"1173":{"position":[[361,3]]},"1175":{"position":[[12,34],[225,28],[821,29],[856,41],[1154,5],[1388,5]]},"1177":{"position":[[302,11],[314,2],[322,49],[372,1],[379,32],[424,65],[498,87],[594,40],[635,11]]},"1181":{"position":[[0,4]]},"1185":{"position":[[518,3],[535,3],[553,3],[571,3]]},"1190":{"position":[[0,5],[10,1],[57,1]]},"1192":{"position":[[0,5],[10,2]]},"1199":{"position":[[29,7]]},"1201":{"position":[[30,1],[41,1],[43,3],[47,1],[181,1],[183,22],[206,1],[278,1],[353,1]]},"1203":{"position":[[30,1],[152,1],[154,22]]},"1205":{"position":[[10,5]]},"1208":{"position":[[95,35],[371,1],[375,18],[405,3],[409,8],[420,24],[449,19],[469,3],[473,48],[522,3],[526,51],[589,3],[593,8],[604,31],[638,7],[646,3],[650,14],[667,31],[699,3],[703,47],[753,14],[770,6],[779,19]]},"1210":{"position":[[283,81]]},"1217":{"position":[[10,9],[20,40],[61,13],[79,1],[83,3],[93,14],[136,4],[149,2],[181,5],[286,1],[341,1],[393,1],[437,8],[904,1],[960,1],[1050,1],[1140,1],[1242,1],[1282,1],[1291,1],[1307,1],[1316,1],[1333,1],[1342,1],[1375,1],[1413,1],[1449,1],[1458,11],[1470,33],[1651,1],[1694,1],[1704,1],[1824,1],[1870,1],[1898,1],[2130,1],[2196,1],[2253,1],[2271,1],[2292,2],[2347,10],[2548,1],[2574,1],[2603,3],[3195,5],[3201,1],[3331,1],[3388,1],[3440,1],[3484,1],[3544,1],[3634,1],[3724,1],[3806,1],[3846,1],[3855,1],[3871,1],[3880,1],[3897,1],[3906,1],[3939,1],[3977,1],[4013,1],[4022,1],[4064,1],[4074,1],[4120,1],[4166,1],[4194,1],[4289,1],[4355,1],[4412,1],[4430,1],[4451,2],[4506,1],[4532,1]]},"1219":{"position":[[130,4],[190,4],[257,4]]},"1223":{"position":[[217,40],[258,13],[276,1],[280,3],[290,14],[333,4],[346,2]]},"1225":{"position":[[0,15],[33,20],[71,4]]},"1227":{"position":[[127,36],[170,16],[221,12],[240,5],[269,8],[278,6],[287,1],[331,6],[340,13],[371,51],[460,5],[466,13],[488,51],[540,5],[546,15],[564,27],[594,29]]},"1231":{"position":[[0,12],[88,5],[239,100],[352,13]]},"1233":{"position":[[69,37],[187,1],[189,16]]},"1235":{"position":[[0,8],[13,13],[74,11]]},"1240":{"position":[[0,3],[19,2],[30,9]]},"1242":{"position":[[0,13],[27,2],[45,8],[69,5]]},"1246":{"position":[[9,7],[71,1],[88,1],[90,1],[92,1],[94,1],[130,1],[147,1],[149,1],[151,1],[153,1],[174,8],[198,1],[209,15]]},"1248":{"position":[[0,19],[55,1],[122,1],[230,1],[330,1],[397,1],[502,1],[586,1],[593,4],[605,19],[637,2],[650,19],[674,5],[685,5],[719,2],[748,8],[782,1],[809,5],[824,17],[870,1],[948,1],[1022,1],[1100,1]]},"1250":{"position":[[0,1],[9,2],[20,3],[32,11],[53,8],[124,17],[146,32],[195,17],[220,50]]},"1252":{"position":[[9,1],[31,1],[91,1],[120,1],[159,1],[181,3],[187,3],[237,5],[245,8],[278,33],[312,1],[327,8],[340,8],[351,3],[359,30],[413,14],[430,10],[441,1],[456,9],[514,1],[526,2],[595,1],[724,1],[726,1],[739,1],[766,3],[772,6],[779,1],[790,9],[802,5],[810,7],[820,16],[839,13],[855,27],[885,1],[889,7],[917,22],[940,5],[959,6],[1008,5],[1022,12],[1043,10],[1062,5],[1081,32],[1130,6],[1145,28],[1182,13],[1204,14],[1276,6]]},"1254":{"position":[[0,15],[155,5],[170,7],[221,1],[269,1],[293,1],[323,1],[392,1],[505,1],[516,14],[531,1],[587,46],[649,10],[660,3],[666,5],[681,24],[744,33],[803,13],[826,11],[912,6],[921,13],[937,13],[953,44],[998,5],[1012,6],[1029,3],[1118,2],[1134,11],[1154,5],[1177,8],[1210,9],[1228,1],[1277,5],[1298,8]]},"1256":{"position":[[0,4],[10,2],[59,7],[87,11],[99,9],[113,2],[129,6],[141,4],[237,30],[268,4],[273,46],[345,7],[356,26],[396,10],[407,5],[416,11],[447,1],[618,8],[736,2],[817,7],[843,6],[850,4],[871,5],[883,10],[897,4],[907,10],[921,1],[973,17],[1018,4],[1028,7],[1050,2],[1057,3],[1072,1],[1086,1],[1092,7],[1104,1],[1113,2],[1127,1],[1142,1],[1148,10],[1162,3],[1183,2],[1236,8],[1245,2],[1251,20],[1295,13],[1322,4],[1351,12],[1373,20],[1400,1],[1473,28],[1512,43],[1560,15],[1590,2],[1597,3],[1612,1],[1626,1],[1632,7],[1644,1],[1653,2],[1667,1],[1682,1],[1688,10],[1703,3],[1710,2],[1765,29],[1816,4],[1855,3],[1944,13],[1964,24],[2028,11],[2064,11],[2076,7],[2105,3],[2109,6],[2461,3],[2465,6]]},"1259":{"position":[[0,19],[31,2],[46,12],[69,2],[74,4],[133,9],[176,3],[191,6],[210,7],[258,17],[276,5],[282,9],[302,5],[319,15],[344,1],[348,6],[365,7],[373,8],[414,2],[441,20],[474,35],[510,19],[535,3],[548,5],[578,3],[602,15],[620,3],[642,2],[649,1],[667,33]]},"1261":{"position":[[0,2],[7,4],[31,7],[46,11],[68,16],[94,3],[98,21],[125,14],[140,45],[217,23],[244,12],[282,15],[307,7],[315,8],[324,3],[328,18],[347,24],[372,18],[391,23]]},"1264":{"position":[[7,5],[15,31],[56,4],[68,3],[110,3],[282,3],[373,1],[391,1],[406,1],[408,2],[411,1],[461,1],[502,1],[585,1],[629,1],[723,1],[819,1],[909,1],[911,17],[947,1],[972,1],[1071,1]]},"1266":{"position":[[0,1],[6,14],[29,6],[100,2],[138,12],[171,1],[195,7],[207,35],[278,3],[305,14],[328,1],[338,2],[361,4],[388,8],[404,11],[425,7],[446,32],[479,4],[509,3],[536,12],[556,17],[583,7],[604,11],[642,4],[657,27],[698,3],[702,2],[710,8],[722,5],[728,1],[758,9],[795,5],[819,24],[867,11],[891,5],[905,17],[923,3],[931,3],[942,4],[1008,24],[1041,11],[1061,11],[1081,15],[1097,12],[1117,37],[1163,9],[1181,9],[1208,3],[1220,10]]},"1268":{"position":[[107,13],[154,8],[194,50],[252,39],[292,15],[316,13],[337,40],[385,7],[401,9],[411,4],[424,1],[446,6],[570,6],[890,1],[909,4],[918,15],[942,24],[975,14],[1013,1],[1037,14],[1070,7],[1086,8],[1103,8],[1145,14],[1160,1],[1184,4],[1193,14]]},"1272":{"position":[[106,12],[162,1]]},"1274":{"position":[[95,1]]},"1276":{"position":[[107,1],[137,6]]},"1280":{"position":[[24,1],[37,1],[115,1],[306,1],[351,1]]},"1282":{"position":[[23,1],[41,1],[45,1],[53,1],[159,1],[177,1],[181,1],[189,1],[297,1]]},"1285":{"position":[[37,19],[89,1],[189,1]]},"1287":{"position":[[0,4],[314,2],[350,2],[353,2],[705,2],[717,2],[741,2],[775,2],[801,2],[815,2],[829,2],[877,2],[890,1],[945,2],[998,1],[1030,1],[1061,1],[1118,4],[1173,2],[1221,2],[1229,1],[1246,2],[1259,2],[1262,2],[1338,2],[1436,1],[1448,1],[1490,1],[1512,1],[1535,1],[1582,1],[1632,1],[1679,1],[1704,1],[1738,1],[1770,1],[1815,1],[1865,1]]},"1290":{"position":[[139,16]]},"1294":{"position":[[0,24],[25,14],[40,32]]},"1296":{"position":[[4,8]]},"1302":{"position":[[72,1],[161,15],[253,1],[297,1],[335,1],[451,1],[563,1]]},"1314":{"position":[[271,1],[494,3],[498,14],[513,32],[546,15]]},"1317":{"position":[[0,24],[25,23],[49,5],[55,3]]},"1319":{"position":[[0,26],[179,20],[495,17],[801,16]]},"1321":{"position":[[0,31],[261,10],[341,1]]},"1326":{"position":[[0,35]]},"1330":{"position":[[89,38],[158,1],[306,1],[369,1],[397,1],[425,1],[540,1],[582,1],[624,1]]},"1333":{"position":[[0,150]]},"1335":{"position":[[335,30],[498,38],[537,15],[566,1],[576,1],[593,1],[598,2],[610,1],[614,1],[619,1],[630,1],[634,1]]},"1340":{"position":[[0,88],[89,62]]},"1342":{"position":[[0,115],[116,80],[197,64],[262,47],[310,50]]},"1344":{"position":[[0,78],[79,65]]},"1347":{"position":[[83,1],[102,1],[121,1],[141,1],[160,1],[180,1],[209,1],[267,1],[293,1],[323,1],[388,1],[485,1],[518,1],[524,1],[551,1],[556,1],[589,1],[594,1],[606,3],[610,1],[625,1],[714,1],[762,1],[764,8],[775,1],[862,1],[893,2],[930,1],[1041,1],[1069,1],[1097,1],[1130,3],[1203,3],[1209,1],[1250,1],[1291,1],[1324,3],[1406,3]]},"1349":{"position":[[0,4],[14,5],[66,3],[113,40]]},"1362":{"position":[[0,5],[389,4],[812,13]]},"1366":{"position":[[0,1],[24,2],[64,39],[116,18],[154,25],[199,19],[219,5],[225,25],[259,14],[274,5],[280,38],[327,1],[338,10],[357,1],[410,5],[424,32],[465,1],[505,46],[560,1],[621,10]]},"1370":{"position":[[790,31],[1546,15],[1590,1],[1616,2],[1635,1]]},"1375":{"position":[[197,1],[249,1],[503,1],[542,1],[771,1],[775,1],[1022,1],[1067,1],[1137,1],[1173,1],[1190,1],[1252,1],[1285,1],[1358,2],[1459,2],[1483,2],[1580,1],[1628,1],[1683,1],[1803,1],[1841,1],[1991,1],[2026,1],[2037,1],[2097,1],[2163,1],[2175,1],[2197,1],[2209,1],[2231,1],[2236,1],[2251,2],[2257,2],[2271,2],[2310,1],[2319,1],[2324,1],[2376,1],[2435,1],[2564,1],[2577,1],[2650,1],[2678,1],[2735,1],[2751,1]]},"1383":{"position":[[0,107],[132,2],[135,8],[159,14],[180,5],[267,34],[308,50]]},"1385":{"position":[[0,49],[50,16],[103,12],[122,5],[128,20]]},"1387":{"position":[[0,18],[110,1],[112,4],[132,2],[139,1],[145,6],[177,1],[360,3],[401,2],[443,7],[573,5],[598,1],[615,4],[620,6],[651,3],[664,8],[747,6],[763,8],[776,1],[794,12],[807,12],[827,4],[862,11],[898,4],[907,3]]},"1389":{"position":[[0,10],[35,20],[291,2],[303,6],[340,5],[360,4],[369,7],[423,12],[445,2]]},"1392":{"position":[[0,14],[19,1],[29,10],[42,1],[46,21],[74,1],[82,13],[96,12],[117,19],[143,6]]},"1399":{"position":[[0,2],[13,12],[32,1],[40,19],[63,2]]},"1405":{"position":[[0,8],[13,7],[36,12],[88,1],[96,11],[111,16],[131,20],[160,4],[189,2],[196,14],[216,16],[233,7],[244,5],[279,2],[286,1],[293,35],[329,19],[349,3],[375,6],[458,8],[467,32],[505,34],[557,5],[567,1],[585,8],[599,2],[608,11],[620,28],[660,1],[673,11],[696,30],[727,2],[730,8],[766,15]]},"1408":{"position":[[0,4],[11,3],[41,3],[45,4],[59,6],[85,7],[102,25],[137,5],[143,1],[154,6],[196,6],[219,5],[241,2],[260,12]]},"1410":{"position":[[0,3],[25,8],[40,11],[57,54],[117,11],[129,2],[154,2],[177,6],[192,17],[220,15],[244,3],[258,2],[271,16],[298,4],[305,7],[448,8],[465,35],[501,2],[523,3],[557,23],[581,5],[591,5],[605,24],[636,12],[862,9],[895,8],[911,59],[985,10],[1074,60],[1330,7],[1342,4],[1361,3],[1369,23],[1398,36],[1435,8],[1449,11],[1553,33],[1709,6],[1731,1],[1751,5],[1761,8],[1779,1],[1789,13],[1803,1],[1811,4],[1831,4],[1855,60],[1925,6],[1974,5],[1980,5],[1986,68],[2055,5],[2061,4],[2092,11],[2125,1],[2134,1],[2173,3],[2408,15],[2441,5],[2493,23]]},"1412":{"position":[[0,4]]},"1414":{"position":[[1565,44],[1615,19],[1635,13],[1752,7],[1764,25],[1790,10],[1814,20],[1839,21],[1869,76],[1958,5],[1986,4],[1995,3]]},"1419":{"position":[[18,10],[41,29],[99,29],[134,18],[160,20],[181,9],[199,11],[215,1],[234,2],[243,19],[268,8],[277,1],[284,18],[309,22],[336,8],[353,11],[367,21],[395,7],[411,11],[428,6],[442,7],[456,3],[466,23],[496,24],[521,4],[526,7]]},"1421":{"position":[[0,4],[154,4]]},"1426":{"position":[[0,2],[7,65],[85,27],[117,2],[135,39],[175,22],[203,36],[240,26],[385,47],[473,5]]},"1431":{"position":[[0,23],[53,77],[143,82],[344,12],[373,22],[425,47],[535,1],[540,6],[564,5],[584,5],[590,5],[596,9],[687,13],[890,22],[926,1],[932,1],[950,5],[970,1]]},"1433":{"position":[[0,8],[143,1],[174,9],[193,22],[225,3],[233,22],[467,1],[500,8],[509,2],[516,24],[555,6],[576,17]]},"1435":{"position":[[0,8],[124,14],[143,15],[159,10],[295,9],[402,14],[433,11],[471,5],[645,3],[852,2],[949,1],[956,24]]},"1438":{"position":[[0,4],[9,4],[27,1],[33,1],[59,21],[85,41],[131,3],[183,7],[195,1],[218,29],[254,1],[292,9],[321,7],[351,6],[369,7]]},"1440":{"position":[[0,4],[24,5]]},"1443":{"position":[[0,8],[81,6],[90,7],[98,11],[176,3],[249,6],[561,6],[627,20],[753,3]]},"1445":{"position":[[0,10],[263,14],[376,2],[401,2],[404,2],[473,2],[476,2]]},"1449":{"position":[[122,1],[126,1],[139,3],[143,33],[177,17],[195,14]]},"1451":{"position":[[0,4]]},"1453":{"position":[[15,34],[60,15],[113,2],[153,9],[167,2],[174,20],[198,2],[210,3],[234,9],[248,2],[280,9]]},"1460":{"position":[[5,3],[25,13],[43,2],[50,37],[138,39],[178,15]]},"1462":{"position":[[0,31],[32,3],[40,27],[74,15],[160,8],[169,13],[189,5],[341,9],[357,5],[363,13],[454,23]]},"1464":{"position":[[0,12],[135,4],[144,6],[155,3],[173,14],[259,39],[299,106],[409,20],[496,37],[537,10],[551,9],[564,11],[579,7],[587,12],[603,92],[696,15],[714,107],[822,76],[948,6],[959,5],[1059,1],[1073,16]]},"1471":{"position":[[0,4]]},"1476":{"position":[[213,6]]},"1478":{"position":[[157,19]]},"1487":{"position":[[0,9],[25,6],[43,9],[66,9],[80,3],[89,15],[108,8],[117,4],[125,6],[145,7],[153,6],[160,7],[178,3],[195,9],[209,20]]},"1489":{"position":[[0,20],[43,32],[76,2],[97,5],[172,7],[222,31],[267,2],[460,5],[475,6],[495,8],[843,7],[855,8],[888,3],[1008,9],[1022,10],[1039,3],[1079,10],[1105,11],[1123,2],[1153,4],[1218,2],[1274,14],[1302,18],[1321,9],[1337,37],[1375,12],[1392,33],[1440,2],[1460,11],[1771,15],[1791,20],[1825,3],[1860,21],[1882,22],[1920,4],[1993,1],[2001,5],[2036,8],[2074,7]]},"1492":{"position":[[178,10],[205,1],[246,12],[270,12],[294,3],[320,5],[348,31],[468,3],[476,7],[570,9],[589,10],[617,13],[693,1],[794,9],[858,3],[889,5],[899,11],[970,2],[982,8],[995,10],[1015,2],[1033,13],[1056,8],[1069,16],[1086,5],[1096,23],[1129,7],[1175,10],[1186,18],[1227,1],[1274,30],[1310,3],[1327,3]]},"1494":{"position":[[26,17],[70,25],[108,7],[124,3],[140,2],[155,7],[190,19],[283,8],[306,9],[332,5],[344,1],[352,18],[402,4],[420,23],[476,55],[548,18],[577,12],[629,8],[638,26],[678,7]]},"1496":{"position":[[0,7],[23,33],[68,47],[116,14],[131,2],[151,14],[181,13],[195,1],[210,13],[251,32],[292,1],[307,8],[331,4],[363,6],[397,15],[417,3],[459,4],[492,6],[499,6],[510,7],[523,3],[540,3]]},"1498":{"position":[[0,4],[43,4]]},"1500":{"position":[[0,17],[115,1],[122,2],[172,1],[187,8],[215,1],[224,7],[270,12],[295,7]]},"1502":{"position":[[167,1],[172,13],[190,5],[200,38]]},"1504":{"position":[[26,60],[92,9],[195,5],[247,5],[258,13],[301,3],[325,2],[331,7],[342,21],[367,8]]},"1506":{"position":[[0,4],[10,8],[19,2],[26,4],[107,14],[122,12],[143,16],[165,6],[202,32],[240,8],[270,7],[282,1],[292,34],[362,1],[376,1],[446,7],[460,9],[492,1],[513,3],[520,4],[545,15],[581,33],[706,1],[708,11],[874,1],[901,1],[935,1],[940,2],[956,2],[1019,1],[1058,1],[1063,2],[1198,3],[1238,2],[1257,1],[1270,9],[1296,26],[1323,46],[1370,11],[1382,15],[1398,7],[1546,1],[1552,3],[1556,5],[1589,2],[1596,9],[1722,3],[1734,2],[1750,4],[1759,23],[1790,1],[1801,12],[1854,6],[1861,2],[1892,7],[1904,9]]},"1508":{"position":[[0,1],[6,8],[58,8],[78,29],[137,8]]},"1510":{"position":[[0,4],[9,10],[24,2],[48,17],[74,4],[86,46],[133,33],[167,11],[181,5],[192,1],[231,3]]},"1512":{"position":[[0,19],[24,6],[35,6],[51,14],[87,9],[123,12],[286,21],[487,36],[617,1],[714,13],[757,33],[995,1],[1026,1],[1028,14],[1048,16],[1093,29],[1218,25],[1244,85],[1330,3],[1339,21],[1414,29],[1579,15],[1643,19],[1668,4]]},"1514":{"position":[[0,15],[16,9],[26,10],[46,7],[91,32]]},"1516":{"position":[[0,3],[28,31],[60,22],[93,22],[133,18]]},"1518":{"position":[[0,3],[15,5],[41,20],[88,1],[121,7],[129,12],[142,5],[148,3],[175,21],[274,3],[294,16],[329,4],[352,5],[405,17],[423,11],[435,2],[453,24]]},"1520":{"position":[[0,21],[35,23],[69,1],[80,21],[102,33],[185,1],[250,1],[309,31],[617,1],[653,8],[671,6],[698,1]]},"1522":{"position":[[0,1],[20,16],[37,18],[91,4],[96,27],[198,1],[267,1],[317,1],[334,14],[358,34],[413,31],[464,7]]},"1524":{"position":[[25,15],[61,10],[129,1],[165,1],[242,4],[266,7],[291,6],[507,1],[518,1],[612,1],[673,2],[676,1],[765,1],[826,2],[829,1],[887,1],[1023,2],[1201,3],[1214,27],[1242,1],[1259,28],[1303,25],[1344,79],[1424,20],[1469,61]]},"1530":{"position":[[0,8],[13,7],[36,12],[88,1],[96,11],[111,16],[131,20],[160,4],[189,2],[196,14],[216,16],[233,7],[244,5],[279,2],[286,1],[293,35],[329,19],[349,3],[375,6],[458,8],[467,32],[505,34],[557,5],[567,1],[585,8],[599,2],[608,11],[620,28],[660,1],[673,11],[696,30],[727,10],[765,15]]},"1533":{"position":[[0,4],[11,3],[41,3],[45,4],[59,6],[85,7],[102,25],[137,5],[143,1],[154,6],[196,6],[219,5],[241,2],[260,12]]},"1535":{"position":[[0,3],[25,8],[40,11],[57,54],[117,11],[129,2],[154,2],[177,6],[192,17],[220,15],[244,3],[258,2],[271,16],[298,4],[305,7],[448,8],[465,35],[501,2],[523,3],[557,23],[581,5],[591,5],[605,24],[636,12],[862,9],[895,8],[911,59],[971,5],[986,10],[1075,60],[1331,7],[1343,4],[1362,3],[1370,23],[1399,36],[1436,8],[1450,11],[1554,33],[1710,6],[1732,1],[1752,5],[1762,8],[1780,1],[1790,13],[1804,1],[1812,4],[1832,4],[1856,60],[1926,6],[1975,5],[1981,5],[1987,68],[2056,5],[2062,4],[2093,11],[2126,1],[2135,1],[2174,3],[2409,15],[2442,5],[2494,23]]},"1541":{"position":[[0,107],[132,2],[135,8],[159,14],[180,5],[267,34],[308,50]]},"1543":{"position":[[0,49],[50,16],[103,12],[122,5],[128,20]]},"1545":{"position":[[0,18],[110,1],[112,4],[132,2],[139,1],[145,6],[177,1],[360,3],[401,2],[443,7],[573,5],[598,1],[615,4],[620,6],[651,3],[664,8],[747,6],[763,8],[776,1],[794,12],[807,12],[827,4],[862,11],[898,4],[907,3]]},"1547":{"position":[[0,10],[35,20],[291,2],[303,6],[340,5],[360,4],[369,7],[423,12],[445,2]]},"1550":{"position":[[0,14],[19,1],[29,10],[42,1],[46,21],[74,1],[82,13],[96,12],[117,19],[143,6]]},"1557":{"position":[[0,2],[13,12],[32,1],[40,19],[63,2]]},"1561":{"position":[[123,7],[199,18],[268,1],[270,10],[367,10],[387,1],[389,9],[403,23],[565,25],[657,8],[684,1]]},"1564":{"position":[[72,40]]},"1566":{"position":[[0,4]]},"1568":{"position":[[0,4],[37,7],[91,10],[109,4],[123,1],[134,4],[139,1],[150,1],[253,56],[429,5],[435,27],[463,29],[493,9],[510,1]]},"1570":{"position":[[8,1],[17,61],[93,62],[156,5],[162,29],[192,35],[228,4],[233,3],[253,26]]},"1572":{"position":[[6,3],[79,21],[172,8],[235,5],[241,20],[262,4],[274,1],[280,19],[300,4],[305,3],[324,25]]},"1574":{"position":[[75,36],[187,27],[215,5],[221,22],[244,2],[259,19],[279,4],[284,3],[295,1],[318,28]]},"1576":{"position":[[12,1],[21,7],[41,31],[73,45],[119,5],[125,19],[145,9],[167,18],[186,4],[211,38]]},"1578":{"position":[[78,24],[114,5],[132,61],[194,5],[200,24],[225,30],[256,4],[261,3],[287,22]]},"1581":{"position":[[0,4],[5,2]]},"1583":{"position":[[5,40],[66,18],[131,5],[148,84],[255,4],[267,13],[314,7],[326,1],[361,15],[384,16],[475,31],[514,6],[614,35],[715,8],[731,46],[815,5],[824,1],[830,5],[846,19],[878,5],[891,1],[899,1],[917,6],[928,5],[955,31],[1019,72],[1153,4],[1158,8],[1218,15],[1254,7],[1282,7],[1297,10],[1315,4],[1340,1],[1356,7],[1394,2],[1417,2],[1437,7],[1451,2],[1463,3],[1473,12],[1490,5],[1496,7],[1507,3],[1519,13],[1538,3],[1557,13],[1594,12],[1621,10],[1645,22],[1726,51],[1780,16],[1797,5],[1811,11],[1825,3],[1831,16],[1850,3],[1951,3],[1957,16],[1978,2],[2089,4],[2110,1],[2112,6]]},"1585":{"position":[[14,1],[33,4],[44,2],[108,7],[131,11]]},"1587":{"position":[[0,4],[5,2]]},"1590":{"position":[[0,1],[2,8],[11,1],[21,6]]},"1592":{"position":[[0,7],[12,7]]},"1597":{"position":[[32,2]]},"1599":{"position":[[8,3],[19,3],[76,1],[82,6],[103,22],[130,6],[195,1],[203,36],[267,32],[342,9],[420,15],[571,11],[616,9],[626,13],[746,8],[794,17],[917,13],[976,8],[990,20],[1109,13],[1184,25],[1317,11],[1387,13],[1534,16],[1674,1],[1715,15],[1731,4],[1746,22]]},"1601":{"position":[[10,32]]},"1603":{"position":[[244,14],[293,1],[345,1],[384,1],[391,2],[400,1],[422,3],[495,3],[502,1],[515,1],[537,3],[598,3],[609,1],[614,1],[633,3],[661,1],[676,1],[692,2],[708,1],[723,1],[794,3],[874,2],[877,2],[880,1],[888,2],[891,2],[952,2],[955,2],[958,1],[966,2],[969,2],[1030,2],[1033,2],[1036,1],[1044,2],[1047,2],[1272,69]]},"1607":{"position":[[69,11],[81,1],[98,1],[116,1],[140,1],[158,1],[189,1],[216,1],[218,8],[265,3],[354,10],[365,1],[367,10],[378,1],[380,8],[404,1],[425,1],[427,8],[476,3]]},"1609":{"position":[[0,4]]},"1615":{"position":[[0,9],[25,6],[43,9],[66,9],[80,3],[89,15],[108,8],[117,4],[125,6],[145,7],[153,6],[160,7],[178,3],[195,9],[209,20]]},"1617":{"position":[[0,20],[43,32],[76,2],[97,5],[172,7],[222,31],[267,2],[460,5],[475,6],[495,8],[843,7],[855,8],[888,3],[1008,9],[1022,10],[1039,3],[1079,10],[1105,11],[1123,2],[1153,4],[1218,2],[1274,14],[1302,18],[1321,9],[1337,37],[1375,12],[1392,33],[1440,2],[1460,11],[1771,15],[1791,20],[1825,3],[1860,21],[1882,22],[1920,4],[1993,1],[2001,5],[2036,8],[2074,7]]},"1620":{"position":[[178,10],[205,1],[246,12],[270,12],[294,3],[320,5],[348,31],[468,3],[476,7],[570,9],[589,10],[617,13],[693,1],[794,9],[858,3],[889,5],[899,11],[970,2],[982,8],[995,10],[1015,2],[1033,13],[1056,8],[1069,16],[1086,5],[1096,23],[1129,7],[1175,10],[1186,18],[1227,1],[1274,30],[1310,3],[1327,3]]},"1622":{"position":[[26,17],[70,25],[108,7],[124,3],[140,2],[155,7],[190,19],[283,8],[306,9],[332,5],[344,1],[352,18],[402,4],[420,23],[476,55],[548,18],[577,12],[629,8],[638,26],[678,7]]},"1624":{"position":[[0,5],[22,4],[31,6],[38,6],[149,13],[204,6],[233,7],[246,5],[256,8],[270,10],[286,7]]},"1626":{"position":[[0,7],[23,33],[68,47],[116,14],[131,2],[151,14],[181,13],[195,1],[210,13],[251,32],[292,1],[307,8],[331,4],[363,6],[397,15],[417,3],[459,4],[492,6],[499,6],[510,7],[523,3],[540,3]]},"1628":{"position":[[0,5],[145,9],[172,12]]},"1631":{"position":[[0,2],[9,8],[48,1],[82,2],[97,9],[113,3],[124,3],[140,1]]},"1633":{"position":[[403,17],[976,36],[1030,4],[1035,8],[1060,45],[1122,15],[1233,49],[1283,28],[1318,20],[1341,12],[1354,34],[1391,11],[1405,27],[1505,23],[1533,5],[1539,22],[1601,24],[1645,30],[1749,9],[1765,4],[1774,1],[1782,14],[1806,20],[1827,1],[2066,2],[2152,5],[2186,36],[2238,8],[2283,51],[2335,13],[2402,4],[2407,8],[2444,9],[2471,13],[2485,19],[2552,7],[2583,7],[2607,8],[2621,4],[2626,32],[2674,3],[2695,8],[2724,1],[2736,3],[2763,1],[2794,5],[2825,4],[2830,12],[2860,12],[3015,15],[3054,3],[3099,1],[3130,5],[3188,1],[3225,5],[3247,10],[3322,5],[3950,7],[3963,22],[4028,7],[4053,9],[4063,4],[4082,10],[4099,4],[4116,11],[4159,17],[4189,10],[4215,13],[4229,2],[4249,2],[4266,2],[4283,2],[4301,7],[4309,11],[4333,8],[4342,10],[4371,9],[4409,9],[4448,14],[4504,12],[4526,21],[4548,12],[4582,12],[4604,7],[4621,15],[4650,7],[4658,22],[5044,11],[5079,38],[5272,5],[5295,20],[5325,1],[5358,2],[5386,2],[5389,15],[5438,24],[5466,8],[5475,3],[5509,5],[5526,1],[5550,8],[5571,1],[5579,3],[5599,4],[5609,3],[5613,8],[5622,7],[5659,18],[5707,24],[5754,6],[5763,2],[5900,13],[5952,25],[6009,13],[6144,7],[6161,5],[6171,7],[6196,1],[6214,9],[6245,1],[6340,2],[6363,1],[6397,10],[6500,2],[6541,1],[6646,2],[6662,6],[6698,5],[6709,8],[6904,48],[6953,28],[6987,8],[7185,30],[7216,5],[7241,6],[7259,6],[7299,7],[7495,4],[7519,2],[7529,14],[7555,4],[7566,5],[7574,9],[7601,4],[7613,3],[7617,1],[7626,1],[7634,5],[7653,41],[7782,14],[7837,11],[7879,2],[7895,2],[7921,1],[8047,5],[8124,12],[8277,2],[8316,1],[8369,1],[8386,2],[8424,1],[8602,10],[8613,2],[8633,13],[8651,8],[8665,15],[8681,6],[8695,3],[8705,3],[8739,3],[8759,3],[8770,5],[8776,5],[8792,1],[8827,16],[8847,6],[8857,9],[8869,7]]},"1640":{"position":[[0,2],[3,14],[18,11],[37,4],[42,9],[95,2],[111,10]]},"1642":{"position":[[0,15],[21,2]]},"1644":{"position":[[0,6],[65,1],[148,2],[151,9],[211,1],[412,2],[433,1]]},"1646":{"position":[[0,7],[19,1],[28,3]]},"1648":{"position":[[0,3],[7,6],[18,3],[40,18],[63,5],[73,5],[84,9],[115,10],[154,2]]},"1650":{"position":[[224,4],[235,2],[244,11],[268,2]]},"1652":{"position":[[111,10],[139,3],[155,16]]},"1654":{"position":[[0,11],[25,30],[69,18],[100,29]]},"1656":{"position":[[4,12]]},"1658":{"position":[[0,15],[21,2]]},"1663":{"position":[[148,12],[209,2],[330,5]]},"1668":{"position":[[43,6],[56,2],[92,2]]},"1671":{"position":[[0,5],[6,2],[11,6],[22,2],[39,14],[54,7],[62,9],[74,5],[86,1],[91,1],[95,8],[104,7],[112,22],[135,41],[177,43],[221,45]]},"1673":{"position":[[0,5],[6,4],[11,34],[46,6],[53,40],[111,4],[116,1],[118,1]]},"1675":{"position":[[0,18]]},"1677":{"position":[[24,1],[26,4],[183,7],[191,1],[193,1],[195,4],[281,7],[289,1]]},"1679":{"position":[[75,13]]},"1681":{"position":[[0,16],[26,16]]},"1685":{"position":[[0,31]]},"1687":{"position":[[39,1],[41,2],[44,1],[46,23],[70,2],[90,2],[93,1],[103,1],[108,2],[111,17],[143,1],[148,2],[151,2],[163,1],[179,1],[191,1],[193,2],[196,13],[215,1],[227,1],[232,1],[250,2],[276,2],[288,1],[290,2],[347,1],[357,1],[375,1],[382,1],[393,1],[400,1],[402,2],[405,9],[438,1],[440,2],[502,1],[514,1],[522,2],[525,26],[552,1],[561,2],[564,6],[571,1],[595,1],[597,2],[648,1],[667,2],[670,6],[677,1]]},"1689":{"position":[[0,14],[33,7],[126,1],[128,2],[131,1],[133,23],[157,2],[177,2],[180,1],[190,1],[195,2],[198,17],[230,1],[235,2],[238,2],[250,1],[266,1],[278,1],[280,2],[283,13],[302,1],[314,1],[319,1],[337,2],[363,2],[375,1],[377,2],[434,1],[444,1],[462,1],[469,1],[480,1],[487,1],[489,2],[492,9],[525,1],[527,2],[589,1],[601,1],[609,2],[612,26],[639,1],[648,2],[651,6],[658,1],[682,1],[684,2],[735,1],[754,2],[757,6],[764,1],[777,1],[800,2],[806,1],[833,1],[854,2],[862,1],[878,1],[899,1],[932,1],[954,1],[966,1],[985,1],[992,2],[1000,1],[1007,1],[1022,1],[1041,2],[1062,1],[1069,2],[1077,1],[1079,1],[1086,2],[1095,1],[1107,1]]},"1692":{"position":[[0,7],[8,74],[83,9],[93,90],[184,9],[260,10],[271,46],[318,5],[324,36],[361,16],[378,16],[395,8],[404,33],[467,1],[482,1],[519,3],[552,9],[564,12],[603,9],[615,11],[660,3],[666,10],[677,41],[764,5]]},"1694":{"position":[[4,14]]},"1696":{"position":[[0,15],[21,2]]},"1699":{"position":[[0,51],[52,16],[128,12],[141,4],[146,10],[157,12],[170,9],[180,63],[248,18],[267,13],[281,15],[365,20],[390,72],[463,13],[477,43],[521,68],[590,87],[678,14],[693,9],[703,49],[753,12],[766,28],[795,14],[921,55]]},"1701":{"position":[[0,7],[8,74],[83,9],[93,90],[184,9],[260,10],[271,46],[318,5],[324,36],[361,16],[378,16],[395,8],[404,33],[467,1],[482,1],[519,3],[552,9],[564,12],[603,9],[615,11],[660,3],[666,10],[677,41],[764,5]]},"1703":{"position":[[4,5],[10,8],[19,12],[32,7],[40,4]]},"1705":{"position":[[0,51],[52,16]]},"1707":{"position":[[0,12],[13,4],[18,10],[29,12],[42,9],[52,63],[120,18],[139,13],[153,15],[237,20],[262,72],[335,13],[349,43],[393,68],[462,87],[550,14],[565,9],[575,49],[625,12],[638,28],[667,14],[793,55]]},"1710":{"position":[[0,59],[60,30],[91,30]]},"1712":{"position":[[0,4],[5,4],[193,2],[196,13]]},"1714":{"position":[[0,16],[69,1]]},"1724":{"position":[[140,15],[156,30],[187,6]]},"1726":{"position":[[162,10],[173,6],[180,6],[187,12],[200,4]]},"1728":{"position":[[0,31],[81,48]]},"1733":{"position":[[600,20],[725,14],[789,10]]},"1735":{"position":[[11,7]]},"1737":{"position":[[3,5],[62,24],[87,33],[198,4],[203,28]]},"1747":{"position":[[134,38]]},"1751":{"position":[[146,6]]},"1753":{"position":[[0,48],[105,15],[121,91]]},"1758":{"position":[[3,7],[47,7]]},"1760":{"position":[[3,7],[47,7]]},"1764":{"position":[[28,14],[43,16],[60,7],[68,11],[80,8],[195,10]]},"1768":{"position":[[19,9],[29,9],[39,7]]},"1770":{"position":[[0,9],[10,20]]},"1772":{"position":[[49,5],[105,17],[123,19],[143,19]]},"1774":{"position":[[0,6],[167,16],[184,8],[258,58],[317,3],[354,5],[441,17],[459,2],[487,2],[514,2],[517,4],[538,2],[557,3],[578,5],[633,1],[702,2],[733,1],[799,1],[862,1],[929,1],[970,2],[982,1],[1060,2],[1097,3],[1143,5],[1198,1],[1234,2],[1259,2],[1287,2],[1290,4],[1308,2],[1421,1],[1449,1],[1570,1],[1572,14],[1643,1],[1645,14],[1774,1],[1803,1],[1878,1],[1905,1],[1963,1],[2023,1],[2080,5],[2086,12],[2099,16],[2116,15]]}}}],["0",{"_index":17,"t":{"896":{"position":[[115,2],[129,2],[210,2]]},"898":{"position":[[96,2],[167,2],[183,2]]},"902":{"position":[[90,2],[100,2],[144,2],[160,2],[208,4],[231,2],[365,2]]},"919":{"position":[[0,17]]},"964":{"position":[[161,24],[186,3],[257,2],[260,3]]},"966":{"position":[[86,3],[142,1],[152,2],[367,1],[379,2],[468,2]]},"968":{"position":[[48,22]]},"970":{"position":[[50,5]]},"1030":{"position":[[1506,39],[1619,2]]},"1147":{"position":[[1283,2]]},"1149":{"position":[[223,2]]},"1201":{"position":[[131,5]]},"1203":{"position":[[56,5],[62,5]]},"1217":{"position":[[348,2],[354,3],[358,3],[365,2],[980,2],[994,3],[998,3],[1005,3],[1016,4],[1070,2],[1081,2],[1084,3],[1088,3],[1092,2],[1099,3],[1163,3],[1167,3],[1174,3],[1182,2],[1196,4],[3395,2],[3401,3],[3405,3],[3412,2],[3564,2],[3578,3],[3582,3],[3589,3],[3600,4],[3654,2],[3665,2],[3668,3],[3672,3],[3676,2],[3683,3],[3747,3],[3751,3],[3758,3],[3766,2],[3780,4]]},"1252":{"position":[[1283,2]]},"1254":{"position":[[223,2]]},"1280":{"position":[[168,14]]},"1282":{"position":[[39,1],[47,3],[62,3],[175,1],[183,3],[198,3]]},"1330":{"position":[[308,1]]},"1335":{"position":[[568,1],[578,1],[601,1]]},"1347":{"position":[[958,2],[982,3]]},"1370":{"position":[[1506,39],[1619,2]]},"1375":{"position":[[2260,1]]},"1377":{"position":[[44,74]]},"1410":{"position":[[303,1]]},"1504":{"position":[[376,4]]},"1506":{"position":[[494,2]]},"1512":{"position":[[997,2],[1156,25],[1477,25]]},"1535":{"position":[[303,1]]},"1599":{"position":[[878,2],[1030,2],[1062,2],[1228,2],[1236,2],[1244,2],[1252,2],[1260,2],[1278,2],[1435,2],[1443,2],[1451,2],[1459,2],[1467,2],[1485,2],[1494,2]]},"1603":{"position":[[648,3],[1217,2],[1229,2],[1253,2]]},"1633":{"position":[[5463,2]]},"1687":{"position":[[105,2],[145,2],[165,2],[244,5],[359,5],[443,33],[600,25]]},"1689":{"position":[[192,2],[232,2],[252,2],[331,5],[446,5],[530,33],[687,25],[857,4],[894,4],[995,4],[1104,2]]},"1774":{"position":[[2156,5]]}}}],["0&d(u,v)<d_1\\end{cases}\\tag{22}h(u,v)=⎩⎨⎧​1d0​−d1​d(u,v)−d1​​0​d(u,v)>d0​d1​≤d(u,v)≤d0​d(u,v)<d1​​(22",{"_index":603,"t":{"1063":{"position":[[688,102]]}}}],["0&d(u,v)>d_0\\end{cases}\\tag{14}h(u,v)={10​d(u,v)≤d0​d(u,v)>d0​​(14)d(u,v)=u2+v2(15)d(u,v)=\\sqrt{u^2+v^2}\\tag{15}d(u,v)=u2+v2​(15",{"_index":569,"t":{"1061":{"position":[[142,129]]}}}],["0&d(u,v)>d_1\\end{cases}\\tag{18}h(u,v)=⎩⎨⎧​1d0​−d1​d(u,v)−d1​​0​d(u,v)<d0​d0​≤d(u,v)≤d1​d(u,v)>d1​​(18",{"_index":588,"t":{"1061":{"position":[[1171,102]]}}}],["0&d(u,v)\\leq",{"_index":591,"t":{"1063":{"position":[[97,12]]}}}],["0.1",{"_index":1697,"t":{"1347":{"position":[[826,5],[850,4]]}}}],["0.1959",{"_index":936,"t":{"1151":{"position":[[1195,8]]},"1256":{"position":[[1195,8]]}}}],["0.2",{"_index":1700,"t":{"1347":{"position":[[855,6]]}}}],["0.2042",{"_index":934,"t":{"1151":{"position":[[1175,7]]},"1256":{"position":[[1175,7]]}}}],["0.3",{"_index":1694,"t":{"1347":{"position":[[802,5]]}}}],["0.7",{"_index":1698,"t":{"1347":{"position":[[832,4]]}}}],["0.8",{"_index":1695,"t":{"1347":{"position":[[814,4],[837,5]]}}}],["0.88",{"_index":1699,"t":{"1347":{"position":[[843,6]]}}}],["0.9",{"_index":1693,"t":{"1347":{"position":[[797,4],[808,5]]},"1375":{"position":[[2737,4]]}}}],["0.94",{"_index":1946,"t":{"1403":{"position":[[630,4]]},"1528":{"position":[[630,4]]}}}],["0.99",{"_index":1696,"t":{"1347":{"position":[[819,6]]}}}],["0.998",{"_index":2450,"t":{"1485":{"position":[[1036,6]]},"1613":{"position":[[1036,6]]}}}],["000",{"_index":2911,"t":{"1633":{"position":[[5563,5]]}}}],["0\\epsilon_0ϵ0",{"_index":2616,"t":{"1516":{"position":[[116,16]]}}}],["0\\gamma=0γ=0",{"_index":2654,"t":{"1522":{"position":[[319,14]]},"1524":{"position":[[1244,14]]}}}],["0xff;//d",{"_index":155,"t":{"972":{"position":[[294,8],[1506,8]]}}}],["0维度的相加过程中出现了shape为(3",{"_index":2780,"t":{"1603":{"position":[[1080,24]]}}}],["0阶矩和1",{"_index":617,"t":{"1077":{"position":[[167,33]]}}}],["1",{"_index":23,"t":{"898":{"position":[[63,21]]},"900":{"position":[[64,1]]},"902":{"position":[[243,2],[331,2],[386,1]]},"919":{"position":[[18,12]]},"925":{"position":[[78,57]]},"966":{"position":[[200,2],[240,2],[293,3]]},"1030":{"position":[[1657,2]]},"1057":{"position":[[259,1],[262,1],[265,1],[274,1],[277,1],[280,1],[303,1],[308,1],[311,1],[316,1],[319,1],[324,1]]},"1097":{"position":[[308,1]]},"1099":{"position":[[514,1]]},"1143":{"position":[[124,3],[399,3],[815,3],[950,3],[1102,3]]},"1147":{"position":[[957,1]]},"1161":{"position":[[336,1],[955,12]]},"1208":{"position":[[369,1],[394,10],[418,1]]},"1217":{"position":[[343,4],[351,2],[372,3],[376,2],[379,2],[382,3],[983,3],[987,3],[991,2],[1002,2],[1009,3],[1013,2],[1073,3],[1077,3],[1095,3],[1103,2],[1106,4],[1178,3],[1189,3],[1193,2],[1789,9],[1895,2],[3390,4],[3398,2],[3419,3],[3423,2],[3426,2],[3429,3],[3567,3],[3571,3],[3575,2],[3586,2],[3593,3],[3597,2],[3657,3],[3661,3],[3679,3],[3687,2],[3690,4],[3762,3],[3773,3],[3777,2],[4191,2]]},"1248":{"position":[[124,3],[399,3],[815,3],[950,3],[1102,3]]},"1252":{"position":[[957,1]]},"1266":{"position":[[336,1],[955,12]]},"1276":{"position":[[87,1]]},"1280":{"position":[[131,2],[183,13]]},"1282":{"position":[[187,1]]},"1287":{"position":[[1558,3],[1622,3],[1793,3]]},"1330":{"position":[[721,4]]},"1337":{"position":[[22,20]]},"1347":{"position":[[961,3],[1243,4],[1382,4]]},"1370":{"position":[[1657,2]]},"1375":{"position":[[404,2],[407,2],[2233,2],[2288,2],[2321,2],[2437,2]]},"1403":{"position":[[552,3]]},"1438":{"position":[[290,1]]},"1512":{"position":[[379,3],[894,2]]},"1520":{"position":[[247,2]]},"1528":{"position":[[552,3]]},"1583":{"position":[[1823,1]]},"1599":{"position":[[306,2],[338,3],[512,2],[544,2],[682,2],[698,2],[706,2],[714,2],[846,2],[862,2],[870,2],[896,2],[905,6],[1038,2],[1046,2],[1054,2],[1080,2],[1089,2],[1098,5],[1269,2],[1287,2],[1296,2],[1306,4],[1476,2],[1503,2],[1513,2],[1523,4]]},"1603":{"position":[[0,30],[409,2],[441,5],[521,2],[555,3],[652,3],[663,3]]},"1607":{"position":[[100,3],[269,3],[480,3]]},"1638":{"position":[[84,3]]},"1671":{"position":[[20,1],[25,13],[93,1],[267,37]]},"1689":{"position":[[889,2]]},"1714":{"position":[[46,1]]},"1726":{"position":[[134,16]]},"1733":{"position":[[35,7]]},"1735":{"position":[[0,2]]},"1737":{"position":[[0,2]]},"1741":{"position":[[70,2],[190,2]]},"1743":{"position":[[84,2]]},"1745":{"position":[[91,2]]},"1751":{"position":[[100,2]]},"1758":{"position":[[0,2]]},"1760":{"position":[[0,2]]}}}],["1)[1,−1)的索引区间中的元素值都会加1，而对于某次刷漆终点e的下一个索引为e+1的元素值由于−1",{"_index":132,"t":{"968":{"position":[[193,51]]}}}],["1)[\\frac{d(u,v)}{d_0}]^{2n}}\\tag{16}h(u,v)=1+(2​−1)[d0​d(u,v)​]2n1​(16",{"_index":573,"t":{"1061":{"position":[[460,71]]}}}],["1)[\\frac{d_0}{d(u,v)}]^{2n}}\\tag{20}h(u,v)=1+(2​−1)[d(u,v)d0​​]2n1​(20",{"_index":595,"t":{"1063":{"position":[[273,71]]}}}],["1)\\tag{13}s(k)=ceil(sk​×l−1)(13",{"_index":556,"t":{"1055":{"position":[[210,32]]}}}],["1)的每一列复制三次为(3",{"_index":2783,"t":{"1603":{"position":[[1144,14]]}}}],["1)的矩阵与shape为(1",{"_index":2781,"t":{"1603":{"position":[[1105,15]]}}}],["1,2,4,8,16,32}\\{1,2,4,8,16,32\\}{1,2,4,8,16,32",{"_index":2239,"t":{"1438":{"position":[[135,47]]}}}],["1,…,t}\\{1",{"_index":2207,"t":{"1433":{"position":[[469,11]]}}}],["1.51",{"_index":187,"t":{"972":{"position":[[876,4]]}}}],["1.73",{"_index":2436,"t":{"1485":{"position":[[635,5]]},"1613":{"position":[[635,5]]}}}],["10",{"_index":18,"t":{"896":{"position":[[142,2],[151,3],[160,3]]},"898":{"position":[[109,2],[118,3],[136,3],[219,2]]},"902":{"position":[[196,2]]},"1151":{"position":[[353,2],[894,2],[918,2]]},"1256":{"position":[[353,2],[894,2],[918,2]]},"1280":{"position":[[334,3]]},"1282":{"position":[[325,3]]},"1375":{"position":[[850,4],[2742,2]]},"1405":{"position":[[685,2]]},"1530":{"position":[[685,2]]},"1603":{"position":[[733,6]]},"1633":{"position":[[5559,3]]},"1687":{"position":[[229,2]]},"1689":{"position":[[316,2]]}}}],["100",{"_index":1406,"t":{"1280":{"position":[[324,4],[329,4]]},"1282":{"position":[[315,4],[320,4]]},"1387":{"position":[[874,3]]},"1545":{"position":[[874,3]]},"1633":{"position":[[2398,3],[5732,5]]},"1774":{"position":[[687,4]]}}}],["1000",{"_index":12,"t":{"896":{"position":[[72,5]]},"1151":{"position":[[136,4],[326,18],[1023,4]]},"1256":{"position":[[136,4],[326,18],[1023,4]]},"1387":{"position":[[857,4]]},"1545":{"position":[[857,4]]},"1633":{"position":[[8660,4]]}}}],["10000",{"_index":919,"t":{"1151":{"position":[[320,5]]},"1256":{"position":[[320,5]]},"1633":{"position":[[7500,6],[7619,6]]}}}],["10241024×1024",{"_index":1199,"t":{"1192":{"position":[[44,14]]},"1633":{"position":[[3211,13]]}}}],["102421024^210242",{"_index":2244,"t":{"1438":{"position":[[334,16]]}}}],["1024×10241024",{"_index":1198,"t":{"1192":{"position":[[23,13]]},"1633":{"position":[[3190,13]]}}}],["1024，stabl",{"_index":2910,"t":{"1633":{"position":[[5528,11]]}}}],["106",{"_index":3253,"t":{"1774":{"position":[[957,4]]}}}],["108",{"_index":1381,"t":{"1272":{"position":[[164,3]]}}}],["1080p",{"_index":2313,"t":{"1453":{"position":[[201,5]]}}}],["10px",{"_index":2993,"t":{"1644":{"position":[[367,5]]}}}],["111m",{"_index":1952,"t":{"1403":{"position":[[760,4]]},"1528":{"position":[[760,4]]}}}],["1125",{"_index":830,"t":{"1143":{"position":[[195,5],[211,5],[467,5]]},"1248":{"position":[[195,5],[211,5],[467,5]]}}}],["11×1",{"_index":3143,"t":{"1728":{"position":[[150,18]]}}}],["11×1卷积核，每个filter对上一步的featur",{"_index":1389,"t":{"1276":{"position":[[14,28]]}}}],["12",{"_index":1391,"t":{"1276":{"position":[[109,2]]},"1603":{"position":[[740,6]]}}}],["120",{"_index":1746,"t":{"1375":{"position":[[780,5]]}}}],["120，210都是30的倍数，由于要找最大的，所以答案是210",{"_index":31,"t":{"900":{"position":[[108,33]]}}}],["13",{"_index":2767,"t":{"1603":{"position":[[747,4],[758,5]]}}}],["1313×13个grid",{"_index":3174,"t":{"1735":{"position":[[75,12]]}}}],["14",{"_index":2768,"t":{"1603":{"position":[[752,5],[764,4],[775,5]]}}}],["148",{"_index":3264,"t":{"1774":{"position":[[1237,8]]}}}],["149",{"_index":3233,"t":{"1774":{"position":[[462,8]]}}}],["15",{"_index":2769,"t":{"1603":{"position":[[769,5],[781,4]]}}}],["1500",{"_index":2872,"t":{"1633":{"position":[[2616,4],[2820,4]]}}}],["151,936",{"_index":2132,"t":{"1419":{"position":[[345,7]]}}}],["16",{"_index":1743,"t":{"1375":{"position":[[669,3]]},"1403":{"position":[[600,3]]},"1453":{"position":[[195,2]]},"1528":{"position":[[600,3]]},"1603":{"position":[[786,7]]}}}],["160,136",{"_index":2133,"t":{"1419":{"position":[[403,7]]}}}],["16\\}{4−16",{"_index":2241,"t":{"1438":{"position":[[207,10]]}}}],["16×16",{"_index":2130,"t":{"1419":{"position":[[237,5]]}}}],["16，d",{"_index":2129,"t":{"1419":{"position":[[129,4]]}}}],["17",{"_index":2884,"t":{"1633":{"position":[[3602,4]]}}}],["18.65",{"_index":2435,"t":{"1485":{"position":[[626,5]]},"1613":{"position":[[626,5]]}}}],["1\\eta",{"_index":1540,"t":{"1302":{"position":[[544,10]]}}}],["1\\gamma=1γ=1",{"_index":2675,"t":{"1524":{"position":[[1288,14]]}}}],["1\\gamma>1γ>1",{"_index":2676,"t":{"1524":{"position":[[1329,14]]}}}],["1\\mu_1μ1​和μ2\\mu_2μ2​分别是第一个和第二个高斯分布的均值向量；σ1\\sigma_1σ1​和σ2\\sigma_2σ2​则是它们的协方差矩阵；tr(⋅)\\mathrm{tr}(\\cdot)tr",{"_index":732,"t":{"1116":{"position":[[596,119]]}}}],["1][b,c,1,1]的tensor",{"_index":3185,"t":{"1741":{"position":[[73,43]]}}}],["1][b,c,1,1]的tensor，再送入共享的多层感知机网络进行降维再升维，最后将二者相加再经过sigmoid",{"_index":3189,"t":{"1743":{"position":[[87,72]]}}}],["1][b,c,1,1]的tensor，该tensor",{"_index":3203,"t":{"1751":{"position":[[103,37]]}}}],["1]])12b",{"_index":1634,"t":{"1330":{"position":[[574,7]]}}}],["1]，即reduce了dim=1",{"_index":1691,"t":{"1347":{"position":[[742,19]]}}}],["1_44=fd.img",{"_index":264,"t":{"974":{"position":[[629,12]]},"1774":{"position":[[1685,12]]}}}],["1_44=fd_aug.img",{"_index":266,"t":{"974":{"position":[[668,16]]},"1774":{"position":[[1724,16]]}}}],["1a",{"_index":1623,"t":{"1330":{"position":[[366,2]]}}}],["1d",{"_index":2331,"t":{"1464":{"position":[[188,2],[256,2],[406,2],[430,2],[493,2],[548,2],[576,2],[600,2]]}}}],["1e9",{"_index":471,"t":{"1030":{"position":[[1623,4]]},"1370":{"position":[[1623,4]]}}}],["1k−1",{"_index":1559,"t":{"1307":{"position":[[117,4]]}}}],["1t<1",{"_index":636,"t":{"1095":{"position":[[443,4]]}}}],["1t>1",{"_index":634,"t":{"1095":{"position":[[394,4]]}}}],["1})(r1​,r2​,…,rk−1",{"_index":2506,"t":{"1492":{"position":[[949,20]]},"1620":{"position":[[949,20]]}}}],["1})(x1​,x2​,...,xt−1​)，具有单向相关性（unidirect",{"_index":2476,"t":{"1489":{"position":[[1163,48]]},"1617":{"position":[[1163,48]]}}}],["1})p(r1​,r2​,…,rk​)=k=1∏k​p(rk​∣r1​,r2​,…,rk−1",{"_index":2501,"t":{"1492":{"position":[[745,48]]},"1620":{"position":[[745,48]]}}}],["1},\\left(1",{"_index":2600,"t":{"1512":{"position":[[640,10]]}}}],["1}=\\frac{1}{\\sqrt{\\alpha_t}}\\left(x_t",{"_index":1899,"t":{"1389":{"position":[[97,37]]},"1547":{"position":[[97,37]]}}}],["1}=\\frac{1}{\\sqrt{\\alpha_{t}}}\\left(\\mathbf{x}_{t",{"_index":335,"t":{"990":{"position":[[254,50]]}}}],["1}\\right)=n\\left(x_t",{"_index":2598,"t":{"1512":{"position":[[596,20]]}}}],["1}\\right)qϕ​(x1:t​∣x0​)=t=1∏t​qϕ​(xt​∣xt−1",{"_index":2591,"t":{"1512":{"position":[[241,44]]}}}],["1}\\right)x<t​=(x1​,x2​,…,xt−1",{"_index":2684,"t":{"1561":{"position":[[335,31]]}}}],["1}\\sum_{v=0}^{n",{"_index":547,"t":{"1043":{"position":[[1435,15]]}}}],["1}\\sum_{y=0}^{n",{"_index":543,"t":{"1043":{"position":[[1224,15]]}}}],["1}][x1​,...,xt−1",{"_index":2714,"t":{"1583":{"position":[[112,18]]}}}],["1}a−1",{"_index":3107,"t":{"1699":{"position":[[122,5]]},"1705":{"position":[[122,5]]}}}],["1}f(u)e^{j\\frac{2\\pi",{"_index":540,"t":{"1043":{"position":[[1079,20]]}}}],["1}f(u,v)e^{j2\\pi",{"_index":548,"t":{"1043":{"position":[[1451,16]]}}}],["1}f(x)e",{"_index":536,"t":{"1043":{"position":[[943,9]]}}}],["1}f(x,y)e",{"_index":544,"t":{"1043":{"position":[[1240,11]]}}}],["1}key0,...,keyn−1,query0,...,queryn−1query^{0",{"_index":1340,"t":{"1219":{"position":[[142,47]]}}}],["1}query0,...,queryn−1以及value0,...,valuen−1value^{0",{"_index":1342,"t":{"1219":{"position":[[204,52]]}}}],["1}value0,...,valuen−1",{"_index":1344,"t":{"1219":{"position":[[271,22]]}}}],["1}xt−1​代表当前步骤即将输出的降噪后的图像，ϵθ\\epsilon_\\thetaϵθ​代表nois",{"_index":340,"t":{"990":{"position":[[539,52]]}}}],["1}zt−1",{"_index":2581,"t":{"1508":{"position":[[129,7]]}}}],["1}|x_t)pθ​(xt−1​∣xt",{"_index":2611,"t":{"1512":{"position":[[1557,21]]}}}],["1}|x_t,x_0)q(xt−1​∣xt​,x0",{"_index":2613,"t":{"1512":{"position":[[1615,27]]}}}],["1×11",{"_index":1388,"t":{"1276":{"position":[[0,6]]},"1728":{"position":[[130,12]]}}}],["1×11\\times11×1",{"_index":2485,"t":{"1492":{"position":[[189,15]]},"1620":{"position":[[189,15]]}}}],["1×1×3×4=12(3)1",{"_index":1390,"t":{"1276":{"position":[[65,14]]}}}],["1ηλ<1",{"_index":1541,"t":{"1302":{"position":[[565,15]]}}}],["1−1。这样在所有输入结束后的计算前缀和阶段，在每一个值为[1,−1)[1",{"_index":131,"t":{"968":{"position":[[153,38]]}}}],["1−1加上之前元素所累积的1",{"_index":134,"t":{"968":{"position":[[261,42]]}}}],["1−1而抵消影响（自身值为−1",{"_index":133,"t":{"968":{"position":[[245,15]]}}}],["1−γ)∇logp(xt",{"_index":2674,"t":{"1524":{"position":[[1182,18]]}}}],["1−γ)∇log⁡p(xt)⏟uncondit",{"_index":2661,"t":{"1524":{"position":[[418,30]]}}}],["1−σ)(2",{"_index":1401,"t":{"1280":{"position":[[159,8]]}}}],["1−σ)(2)\\frac{{\\rm",{"_index":1396,"t":{"1280":{"position":[[76,18]]}}}],["1个filter，其中包含3个kernel。每个kernel分别对输入图像的3",{"_index":1383,"t":{"1274":{"position":[[0,55]]}}}],["1，即n0",{"_index":3057,"t":{"1671":{"position":[[80,5]]}}}],["1：a为（4，5）的二维数组，b为（4，1）的二维数组，其中一方维度为1",{"_index":2756,"t":{"1603":{"position":[[141,55]]}}}],["2",{"_index":560,"t":{"1057":{"position":[[267,1],[269,1],[271,1],[305,1],[313,1],[321,1]]},"1149":{"position":[[1010,1]]},"1161":{"position":[[490,1],[976,23]]},"1217":{"position":[[362,2],[368,3],[1160,2],[3409,2],[3415,3],[3744,2]]},"1254":{"position":[[1010,1]]},"1266":{"position":[[490,1],[976,23]]},"1287":{"position":[[1651,3],[1834,3]]},"1319":{"position":[[474,20]]},"1330":{"position":[[388,2],[560,2],[571,2],[678,2],[718,2]]},"1347":{"position":[[976,2],[979,2],[1060,2],[1229,2],[1240,2],[1340,2],[1379,2]]},"1403":{"position":[[689,3]]},"1431":{"position":[[948,1]]},"1464":{"position":[[712,1]]},"1494":{"position":[[342,1]]},"1510":{"position":[[179,1]]},"1528":{"position":[[689,3]]},"1570":{"position":[[6,1],[91,1],[251,1]]},"1583":{"position":[[1848,1]]},"1599":{"position":[[74,1],[330,2],[520,2],[528,2],[536,2],[553,12],[690,2],[723,2],[732,8],[854,2],[887,2],[1071,2]]},"1603":{"position":[[447,6],[559,5],[656,4],[667,3],[678,3]]},"1607":{"position":[[104,2],[283,3],[484,2]]},"1622":{"position":[[342,1]]},"1671":{"position":[[72,1]]},"1689":{"position":[[901,2],[946,3]]},"1724":{"position":[[5,1]]},"1733":{"position":[[786,2]]},"1735":{"position":[[8,2]]},"1737":{"position":[[195,2]]},"1758":{"position":[[44,2]]},"1760":{"position":[[44,2]]}}}],["2)中，当i,ji,ji,j",{"_index":1598,"t":{"1319":{"position":[[426,47]]}}}],["2.173",{"_index":978,"t":{"1151":{"position":[[2342,5]]},"1256":{"position":[[2342,5]]}}}],["2.18",{"_index":1954,"t":{"1403":{"position":[[795,4]]},"1528":{"position":[[795,4]]}}}],["2.296",{"_index":960,"t":{"1151":{"position":[[2148,5]]},"1256":{"position":[[2148,5]]}}}],["2.2960",{"_index":933,"t":{"1151":{"position":[[1166,8]]},"1256":{"position":[[1166,8]]}}}],["2.320",{"_index":965,"t":{"1151":{"position":[[2192,5]]},"1256":{"position":[[2192,5]]}}}],["2.464",{"_index":966,"t":{"1151":{"position":[[2198,5]]},"1256":{"position":[[2198,5]]}}}],["2.482",{"_index":979,"t":{"1151":{"position":[[2348,5]]},"1256":{"position":[[2348,5]]}}}],["2.489",{"_index":970,"t":{"1151":{"position":[[2254,5]]},"1256":{"position":[[2254,5]]}}}],["2.517",{"_index":980,"t":{"1151":{"position":[[2354,5]]},"1256":{"position":[[2354,5]]}}}],["2.578",{"_index":967,"t":{"1151":{"position":[[2204,5]]},"1256":{"position":[[2204,5]]}}}],["2.642",{"_index":961,"t":{"1151":{"position":[[2154,5]]},"1256":{"position":[[2154,5]]}}}],["2.6420",{"_index":935,"t":{"1151":{"position":[[1186,8]]},"1256":{"position":[[1186,8]]}}}],["2.701",{"_index":962,"t":{"1151":{"position":[[2160,5]]},"1256":{"position":[[2160,5]]}}}],["2.715",{"_index":971,"t":{"1151":{"position":[[2260,5]]},"1256":{"position":[[2260,5]]}}}],["2.851",{"_index":972,"t":{"1151":{"position":[[2266,5]]},"1256":{"position":[[2266,5]]}}}],["2.95.2",{"_index":3241,"t":{"1774":{"position":[[658,6]]}}}],["20",{"_index":2439,"t":{"1485":{"position":[[687,3]]},"1613":{"position":[[687,3]]}}}],["200",{"_index":270,"t":{"974":{"position":[[743,3]]},"1774":{"position":[[1799,3]]}}}],["2001,2003,2004",{"_index":172,"t":{"972":{"position":[[682,14]]}}}],["2003",{"_index":177,"t":{"972":{"position":[[752,5]]}}}],["2004",{"_index":182,"t":{"972":{"position":[[821,5]]}}}],["201",{"_index":29,"t":{"900":{"position":[[66,14],[142,8]]}}}],["2019",{"_index":947,"t":{"1151":{"position":[[1800,4]]},"1256":{"position":[[1800,4]]},"1476":{"position":[[356,5]]}}}],["201，210，012，021，102，120",{"_index":30,"t":{"900":{"position":[[81,26]]}}}],["201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30",{"_index":28,"t":{"900":{"position":[[4,59]]}}}],["2020",{"_index":2373,"t":{"1476":{"position":[[491,5]]}}}],["2021",{"_index":2387,"t":{"1476":{"position":[[669,5],[814,5]]}}}],["2021】transform",{"_index":374,"t":{"1009":{"position":[[44,21]]},"1349":{"position":[[44,21]]}}}],["2022",{"_index":2822,"t":{"1633":{"position":[[107,5]]},"1636":{"position":[[8,5],[38,5]]}}}],["2022发表的diffusionclip使用了diffusion模型代替nada中的stylegan",{"_index":2400,"t":{"1476":{"position":[[952,65]]}}}],["2022的文章few",{"_index":2341,"t":{"1471":{"position":[[68,10]]}}}],["2023",{"_index":2338,"t":{"1471":{"position":[[13,4]]},"1628":{"position":[[11,4]]},"1633":{"position":[[1158,5],[1438,5],[5797,5]]},"1636":{"position":[[119,5]]},"1638":{"position":[[6,5],[94,5]]}}}],["2024",{"_index":2816,"t":{"1628":{"position":[[90,4]]}}}],["203",{"_index":2971,"t":{"1636":{"position":[[194,4]]}}}],["20px",{"_index":2991,"t":{"1644":{"position":[[327,5]]}}}],["21",{"_index":2968,"t":{"1633":{"position":[[8854,2]]}}}],["210",{"_index":32,"t":{"900":{"position":[[151,8]]}}}],["24224^2242",{"_index":2245,"t":{"1438":{"position":[[358,10]]}}}],["25.5",{"_index":2915,"t":{"1633":{"position":[[5604,4]]}}}],["256",{"_index":1822,"t":{"1375":{"position":[[2652,3]]},"1419":{"position":[[211,3]]},"1462":{"position":[[94,31]]},"1583":{"position":[[1974,3]]}}}],["256256×256",{"_index":2874,"t":{"1633":{"position":[[2783,10],[3119,10],[3177,10],[5497,11],[5648,10]]}}}],["256×256",{"_index":1955,"t":{"1403":{"position":[[816,7]]},"1419":{"position":[[191,7]]},"1485":{"position":[[518,7]]},"1528":{"position":[[816,7]]},"1613":{"position":[[518,7]]}}}],["256×256256",{"_index":2873,"t":{"1633":{"position":[[2765,10],[3101,10],[3159,10],[5479,10],[5630,10]]}}}],["27",{"_index":1385,"t":{"1274":{"position":[[97,2]]}}}],["28",{"_index":1730,"t":{"1375":{"position":[[410,3],[414,3]]}}}],["2\\left(\\sigma_1\\sigma_2\\right)^{\\frac12}\\right)\\tag{1}fid=∥μ1​−μ2​∥22​+tr(σ1​+σ2​−2(σ1​σ2​)21​)(1",{"_index":731,"t":{"1116":{"position":[[497,98]]}}}],["2d",{"_index":2014,"t":{"1410":{"position":[[996,2]]},"1464":{"position":[[534,2],[561,2]]},"1535":{"position":[[997,2]]}}}],["2。然后，我们将这对字符合并，生成新的子词单元（subword",{"_index":2748,"t":{"1599":{"position":[[445,31]]}}}],["2型文法（上下文无关语法，cfg",{"_index":84,"t":{"929":{"position":[[0,32]]}}}],["2型文法，又称上下文无关文法（context",{"_index":64,"t":{"919":{"position":[[31,22]]}}}],["2的top",{"_index":3117,"t":{"1714":{"position":[[51,8]]}}}],["2的整数次幂表示，如大多图像为彩色rgb图像，256个灰度级，位深度为8（28=2562^8=25628=256），则对于分辨率为256×256的图像来说，需要256×256×3×8位表示，即每一个像素实际上使用24",{"_index":499,"t":{"1035":{"position":[[284,118]]}}}],["2（stanford",{"_index":1121,"t":{"1175":{"position":[[726,10]]}}}],["2，iter",{"_index":930,"t":{"1151":{"position":[[1074,11],[1614,11]]},"1256":{"position":[[1074,11],[1614,11]]}}}],["2，vqgan",{"_index":2703,"t":{"1572":{"position":[[316,7]]}}}],["2，抹除所有置信度更小的其iou超过阈值的bbox",{"_index":3168,"t":{"1733":{"position":[[681,39]]}}}],["3",{"_index":109,"t":{"956":{"position":[[256,1]]},"1208":{"position":[[636,1],[665,1],[751,1],[777,1]]},"1217":{"position":[[327,3],[1171,2],[1185,3],[1377,3],[1381,2],[1415,3],[1419,2],[1451,3],[1455,2],[3374,3],[3755,2],[3769,3],[3941,3],[3945,2],[3979,3],[3983,2],[4015,3],[4019,2]]},"1272":{"position":[[142,1],[151,1]]},"1274":{"position":[[77,1],[93,1]]},"1276":{"position":[[96,1]]},"1287":{"position":[[1555,2],[1562,3],[1790,2],[1797,3]]},"1330":{"position":[[563,3],[567,3],[681,4]]},"1347":{"position":[[118,2],[157,2],[287,3],[505,2],[508,2],[511,4],[520,3],[553,2],[591,2],[596,3],[600,2],[603,2],[868,2],[1063,3],[1232,3],[1236,3],[1343,4]]},"1403":{"position":[[897,3]]},"1528":{"position":[[897,3]]},"1583":{"position":[[1829,1]]},"1590":{"position":[[19,1]]},"1597":{"position":[[41,1]]},"1599":{"position":[[6,1],[314,2],[322,2]]},"1603":{"position":[[364,3],[368,3],[402,3],[406,2],[454,6],[517,3],[524,2],[565,5],[671,4],[682,3],[1182,12]]},"1607":{"position":[[107,2],[297,3],[487,2]]},"1633":{"position":[[3480,1],[4097,1],[7391,1],[7572,1]]},"1644":{"position":[[88,3]]},"1735":{"position":[[19,2]]},"1737":{"position":[[232,2]]}}}],["3)(3,3)，因此每个权重矩阵的形状应该是(4,3)(4",{"_index":1257,"t":{"1217":{"position":[[533,30]]}}}],["3)(4,3)。为了统一性分析，计key，query以及value各向量维度为numnumnum",{"_index":1258,"t":{"1217":{"position":[[564,49]]}}}],["3)中的a,ba,ba,b可缩小范围，并不用来实现全连接，此时a,ba,ba,b代表着卷积核的感受野，即kernel",{"_index":1601,"t":{"1319":{"position":[[698,97]]}}}],["3)的每一行复制三次为(3",{"_index":2785,"t":{"1603":{"position":[[1167,14]]}}}],["3)的矩阵相加的情况，此时进行广播，将(3",{"_index":2782,"t":{"1603":{"position":[[1121,22]]}}}],["3)，将(1",{"_index":2784,"t":{"1603":{"position":[[1159,7]]}}}],["3.1b",{"_index":1953,"t":{"1403":{"position":[[768,4]]},"1528":{"position":[[768,4]]}}}],["30",{"_index":40,"t":{"902":{"position":[[225,2]]},"1633":{"position":[[8844,2]]}}}],["300",{"_index":931,"t":{"1151":{"position":[[1088,3],[1144,3],[1628,3],[1684,3]]},"1256":{"position":[[1088,3],[1144,3],[1628,3],[1684,3]]}}}],["300000",{"_index":272,"t":{"974":{"position":[[770,6]]},"1774":{"position":[[1826,6]]}}}],["30]的tensor",{"_index":3163,"t":{"1733":{"position":[[454,17]]}}}],["30]的tensor（包含所有预测框的坐标、置信度和类别结果），通过解析输出的tensor",{"_index":3149,"t":{"1733":{"position":[[100,51]]}}}],["320",{"_index":829,"t":{"1143":{"position":[[190,4],[206,4],[462,4],[478,4]]},"1248":{"position":[[190,4],[206,4],[462,4],[478,4]]}}}],["326",{"_index":1973,"t":{"1403":{"position":[[1246,4]]},"1528":{"position":[[1246,4]]}}}],["32，iter",{"_index":932,"t":{"1151":{"position":[[1129,12],[1669,12]]},"1256":{"position":[[1129,12],[1669,12]]}}}],["33×3卷积核，padding=1,stride=1padding=1",{"_index":1376,"t":{"1270":{"position":[[101,36]]}}}],["33×3卷积的消融实验发现，7×77",{"_index":3195,"t":{"1747":{"position":[[96,18]]}}}],["350.2",{"_index":2438,"t":{"1485":{"position":[[675,6]]},"1613":{"position":[[675,6]]}}}],["35deg",{"_index":2986,"t":{"1644":{"position":[[253,6]]}}}],["3])2b",{"_index":1624,"t":{"1330":{"position":[[391,5]]}}}],["3][5,5,3",{"_index":1372,"t":{"1270":{"position":[[27,12]]}}}],["3]图像，输出[7",{"_index":3148,"t":{"1733":{"position":[[86,10]]}}}],["3d",{"_index":2730,"t":{"1587":{"position":[[22,2]]},"1624":{"position":[[163,2],[178,2]]}}}],["3}x∈rh×w×3",{"_index":2186,"t":{"1431":{"position":[[650,22]]}}}],["3~5",{"_index":2918,"t":{"1633":{"position":[[5889,10],[8647,3]]}}}],["3×33",{"_index":1375,"t":{"1270":{"position":[[87,6]]}}}],["3×3×3×4=108(1)3",{"_index":1380,"t":{"1272":{"position":[[119,15]]}}}],["3×3××3=27(2)3",{"_index":1384,"t":{"1274":{"position":[[56,13]]}}}],["3个权重向量做乘法得到3个新的向量，分别为key，query以及value。在本例中将新的向量维度设为3，由于输出的k、q、v矩阵大小均为(3,3)(3",{"_index":1256,"t":{"1217":{"position":[[446,86]]}}}],["3型文法，又称正规文法（regular",{"_index":72,"t":{"919":{"position":[[245,19]]}}}],["3科成绩（假设年级只有a班和b",{"_index":1672,"t":{"1347":{"position":[[211,40]]}}}],["4",{"_index":92,"t":{"951":{"position":[[0,11]]},"956":{"position":[[377,1]]},"1217":{"position":[[331,2],[3378,2]]},"1272":{"position":[[160,1]]},"1276":{"position":[[105,1]]},"1347":{"position":[[284,2],[864,3],[1284,4],[1401,4]]},"1403":{"position":[[1115,3]]},"1438":{"position":[[252,1]]},"1528":{"position":[[1115,3]]},"1583":{"position":[[1854,1]]},"1603":{"position":[[461,5],[571,3],[686,5]]}}}],["40",{"_index":2912,"t":{"1633":{"position":[[5573,2]]}}}],["40px",{"_index":2994,"t":{"1644":{"position":[[407,4]]}}}],["414",{"_index":1974,"t":{"1403":{"position":[[1253,4]]},"1528":{"position":[[1253,4]]}}}],["42",{"_index":1197,"t":{"1192":{"position":[[13,9]]},"1438":{"position":[[329,4]]}}}],["448",{"_index":3147,"t":{"1733":{"position":[[73,7],[81,4]]}}}],["450,000",{"_index":2886,"t":{"1633":{"position":[[3713,7]]}}}],["4696",{"_index":838,"t":{"1143":{"position":[[483,5]]},"1248":{"position":[[483,5]]}}}],["48khz",{"_index":2318,"t":{"1453":{"position":[[274,5]]}}}],["49406",{"_index":828,"t":{"1143":{"position":[[181,8],[453,8]]},"1248":{"position":[[181,8],[453,8]]}}}],["49407",{"_index":832,"t":{"1143":{"position":[[217,6],[489,6]]},"1248":{"position":[[217,6],[489,6]]}}}],["4]))19'''python",{"_index":1643,"t":{"1330":{"position":[[740,15]]}}}],["4][5,5,4]的featur",{"_index":1374,"t":{"1270":{"position":[[65,17]]}}}],["4]])13c",{"_index":1636,"t":{"1330":{"position":[[616,7]]}}}],["4−16}\\{4",{"_index":2240,"t":{"1438":{"position":[[197,9]]}}}],["4个filter（输出通道为4），每个filter3个kernel（输入通道为3",{"_index":1378,"t":{"1272":{"position":[[0,45]]}}}],["4邻域n4(p)n_4(p)n4​(p)即该像素上下左右的四个点，8邻域n8(p)n_8(p)n8​(p)，对角邻域nd(p)n_d(p)nd​(p",{"_index":500,"t":{"1037":{"position":[[0,76]]}}}],["5",{"_index":111,"t":{"956":{"position":[[524,1]]},"1270":{"position":[[24,2],[62,2]]},"1330":{"position":[[416,2],[602,2],[613,2],[697,2],[737,2]]},"1347":{"position":[[1088,2],[1270,2],[1281,2],[1359,2],[1398,2]]},"1373":{"position":[[97,40]]},"1375":{"position":[[773,1],[777,2],[2254,2]]},"1414":{"position":[[1984,1]]},"1603":{"position":[[467,6],[575,5]]},"1633":{"position":[[8709,1],[8763,1]]}}}],["50",{"_index":1989,"t":{"1405":{"position":[[662,2]]},"1530":{"position":[[662,2]]}}}],["5000",{"_index":928,"t":{"1151":{"position":[[902,4],[968,4]]},"1256":{"position":[[902,4],[968,4]]},"1633":{"position":[[7488,6],[7606,6]]}}}],["50000",{"_index":927,"t":{"1151":{"position":[[877,5]]},"1256":{"position":[[877,5]]}}}],["512",{"_index":846,"t":{"1143":{"position":[[958,4],[1110,4]]},"1147":{"position":[[65,4],[106,4],[174,4],[336,3],[355,3],[466,3]]},"1159":{"position":[[838,4]]},"1248":{"position":[[958,4],[1110,4]]},"1252":{"position":[[65,4],[106,4],[174,4],[336,3],[355,3],[466,3]]},"1264":{"position":[[838,4]]}}}],["512512×512",{"_index":1194,"t":{"1190":{"position":[[46,10]]},"1633":{"position":[[5696,10]]}}}],["5125×512",{"_index":1365,"t":{"1231":{"position":[[108,27],[181,57]]}}}],["512×512512",{"_index":1192,"t":{"1190":{"position":[[28,10]]},"1633":{"position":[[5678,10]]}}}],["512是clip中的n_dim，token_embed",{"_index":847,"t":{"1143":{"position":[[963,41],[1115,41]]},"1248":{"position":[[963,41],[1115,41]]}}}],["52",{"_index":2882,"t":{"1633":{"position":[[3560,4]]}}}],["539",{"_index":831,"t":{"1143":{"position":[[201,4],[473,4]]},"1248":{"position":[[201,4],[473,4]]}}}],["54",{"_index":986,"t":{"1151":{"position":[[2510,2]]},"1256":{"position":[[2510,2]]}}}],["54、probabilist",{"_index":2246,"t":{"1440":{"position":[[30,16]]}}}],["55×5",{"_index":1367,"t":{"1231":{"position":[[148,18]]}}}],["58",{"_index":943,"t":{"1151":{"position":[[1713,3],[2507,2]]},"1256":{"position":[[1713,3],[2507,2]]}}}],["586",{"_index":3119,"t":{"1714":{"position":[[71,5]]}}}],["594",{"_index":3118,"t":{"1714":{"position":[[60,8]]}}}],["5×5125",{"_index":1364,"t":{"1231":{"position":[[94,6],[167,6]]}}}],["5×55",{"_index":1366,"t":{"1231":{"position":[[136,4]]}}}],["6",{"_index":286,"t":{"974":{"position":[[1044,8]]},"1208":{"position":[[373,1],[578,10],[602,1],[768,1]]},"1330":{"position":[[605,3],[609,3]]},"1347":{"position":[[405,3],[1091,3],[1273,3],[1277,3],[1362,4]]},"1375":{"position":[[571,2]]},"1419":{"position":[[365,1]]},"1603":{"position":[[474,6],[581,5],[695,3]]},"1650":{"position":[[113,1]]}}}],["60",{"_index":1069,"t":{"1163":{"position":[[767,2]]},"1268":{"position":[[767,2]]}}}],["600",{"_index":1157,"t":{"1185":{"position":[[54,3]]}}}],["60个prompts放在同一个python列表中，即每一个prompt作为该列表的字符串元素，输出整个python",{"_index":1059,"t":{"1163":{"position":[[503,66]]},"1268":{"position":[[503,66]]}}}],["60个描述迪士尼人像特有特征的文字prompt",{"_index":1058,"t":{"1163":{"position":[[453,49]]},"1268":{"position":[[453,49]]}}}],["64",{"_index":1918,"t":{"1399":{"position":[[60,2]]},"1557":{"position":[[60,2]]}}}],["6464×64",{"_index":2870,"t":{"1633":{"position":[[2384,13],[2575,7],[2755,7],[3046,7],[3091,7]]}}}],["64×6464",{"_index":2869,"t":{"1633":{"position":[[2369,7],[2560,7],[2740,7],[3031,7],[3076,7]]}}}],["67",{"_index":2479,"t":{"1489":{"position":[[1619,4]]},"1617":{"position":[[1619,4]]}}}],["68、vqvae预训练模型的论文原理及pytorch",{"_index":2697,"t":{"1568":{"position":[[45,32]]}}}],["6]))18(tensor([3",{"_index":1641,"t":{"1330":{"position":[[700,17]]}}}],["6])3c",{"_index":1626,"t":{"1330":{"position":[[419,5]]}}}],["6层encod",{"_index":3134,"t":{"1726":{"position":[[16,11]]}}}],["7",{"_index":1487,"t":{"1287":{"position":[[1566,2],[1801,2]]},"1603":{"position":[[481,5],[587,3],[699,3],[710,3]]},"1650":{"position":[[132,1]]},"1726":{"position":[[0,15]]},"1733":{"position":[[97,2],[451,2]]}}}],["700",{"_index":2996,"t":{"1644":{"position":[[428,4]]}}}],["768768×768",{"_index":1196,"t":{"1190":{"position":[[77,11]]}}}],["768×768768",{"_index":1195,"t":{"1190":{"position":[[59,10]]}}}],["77",{"_index":824,"t":{"1143":{"position":[[128,3],[403,3],[706,5],[722,2],[745,2],[819,4],[954,3],[1106,3]]},"1248":{"position":[[128,3],[403,3],[706,5],[722,2],[745,2],[819,4],[954,3],[1106,3]]}}}],["775m",{"_index":1961,"t":{"1403":{"position":[[948,4]]},"1528":{"position":[[948,4]]}}}],["77×7",{"_index":3196,"t":{"1747":{"position":[[122,11]]}}}],["77×7卷积与3×33",{"_index":3194,"t":{"1747":{"position":[[77,11]]}}}],["77×7卷积学习特征并降维，最后送入sigmoid",{"_index":3192,"t":{"1745":{"position":[[141,40]]}}}],["77是clip在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0",{"_index":834,"t":{"1143":{"position":[[232,72],[504,72]]},"1248":{"position":[[232,72],[504,72]]}}}],["79",{"_index":1054,"t":{"1161":{"position":[[719,2]]},"1266":{"position":[[719,2]]}}}],["7b",{"_index":2083,"t":{"1414":{"position":[[693,3]]},"1419":{"position":[[38,2]]}}}],["7b，mar",{"_index":2126,"t":{"1414":{"position":[[1806,7]]}}}],["7×77",{"_index":3193,"t":{"1747":{"position":[[0,69]]}}}],["7个损失项是最终融合得到的featur",{"_index":3139,"t":{"1726":{"position":[[86,21]]}}}],["8",{"_index":261,"t":{"974":{"position":[[610,1]]},"1190":{"position":[[12,15]]},"1438":{"position":[[260,2],[302,3]]},"1583":{"position":[[1778,1],[1955,1]]},"1603":{"position":[[487,7],[591,6],[703,4],[714,3],[725,3]]},"1633":{"position":[[5569,1]]},"1774":{"position":[[1666,1]]}}}],["80.4",{"_index":2437,"t":{"1485":{"position":[[667,4]]},"1613":{"position":[[667,4]]}}}],["8192",{"_index":2131,"t":{"1419":{"position":[[263,4]]}}}],["84",{"_index":942,"t":{"1151":{"position":[[1707,2],[2504,2]]},"1256":{"position":[[1707,2],[2504,2]]},"1375":{"position":[[817,4]]}}}],["9",{"_index":15,"t":{"896":{"position":[[108,2]]},"1287":{"position":[[1569,4],[1804,4]]},"1347":{"position":[[570,2],[573,2],[576,4]]},"1414":{"position":[[1300,2],[1999,43]]},"1603":{"position":[[718,4],[729,3]]},"1633":{"position":[[5761,1],[8867,1]]}}}],["928/929",{"_index":3110,"t":{"1712":{"position":[[10,7],[210,94]]}}}],["97",{"_index":1950,"t":{"1403":{"position":[[662,3]]},"1405":{"position":[[563,3]]},"1528":{"position":[[662,3]]},"1530":{"position":[[563,3]]}}}],["9999",{"_index":13,"t":{"896":{"position":[[83,5]]}}}],["9月28日（2023年是9月29日），是研招网全国推免系统开放的日子，也是已经拿到offer",{"_index":3111,"t":{"1712":{"position":[[18,61]]}}}],["_2^2",{"_index":2936,"t":{"1633":{"position":[[6587,6],[8362,6],[8466,6]]}}}],["_2^2\\right]l=ee(x),e(ci​),ct​,ε∼n(0,1),t​[∥ε−ϵθ​(zt​,t,e(ci​),ct​))∥22",{"_index":2902,"t":{"1633":{"position":[[4956,74]]}}}],["__init__(self",{"_index":1016,"t":{"1159":{"position":[[290,14]]},"1264":{"position":[[290,14]]},"1375":{"position":[[311,15],[447,15]]}}}],["__stack_chk_fail",{"_index":3263,"t":{"1774":{"position":[[1124,18]]}}}],["_{\\phi",{"_index":2549,"t":{"1506":{"position":[[846,7],[969,7]]}}}],["_{l=1}^lz(l)l=1l",{"_index":2562,"t":{"1506":{"position":[[1219,18]]}}}],["a)=\\frac{p(a\\mid",{"_index":2263,"t":{"1443":{"position":[[683,16]]}}}],["a)=p(b\\mid",{"_index":2276,"t":{"1445":{"position":[[207,10]]},"1447":{"position":[[248,10]]}}}],["a)\\cdot",{"_index":2274,"t":{"1445":{"position":[[116,7],[218,7]]},"1447":{"position":[[161,7],[259,7]]}}}],["a)move(t,a",{"_index":81,"t":{"925":{"position":[[311,11]]}}}],["a)p(bi​∣a",{"_index":2267,"t":{"1443":{"position":[[812,16]]}}}],["a,b",{"_index":2283,"t":{"1445":{"position":[[448,4],[506,4]]}}}],["a,b)\\cdot",{"_index":2271,"t":{"1445":{"position":[[73,9],[98,9]]},"1447":{"position":[[120,9]]}}}],["a,b)p(b,c∣a)=p(b∣a)⋅p(c∣a,b",{"_index":2278,"t":{"1445":{"position":[[234,28]]}}}],["a,ba,ba,b",{"_index":1595,"t":{"1319":{"position":[[200,40]]}}}],["a.argmax(dim=0",{"_index":1702,"t":{"1347":{"position":[[896,16]]}}}],["a.argmax(dim=1",{"_index":1703,"t":{"1347":{"position":[[913,16]]}}}],["a100",{"_index":2914,"t":{"1633":{"position":[[5590,4],[5745,4],[8750,4]]}}}],["aaa发生后，计算其条件事件bib_ibi​在事件aaa",{"_index":2261,"t":{"1443":{"position":[[568,58]]}}}],["aaa而言，假设有一组互斥且穷尽的条件事件b1,b2,…bnb_{1},b_{2},\\ldot",{"_index":2255,"t":{"1443":{"position":[[256,52]]}}}],["ab",{"_index":2743,"t":{"1599":{"position":[[176,5],[985,4],[1011,12],[1092,5],[1104,4],[1167,6],[1290,5],[1373,5],[1497,5],[1595,5]]}}}],["abbr",{"_index":305,"t":{"986":{"position":[[585,5]]},"1106":{"position":[[59,5]]},"1122":{"position":[[33,5]]}}}],["abil",{"_index":2455,"t":{"1485":{"position":[[1109,7]]},"1613":{"position":[[1109,7]]}}}],["abov",{"_index":1311,"t":{"1217":{"position":[[2627,5]]}}}],["acc",{"_index":1617,"t":{"1330":{"position":[[233,63]]},"1375":{"position":[[1765,5],[1777,6],[2498,3],[2524,3]]}}}],["acc=∑i(predi==yi)len(y)(1)acc",{"_index":1614,"t":{"1330":{"position":[[128,29]]}}}],["accept",{"_index":1115,"t":{"1175":{"position":[[608,44]]}}}],["access",{"_index":2339,"t":{"1471":{"position":[[23,6]]}}}],["accompani",{"_index":1836,"t":{"1381":{"position":[[88,11]]},"1539":{"position":[[88,11]]}}}],["accur",{"_index":1565,"t":{"1307":{"position":[[321,8]]}}}],["accuraci",{"_index":1619,"t":{"1330":{"position":[[313,8]]},"1375":{"position":[[1254,13]]}}}],["accuracy(y_hat",{"_index":1767,"t":{"1375":{"position":[[1301,15],[2111,15]]}}}],["accuracy作为数学上的训练方法，即在训练过程中不使用与acc",{"_index":1613,"t":{"1330":{"position":[[47,41]]}}}],["acc，但并不会将maxim",{"_index":1612,"t":{"1330":{"position":[[0,46]]}}}],["achiev",{"_index":1857,"t":{"1381":{"position":[[856,8]]},"1403":{"position":[[300,7],[785,9],[1238,7]]},"1414":{"position":[[1343,8]]},"1423":{"position":[[123,7],[1211,7]]},"1528":{"position":[[300,7],[785,9],[1238,7]]},"1539":{"position":[[856,8]]}}}],["acmer，一个cv",{"_index":3120,"t":{"1714":{"position":[[77,33]]}}}],["action=report",{"_index":285,"t":{"974":{"position":[[1010,13]]},"1774":{"position":[[2066,13]]}}}],["activ",{"_index":793,"t":{"1133":{"position":[[37,8]]},"1238":{"position":[[37,8]]}}}],["activation=\"fused_lrelu",{"_index":876,"t":{"1147":{"position":[[699,24]]},"1252":{"position":[[699,24]]}}}],["activation='fused_lrelu",{"_index":1039,"t":{"1159":{"position":[[856,25],[999,25]]},"1264":{"position":[[856,25],[999,25]]}}}],["adain",{"_index":901,"t":{"1149":{"position":[[856,5]]},"1254":{"position":[[856,5]]}}}],["adaln",{"_index":2026,"t":{"1410":{"position":[[1461,6],[1805,5]]},"1535":{"position":[[1462,6],[1806,5]]}}}],["adaln⁡(x)=x−μ(x)σ(x)⋅γ+β\\operatorname{adaln}(x)=\\frac{x",{"_index":2029,"t":{"1410":{"position":[[1587,55]]},"1535":{"position":[[1588,55]]}}}],["adaln（adapt",{"_index":2027,"t":{"1410":{"position":[[1468,14]]},"1535":{"position":[[1469,14]]}}}],["adapt",{"_index":788,"t":{"1130":{"position":[[58,10]]},"1149":{"position":[[640,8],[862,9]]},"1235":{"position":[[58,10]]},"1254":{"position":[[640,8],[862,9]]},"1414":{"position":[[953,13]]},"1471":{"position":[[101,8]]},"1473":{"position":[[158,10]]},"1494":{"position":[[371,8]]},"1622":{"position":[[371,8]]}}}],["adaption的任务是使在大规模源域图片上训练的生成模型适应到数据有限的目标域中，根据目标域训练资料的大小可以分为few",{"_index":2353,"t":{"1476":{"position":[[17,61]]}}}],["add",{"_index":2830,"t":{"1633":{"position":[[284,4],[5152,3]]}}}],["addit",{"_index":2905,"t":{"1633":{"position":[[5156,10]]}}}],["addition",{"_index":2142,"t":{"1423":{"position":[[192,13]]}}}],["adio",{"_index":160,"t":{"972":{"position":[[394,6],[1606,6]]}}}],["adjust",{"_index":1151,"t":{"1183":{"position":[[80,6]]}}}],["admonit",{"_index":3016,"t":{"1652":{"position":[[26,11],[143,11]]}}}],["advanc",{"_index":2711,"t":{"1581":{"position":[[19,8]]}}}],["advantag",{"_index":1861,"t":{"1381":{"position":[[905,9]]},"1539":{"position":[[905,9]]}}}],["adversari",{"_index":344,"t":{"992":{"position":[[22,12]]},"1001":{"position":[[15,11]]},"1476":{"position":[[325,11]]},"1572":{"position":[[140,11],[196,11]]},"1583":{"position":[[794,11]]}}}],["advis",{"_index":1301,"t":{"1217":{"position":[[2208,8],[4367,8]]}}}],["aesthet",{"_index":1966,"t":{"1403":{"position":[[1012,10]]},"1528":{"position":[[1012,10]]}}}],["affirm",{"_index":1926,"t":{"1403":{"position":[[179,11]]},"1528":{"position":[[179,11]]}}}],["afhq",{"_index":981,"t":{"1151":{"position":[[2360,4],[2379,4],[2402,4],[2653,4],[2672,4],[2695,4]]},"1256":{"position":[[2360,4],[2379,4],[2402,4],[2653,4],[2672,4],[2695,4]]}}}],["aggreg",{"_index":1244,"t":{"1213":{"position":[[283,10]]}}}],["ai",{"_index":1662,"t":{"1337":{"position":[[0,21]]},"1451":{"position":[[85,2]]},"1471":{"position":[[41,2]]}}}],["aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot",{"_index":435,"t":{"1022":{"position":[[1192,112]]},"1362":{"position":[[1192,112]]}}}],["ai论文】yolo",{"_index":3145,"t":{"1733":{"position":[[4,17]]}}}],["alexei",{"_index":2379,"t":{"1476":{"position":[[538,6]]}}}],["alexnet是指2012年由alex",{"_index":1497,"t":{"1290":{"position":[[0,19]]}}}],["align",{"_index":997,"t":{"1154":{"position":[[417,15],[554,14]]},"1259":{"position":[[417,15],[554,14]]},"1403":{"position":[[1104,10]]},"1414":{"position":[[1066,9]]},"1471":{"position":[[141,9]]},"1528":{"position":[[1104,10]]},"1636":{"position":[[199,5]]}}}],["all_proxi",{"_index":3069,"t":{"1677":{"position":[[228,9]]}}}],["all_proxy=socks5://127.0.0.1:7890",{"_index":3064,"t":{"1677":{"position":[[59,33]]}}}],["allegori",{"_index":2527,"t":{"1502":{"position":[[0,13],[130,16]]}}}],["allow",{"_index":1239,"t":{"1213":{"position":[[146,6]]},"1381":{"position":[[389,6]]},"1423":{"position":[[224,6],[765,6]]},"1485":{"position":[[303,6]]},"1539":{"position":[[389,6]]},"1613":{"position":[[303,6]]}}}],["alpha",{"_index":50,"t":{"915":{"position":[[0,66],[117,6]]},"919":{"position":[[160,6]]}}}],["alpha,\\spac",{"_index":53,"t":{"915":{"position":[[103,13]]}}}],["alpha_t",{"_index":2928,"t":{"1633":{"position":[[6343,8],[6520,9],[8295,9]]}}}],["alpha_t\\right",{"_index":2594,"t":{"1512":{"position":[[416,15],[651,15]]}}}],["alpha_t}{\\sqrt{1",{"_index":1900,"t":{"1389":{"position":[[143,17]]},"1547":{"position":[[143,17]]}}}],["alpha_{t",{"_index":2962,"t":{"1633":{"position":[[8404,12]]}}}],["alpha_{t}}{\\sqrt{1",{"_index":337,"t":{"990":{"position":[[313,19]]}}}],["analysi",{"_index":1127,"t":{"1175":{"position":[[926,9]]}}}],["anchor",{"_index":3172,"t":{"1735":{"position":[[22,7]]}}}],["anchor宽高比的聚类，聚类数越大，覆盖的i",{"_index":3178,"t":{"1735":{"position":[[150,43]]}}}],["anchor是通过k",{"_index":3177,"t":{"1735":{"position":[[115,10]]}}}],["anim",{"_index":1785,"t":{"1375":{"position":[[1674,8]]}}}],["animator.add(epoch",{"_index":1811,"t":{"1375":{"position":[[2291,18],[2416,18]]}}}],["announcementbar",{"_index":2977,"t":{"1644":{"position":[[48,16],[71,16]]}}}],["answer",{"_index":1104,"t":{"1175":{"position":[[374,9],[1186,10]]},"1403":{"position":[[191,6]]},"1528":{"position":[[191,6]]}}}],["appli",{"_index":1846,"t":{"1381":{"position":[[402,5]]},"1403":{"position":[[68,5]]},"1423":{"position":[[616,5]]},"1528":{"position":[[68,5]]},"1539":{"position":[[402,5]]}}}],["applic",{"_index":1864,"t":{"1381":{"position":[[1045,13]]},"1414":{"position":[[1490,13]]},"1423":{"position":[[61,11]]},"1539":{"position":[[1045,13]]},"1663":{"position":[[41,11],[88,11]]}}}],["approach",{"_index":1847,"t":{"1381":{"position":[[587,8]]},"1539":{"position":[[587,8]]}}}],["appropri",{"_index":1266,"t":{"1217":{"position":[[714,11]]}}}],["approx",{"_index":2640,"t":{"1520":{"position":[[414,7],[500,7],[586,7]]}}}],["ar",{"_index":682,"t":{"1106":{"position":[[205,120]]},"1399":{"position":[[7,5]]},"1405":{"position":[[108,2],[128,2],[241,2],[372,2]]},"1485":{"position":[[325,4],[444,2],[563,2]]},"1487":{"position":[[105,2],[122,2],[175,2]]},"1530":{"position":[[108,2],[128,2],[241,2],[372,2]]},"1557":{"position":[[7,5]]},"1583":{"position":[[1148,4],[1504,2]]},"1613":{"position":[[325,4],[444,2],[563,2]]},"1615":{"position":[[105,2],[122,2],[175,2]]}}}],["ar/var",{"_index":2459,"t":{"1485":{"position":[[1391,6]]},"1613":{"position":[[1391,6]]}}}],["architectur",{"_index":1175,"t":{"1185":{"position":[[354,12]]},"1423":{"position":[[962,13]]}}}],["architecture（ta",{"_index":2330,"t":{"1464":{"position":[[118,16]]}}}],["arch系用户通过以下命令即可完成bochs和nasm",{"_index":3224,"t":{"1772":{"position":[[55,31]]}}}],["arg",{"_index":2547,"t":{"1506":{"position":[[836,4],[959,4]]}}}],["argmax",{"_index":853,"t":{"1145":{"position":[[213,6]]},"1250":{"position":[[213,6]]},"1347":{"position":[[612,12],[932,6]]}}}],["argmin",{"_index":1687,"t":{"1347":{"position":[[627,6]]}}}],["args.mix",{"_index":858,"t":{"1147":{"position":[[70,12]]},"1252":{"position":[[70,12]]}}}],["args.source_class",{"_index":817,"t":{"1141":{"position":[[96,18]]},"1246":{"position":[[96,18]]}}}],["args.target_class",{"_index":819,"t":{"1141":{"position":[[155,18]]},"1246":{"position":[[155,18]]}}}],["argument",{"_index":1164,"t":{"1185":{"position":[[201,10]]}}}],["arg⁡max⁡ϕ,θeqϕ(z∣x)[log⁡pθ(x∣z)]−dkl(qϕ(z∣x)∥p(z))=arg⁡max⁡ϕ,θ∑l=1llog⁡pθ(x∣z(l))−dkl(qϕ(z∣x)∥p(z))\\begin{gath",{"_index":2546,"t":{"1506":{"position":[[720,115]]}}}],["arm",{"_index":680,"t":{"1106":{"position":[[81,6]]}}}],["arm（autoregress",{"_index":681,"t":{"1106":{"position":[[88,18]]}}}],["arrang",{"_index":2738,"t":{"1597":{"position":[[283,27]]}}}],["art",{"_index":1935,"t":{"1403":{"position":[[321,3]]},"1423":{"position":[[144,3],[1236,3]]},"1528":{"position":[[321,3]]}}}],["arxiv",{"_index":372,"t":{"1009":{"position":[[5,8]]},"1349":{"position":[[5,8]]},"1440":{"position":[[5,8]]},"1638":{"position":[[0,5],[88,5]]}}}],["ar模型与非自回归nar",{"_index":677,"t":{"1104":{"position":[[0,73]]}}}],["ar）的方法逐token",{"_index":679,"t":{"1106":{"position":[[65,15]]}}}],["asciicod",{"_index":154,"t":{"972":{"position":[[272,9],[481,11],[1484,9],[1696,11]]}}}],["asciicode=='d')//ctrl+d",{"_index":158,"t":{"972":{"position":[[350,23],[1562,23]]}}}],["assign",{"_index":1187,"t":{"1187":{"position":[[17,10]]}}}],["attent",{"_index":428,"t":{"1022":{"position":[[800,11],[978,9],[1429,11]]},"1030":{"position":[[32,15]]},"1205":{"position":[[34,9],[55,17]]},"1213":{"position":[[7,9],[126,9],[239,9],[252,14],[320,9],[401,34]]},"1217":{"position":[[1670,9],[1840,9],[3224,9],[4041,9],[4136,9]]},"1219":{"position":[[294,12]]},"1221":{"position":[[53,19]]},"1223":{"position":[[12,9],[132,54]]},"1229":{"position":[[29,52]]},"1233":{"position":[[145,33]]},"1362":{"position":[[800,11],[978,9],[1429,11]]},"1370":{"position":[[32,15]]},"1423":{"position":[[930,9]]},"1428":{"position":[[75,42]]},"1435":{"position":[[196,28],[423,9],[461,9]]},"1464":{"position":[[478,14]]},"1489":{"position":[[1450,9],[1564,9],[1593,9],[1640,9],[1658,9],[1747,10]]},"1494":{"position":[[567,9]]},"1496":{"position":[[141,9]]},"1617":{"position":[[1450,9],[1564,9],[1593,9],[1640,9],[1658,9],[1747,10]]},"1622":{"position":[[567,9]]},"1626":{"position":[[141,9]]}}}],["attention(q,k,v)=softmax(qktdk)v(1)attention(q,k,v)=\\textit{softmax}(\\frac{qk^t}{\\sqrt{d_k}})v",{"_index":1328,"t":{"1217":{"position":[[3054,94]]}}}],["attention⁡(q,k,v)=softmax⁡(qktd)⋅v\\operatorname{attention}(q",{"_index":2223,"t":{"1435":{"position":[[477,61]]}}}],["attention》的讨论环节：teach",{"_index":432,"t":{"1022":{"position":[[923,23]]},"1362":{"position":[[923,23]]}}}],["attention之后，通过residu",{"_index":403,"t":{"1018":{"position":[[67,22]]},"1358":{"position":[[67,22]]}}}],["attention可以看作是复杂化的cnn，cnn只能在感受野范围内考虑上下文信息，而self",{"_index":1346,"t":{"1221":{"position":[[5,47]]}}}],["attention和mask",{"_index":456,"t":{"1030":{"position":[[15,16]]},"1370":{"position":[[15,16]]}}}],["attention应运而生，允许每个位置关注到序列中地所有其他位置。这种全局关联性质使得transform",{"_index":1233,"t":{"1210":{"position":[[472,71]]}}}],["attention接受任意向量数量的向量序列的输入，输出每一个向量所有向量（包括自身）的注意力分数。这使得self",{"_index":1245,"t":{"1213":{"position":[[343,57]]}}}],["attention的计算中应用一个掩码（mask",{"_index":434,"t":{"1022":{"position":[[1111,80]]},"1362":{"position":[[1111,80]]}}}],["attention的输入是向量序列，其向量数量是任意的，计算每个输入向量之间的注意力分数。在本例中输入向量个数为3，同时为了统一性分析，计输入向量个数为batchbatchbatch",{"_index":1251,"t":{"1217":{"position":[[192,93]]}}}],["attention的输入是时间步sss之前decod",{"_index":439,"t":{"1022":{"position":[[1373,43]]},"1362":{"position":[[1373,43]]}}}],["attention的输出向量维度与valu",{"_index":1308,"t":{"1217":{"position":[[2499,48]]}}}],["attention）：在每次空间注意力（spati",{"_index":2333,"t":{"1464":{"position":[[450,27]]}}}],["attention，token",{"_index":2515,"t":{"1494":{"position":[[532,15]]},"1622":{"position":[[532,15]]}}}],["attention，则对每个输入向量生成对应的key，query和value后，再次使用nnn个可学习的权重矩阵生成nnn个不同的key0,...,keyn−1key^{0",{"_index":1338,"t":{"1219":{"position":[[41,88]]}}}],["at）以及non",{"_index":410,"t":{"1020":{"position":[[56,8]]},"1360":{"position":[[56,8]]}}}],["audio",{"_index":1173,"t":{"1185":{"position":[[322,5]]},"1453":{"position":[[126,6]]}}}],["audio：13b",{"_index":2315,"t":{"1453":{"position":[[224,9]]}}}],["augment",{"_index":1505,"t":{"1294":{"position":[[157,12]]},"1414":{"position":[[1202,10]]},"1476":{"position":[[778,12]]}}}],["augustu",{"_index":2360,"t":{"1476":{"position":[[250,8]]}}}],["auto",{"_index":303,"t":{"986":{"position":[[571,4]]},"1122":{"position":[[19,4]]},"1414":{"position":[[0,4]]},"1689":{"position":[[1013,5]]}}}],["autoencod",{"_index":2140,"t":{"1423":{"position":[[86,13],[670,13]]},"1431":{"position":[[131,11],[396,28]]},"1568":{"position":[[351,77],[529,44]]}}}],["autoencoder(va",{"_index":2696,"t":{"1568":{"position":[[13,17]]}}}],["autoencoderkl",{"_index":2183,"t":{"1431":{"position":[[570,13]]}}}],["autoencoders），ϵθ(xt,t);t=1…t\\epsilon_\\theta\\left(x_t",{"_index":2197,"t":{"1433":{"position":[[80,53]]}}}],["autoencoder（va",{"_index":2716,"t":{"1583":{"position":[[289,17]]}}}],["autoencoder）ϵθ(zt,t,y)\\epsilon_\\theta\\left(z_t",{"_index":2215,"t":{"1435":{"position":[[52,47]]}}}],["autoencoder）提出了另一种方法，通过离散的潜在空间来建模数据。vq",{"_index":2699,"t":{"1568":{"position":[[210,38]]}}}],["autoregress",{"_index":1829,"t":{"1379":{"position":[[38,23]]},"1381":{"position":[[31,14],[256,14],[408,14],[727,14],[772,14],[980,14]]},"1383":{"position":[[144,14]]},"1403":{"position":[[217,14]]},"1405":{"position":[[21,14],[49,14]]},"1410":{"position":[[4,14]]},"1426":{"position":[[120,14]]},"1485":{"position":[[18,14],[94,14],[310,14]]},"1487":{"position":[[10,14]]},"1489":{"position":[[1043,14],[1058,20],[1829,14],[1905,14]]},"1492":{"position":[[1160,14]]},"1494":{"position":[[614,14]]},"1496":{"position":[[8,14],[166,14],[316,14]]},"1500":{"position":[[75,14]]},"1528":{"position":[[217,14]]},"1530":{"position":[[21,14],[49,14]]},"1535":{"position":[[4,14]]},"1537":{"position":[[38,23]]},"1539":{"position":[[31,14],[256,14],[408,14],[727,14],[772,14],[980,14]]},"1541":{"position":[[144,14]]},"1559":{"position":[[0,20]]},"1583":{"position":[[1542,14]]},"1613":{"position":[[18,14],[94,14],[310,14]]},"1615":{"position":[[10,14]]},"1617":{"position":[[1043,14],[1058,20],[1829,14],[1905,14]]},"1620":{"position":[[1160,14]]},"1622":{"position":[[614,14]]},"1626":{"position":[[8,14],[166,14],[316,14]]}}}],["autoregressive（ar",{"_index":2712,"t":{"1583":{"position":[[46,19]]}}}],["autoregressive（非自回归，abbr",{"_index":411,"t":{"1020":{"position":[[65,25]]},"1360":{"position":[[65,25]]}}}],["autoregressive，简称ar",{"_index":2678,"t":{"1561":{"position":[[0,122]]}}}],["avail",{"_index":2123,"t":{"1414":{"position":[[1517,9]]}}}],["averag",{"_index":1564,"t":{"1307":{"position":[[294,8]]}}}],["avoid",{"_index":1326,"t":{"1217":{"position":[[2952,5]]}}}],["a→b→ca\\to",{"_index":2293,"t":{"1447":{"position":[[0,42]]}}}],["a∈vn",{"_index":67,"t":{"919":{"position":[[109,5],[222,6]]}}}],["a为（3，4，5）的三维数据，b为（4，5）的二维数组。由于a和b的后缘维度都为（4，5），所以可以进行广播。同理，当a为（3，4）的二维数组，b为（4，）的数组，他们的后缘维度都是4",{"_index":2755,"t":{"1603":{"position":[[31,109]]}}}],["a是a班4位同学3科成绩，b是这4名同学其他3门课的成绩，拼接后代表这4名同学的6",{"_index":1677,"t":{"1347":{"position":[[325,47]]}}}],["a班4位同学，每位同学3",{"_index":1668,"t":{"1347":{"position":[[123,15]]}}}],["a而言，假设有一组互斥且穷尽的条件事件b，则事件a的概率等于事件a",{"_index":3096,"t":{"1692":{"position":[[194,65]]},"1701":{"position":[[194,65]]}}}],["a，若存在方阵b使得ab=ba=单位方阵i，则方阵b为方阵a的逆矩阵，记为a−1a",{"_index":3106,"t":{"1699":{"position":[[69,52]]},"1705":{"position":[[69,52]]}}}],["b",{"_index":118,"t":{"966":{"position":[[94,2],[122,3],[136,2]]},"1068":{"position":[[0,26]]},"1083":{"position":[[893,2]]},"1300":{"position":[[48,2]]},"1302":{"position":[[69,2],[250,2]]},"1335":{"position":[[574,1],[628,1],[632,1]]},"1347":{"position":[[139,1],[198,3],[312,3],[516,1],[1067,1],[1106,2],[1248,1],[1300,2]]},"1392":{"position":[[40,1]]},"1443":{"position":[[79,1]]},"1550":{"position":[[40,1]]},"1599":{"position":[[246,4],[309,4],[515,4],[589,4],[685,4],[761,4],[849,4],[937,4],[1033,4],[1129,4],[1231,4],[1335,4],[1438,4],[1557,4]]},"1607":{"position":[[124,4],[287,4],[496,4]]},"1633":{"position":[[3528,3]]},"1692":{"position":[[550,1],[613,1],[664,1]]},"1701":{"position":[[550,1],[613,1],[664,1]]}}}],["b)14for",{"_index":1637,"t":{"1330":{"position":[[633,7]]}}}],["b)4for",{"_index":1628,"t":{"1330":{"position":[[434,6]]}}}],["b)=\\frac{p(a,b)}{p(b)}p(a∣b)=p(b)p(a,b",{"_index":2252,"t":{"1443":{"position":[[135,40]]}}}],["b)\\cdot",{"_index":2297,"t":{"1447":{"position":[[145,7]]}}}],["b)p(a∣b",{"_index":2250,"t":{"1443":{"position":[[63,15]]}}}],["b)p(b,c∣a)=p(b∣a)⋅p(c∣b",{"_index":2299,"t":{"1447":{"position":[[275,24]]}}}],["b)}{\\partial",{"_index":1532,"t":{"1302":{"position":[[319,12]]}}}],["b,c,h,w][b",{"_index":3183,"t":{"1741":{"position":[[0,23],[117,29]]},"1743":{"position":[[0,17]]},"1745":{"position":[[0,17]]}}}],["b1,b2b_1",{"_index":2011,"t":{"1410":{"position":[[820,15]]},"1535":{"position":[[820,15]]}}}],["b[i],e[i](0<=b[i]<=e[i]<=200000",{"_index":112,"t":{"964":{"position":[[104,56]]}}}],["b\\to",{"_index":2294,"t":{"1447":{"position":[[43,4]]}}}],["b_2b1​,b2",{"_index":2012,"t":{"1410":{"position":[[836,10]]},"1535":{"position":[[836,10]]}}}],["b_i)\\cdot",{"_index":2258,"t":{"1443":{"position":[[437,9],[700,9]]}}}],["b_i)p(a∣bi",{"_index":2269,"t":{"1443":{"position":[[844,16]]}}}],["b_t)}{\\partial",{"_index":1537,"t":{"1302":{"position":[[480,14]]}}}],["b_{n}b1​,b2​,…bn​构成一个完备事件组，则事件aaa的概率等于事件aaa在每个条件事件bib_ibi",{"_index":2256,"t":{"1443":{"position":[[309,79]]}}}],["background",{"_index":2985,"t":{"1644":{"position":[[213,11]]}}}],["bang",{"_index":2815,"t":{"1628":{"position":[[80,4]]}}}],["bao",{"_index":2393,"t":{"1476":{"position":[[718,3]]}}}],["bar{\\alpha}_t",{"_index":1887,"t":{"1387":{"position":[[501,15]]},"1389":{"position":[[161,16]]},"1545":{"position":[[501,15]]},"1547":{"position":[[161,16]]}}}],["bar{\\alpha}_{t}}\\boldsymbol{\\epsilon},t)\\right\\|^{2}\\tag{1}∇θ​​ϵ−ϵθ​(αˉt​​x0​+1−αˉt​​ϵ,t)​2(1",{"_index":322,"t":{"988":{"position":[[345,95]]}}}],["bar{\\alpha}_{t}}}\\boldsymbol{\\epsilon}_{\\theta}(\\mathbf{x}_{t},t)\\right)+\\sigma_{t}\\mathbf{z}\\tag{2}xt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​,t))+σt​z(2",{"_index":338,"t":{"990":{"position":[[333,150]]}}}],["base",{"_index":1131,"t":{"1175":{"position":[[1171,5]]},"1414":{"position":[[664,4]]},"1423":{"position":[[1522,5]]},"1500":{"position":[[45,29],[166,5],[181,5],[203,5],[264,5],[289,5]]},"1518":{"position":[[28,5],[484,5]]},"1522":{"position":[[8,5]]},"1624":{"position":[[227,5]]},"1628":{"position":[[115,5]]},"1633":{"position":[[1184,5],[1457,5]]}}}],["based的文字生成模型有很多，如gpt模型，大多使用自回归（autoregress",{"_index":678,"t":{"1106":{"position":[[12,46]]}}}],["based：将分布学习为任意灵活的能量函数，然后归一化。scor",{"_index":2526,"t":{"1500":{"position":[[132,33]]}}}],["baselin",{"_index":2371,"t":{"1476":{"position":[[441,8]]},"1485":{"position":[[566,8]]},"1613":{"position":[[566,8]]}}}],["bash的配置文件：~/.bashrc",{"_index":3074,"t":{"1679":{"position":[[55,19]]}}}],["basic",{"_index":1547,"t":{"1305":{"position":[[108,5]]}}}],["batch",{"_index":1796,"t":{"1375":{"position":[[1910,6],[2224,6],[2265,5],[2312,6]]},"1462":{"position":[[149,5]]},"1633":{"position":[[5515,5]]}}}],["batch)(batch,batch",{"_index":1286,"t":{"1217":{"position":[[1630,20]]}}}],["batch_siz",{"_index":860,"t":{"1147":{"position":[[93,12],[161,12]]},"1151":{"position":[[1061,10],[1116,10],[1601,10],[1656,10]]},"1252":{"position":[[93,12],[161,12]]},"1256":{"position":[[1061,10],[1116,10],[1601,10],[1656,10]]},"1375":{"position":[[2639,10]]},"1609":{"position":[[192,11]]}}}],["batch_size，比如torch.nn.linear的输入(batch_size,in_features)，torch.nn.conv2d的输入(batch_s",{"_index":2799,"t":{"1609":{"position":[[44,119]]}}}],["batchbatchbatch个向量计算得到的注意力分数，都要与其对应的value向量相乘，计算加权的注意力分数。最终的注意力分数矩阵的形状应为(batch,num)(batch",{"_index":1297,"t":{"1217":{"position":[[2012,100]]}}}],["batch中有大量样本均存在这种情况，此时acc有显著提升而网络的权重的更新极小，此时，与acc有关的loss",{"_index":1647,"t":{"1330":{"position":[[828,129]]}}}],["batteri",{"_index":3040,"t":{"1663":{"position":[[201,7]]}}}],["bbb",{"_index":1522,"t":{"1300":{"position":[[181,10]]},"1335":{"position":[[178,38]]}}}],["bbox与其他所有置信度更小的bbox做iou判断，若iou大于设置的阈值，则抹除置信度小的bbox",{"_index":3167,"t":{"1733":{"position":[[621,59]]}}}],["bbox包含(x",{"_index":3157,"t":{"1733":{"position":[[290,11]]}}}],["bbox的置信度与其父grid",{"_index":3166,"t":{"1733":{"position":[[549,17]]}}}],["bbox都会在loss",{"_index":3169,"t":{"1733":{"position":[[740,19]]}}}],["bc",{"_index":2744,"t":{"1599":{"position":[[182,5],[436,8],[547,5],[566,4],[609,6],[717,5],[781,5],[881,5],[957,5],[1065,5],[1149,5],[1263,5],[1355,5],[1470,5],[1577,5]]}}}],["bcd",{"_index":2745,"t":{"1599":{"position":[[188,6],[1174,9],[1210,11],[1299,6],[1311,5],[1379,7],[1506,6],[1601,6]]}}}],["be",{"_index":1561,"t":{"1307":{"position":[[209,5]]},"1774":{"position":[[330,5]]}}}],["becom",{"_index":1325,"t":{"1217":{"position":[[2887,7]]},"1423":{"position":[[1132,7]]}}}],["befor",{"_index":1271,"t":{"1217":{"position":[[828,6]]}}}],["begin",{"_index":127,"t":{"966":{"position":[[303,6],[337,7],[357,6],[406,6]]},"1022":{"position":[[221,8]]},"1362":{"position":[[221,8]]}}}],["begin[i]+1",{"_index":115,"t":{"964":{"position":[[289,37]]}}}],["begin[i],end[i]（0<=begin[i]<=end[i]<=200000",{"_index":113,"t":{"964":{"position":[[190,66]]}}}],["begin{align",{"_index":2662,"t":{"1524":{"position":[[455,15]]}}}],["begin{cas",{"_index":1411,"t":{"1282":{"position":[[25,13],[161,13]]}}}],["begin符号又叫start符号或sos符号（start",{"_index":422,"t":{"1022":{"position":[[520,28]]},"1362":{"position":[[520,28]]}}}],["begin符号是在lexicon中添加的特殊符号，用来表示decoder生成的开始。begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（embed",{"_index":420,"t":{"1022":{"position":[[394,90]]},"1362":{"position":[[394,90]]}}}],["behind",{"_index":1549,"t":{"1305":{"position":[[119,6]]}}}],["below",{"_index":1177,"t":{"1185":{"position":[[397,6]]}}}],["benchmark",{"_index":1095,"t":{"1175":{"position":[[86,10],[215,9],[541,40]]},"1403":{"position":[[678,10],[824,11]]},"1414":{"position":[[1391,11]]},"1485":{"position":[[526,10]]},"1528":{"position":[[678,10],[824,11]]},"1613":{"position":[[526,10]]}}}],["benchmark：fid与clip",{"_index":721,"t":{"1116":{"position":[[0,37]]}}}],["bert",{"_index":1076,"t":{"1169":{"position":[[0,18]]},"1171":{"position":[[194,4],[237,4],[281,4],[349,4]]},"1175":{"position":[[0,11],[936,86]]},"1177":{"position":[[317,4],[374,4],[490,7],[586,7]]}}}],["bert也可以用来完成截取式问答任务，提供一篇文章以及问题，要求输出两个integ",{"_index":1132,"t":{"1175":{"position":[[1197,66]]}}}],["bert在大规模语料库（corpus）上预训练后，输出的向量表示了对应输入token的意思，特别地，是考虑了上下文信息的意思。比如，对于水果的苹果已经苹果公司的苹果，bert对一样的苹果有不同的输出。即对一个处在不同上下文信息中的相同词汇，bert有不同的embedding。类似于word",{"_index":1136,"t":{"1177":{"position":[[0,145]]}}}],["bert模型的核心就是通过预训练来学习上下文信息，进而对每个输入token生成相应的向量表示。这个向量表示考虑了上下文信息，所以对于处在不同上下文中的相同词汇，bert会有不同的embed",{"_index":1138,"t":{"1177":{"position":[[202,99]]}}}],["bert模型的自监督性质主要体现在其训练数据并不需要人为标注label，而是通过对输入句子中的部分词汇做mask，将输入数据的部分内容使用speci",{"_index":1083,"t":{"1173":{"position":[[15,76]]}}}],["bert的损失函数主要是mask",{"_index":1086,"t":{"1173":{"position":[[174,18]]}}}],["bert的结构其实是transformer的encoder部分，仅使用encod",{"_index":1077,"t":{"1171":{"position":[[0,49]]}}}],["bert（bidirect",{"_index":1078,"t":{"1171":{"position":[[50,18]]}}}],["best",{"_index":948,"t":{"1151":{"position":[[1805,4]]},"1256":{"position":[[1805,4]]}}}],["beta",{"_index":61,"t":{"917":{"position":[[43,5],[82,16]]},"919":{"position":[[183,5]]},"1410":{"position":[[1781,7]]},"1535":{"position":[[1782,7]]}}}],["beta,\\spac",{"_index":60,"t":{"917":{"position":[[30,12]]},"919":{"position":[[147,12]]}}}],["better",{"_index":3045,"t":{"1663":{"position":[[310,6]]}}}],["between",{"_index":1322,"t":{"1217":{"position":[[2817,7]]},"1423":{"position":[[821,7]]}}}],["beyond",{"_index":2141,"t":{"1423":{"position":[[184,7]]}}}],["bhpf",{"_index":593,"t":{"1063":{"position":[[197,16]]}}}],["bias",{"_index":1932,"t":{"1403":{"position":[[271,6]]},"1528":{"position":[[271,6]]}}}],["bib_ibi​）推“果”（结果事件aaa",{"_index":2260,"t":{"1443":{"position":[[480,80]]}}}],["bidirect",{"_index":2105,"t":{"1414":{"position":[[1098,13]]},"1489":{"position":[[1235,26]]},"1617":{"position":[[1235,26]]}}}],["big",{"_index":1530,"t":{"1302":{"position":[[291,5]]},"1628":{"position":[[76,3]]},"1661":{"position":[[101,3]]}}}],["big(l(w",{"_index":1529,"t":{"1302":{"position":[[240,9]]}}}],["bilinear",{"_index":551,"t":{"1050":{"position":[[8,16]]}}}],["bilingu",{"_index":2085,"t":{"1414":{"position":[[722,9]]}}}],["bits/stdc++.h",{"_index":6,"t":{"896":{"position":[[9,15]]},"902":{"position":[[9,15]]},"966":{"position":[[9,15]]},"1689":{"position":[[50,15]]}}}],["block",{"_index":3129,"t":{"1724":{"position":[[127,8]]}}}],["block。每一个block",{"_index":408,"t":{"1018":{"position":[[215,35]]},"1358":{"position":[[215,35]]}}}],["blpf",{"_index":571,"t":{"1061":{"position":[[341,16]]}}}],["blue",{"_index":2836,"t":{"1633":{"position":[[584,4],[654,4]]}}}],["bn",{"_index":3171,"t":{"1735":{"position":[[3,4]]}}}],["boch",{"_index":259,"t":{"974":{"position":[[574,5],[879,5],[1038,5],[1092,20]]},"1772":{"position":[[18,8],[94,5]]},"1774":{"position":[[217,20],[1357,13],[1630,5],[1935,5]]}}}],["bochs.out",{"_index":268,"t":{"974":{"position":[[706,11],[909,10]]},"1774":{"position":[[1762,11],[1965,10]]}}}],["bochs.out、depend.mak以及fd.img文件，bochs.out文件是日志输出文件，depend.mak是编译中间生成的文件，最终生成的fd.img是最重要的geekos映像文件，有了它才能使用bochs运行geeko",{"_index":244,"t":{"974":{"position":[[87,137]]}}}],["bochsrc",{"_index":247,"t":{"974":{"position":[[378,8]]},"1774":{"position":[[1434,8]]}}}],["bochs是一个x86",{"_index":3216,"t":{"1766":{"position":[[0,20]]}}}],["bochs的镜像文件fd.img",{"_index":3221,"t":{"1768":{"position":[[167,22]]}}}],["bochs的镜像文件fd.img以构建geeko",{"_index":3227,"t":{"1774":{"position":[[113,33]]}}}],["bochs运行geekos系统了，可以说bochs的运行依赖两个文件，一个是配置文件.bochsrc，一个是映像文件fd.img，映像文件的加载路径需要在.bochsrc",{"_index":245,"t":{"974":{"position":[[241,123]]}}}],["bochs运行所必须的文件,也是geeko",{"_index":3222,"t":{"1768":{"position":[[190,34]]}}}],["boldsymbol{\\epsilon}_{\\theta}(\\sqrt{\\bar{\\alpha}_{t}}\\mathbf{x}_{0}+\\sqrt{1",{"_index":321,"t":{"988":{"position":[[268,76]]}}}],["boost",{"_index":2164,"t":{"1423":{"position":[[883,8]]}}}],["boot",{"_index":262,"t":{"974":{"position":[[612,5]]},"1774":{"position":[[1668,5]]}}}],["boot_info",{"_index":216,"t":{"972":{"position":[[1850,10]]}}}],["bootinfo",{"_index":217,"t":{"972":{"position":[[1861,9]]}}}],["both",{"_index":2087,"t":{"1414":{"position":[[773,4]]}}}],["bound",{"_index":2167,"t":{"1423":{"position":[[1087,8]]}}}],["box",{"_index":2168,"t":{"1423":{"position":[[1096,5]]}}}],["box预测框（bbox），每个bbox的中心点都落在该grid",{"_index":3155,"t":{"1733":{"position":[[234,31]]}}}],["bpe",{"_index":2741,"t":{"1599":{"position":[[61,6],[78,3],[126,3],[1670,3],[1690,3],[1711,3]]}}}],["break",{"_index":122,"t":{"966":{"position":[[157,6],[384,6]]}}}],["bs",{"_index":3038,"t":{"1663":{"position":[[191,2]]}}}],["build",{"_index":2079,"t":{"1414":{"position":[[637,8]]}}}],["byte",{"_index":2740,"t":{"1599":{"position":[[32,13]]}}}],["b与e，b作为开始刷的节点索引令前缀和数组中对应元素的值+1+1+1，e+1作为刷墙结束的下一个节点的索引令对应的值−1",{"_index":130,"t":{"968":{"position":[[71,81]]}}}],["b班4位同学，每位同学3",{"_index":1669,"t":{"1347":{"position":[[162,15]]}}}],["b（semant",{"_index":1111,"t":{"1175":{"position":[[511,10]]}}}],["c",{"_index":43,"t":{"904":{"position":[[0,5]]},"972":{"position":[[647,1],[678,3],[748,3],[817,3],[1730,1]]},"974":{"position":[[1090,1]]},"1135":{"position":[[104,1],[115,1]]},"1240":{"position":[[104,1],[115,1]]},"1347":{"position":[[178,1],[1095,1],[1118,2],[1289,1],[1312,2]]},"1392":{"position":[[44,1]]},"1489":{"position":[[957,27]]},"1550":{"position":[[44,1]]},"1599":{"position":[[251,4],[317,4],[523,4],[594,4],[693,4],[766,4],[857,4],[942,4],[1041,4],[1134,4],[1239,4],[1340,4],[1446,4],[1562,4]]},"1607":{"position":[[129,4],[301,4],[501,4]]},"1609":{"position":[[164,2]]},"1617":{"position":[[957,27]]},"1633":{"position":[[3701,3]]},"1741":{"position":[[24,2],[67,2],[147,2]]},"1743":{"position":[[18,2],[81,2]]},"1745":{"position":[[18,2]]},"1751":{"position":[[50,2],[97,2]]},"1774":{"position":[[642,1],[740,1],[945,1],[1219,1]]}}}],["c)五种信息，其中x",{"_index":3158,"t":{"1733":{"position":[[311,11]]}}}],["c:15",{"_index":1638,"t":{"1330":{"position":[[646,4]]}}}],["c:5",{"_index":1629,"t":{"1330":{"position":[[446,3]]}}}],["c=γ(p)\\mathbf{c",{"_index":2922,"t":{"1633":{"position":[[6179,16]]}}}],["c\\ell_cℓc",{"_index":2043,"t":{"1410":{"position":[[2177,11]]},"1535":{"position":[[2178,11]]}}}],["c\\mathbf{c}c",{"_index":2940,"t":{"1633":{"position":[[6682,15]]}}}],["c_i",{"_index":1579,"t":{"1314":{"position":[[62,3],[431,3]]}}}],["c_ico​×ci",{"_index":1575,"t":{"1312":{"position":[[105,15]]},"1314":{"position":[[122,10]]}}}],["c_ihw×ci​，权重形状为co×cic_o",{"_index":1574,"t":{"1312":{"position":[[74,23]]}}}],["c_k",{"_index":652,"t":{"1097":{"position":[[579,4]]}}}],["c_kpi′​=∑wj​∈ck​​pj​pi",{"_index":655,"t":{"1097":{"position":[[611,24]]}}}],["c_p",{"_index":674,"t":{"1099":{"position":[[688,4]]}}}],["c_ppi′​=∑wj​∈cp​​pj​pi",{"_index":675,"t":{"1099":{"position":[[720,24]]}}}],["c_t",{"_index":2897,"t":{"1633":{"position":[[4827,4]]}}}],["c_t\\right)\\right",{"_index":2901,"t":{"1633":{"position":[[4938,17]]}}}],["c_{pr",{"_index":2965,"t":{"1633":{"position":[[8449,7]]}}}],["c_{pr})xpr​=x^θ​(zt1​​,cpr",{"_index":2955,"t":{"1633":{"position":[[7947,37]]}}}],["can't",{"_index":3011,"t":{"1650":{"position":[[171,5]]},"1663":{"position":[[106,5]]}}}],["canni",{"_index":623,"t":{"1081":{"position":[[261,10]]},"1726":{"position":[[151,10]]},"1737":{"position":[[158,36]]}}}],["capabl",{"_index":2076,"t":{"1414":{"position":[[558,12],[743,12]]}}}],["capac",{"_index":2090,"t":{"1414":{"position":[[823,8]]}}}],["caption",{"_index":2725,"t":{"1585":{"position":[[6,7]]},"1633":{"position":[[3518,9],[3649,9],[4020,7],[4074,7],[4135,9],[4151,7],[4207,7],[4275,7],[4293,7]]}}}],["casc",{"_index":3121,"t":{"1714":{"position":[[111,44]]}}}],["cascad",{"_index":2243,"t":{"1438":{"position":[[313,7]]}}}],["case",{"_index":1852,"t":{"1381":{"position":[[701,6]]},"1539":{"position":[[701,6]]}}}],["categor",{"_index":1840,"t":{"1381":{"position":[[204,11],[478,11]]},"1539":{"position":[[204,11],[478,11]]}}}],["causal",{"_index":1370,"t":{"1233":{"position":[[130,14]]},"1489":{"position":[[1443,6],[1633,6],[1735,6]]},"1494":{"position":[[590,6]]},"1496":{"position":[[134,6]]},"1617":{"position":[[1443,6],[1633,6],[1735,6]]},"1622":{"position":[[590,6]]},"1626":{"position":[[134,6]]}}}],["caution",{"_index":90,"t":{"941":{"position":[[11,7],[57,7]]}}}],["cave",{"_index":2528,"t":{"1502":{"position":[[21,108],[154,8]]}}}],["ca→b→c",{"_index":2295,"t":{"1447":{"position":[[48,10]]}}}],["cbam是通道+空间注意力机制（senet",{"_index":3182,"t":{"1739":{"position":[[82,30]]}}}],["cc_general_opt",{"_index":3234,"t":{"1774":{"position":[[471,15],[522,15]]}}}],["ccc",{"_index":1994,"t":{"1408":{"position":[[203,6]]},"1533":{"position":[[203,6]]}}}],["cd",{"_index":2750,"t":{"1599":{"position":[[640,17],[658,17],[726,5],[741,4],[787,6],[890,5],[963,5],[1074,5],[1155,5],[1272,5],[1361,5],[1479,5],[1583,5]]},"1764":{"position":[[321,16]]}}}],["cde",{"_index":2746,"t":{"1599":{"position":[[197,5],[1401,15],[1417,11],[1516,6],[1528,5],[1608,7]]}}}],["cdot",{"_index":2020,"t":{"1410":{"position":[[1210,5],[1251,5],[1662,5]]},"1435":{"position":[[603,5],[703,5],[748,5],[782,5]]},"1445":{"position":[[453,5],[491,5]]},"1535":{"position":[[1211,5],[1252,5],[1663,5]]}}}],["cd命令进入geeko",{"_index":3220,"t":{"1768":{"position":[[93,20]]}}}],["cell",{"_index":3165,"t":{"1733":{"position":[[506,12],[567,22]]}}}],["cell。在yolov1中s=7s=7s=7",{"_index":3152,"t":{"1733":{"position":[[184,22]]}}}],["cell中。在yolov1中b=2b=2b=2",{"_index":3156,"t":{"1733":{"position":[[266,23]]}}}],["cell生成5个anchor",{"_index":3176,"t":{"1735":{"position":[[100,14]]}}}],["cell选出条件类别概率最大的类别，因此每个grid",{"_index":3164,"t":{"1733":{"position":[[479,26]]}}}],["cell预测出bbb个bound",{"_index":3154,"t":{"1733":{"position":[[214,19]]}}}],["cell预测出一组与数据集有关的条件类别概率。在yolov1论文使用的数据集pasc",{"_index":3161,"t":{"1733":{"position":[[378,44]]}}}],["cell，每个grid",{"_index":3175,"t":{"1735":{"position":[[88,11]]}}}],["center",{"_index":1998,"t":{"1410":{"position":[[264,6]]},"1535":{"position":[[264,6]]},"1663":{"position":[[115,8]]}}}],["center(replac",{"_index":3041,"t":{"1663":{"position":[[220,14],[270,14]]}}}],["cfg",{"_index":1897,"t":{"1387":{"position":[[903,3]]},"1410":{"position":[[2424,3],[2428,12],[2489,3]]},"1535":{"position":[[2425,3],[2429,12],[2490,3]]},"1545":{"position":[[903,3]]}}}],["cfg（classifi",{"_index":2035,"t":{"1410":{"position":[[1932,14]]},"1535":{"position":[[1933,14]]}}}],["chang",{"_index":1621,"t":{"1330":{"position":[[344,8]]}}}],["channel",{"_index":2906,"t":{"1633":{"position":[[5173,8],[5378,7]]}}}],["charact",{"_index":974,"t":{"1151":{"position":[[2289,9],[2600,9]]},"1163":{"position":[[728,9]]},"1256":{"position":[[2289,9],[2600,9]]},"1268":{"position":[[728,9]]},"1633":{"position":[[7410,10]]}}}],["chatgpt",{"_index":2735,"t":{"1597":{"position":[[207,7]]}}}],["checkpoint",{"_index":991,"t":{"1154":{"position":[[198,11],[308,10]]},"1259":{"position":[[198,11],[308,10]]},"1633":{"position":[[5427,10]]}}}],["cheung",{"_index":2398,"t":{"1476":{"position":[[762,7]]}}}],["chines",{"_index":2089,"t":{"1414":{"position":[[790,7]]}}}],["cho",{"_index":2368,"t":{"1476":{"position":[[384,4]]}}}],["choos",{"_index":1569,"t":{"1309":{"position":[[73,6]]}}}],["church",{"_index":477,"t":{"1032":{"position":[[65,7]]}}}],["cic_ici",{"_index":2892,"t":{"1633":{"position":[[4595,8]]}}}],["cin",{"_index":34,"t":{"902":{"position":[[69,3]]},"1689":{"position":[[795,4]]}}}],["ci×h×wc_i",{"_index":1576,"t":{"1314":{"position":[[0,12]]}}}],["ck={wi∣pi",{"_index":644,"t":{"1097":{"position":[[341,9]]}}}],["ckc_kck",{"_index":643,"t":{"1097":{"position":[[255,8],[267,8]]}}}],["class",{"_index":1010,"t":{"1159":{"position":[[72,5]]},"1163":{"position":[[614,6]]},"1264":{"position":[[72,5]]},"1268":{"position":[[614,6]]},"1375":{"position":[[276,5],[418,5]]},"1403":{"position":[[705,5]]},"1423":{"position":[[1272,5]]},"1528":{"position":[[705,5]]},"1624":{"position":[[45,5]]},"1633":{"position":[[7151,6],[7640,6],[7695,5],[7797,5],[8110,6]]}}}],["classfier",{"_index":2658,"t":{"1524":{"position":[[247,9]]}}}],["classif",{"_index":2677,"t":{"1524":{"position":[[1445,9]]}}}],["classifi",{"_index":1148,"t":{"1183":{"position":[[0,8]]},"1335":{"position":[[656,10]]},"1410":{"position":[[2269,11]]},"1520":{"position":[[678,10],[700,10]]},"1522":{"position":[[393,10],[445,14]]},"1524":{"position":[[0,10],[41,10],[280,10]]},"1535":{"position":[[2270,11]]}}}],["clear",{"_index":2445,"t":{"1485":{"position":[[930,5]]},"1613":{"position":[[930,5]]}}}],["clip",{"_index":734,"t":{"1116":{"position":[[916,4],[928,4],[1004,9]]},"1143":{"position":[[588,4],[680,4]]},"1149":{"position":[[1019,4]]},"1248":{"position":[[588,4],[680,4]]},"1254":{"position":[[1019,4]]},"1481":{"position":[[639,4],[885,4]]}}}],["clip_directional_loss",{"_index":904,"t":{"1149":{"position":[[1033,34]]},"1163":{"position":[[1162,21]]},"1254":{"position":[[1033,34]]},"1268":{"position":[[1162,21]]}}}],["clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtyp",{"_index":845,"t":{"1143":{"position":[[872,75]]},"1248":{"position":[[872,75]]}}}],["clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtyp",{"_index":849,"t":{"1143":{"position":[[1024,75]]},"1248":{"position":[[1024,75]]}}}],["clock",{"_index":3046,"t":{"1663":{"position":[[324,5]]}}}],["closure(t)\\epsilon",{"_index":82,"t":{"925":{"position":[[323,22]]}}}],["closure(t)ϵ−closure(t",{"_index":83,"t":{"925":{"position":[[347,22]]}}}],["cloud",{"_index":810,"t":{"1137":{"position":[[39,5]]},"1242":{"position":[[39,5]]}}}],["cnn",{"_index":1230,"t":{"1210":{"position":[[0,21],[22,77]]},"1566":{"position":[[29,42]]},"1583":{"position":[[924,3],[951,3]]}}}],["cnn中没有全连接层时，本质上可以接受任意尺寸的输入，但这是狭隘的。若考虑其下游任务以及输出，如fcn（fulli",{"_index":1224,"t":{"1208":{"position":[[131,68]]}}}],["cnn本质上可以接受任意通道数的图像输入，但是其模型效果将会受到极大的影响。以一个使用通道数为3的数据集进行训练的cnn",{"_index":1227,"t":{"1208":{"position":[[285,83]]}}}],["cnn模型的输入向量的形状是固定的，其输出向量的形状也是固定的或可以根据不同的下游任务而唯一确定，即输入形状与下游任务共同确定了一个cnn",{"_index":1223,"t":{"1208":{"position":[[0,84]]}}}],["cnn的权值共享使得模型能够学习到图像中的局部特征，这也是一种对于上下文的假设。相邻位置上的权重共享使得模型能够对局部结构进行建模，这种权重共享使得cnn",{"_index":1231,"t":{"1210":{"position":[[100,178]]}}}],["cnn的设计理念认为：在图像任务中，局部结构通常更为重要，局部连接和权值共享使得cnn更适用于图像处理等任务。但也正是这种设计理念，使得cnn在面临长输入序列时不能很好地综合上下文信息、提取位置信息，因此self",{"_index":1232,"t":{"1210":{"position":[[365,106]]}}}],["co",{"_index":2021,"t":{"1410":{"position":[[1216,4]]},"1535":{"position":[[1217,4]]}}}],["coars",{"_index":2427,"t":{"1485":{"position":[[131,6]]},"1492":{"position":[[0,75]]},"1613":{"position":[[131,6]]},"1620":{"position":[[0,75]]}}}],["coco",{"_index":1964,"t":{"1403":{"position":[[998,4]]},"1405":{"position":[[655,4]]},"1528":{"position":[[998,4]]},"1530":{"position":[[655,4]]}}}],["code",{"_index":168,"t":{"972":{"position":[[649,4],[1732,4]]},"1154":{"position":[[86,39],[469,4],[631,10]]},"1217":{"position":[[3210,4]]},"1259":{"position":[[86,39],[469,4],[631,10]]},"1403":{"position":[[1293,5]]},"1414":{"position":[[1504,4]]},"1464":{"position":[[1068,4]]},"1485":{"position":[[1355,5]]},"1489":{"position":[[270,5]]},"1528":{"position":[[1293,5]]},"1613":{"position":[[1355,5]]},"1617":{"position":[[270,5]]}}}],["codebook",{"_index":1948,"t":{"1403":{"position":[[644,8]]},"1405":{"position":[[540,16]]},"1408":{"position":[[50,8],[93,8],[128,8],[145,8],[187,8],[210,8],[232,8]]},"1489":{"position":[[254,8],[466,8]]},"1528":{"position":[[644,8]]},"1530":{"position":[[540,16]]},"1533":{"position":[[50,8],[93,8],[128,8],[145,8],[187,8],[210,8],[232,8]]},"1583":{"position":[[1320,15],[1454,8]]},"1617":{"position":[[254,8],[466,8]]}}}],["coeffici",{"_index":2449,"t":{"1485":{"position":[[1018,12]]},"1613":{"position":[[1018,12]]}}}],["cola（corpu",{"_index":1113,"t":{"1175":{"position":[[582,11]]}}}],["collapse（模式坍塌），因此提出了从每个源域图像中学习出多样且准确的prompt",{"_index":2402,"t":{"1476":{"position":[[1088,65]]}}}],["color",{"_index":2988,"t":{"1644":{"position":[[270,5],[304,5],[343,5],[383,5]]}}}],["colors(200001",{"_index":117,"t":{"966":{"position":[[71,14]]}}}],["colors.s",{"_index":125,"t":{"966":{"position":[[247,14]]}}}],["colors[",{"_index":124,"t":{"966":{"position":[[189,8]]}}}],["colors[b",{"_index":123,"t":{"966":{"position":[[166,12]]}}}],["colors[i",{"_index":126,"t":{"966":{"position":[[269,9],[282,8],[445,11]]}}}],["combin",{"_index":2883,"t":{"1633":{"position":[[3568,11]]}}}],["commun",{"_index":1978,"t":{"1403":{"position":[[1325,9]]},"1528":{"position":[[1325,9]]}}}],["compar",{"_index":2175,"t":{"1423":{"position":[[1504,8]]}}}],["competit",{"_index":1968,"t":{"1403":{"position":[[1053,11]]},"1423":{"position":[[1317,11]]},"1528":{"position":[[1053,11]]}}}],["compil",{"_index":3239,"t":{"1774":{"position":[[644,9],[742,9],[768,7],[947,9]]}}}],["complementari",{"_index":2104,"t":{"1414":{"position":[[1084,13]]}}}],["complex",{"_index":2161,"t":{"1423":{"position":[[829,10]]}}}],["compon",{"_index":2071,"t":{"1414":{"position":[[352,9],[473,9],[512,10]]}}}],["comprese",{"_index":2329,"t":{"1464":{"position":[[74,10]]}}}],["compress",{"_index":2178,"t":{"1426":{"position":[[285,11],[346,11]]}}}],["compressor",{"_index":1986,"t":{"1405":{"position":[[359,12]]},"1530":{"position":[[359,12]]}}}],["comput",{"_index":1280,"t":{"1217":{"position":[[1244,7],[1653,7],[2132,7],[2550,7],[3808,7],[4024,7],[4291,7],[4508,7]]},"1423":{"position":[[542,13],[1477,13]]}}}],["compute_text_featur",{"_index":1048,"t":{"1161":{"position":[[173,21]]},"1266":{"position":[[173,21]]}}}],["concat",{"_index":1050,"t":{"1161":{"position":[[320,7],[397,6],[549,6]]},"1266":{"position":[[320,7],[397,6],[549,6]]},"1347":{"position":[[50,32]]},"1633":{"position":[[5361,16]]},"1737":{"position":[[121,32]]}}}],["concaten",{"_index":2907,"t":{"1633":{"position":[[5216,13]]}}}],["concat与stack",{"_index":1664,"t":{"1347":{"position":[[0,14]]}}}],["concentr",{"_index":2107,"t":{"1414":{"position":[[1135,12]]}}}],["conda",{"_index":790,"t":{"1133":{"position":[[0,5],[31,5]]},"1135":{"position":[[40,5]]},"1238":{"position":[[0,5],[31,5]]},"1240":{"position":[[40,5]]}}}],["condit",{"_index":356,"t":{"1003":{"position":[[405,11]]},"1043":{"position":[[33,11]]},"1385":{"position":[[73,18]]},"1403":{"position":[[711,11],[908,11]]},"1423":{"position":[[1051,12],[1278,11]]},"1435":{"position":[[13,28]]},"1524":{"position":[[906,12]]},"1528":{"position":[[711,11],[908,11]]},"1543":{"position":[[73,18]]},"1624":{"position":[[51,11]]},"1633":{"position":[[5135,13]]}}}],["connection加上自身的输入向量，再经过lay",{"_index":404,"t":{"1018":{"position":[[90,28]]},"1358":{"position":[[90,28]]}}}],["connection加上送入fcn的输入自身，最终再进行lay",{"_index":406,"t":{"1018":{"position":[[152,33]]},"1358":{"position":[[152,33]]}}}],["connection，norm指的是lay",{"_index":380,"t":{"1014":{"position":[[49,23]]},"1354":{"position":[[49,23]]}}}],["consist",{"_index":953,"t":{"1151":{"position":[[2005,11]]},"1256":{"position":[[2005,11]]},"1403":{"position":[[539,8]]},"1476":{"position":[[283,11]]},"1512":{"position":[[1182,11]]},"1528":{"position":[[539,8]]},"1633":{"position":[[3339,8]]}}}],["consum",{"_index":2149,"t":{"1423":{"position":[[421,8]]}}}],["contain",{"_index":1182,"t":{"1185":{"position":[[463,10]]}}}],["content",{"_index":2972,"t":{"1638":{"position":[[26,7]]},"1644":{"position":[[92,8]]},"1756":{"position":[[5,7]]},"1758":{"position":[[16,7],[60,7]]},"1760":{"position":[[16,7],[60,7]]}}}],["context",{"_index":813,"t":{"1141":{"position":[[33,7]]},"1246":{"position":[[33,7]]}}}],["context_length",{"_index":841,"t":{"1143":{"position":[[691,14]]},"1248":{"position":[[691,14]]}}}],["continu",{"_index":1644,"t":{"1330":{"position":[[769,10]]},"1381":{"position":[[435,10],[1015,10]]},"1539":{"position":[[435,10],[1015,10]]}}}],["continun",{"_index":1646,"t":{"1330":{"position":[[815,12]]}}}],["contour",{"_index":2839,"t":{"1633":{"position":[[659,7]]}}}],["contrast",{"_index":2157,"t":{"1423":{"position":[[687,8]]}}}],["control",{"_index":2144,"t":{"1423":{"position":[[258,7]]},"1663":{"position":[[212,7],[262,7]]}}}],["conv2d",{"_index":1387,"t":{"1274":{"position":[[120,33]]}}}],["convent",{"_index":1832,"t":{"1381":{"position":[[0,12]]},"1539":{"position":[[0,12]]}}}],["convert",{"_index":1061,"t":{"1163":{"position":[[593,10]]},"1268":{"position":[[593,10]]}}}],["convolut",{"_index":1225,"t":{"1208":{"position":[[200,11]]},"1423":{"position":[[1154,13]]},"1464":{"position":[[239,16]]},"1633":{"position":[[5195,13]]}}}],["convolution）：在每个二维空间卷积（2d",{"_index":2332,"t":{"1464":{"position":[[205,25]]}}}],["copi",{"_index":194,"t":{"972":{"position":[[991,10]]}}}],["copyright",{"_index":171,"t":{"972":{"position":[[668,9],[738,9],[807,9]]}}}],["corpu",{"_index":1119,"t":{"1175":{"position":[[688,33]]},"1599":{"position":[[165,10]]}}}],["correct",{"_index":1645,"t":{"1330":{"position":[[800,7]]}}}],["correctli",{"_index":1661,"t":{"1335":{"position":[[667,9]]}}}],["correl",{"_index":2448,"t":{"1485":{"position":[[1006,11]]},"1613":{"position":[[1006,11]]}}}],["correspond",{"_index":2086,"t":{"1414":{"position":[[756,13]]},"1476":{"position":[[644,15]]},"1633":{"position":[[7377,10]]}}}],["cosin",{"_index":1896,"t":{"1387":{"position":[[820,6]]},"1545":{"position":[[820,6]]}}}],["count",{"_index":238,"t":{"972":{"position":[[2207,9]]}}}],["cout",{"_index":19,"t":{"896":{"position":[[180,4]]},"902":{"position":[[336,4],[377,4]]},"1689":{"position":[[987,4],[1064,4],[1081,4]]}}}],["co×cic_o",{"_index":1582,"t":{"1314":{"position":[[103,11]]}}}],["co×ci×kh×kwc_o",{"_index":1578,"t":{"1314":{"position":[[38,16]]}}}],["co×h′×w′c_o",{"_index":1583,"t":{"1314":{"position":[[133,14]]}}}],["cp={wi∣∑j=1ipj≥p}c_p=\\left\\{w_i",{"_index":670,"t":{"1099":{"position":[[537,31]]}}}],["cpc_pcp",{"_index":669,"t":{"1099":{"position":[[461,8],[473,8]]}}}],["cpr:=γ(f(\\mathbf{c}_{\\mathrm{pr}}:=\\gamma(f(cpr​:=γ(f(\"a",{"_index":2958,"t":{"1633":{"position":[[8053,56]]}}}],["creat",{"_index":791,"t":{"1133":{"position":[[6,6]]},"1238":{"position":[[6,6]]},"1633":{"position":[[3684,6]]}}}],["criteria.clip_loss.cliploss.clip_directional_loss",{"_index":1075,"t":{"1163":{"position":[[1208,50]]},"1268":{"position":[[1208,50]]}}}],["cross",{"_index":440,"t":{"1022":{"position":[[1417,11]]},"1287":{"position":[[5,5]]},"1305":{"position":[[7,5],[133,5]]},"1307":{"position":[[28,5]]},"1362":{"position":[[1417,11]]},"1381":{"position":[[490,5]]},"1423":{"position":[[924,5]]},"1428":{"position":[[61,13]]},"1435":{"position":[[175,20],[417,5],[450,10]]},"1473":{"position":[[189,5]]},"1476":{"position":[[631,5]]},"1539":{"position":[[490,5]]}}}],["cross_loss",{"_index":1494,"t":{"1287":{"position":[[1727,10]]}}}],["cross_loss(predict",{"_index":1496,"t":{"1287":{"position":[[1838,19]]}}}],["crossentropyloss",{"_index":1493,"t":{"1287":{"position":[[1706,20]]}}}],["cs",{"_index":3115,"t":{"1714":{"position":[[17,13]]}}}],["csp特征融合可以参考：https://blog.csdn.net/weixin_55073640/article/details/122614176",{"_index":3181,"t":{"1739":{"position":[[4,77]]}}}],["ctc_tct",{"_index":2893,"t":{"1633":{"position":[[4612,8]]}}}],["ctrl",{"_index":146,"t":{"972":{"position":[[118,4],[1330,4]]}}}],["ctx_init",{"_index":812,"t":{"1141":{"position":[[0,8],[200,8]]},"1161":{"position":[[36,19],[129,8],[151,10],[162,8],[416,8],[574,8],[730,8]]},"1246":{"position":[[0,8],[200,8]]},"1266":{"position":[[36,19],[129,8],[151,10],[162,8],[416,8],[574,8],[730,8]]}}}],["cuda",{"_index":795,"t":{"1135":{"position":[[11,7]]},"1240":{"position":[[11,7]]}}}],["cuda=11.8",{"_index":800,"t":{"1135":{"position":[[93,9]]},"1240":{"position":[[93,9]]}}}],["cudnn中rnn的api就是batch_size在第二维度。进一步讲，batch",{"_index":2804,"t":{"1609":{"position":[[331,43]]}}}],["cup",{"_index":55,"t":{"915":{"position":[[133,4]]},"919":{"position":[[198,4]]}}}],["curve_name_2",{"_index":1219,"t":{"1203":{"position":[[134,17]]}}}],["custom.css",{"_index":2983,"t":{"1644":{"position":[[161,18]]}}}],["cvpr",{"_index":2337,"t":{"1471":{"position":[[5,7],[53,14]]},"1476":{"position":[[475,4],[663,5],[944,7]]},"1628":{"position":[[6,4],[85,4]]},"1633":{"position":[[1433,4],[5792,4]]},"1636":{"position":[[189,4]]}}}],["c}f∈rh×w×c",{"_index":2487,"t":{"1492":{"position":[[457,10]]},"1620":{"position":[[457,10]]}}}],["c}z∈rh×w×c",{"_index":2190,"t":{"1431":{"position":[[777,29]]}}}],["c语言代码编写以及编译、使用boch",{"_index":3271,"t":{"1774":{"position":[[2162,36]]}}}],["d",{"_index":121,"t":{"966":{"position":[[117,4],[332,4]]},"1347":{"position":[[291,1]]},"1433":{"position":[[739,1]]},"1435":{"position":[[1032,1]]},"1599":{"position":[[256,4],[325,4],[531,4],[599,4],[701,4],[771,4],[865,4],[947,4],[1049,4],[1139,4],[1247,4],[1345,4],[1454,4],[1567,4]]},"1633":{"position":[[3740,3]]}}}],["d(g(z)))]\\tag{2}lossfake​=−ez∼pz​(z)​[log(1−d(g(z)))](2",{"_index":365,"t":{"1007":{"position":[[405,56]]}}}],["d(g(z))]\\tag{4}lg​=−ez∼pz​(z)​[logd(g(z))](4",{"_index":370,"t":{"1007":{"position":[[855,45]]}}}],["d(u,v)\\leq",{"_index":586,"t":{"1061":{"position":[[1151,10]]},"1063":{"position":[[668,10]]},"1065":{"position":[[184,10],[514,10]]}}}],["d(u,v)d(u,v)d(u,v)达到截止频率时，d(u,v)d0=1\\frac{d(u,v)}{d_0}=1d0​d(u,v)​=1，此时h(u,v)=0.707h(u,v)=0.707h(u,v)=0.707",{"_index":575,"t":{"1061":{"position":[[602,110]]}}}],["d(x)]\\tag{1}lossreal​=−ex∼pdata​(x)​[logd(x)](1",{"_index":360,"t":{"1007":{"position":[[241,48]]}}}],["d(x)d(x)d(x)是判别器的输出，xxx是真实样本，eee",{"_index":361,"t":{"1007":{"position":[[290,41]]}}}],["d.\\n",{"_index":147,"t":{"972":{"position":[[125,7],[1337,7]]}}}],["d0d_0d0​处垂直截止，通过频率和截止频率在d0d_0d0",{"_index":570,"t":{"1061":{"position":[[272,68]]}}}],["d0d_0d0​尾部包含高频分量d1d_1d1",{"_index":581,"t":{"1061":{"position":[[960,59]]}}}],["d0d_0d0​是通带中心频率，www",{"_index":609,"t":{"1065":{"position":[[330,28]]}}}],["d2l",{"_index":1717,"t":{"1375":{"position":[[101,3],[121,3]]}}}],["d2l.accumulator(2",{"_index":1759,"t":{"1375":{"position":[[1069,18]]}}}],["d2l.accumulator(3",{"_index":1793,"t":{"1375":{"position":[[1843,18]]}}}],["d2l.animator(xlabel='epoch",{"_index":1786,"t":{"1375":{"position":[[1685,28]]}}}],["d2l.load_data_fashion_mnist(batch_s",{"_index":1823,"t":{"1375":{"position":[[2680,39]]}}}],["d2l.timer",{"_index":1791,"t":{"1375":{"position":[[1805,12]]}}}],["d2l.try_gpu",{"_index":1826,"t":{"1375":{"position":[[2814,14]]}}}],["d4(p,q)=∣x−s∣+∣y−t∣(2)d_4(p,q)=\\vert",{"_index":506,"t":{"1037":{"position":[[271,36]]}}}],["d8(p,q)=max(∣x−s∣,∣y−t∣)(3)d_8(p,q)=max(\\vert",{"_index":510,"t":{"1037":{"position":[[368,45]]}}}],["d=512d=512d=512，dk=512d_k=512dk​=512（查询和键的维度）。那么，q、k、v",{"_index":1363,"t":{"1231":{"position":[[33,54]]}}}],["d\\mathcal{d}d",{"_index":2209,"t":{"1433":{"position":[[562,13]]}}}],["d_0",{"_index":568,"t":{"1061":{"position":[[136,5]]},"1063":{"position":[[679,5]]}}}],["d_0+\\frac{w}{2}\\\\0&d(u,v)\\geq",{"_index":607,"t":{"1065":{"position":[[195,29]]}}}],["d_0+\\frac{w}{2}\\end{cases}\\tag{23}h(u,v)=⎩⎨⎧​010​d(u,v)<d0​−2w​d0​−2w​≤d(u,v)≤d0​+2w​d(u,v)≥d0​+2w​​(23",{"_index":608,"t":{"1065":{"position":[[225,104]]}}}],["d_0\\end{cases}\\tag{19}h(u,v)={10​d(u,v)>d0​d(u,v)≤d0​​(19",{"_index":592,"t":{"1063":{"position":[[110,58]]}}}],["d_1",{"_index":587,"t":{"1061":{"position":[[1162,5]]}}}],["d_1}&d_0\\leq",{"_index":585,"t":{"1061":{"position":[[1138,12]]}}}],["d_1}&d_1\\leq",{"_index":602,"t":{"1063":{"position":[[655,12]]}}}],["d_1}{d_0",{"_index":584,"t":{"1061":{"position":[[1129,8]]},"1063":{"position":[[646,8]]}}}],["d_\\epsilon^i}φi​(zt​)∈rn×dϵi",{"_index":2235,"t":{"1435":{"position":[[919,29]]}}}],["d_\\tau}τθ​(y)∈rm×dτ​，便于引入各种模态的条件（文本、类别、layout",{"_index":2222,"t":{"1435":{"position":[[356,45]]}}}],["d_kd×dk",{"_index":1354,"t":{"1227":{"position":[[200,11]]}}}],["d_kl×dk",{"_index":1357,"t":{"1227":{"position":[[259,9]]}}}],["d_model",{"_index":1249,"t":{"1217":{"position":[[108,8],[141,7]]},"1223":{"position":[[305,8],[338,7]]}}}],["d_{k",{"_index":2554,"t":{"1506":{"position":[[913,4],[1036,4]]}}}],["d_{kl}(p\\space",{"_index":1473,"t":{"1287":{"position":[[1231,14]]}}}],["d_{kl}(q",{"_index":1455,"t":{"1287":{"position":[[759,8]]}}}],["dall",{"_index":2708,"t":{"1576":{"position":[[0,9],[191,17]]},"1578":{"position":[[265,4]]}}}],["data",{"_index":1167,"t":{"1185":{"position":[[238,4],[453,4],[496,5],[502,4]]},"1294":{"position":[[145,11]]},"1403":{"position":[[493,4]]},"1423":{"position":[[175,4]]},"1476":{"position":[[773,4]]},"1485":{"position":[[865,4]]},"1528":{"position":[[493,4]]},"1613":{"position":[[865,4]]},"1633":{"position":[[3817,4]]},"1636":{"position":[[183,5]]}}}],["data_dir",{"_index":1165,"t":{"1185":{"position":[[212,9]]}}}],["data_it",{"_index":1752,"t":{"1375":{"position":[[927,10],[1100,10]]}}}],["dataset",{"_index":1154,"t":{"1185":{"position":[[13,7],[174,7],[370,7]]},"1305":{"position":[[166,7]]},"1633":{"position":[[3390,8],[3438,8],[3693,7]]}}}],["daveho@cs.umd.edu",{"_index":176,"t":{"972":{"position":[[716,19]]}}}],["david",{"_index":173,"t":{"972":{"position":[[697,5]]}}}],["day",{"_index":2115,"t":{"1414":{"position":[[1314,4]]},"1423":{"position":[[446,4]]}}}],["ddd",{"_index":1347,"t":{"1223":{"position":[[201,5]]},"1225":{"position":[[29,3]]},"1633":{"position":[[1770,3]]}}}],["ddpm",{"_index":2248,"t":{"1440":{"position":[[109,8]]}}}],["ddpm、ddim、plms算法分析）、lat",{"_index":2135,"t":{"1421":{"position":[[98,38]]}}}],["ddpm论文中的原图来分析ddpm",{"_index":315,"t":{"986":{"position":[[854,31]]}}}],["ddpm（denois",{"_index":778,"t":{"1128":{"position":[[137,15]]}}}],["de",{"_index":2751,"t":{"1599":{"position":[[812,14],[827,12],[899,5],[912,4],[969,6],[1083,5],[1161,5],[1281,5],[1367,5],[1488,5],[1589,5]]}}}],["de(p,q)=(x−s)2+(y−t)2(1)d_e(p,q)=\\sqrt{(x",{"_index":503,"t":{"1037":{"position":[[177,41]]}}}],["death",{"_index":489,"t":{"1032":{"position":[[204,6]]}}}],["deathless",{"_index":488,"t":{"1032":{"position":[[194,9]]}}}],["debug",{"_index":279,"t":{"974":{"position":[[885,9],[980,9],[1002,7]]},"1774":{"position":[[1941,9],[2036,9],[2058,7]]}}}],["decod",{"_index":444,"t":{"1026":{"position":[[27,7],[180,18],[251,7],[329,8],[416,7],[467,18],[562,7]]},"1114":{"position":[[254,30]]},"1118":{"position":[[762,8]]},"1233":{"position":[[179,7]]},"1366":{"position":[[27,7],[180,18],[251,7],[329,8],[416,7],[467,18],[562,7]]},"1392":{"position":[[109,7]]},"1408":{"position":[[33,7]]},"1489":{"position":[[452,7]]},"1506":{"position":[[31,7],[1864,7]]},"1533":{"position":[[33,7]]},"1550":{"position":[[109,7]]},"1617":{"position":[[452,7]]}}}],["decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用teach",{"_index":453,"t":{"1028":{"position":[[215,82]]},"1368":{"position":[[215,82]]}}}],["decoder来说，它的输入是中间产物（即gener",{"_index":758,"t":{"1118":{"position":[[806,39]]}}}],["decoder每一步的输出是一个经过softmax的prob",{"_index":417,"t":{"1022":{"position":[[119,37]]},"1362":{"position":[[119,37]]}}}],["decoder的任务是生成输出，可以根据是否一次性生成输出分为autoregressive（自回归，abbr",{"_index":409,"t":{"1020":{"position":[[0,55]]},"1360":{"position":[[0,55]]}}}],["decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的decod",{"_index":433,"t":{"1022":{"position":[[988,68]]},"1362":{"position":[[988,68]]}}}],["decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向decoder的输出中加入end符号的生成，即每一次输出除了词汇表的所有词汇外还有end符号的概率，当end",{"_index":425,"t":{"1022":{"position":[[610,155]]},"1362":{"position":[[610,155]]}}}],["decoder的结构训练生成模型的decod",{"_index":765,"t":{"1118":{"position":[[1134,25]]}}}],["decoder结构，将每一层对应的featur",{"_index":3135,"t":{"1726":{"position":[[28,24]]}}}],["decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。nat的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于at",{"_index":414,"t":{"1020":{"position":[[252,158]]},"1360":{"position":[[252,158]]}}}],["decoder输出，使用3x3卷积以及双线性插值上采样到原始分辨率得到该层的特征图，且卷积核的个数为1，输出的featur",{"_index":3130,"t":{"1724":{"position":[[214,62]]}}}],["decoder阶段，每个block",{"_index":3128,"t":{"1724":{"position":[[80,32]]}}}],["decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token",{"_index":413,"t":{"1020":{"position":[[101,150]]},"1360":{"position":[[101,150]]}}}],["decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（encoder）的输出。特别地，首个时间步的输入是begin符号以及编码器（encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（encod",{"_index":419,"t":{"1022":{"position":[[230,158]]},"1362":{"position":[[230,158]]}}}],["decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，encod",{"_index":445,"t":{"1026":{"position":[[359,50]]},"1366":{"position":[[359,50]]}}}],["decompos",{"_index":2136,"t":{"1423":{"position":[[3,11]]}}}],["deep",{"_index":718,"t":{"1114":{"position":[[873,4]]}}}],["def",{"_index":1015,"t":{"1159":{"position":[[286,3]]},"1264":{"position":[[286,3]]},"1375":{"position":[[307,3],[364,3],[443,3],[855,3],[896,3],[1297,3],[1364,3],[1427,3]]}}}],["defin",{"_index":1252,"t":{"1217":{"position":[[288,6],[906,6],[3333,6]]},"1381":{"position":[[513,6]]},"1539":{"position":[[513,6]]}}}],["definit",{"_index":2970,"t":{"1636":{"position":[[63,10]]}}}],["delta",{"_index":1904,"t":{"1389":{"position":[[294,8]]},"1547":{"position":[[294,8]]}}}],["deltaxt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​∣t,z))+σt",{"_index":1903,"t":{"1389":{"position":[[236,54]]},"1547":{"position":[[236,54]]}}}],["delta}^{\\delta}\\sum_{b",{"_index":1603,"t":{"1321":{"position":[[131,24]]}}}],["delta}^{\\delta}{v_{a,b}*x_{i_a,j+b",{"_index":1604,"t":{"1321":{"position":[[156,37]]}}}],["demonstr",{"_index":1967,"t":{"1403":{"position":[[1039,13]]},"1528":{"position":[[1039,13]]}}}],["denois",{"_index":2139,"t":{"1423":{"position":[[76,9]]},"1433":{"position":[[70,9]]},"1435":{"position":[[42,9]]},"1512":{"position":[[1361,9],[1503,9]]},"1516":{"position":[[4,9]]},"1628":{"position":[[26,9]]},"1633":{"position":[[327,8]]}}}],["denoise模块的目标是预测出输入的噪声图片中的噪声，其资料可以通过对数据集中的图片不断加入从gaussian",{"_index":781,"t":{"1128":{"position":[[362,56]]}}}],["denos",{"_index":2614,"t":{"1512":{"position":[[1673,8]]}}}],["depend",{"_index":243,"t":{"974":{"position":[[75,6]]},"1494":{"position":[[597,16]]},"1622":{"position":[[597,16]]}}}],["depend以及mak",{"_index":3226,"t":{"1774":{"position":[[79,15]]}}}],["depend和mak",{"_index":3215,"t":{"1764":{"position":[[346,14]]},"1768":{"position":[[152,14]]}}}],["deploy",{"_index":1004,"t":{"1156":{"position":[[20,10]]},"1261":{"position":[[20,10]]},"1414":{"position":[[1468,10]]}}}],["depth",{"_index":3141,"t":{"1728":{"position":[[32,24]]}}}],["describ",{"_index":1065,"t":{"1163":{"position":[[682,10]]},"1268":{"position":[[682,10]]}}}],["design",{"_index":1938,"t":{"1403":{"position":[[388,6]]},"1414":{"position":[[273,8]]},"1528":{"position":[[388,6]]}}}],["desktop文件，因此在更换图标是最好直接更换在主题文件中替换icon，而不是更改desktop的icon",{"_index":3025,"t":{"1661":{"position":[[203,69]]}}}],["detail",{"_index":2111,"t":{"1414":{"position":[[1263,8]]},"1423":{"position":[[854,6]]}}}],["detect",{"_index":3004,"t":{"1648":{"position":[[145,8]]},"1722":{"position":[[22,32]]}}}],["dev/your_partit",{"_index":3055,"t":{"1668":{"position":[[72,19]]}}}],["devic",{"_index":859,"t":{"1147":{"position":[[83,7]]},"1252":{"position":[[83,7]]},"1375":{"position":[[1007,7],[1015,6],[1418,8]]}}}],["device=non",{"_index":1753,"t":{"1375":{"position":[[938,13]]}}}],["df",{"_index":3053,"t":{"1668":{"position":[[50,2]]}}}],["dfa",{"_index":74,"t":{"925":{"position":[[0,13],[14,9],[238,8],[390,12]]},"951":{"position":[[109,11],[272,11],[446,11],[633,11]]}}}],["dfa的可接受以及接受集的定义：从开始状态开始，经过该符号串表示的路径，若能到达终态则称该符号串可被改dfa",{"_index":76,"t":{"925":{"position":[[136,57]]}}}],["diffedit",{"_index":2847,"t":{"1633":{"position":[[1164,9]]}}}],["differ",{"_index":1554,"t":{"1305":{"position":[[258,9]]}}}],["differenti",{"_index":2825,"t":{"1633":{"position":[[172,12]]}}}],["diffus",{"_index":312,"t":{"986":{"position":[[813,9]]},"1112":{"position":[[53,19]]},"1114":{"position":[[680,9],[851,9]]},"1120":{"position":[[0,34]]},"1128":{"position":[[153,9],[480,9]]},"1161":{"position":[[1198,9]]},"1266":{"position":[[1198,9]]},"1381":{"position":[[362,9],[522,9]]},"1387":{"position":[[117,9],[878,14]]},"1403":{"position":[[862,9]]},"1405":{"position":[[250,9]]},"1414":{"position":[[122,9],[1971,9]]},"1421":{"position":[[55,9],[88,9],[137,9]]},"1423":{"position":[[100,9],[723,9],[984,9],[1187,9]]},"1426":{"position":[[433,9],[456,9]]},"1428":{"position":[[24,9]]},"1431":{"position":[[37,9],[357,9],[554,9]]},"1433":{"position":[[9,9]]},"1438":{"position":[[277,9]]},"1440":{"position":[[47,9],[87,15]]},"1485":{"position":[[462,9],[772,9]]},"1498":{"position":[[64,9]]},"1500":{"position":[[232,9]]},"1528":{"position":[[862,9]]},"1530":{"position":[[250,9]]},"1539":{"position":[[362,9],[522,9]]},"1545":{"position":[[117,9],[878,14]]},"1583":{"position":[[2072,9]]},"1585":{"position":[[73,9]]},"1613":{"position":[[462,9],[772,9]]},"1624":{"position":[[211,9]]},"1628":{"position":[[36,9],[105,9],[156,9]]},"1631":{"position":[[32,9],[64,9],[151,9],[240,9],[266,10],[288,9]]},"1633":{"position":[[1174,9],[1487,9],[2349,9],[2591,9],[2800,9],[3058,9],[3136,9],[3231,9],[3414,9],[3773,9],[3993,9],[4036,9],[4239,9],[4360,10],[4688,9],[5285,9],[5412,9],[5540,9],[5841,9],[5992,9],[6037,9],[7863,9],[8616,9],[8729,9]]},"1636":{"position":[[20,9],[96,9],[263,9]]},"1638":{"position":[[62,9],[137,10]]}}}],["diffusion、dal",{"_index":696,"t":{"1114":{"position":[[313,14]]}}}],["diffusion以及dal",{"_index":700,"t":{"1114":{"position":[[400,15]]}}}],["diffusion学习笔记（十二）——rectifi",{"_index":2728,"t":{"1585":{"position":[[143,28]]}}}],["diffusion是目前图像生成的sota模型之一，在本章中我们快速的了解一下st",{"_index":689,"t":{"1112":{"position":[[7,45]]}}}],["diffusion等sota",{"_index":690,"t":{"1114":{"position":[[11,66]]}}}],["dim",{"_index":1293,"t":{"1217":{"position":[[1890,4],[4186,4]]},"1287":{"position":[[1617,4]]}}}],["dim=0",{"_index":1671,"t":{"1347":{"position":[[202,6]]}}}],["dim=1",{"_index":1676,"t":{"1347":{"position":[[316,6],[687,26]]}}}],["dim_feedforward=1024",{"_index":1028,"t":{"1159":{"position":[[550,21]]},"1264":{"position":[[550,21]]}}}],["dimens",{"_index":1295,"t":{"1217":{"position":[[1919,9],[2755,9],[4215,9]]},"1347":{"position":[[667,9]]},"1485":{"position":[[812,10]]},"1613":{"position":[[812,10]]}}}],["dim指定操作的维度，dim",{"_index":1688,"t":{"1347":{"position":[[634,23]]}}}],["direct",{"_index":2347,"t":{"1473":{"position":[[169,9]]},"1481":{"position":[[621,17]]},"1652":{"position":[[52,10],[88,11],[129,9],[198,9]]}}}],["directli",{"_index":2147,"t":{"1423":{"position":[[361,8]]}}}],["directori",{"_index":1168,"t":{"1185":{"position":[[243,10],[378,9],[507,10]]}}}],["dirichlet",{"_index":519,"t":{"1043":{"position":[[0,32]]}}}],["discret",{"_index":1838,"t":{"1381":{"position":[[152,8],[620,8]]},"1539":{"position":[[152,8],[620,8]]}}}],["discrimin",{"_index":352,"t":{"1001":{"position":[[224,19]]},"1005":{"position":[[4,37]]},"1476":{"position":[[417,14]]}}}],["disney",{"_index":837,"t":{"1143":{"position":[[425,7]]},"1145":{"position":[[105,14]]},"1163":{"position":[[721,6]]},"1248":{"position":[[425,7]]},"1250":{"position":[[105,14]]},"1268":{"position":[[721,6]]}}}],["distanc",{"_index":724,"t":{"1116":{"position":[[67,10]]},"1151":{"position":[[2450,10]]},"1256":{"position":[[2450,10]]},"1485":{"position":[[606,8]]},"1613":{"position":[[606,8]]}}}],["distance（fid",{"_index":938,"t":{"1151":{"position":[[1222,13]]},"1256":{"position":[[1222,13]]}}}],["distinct",{"_index":1066,"t":{"1163":{"position":[[697,11]]},"1268":{"position":[[697,11]]}}}],["distribut",{"_index":418,"t":{"1022":{"position":[[157,63]]},"1151":{"position":[[1412,56]]},"1217":{"position":[[733,12],[780,14]]},"1256":{"position":[[1412,56]]},"1362":{"position":[[157,63]]},"1381":{"position":[[216,13],[341,12]]},"1485":{"position":[[359,13]]},"1504":{"position":[[152,38]]},"1539":{"position":[[216,13],[341,12]]},"1613":{"position":[[359,13]]},"1631":{"position":[[211,13]]},"1633":{"position":[[687,13]]}}}],["distribution中sample出z\\mathbf{z}z，否则z=0\\mathbf{z}=\\mathbf{0}z=0",{"_index":333,"t":{"990":{"position":[[123,63]]}}}],["distribution中sample出图片大小的噪声xt\\mathbf{x}_txt",{"_index":330,"t":{"990":{"position":[[8,45]]}}}],["distribution中sample出的与x0\\mathbf{x}_0x0",{"_index":319,"t":{"988":{"position":[[116,47]]}}}],["distribution中sample出的噪声的方法来获得，这个加噪声的过程我们称为forward",{"_index":782,"t":{"1128":{"position":[[419,49]]}}}],["distribution）中sampl",{"_index":686,"t":{"1110":{"position":[[76,35]]}}}],["distribution），并不是encoder直接输出一个distrubut",{"_index":772,"t":{"1122":{"position":[[185,43]]}}}],["dit",{"_index":1960,"t":{"1403":{"position":[[892,4]]},"1485":{"position":[[794,5]]},"1528":{"position":[[892,4]]},"1613":{"position":[[794,5]]}}}],["div[class^='announcementbar_",{"_index":2984,"t":{"1644":{"position":[[180,30]]}}}],["diverg",{"_index":2428,"t":{"1485":{"position":[[203,9]]},"1518":{"position":[[318,10]]},"1613":{"position":[[203,9]]}}}],["divergence)，又称相对熵（rel",{"_index":1448,"t":{"1287":{"position":[[510,26]]}}}],["division(",{"_index":3092,"t":{"1689":{"position":[[934,11]]}}}],["division(str",{"_index":3077,"t":{"1687":{"position":[[7,15]]},"1689":{"position":[[94,15]]}}}],["divisor",{"_index":3078,"t":{"1687":{"position":[[30,8],[279,8],[349,7],[384,8]]},"1689":{"position":[[117,8],[366,8],[436,7],[471,8]]}}}],["dk",{"_index":1319,"t":{"1217":{"position":[[2765,3],[2864,3]]}}}],["dk\\sqrt{d_k}dk",{"_index":1361,"t":{"1227":{"position":[[423,28]]}}}],["dkd_kdk",{"_index":1355,"t":{"1227":{"position":[[212,8]]}}}],["dkl(p",{"_index":1451,"t":{"1287":{"position":[[699,5]]}}}],["dkl(p,q)=log⁡σ2σ1+σ12+(μ1−μ2)22σ22−12d_{kl}(p,q)=\\log\\frac{\\sigma_2}{\\sigma_1}+\\frac{\\sigma_1^2+(\\mu_1",{"_index":2290,"t":{"1445":{"position":[[756,102]]}}}],["dkl(plabel",{"_index":1465,"t":{"1287":{"position":[[983,14]]}}}],["dlib",{"_index":996,"t":{"1154":{"position":[[409,4],[530,4]]},"1259":{"position":[[409,4],[530,4]]}}}],["dl×d",{"_index":1349,"t":{"1225":{"position":[[66,4]]}}}],["dm",{"_index":1985,"t":{"1405":{"position":[[275,3]]},"1423":{"position":[[117,5],[411,3],[519,2],[1528,4]]},"1502":{"position":[[169,2]]},"1530":{"position":[[275,3]]}}}],["dock显示的图标是全局图标，程序启动器的desktop文件位于/usr/share/applications中，全局主题中图标主题的程序logo位于~/.local/share/icons/mko",{"_index":3021,"t":{"1661":{"position":[[0,100]]}}}],["docusauru",{"_index":1,"t":{"890":{"position":[[10,10]]},"1646":{"position":[[8,10]]},"1650":{"position":[[11,10],[138,10],[213,10]]},"1652":{"position":[[0,10],[100,10]]}}}],["docusaurus.config.j",{"_index":3002,"t":{"1648":{"position":[[94,20]]}}}],["docusaurus.config.js的themeconfig",{"_index":2976,"t":{"1644":{"position":[[7,40]]}}}],["dog",{"_index":480,"t":{"1032":{"position":[[93,3]]}}}],["domain",{"_index":297,"t":{"986":{"position":[[413,32]]},"1110":{"position":[[392,32]]},"1161":{"position":[[768,6],[879,6]]},"1163":{"position":[[0,23],[33,6],[990,6],[1015,6]]},"1266":{"position":[[768,6],[879,6]]},"1268":{"position":[[0,23],[33,6],[990,6],[1015,6]]},"1381":{"position":[[1033,7]]},"1403":{"position":[[162,7]]},"1414":{"position":[[146,6]]},"1473":{"position":[[195,6],[234,6]]},"1476":{"position":[[637,6]]},"1528":{"position":[[162,7]]},"1539":{"position":[[1033,7]]},"1633":{"position":[[6811,6]]}}}],["domain）符合某种分布。因此目前的sota模型除了将文字prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（sourc",{"_index":296,"t":{"986":{"position":[[313,99]]},"1110":{"position":[[292,99]]}}}],["done",{"_index":239,"t":{"972":{"position":[[2334,5]]},"1217":{"position":[[818,4]]}}}],["don’t",{"_index":1313,"t":{"1217":{"position":[[2647,5],[2839,5]]}}}],["dot",{"_index":1302,"t":{"1217":{"position":[[2225,3],[2662,3],[2804,3],[2875,3],[2977,3],[2990,6],[4384,3]]},"1227":{"position":[[291,17]]},"1633":{"position":[[589,4]]}}}],["dote",{"_index":1299,"t":{"1217":{"position":[[2163,6],[4322,6]]}}}],["download",{"_index":1163,"t":{"1185":{"position":[[148,8]]}}}],["downsampl",{"_index":1943,"t":{"1403":{"position":[[580,10]]},"1528":{"position":[[580,10]]}}}],["downstream",{"_index":1081,"t":{"1171":{"position":[[318,18]]},"1175":{"position":[[898,10]]},"1485":{"position":[[1120,10]]},"1613":{"position":[[1120,10]]}}}],["do循环中，list",{"_index":49,"t":{"904":{"position":[[152,33]]}}}],["dreambooth",{"_index":2916,"t":{"1633":{"position":[[5803,11]]}}}],["drift",{"_index":2946,"t":{"1633":{"position":[[7047,40],[7768,13]]}}}],["drive",{"_index":808,"t":{"1137":{"position":[[21,5]]},"1151":{"position":[[20,5]]},"1185":{"position":[[194,6]]},"1242":{"position":[[21,5]]},"1256":{"position":[[20,5]]}}}],["driven",{"_index":2917,"t":{"1633":{"position":[[5870,6]]}}}],["dropout",{"_index":1502,"t":{"1292":{"position":[[9,14]]},"1294":{"position":[[100,44]]},"1524":{"position":[[1531,8]]}}}],["dropout=0.1",{"_index":1029,"t":{"1159":{"position":[[572,12]]},"1264":{"position":[[572,12]]}}}],["dtype=torch.float32",{"_index":1255,"t":{"1217":{"position":[[416,20],[1021,20],[1111,20],[1201,20],[3463,20],[3605,20],[3695,20],[3785,20]]},"1603":{"position":[[322,20]]}}}],["due",{"_index":2152,"t":{"1423":{"position":[[478,3]]}}}],["dvərˈseriəl",{"_index":345,"t":{"992":{"position":[[35,15]]}}}],["dynam",{"_index":2736,"t":{"1597":{"position":[[215,59]]}}}],["d}\\sigma}{{\\rm",{"_index":1397,"t":{"1280":{"position":[[95,14]]}}}],["d}etgt​∈rt×d",{"_index":2855,"t":{"1633":{"position":[[1729,15]]}}}],["d}f(x)}{{\\text",{"_index":1415,"t":{"1282":{"position":[[139,14]]}}}],["d}x",{"_index":1398,"t":{"1280":{"position":[[110,4]]},"1282":{"position":[[154,4]]}}}],["d×dkd",{"_index":1353,"t":{"1227":{"position":[[187,5]]}}}],["e",{"_index":119,"t":{"966":{"position":[[97,2],[126,4],[147,1]]},"1151":{"position":[[2252,1],[2581,1]]},"1256":{"position":[[2252,1],[2581,1]]},"1280":{"position":[[39,3]]},"1405":{"position":[[86,1]]},"1530":{"position":[[86,1]]},"1576":{"position":[[10,1],[209,1]]},"1578":{"position":[[270,1]]},"1599":{"position":[[261,5],[333,4],[539,4],[604,4],[709,4],[776,4],[873,4],[952,4],[1057,4],[1144,4],[1255,4],[1350,4],[1462,4],[1572,4]]},"1677":{"position":[[181,1],[279,1]]}}}],["e(ci)\\mathcal{e}(c_i)e(ci",{"_index":2908,"t":{"1633":{"position":[[5243,28],[5327,30]]}}}],["e.g",{"_index":1929,"t":{"1403":{"position":[[240,5]]},"1528":{"position":[[240,5]]}}}],["e4",{"_index":988,"t":{"1154":{"position":[[34,3],[164,3],[246,3],[651,3]]},"1259":{"position":[[34,3],[164,3],[246,3],[651,3]]}}}],["e\\mathbb{e}",{"_index":2903,"t":{"1633":{"position":[[5031,12]]}}}],["e\\mathcal{e}",{"_index":2187,"t":{"1431":{"position":[[673,13]]},"1433":{"position":[[541,13]]},"1633":{"position":[[4395,13]]}}}],["e_{q_\\phi(z",{"_index":2550,"t":{"1506":{"position":[[862,11]]}}}],["e_{x\\sim",{"_index":358,"t":{"1007":{"position":[[207,8]]}}}],["e_{z\\sim",{"_index":363,"t":{"1007":{"position":[[382,8],[833,8]]}}}],["each",{"_index":1072,"t":{"1163":{"position":[[810,4]]},"1213":{"position":[[181,4]]},"1268":{"position":[[810,4]]},"1305":{"position":[[285,4]]},"1307":{"position":[[3,4],[199,4],[267,4]]}}}],["echo",{"_index":234,"t":{"972":{"position":[[2179,4]]},"1677":{"position":[[175,4],[273,4]]}}}],["ediff",{"_index":2818,"t":{"1631":{"position":[[74,5]]}}}],["edit",{"_index":249,"t":{"974":{"position":[[412,4]]},"1485":{"position":[[1184,8]]},"1613":{"position":[[1184,8]]},"1633":{"position":[[148,7],[609,7],[1205,7],[1474,7],[3300,7],[3382,7],[3511,6],[3825,4],[3900,4],[4128,6],[4200,6],[4286,6]]},"1638":{"position":[[117,7]]},"1774":{"position":[[1468,4]]}}}],["edit_direciton",{"_index":905,"t":{"1149":{"position":[[1068,35]]},"1254":{"position":[[1068,35]]}}}],["edit_direct",{"_index":912,"t":{"1149":{"position":[[1283,14]]},"1254":{"position":[[1283,14]]}}}],["effect",{"_index":1849,"t":{"1381":{"position":[[664,13]]},"1403":{"position":[[1133,13]]},"1528":{"position":[[1133,13]]},"1539":{"position":[[664,13]]}}}],["effici",{"_index":2119,"t":{"1414":{"position":[[1429,10]]},"1485":{"position":[[870,11]]},"1613":{"position":[[870,11]]}}}],["efro",{"_index":2380,"t":{"1476":{"position":[[547,6]]}}}],["ehpf",{"_index":597,"t":{"1063":{"position":[[414,14]]}}}],["ei",{"_index":3122,"t":{"1714":{"position":[[156,20]]}}}],["elbo",{"_index":2529,"t":{"1504":{"position":[[0,25],[87,4],[253,4]]},"1506":{"position":[[5,4],[160,4],[235,4]]},"1512":{"position":[[1334,4],[1663,4]]}}}],["element",{"_index":394,"t":{"1016":{"position":[[1053,32]]},"1147":{"position":[[1068,7]]},"1149":{"position":[[1121,7],[1244,8]]},"1161":{"position":[[433,7],[591,7]]},"1163":{"position":[[834,7]]},"1252":{"position":[[1068,7]]},"1254":{"position":[[1121,7],[1244,8]]},"1266":{"position":[[433,7],[591,7]]},"1268":{"position":[[834,7]]},"1356":{"position":[[1053,32]]},"1506":{"position":[[1737,7]]}}}],["elf",{"_index":976,"t":{"1151":{"position":[[2318,3],[2629,3]]},"1256":{"position":[[2318,3],[2629,3]]}}}],["elf_i386",{"_index":3261,"t":{"1774":{"position":[[1088,8]]}}}],["eli",{"_index":2383,"t":{"1476":{"position":[[568,3]]}}}],["elimin",{"_index":1848,"t":{"1381":{"position":[[596,10]]},"1539":{"position":[[596,10]]}}}],["ell_u",{"_index":2040,"t":{"1410":{"position":[[2127,6]]},"1535":{"position":[[2128,6]]}}}],["ell_u)ℓg​=ℓu​+s(ℓc​−ℓu",{"_index":2042,"t":{"1410":{"position":[[2147,25]]},"1535":{"position":[[2148,25]]}}}],["elpf",{"_index":576,"t":{"1061":{"position":[[713,14]]}}}],["embed",{"_index":843,"t":{"1143":{"position":[[842,10]]},"1177":{"position":[[191,10]]},"1248":{"position":[[842,10]]},"1462":{"position":[[243,9],[307,9]]},"1597":{"position":[[12,14],[65,11]]},"1633":{"position":[[2228,9],[2421,9],[2664,9]]}}}],["embedding中的cbow，bert可以看作是contextu",{"_index":1137,"t":{"1177":{"position":[[146,39]]}}}],["embedding和posit",{"_index":399,"t":{"1018":{"position":[[10,20]]},"1358":{"position":[[10,20]]}}}],["embedding相加得到。输入序列经过mutil",{"_index":400,"t":{"1018":{"position":[[31,25]]},"1358":{"position":[[31,25]]}}}],["embedding）是一种位置编码方法，旨在解决绝对位置编码在处理较长序列时的局限性。rop",{"_index":2018,"t":{"1410":{"position":[[1026,47]]},"1535":{"position":[[1027,47]]}}}],["empir",{"_index":2441,"t":{"1485":{"position":[[726,11]]},"1613":{"position":[[726,11]]}}}],["employ",{"_index":2098,"t":{"1414":{"position":[[985,7]]}}}],["emul",{"_index":2457,"t":{"1485":{"position":[[1233,8]]},"1613":{"position":[[1233,8]]}}}],["enabl",{"_index":2153,"t":{"1423":{"position":[[512,6]]}}}],["enabled=0",{"_index":274,"t":{"974":{"position":[[784,9],[812,9],[839,9]]},"1774":{"position":[[1840,9],[1868,9],[1895,9]]}}}],["encdoer",{"_index":906,"t":{"1149":{"position":[[1110,7]]},"1254":{"position":[[1110,7]]}}}],["encod",{"_index":304,"t":{"986":{"position":[[576,8]]},"1026":{"position":[[14,9],[35,28],[135,18],[319,7],[349,7],[457,7],[552,7]]},"1114":{"position":[[602,7],[753,7]]},"1122":{"position":[[24,8]]},"1124":{"position":[[129,58]]},"1154":{"position":[[38,7],[168,7],[250,7]]},"1156":{"position":[[194,22]]},"1159":{"position":[[158,26]]},"1171":{"position":[[69,7]]},"1259":{"position":[[38,7],[168,7],[250,7]]},"1261":{"position":[[194,22]]},"1264":{"position":[[158,26]]},"1366":{"position":[[14,9],[35,28],[135,18],[319,7],[349,7],[457,7],[552,7]]},"1408":{"position":[[15,7]]},"1464":{"position":[[165,7]]},"1489":{"position":[[1227,7]]},"1494":{"position":[[116,7]]},"1504":{"position":[[201,25]]},"1506":{"position":[[135,7],[284,7],[1872,19]]},"1510":{"position":[[66,7],[79,6],[194,7]]},"1533":{"position":[[15,7]]},"1583":{"position":[[2010,7]]},"1599":{"position":[[51,9]]},"1617":{"position":[[1227,7]]},"1622":{"position":[[116,7]]},"1624":{"position":[[137,11]]},"1724":{"position":[[194,19]]}}}],["encoder、decod",{"_index":2720,"t":{"1583":{"position":[[901,15]]}}}],["encoder中得到一个representation，再将对应prompt生成的图像输入至clip的imag",{"_index":739,"t":{"1116":{"position":[[1054,55]]}}}],["encoder中得到对应的representation，计算二者之间的距离，即得到clip",{"_index":740,"t":{"1116":{"position":[[1110,45]]}}}],["encoder中输入数据集中的高清预期图片，encoder将其转换为某种lat",{"_index":766,"t":{"1118":{"position":[[1160,48]]}}}],["encoder之后加入pixel",{"_index":1014,"t":{"1159":{"position":[[254,16]]},"1264":{"position":[[254,16]]}}}],["encoder使用数据集中的图片（即期待模型最终输出的图片）作为输入，输出该图片的某种lat",{"_index":752,"t":{"1118":{"position":[[604,52]]}}}],["encoder可以帮助模型理解prompt",{"_index":705,"t":{"1114":{"position":[[531,30]]}}}],["encoder后得到其在clip空间的编码表示。将源域的prompt文字和图像编码表示作为contrast",{"_index":2420,"t":{"1481":{"position":[[489,56]]}}}],["encoder后的编码共同作为domain",{"_index":2416,"t":{"1481":{"position":[[324,21]]}}}],["encoder和decoder的桥梁，也是decod",{"_index":441,"t":{"1022":{"position":[[1441,46]]},"1362":{"position":[[1441,46]]}}}],["encoder和生成模型的decod",{"_index":768,"t":{"1118":{"position":[[1307,27]]}}}],["encoder得到源域图片prompt描述在clip空间的编码表示，同时源域图像再经过来自clip的imag",{"_index":2419,"t":{"1481":{"position":[[433,55]]}}}],["encoder得到目标域图片prompt在clip空间的编码表示，并与目标域标签经过text",{"_index":2415,"t":{"1481":{"position":[[277,46]]}}}],["encoder的多头自注意力不同，在decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入teach",{"_index":457,"t":{"1030":{"position":[[48,84]]},"1370":{"position":[[48,84]]}}}],["encoder的模型大小对图像生成模型的影响是非常大的。text",{"_index":704,"t":{"1114":{"position":[[498,32]]}}}],["encoder结构如下图所示。其中，add指的是残差连接residu",{"_index":379,"t":{"1014":{"position":[[12,36]]},"1354":{"position":[[12,36]]}}}],["encoder设计为可逆的（invertible），在训练阶段喂入多张图片，期待模型的向量符合某个随机分布。而在预测阶段，由于encoder是可逆的，输入从该随机分布中sampl",{"_index":773,"t":{"1124":{"position":[[0,128]]}}}],["encoder输出的prompt表示以及从随机分布sampl",{"_index":694,"t":{"1114":{"position":[[138,62]]}}}],["encoder阶段，每个block之后使用maxpool",{"_index":3127,"t":{"1724":{"position":[[42,37]]}}}],["encoder（t5",{"_index":2726,"t":{"1585":{"position":[[21,11]]}}}],["encoder）τθ\\tau_\\theta",{"_index":2219,"t":{"1435":{"position":[[261,29]]}}}],["encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（decod",{"_index":442,"t":{"1022":{"position":[[1488,102]]},"1362":{"position":[[1488,102]]}}}],["encoder，psp",{"_index":1002,"t":{"1154":{"position":[[655,11]]},"1259":{"position":[[655,11]]}}}],["encoder，使用encod",{"_index":764,"t":{"1118":{"position":[[1116,17]]}}}],["encoder：根据输入的text",{"_index":691,"t":{"1114":{"position":[[83,17]]}}}],["encrypt",{"_index":3206,"t":{"1756":{"position":[[22,10]]},"1758":{"position":[[33,10],[77,10]]},"1760":{"position":[[33,10],[77,10]]}}}],["end",{"_index":128,"t":{"966":{"position":[[310,4],[345,6],[372,3],[418,4]]},"1022":{"position":[[603,6]]},"1335":{"position":[[639,3]]},"1362":{"position":[[603,6]]},"1631":{"position":[[277,3],[284,3]]}}}],["end[i",{"_index":114,"t":{"964":{"position":[[270,18]]}}}],["endl",{"_index":20,"t":{"896":{"position":[[193,5]]},"902":{"position":[[352,5],[391,5]]},"1689":{"position":[[1089,5]]}}}],["endoftext",{"_index":840,"t":{"1143":{"position":[[640,9]]},"1248":{"position":[[640,9]]}}}],["endow",{"_index":2348,"t":{"1473":{"position":[[214,8]]}}}],["end{align*}p(b,c∣a)​=p(a)p(a,b,c)​=p(c∣a,b)⋅p(b∣a)p(a,b,c)​p(a,b,c)​=p(b∣a)⋅p(c∣a,b",{"_index":2286,"t":{"1445":{"position":[[511,86]]}}}],["end{aligned}∇logp(xt​∣y)​=∇logp(xt​)+γ(∇logp(xt​∣y)−∇logp(xt​))=∇logp(xt​)+γ∇logp(xt​∣y)−γ∇logp(xt​)=condit",{"_index":2672,"t":{"1524":{"position":[[1026,113]]}}}],["end{align}h(p",{"_index":1476,"t":{"1287":{"position":[[1306,15]]}}}],["end{align}h(p)​=−i∑n​pi",{"_index":1444,"t":{"1287":{"position":[[408,25]]}}}],["end{cas",{"_index":1412,"t":{"1282":{"position":[[66,11],[202,11]]}}}],["end{gathered}argϕ,θmax​eqϕ​(z∣x)​[logpθ​(x∣z)]−dkl​(qϕ​(z∣x)∥p(z))=argϕ,θmax​l=1∑l​logpθ​(x∣z(l))−dkl​(qϕ​(z∣x)∥p(z",{"_index":2560,"t":{"1506":{"position":[[1078,119]]}}}],["energi",{"_index":2525,"t":{"1500":{"position":[[125,6],[174,6],[196,6]]},"1518":{"position":[[21,6],[90,6],[197,6]]}}}],["english",{"_index":2088,"t":{"1414":{"position":[[778,7]]}}}],["enhanc",{"_index":2350,"t":{"1473":{"position":[[264,8]]}}}],["enjoy",{"_index":1859,"t":{"1381":{"position":[[886,8]]},"1539":{"position":[[886,8]]}}}],["entail",{"_index":1109,"t":{"1175":{"position":[[463,43]]}}}],["entir",{"_index":1073,"t":{"1163":{"position":[[870,6]]},"1268":{"position":[[870,6]]}}}],["entri",{"_index":169,"t":{"972":{"position":[[654,5],[1737,5]]}}}],["entropi",{"_index":1142,"t":{"1179":{"position":[[131,7]]},"1381":{"position":[[496,7]]},"1539":{"position":[[496,7]]}}}],["entropy)，是描述两个概率分布p和q",{"_index":1449,"t":{"1287":{"position":[[537,29]]}}}],["entropy中的entropi",{"_index":1427,"t":{"1287":{"position":[[11,50]]}}}],["entrpoy",{"_index":1432,"t":{"1287":{"position":[[97,7]]}}}],["enumerate(train_it",{"_index":1797,"t":{"1375":{"position":[[1927,22]]}}}],["eopt\\mathbf{e}_{\\text",{"_index":2867,"t":{"1633":{"position":[[2247,21]]}}}],["eopte_{opt}eopt",{"_index":2851,"t":{"1633":{"position":[[1626,18],[2454,16],[2505,26],[2873,26]]}}}],["eot",{"_index":826,"t":{"1143":{"position":[[156,4]]},"1145":{"position":[[120,3],[142,3],[188,6]]},"1161":{"position":[[203,3]]},"1248":{"position":[[156,4]]},"1250":{"position":[[120,3],[142,3],[188,6]]},"1266":{"position":[[203,3]]}}}],["epoch",{"_index":1214,"t":{"1201":{"position":[[313,8]]},"1375":{"position":[[1878,5]]}}}],["epsilon",{"_index":2203,"t":{"1433":{"position":[[312,8],[773,8]]},"1435":{"position":[[1069,8]]},"1506":{"position":[[1499,9],[1509,8],[1665,9],[1675,8]]},"1633":{"position":[[6476,9],[6552,9],[8242,9],[8252,10],[8327,9],[8438,10]]}}}],["epsilon_\\theta",{"_index":328,"t":{"988":{"position":[[812,34]]},"1633":{"position":[[4561,20],[5056,22]]}}}],["epsilon_\\theta\\left(x_t",{"_index":1901,"t":{"1389":{"position":[[178,24]]},"1433":{"position":[[368,25]]},"1547":{"position":[[178,24]]}}}],["epsilon_\\theta\\left(z_t",{"_index":2213,"t":{"1433":{"position":[[829,25]]},"1435":{"position":[[1125,25]]},"1633":{"position":[[4880,25]]}}}],["epsilon_{\\theta}ϵθ​是nois",{"_index":325,"t":{"988":{"position":[[684,28]]}}}],["epsilonzt​:=αt​x+σt",{"_index":2931,"t":{"1633":{"position":[[6374,22]]}}}],["epsilon}\\left[\\left\\|\\boldsymbol{\\epsilon",{"_index":2860,"t":{"1633":{"position":[[1919,43]]}}}],["epsilonϵ^θ​(xt​,t,i",{"_index":2643,"t":{"1520":{"position":[[508,23]]}}}],["epsilonϵ是从norm",{"_index":318,"t":{"988":{"position":[[97,18]]}}}],["equal",{"_index":2196,"t":{"1433":{"position":[[25,23]]}}}],["equallinear",{"_index":870,"t":{"1147":{"position":[[529,11],[649,12]]},"1252":{"position":[[529,11],[649,12]]}}}],["equallinear(512",{"_index":1037,"t":{"1159":{"position":[[821,16],[949,16]]},"1264":{"position":[[821,16],[949,16]]}}}],["equat",{"_index":2826,"t":{"1633":{"position":[[185,10]]},"1650":{"position":[[37,10]]}}}],["eqϕ(z∣x)[log⁡pθ(x∣z)]e_{q_\\phi(z|x)}\\left[\\log",{"_index":2544,"t":{"1506":{"position":[[615,46]]}}}],["error",{"_index":3231,"t":{"1774":{"position":[[347,6]]}}}],["establish",{"_index":2101,"t":{"1414":{"position":[[1036,11]]}}}],["estim",{"_index":1566,"t":{"1307":{"position":[[330,8]]}}}],["eta",{"_index":1534,"t":{"1302":{"position":[[434,4],[453,4]]}}}],["eta)\\cdot\\mathbf{e}_{opt}eˉ=η⋅etgt​+(1−η)⋅eopt",{"_index":2876,"t":{"1633":{"position":[[2966,48]]}}}],["etc",{"_index":833,"t":{"1143":{"position":[[224,5],[496,5]]},"1248":{"position":[[224,5],[496,5]]}}}],["etgte_{tgt}etgt",{"_index":2850,"t":{"1633":{"position":[[1562,21],[1584,16],[2678,16],[2843,16]]}}}],["etgt∈rt×d\\mathbf{e}_{t",{"_index":2852,"t":{"1633":{"position":[[1676,22]]}}}],["evalu",{"_index":1545,"t":{"1305":{"position":[[67,8]]},"1381":{"position":[[651,8]]},"1423":{"position":[[496,12]]},"1539":{"position":[[651,8]]}}}],["evaluate_accuracy_gpu(net",{"_index":1751,"t":{"1375":{"position":[[900,26],[2378,26]]}}}],["evaluation）是一个评估自然语言处理模型在多个任务上综合性能的基准（benchmark）。它旨在测试模型对各种语言任务的通用理解能力。glu",{"_index":1098,"t":{"1175":{"position":[[139,75]]}}}],["evid",{"_index":2452,"t":{"1485":{"position":[[1052,9]]},"1613":{"position":[[1052,9]]}}}],["ex,c,ϵ,t[wt∥x~θ(αtx+σtϵ,c)−x∥22]\\mathbb{e}_{\\mathbf{x",{"_index":2932,"t":{"1633":{"position":[[6408,55]]}}}],["ex,c,ϵ,ϵ′,t[wt∥x^θ(αtx+σtϵ,c)−x∥22+λwt′∥x^θ(αt′xpr+σt′ϵ′,cpr)−xpr∥22]\\mathbb{e}_{\\mathbf{x",{"_index":2959,"t":{"1633":{"position":[[8137,92]]}}}],["ex\\mathbb{e}_xex",{"_index":923,"t":{"1151":{"position":[[739,17]]},"1256":{"position":[[739,17]]}}}],["exactli",{"_index":1562,"t":{"1307":{"position":[[220,7]]}}}],["exampl",{"_index":246,"t":{"974":{"position":[[370,7]]},"1633":{"position":[[3730,9]]},"1774":{"position":[[1426,7]]}}}],["examples/sec",{"_index":1819,"t":{"1375":{"position":[[2596,12]]}}}],["except",{"_index":2078,"t":{"1414":{"position":[[603,11]]}}}],["excit",{"_index":3200,"t":{"1751":{"position":[[12,10]]}}}],["excitation激励操作就是通过sigmoid",{"_index":3204,"t":{"1751":{"position":[[153,42]]}}}],["execut",{"_index":3248,"t":{"1774":{"position":[[788,7]]}}}],["exhibit",{"_index":2444,"t":{"1485":{"position":[[921,8]]},"1613":{"position":[[921,8]]}}}],["exit",{"_index":144,"t":{"972":{"position":[[109,4],[1321,4]]}}}],["exit(0",{"_index":240,"t":{"972":{"position":[[2343,8]]}}}],["exit(1",{"_index":162,"t":{"972":{"position":[[426,8],[1641,8]]}}}],["exp\\left(\\frac{\\log(p(x_j))}{t}\\right)}p′(xi​)=∑j​exp(tlog(p(xj​))​)exp(tlog(p(xi",{"_index":630,"t":{"1095":{"position":[[237,88]]}}}],["expens",{"_index":2151,"t":{"1423":{"position":[[468,9]]}}}],["expert",{"_index":2068,"t":{"1414":{"position":[[319,6]]}}}],["expert，semvi",{"_index":2125,"t":{"1414":{"position":[[1695,35]]}}}],["explor",{"_index":1942,"t":{"1403":{"position":[[527,11]]},"1485":{"position":[[1376,11]]},"1528":{"position":[[527,11]]},"1613":{"position":[[1376,11]]}}}],["export",{"_index":3063,"t":{"1677":{"position":[[52,6],[93,6],[133,6]]}}}],["exp⁡\\expexp",{"_index":926,"t":{"1151":{"position":[[828,14]]},"1256":{"position":[[828,14]]}}}],["extra_c_opt",{"_index":3267,"t":{"1774":{"position":[[1271,15],[1341,15]]}}}],["extract",{"_index":1130,"t":{"1175":{"position":[[1160,10]]}}}],["eˉ=η⋅etgt+(1−η)⋅eopt\\bar{\\mathbf{e}}=\\eta\\cdot\\mathbf{e}_{tgt}+(1",{"_index":2875,"t":{"1633":{"position":[[2900,65]]}}}],["e将lat",{"_index":701,"t":{"1114":{"position":[[416,8]]}}}],["e系列以及google的imagen",{"_index":697,"t":{"1114":{"position":[[328,24]]}}}],["f",{"_index":1333,"t":{"1217":{"position":[[3277,1]]},"1280":{"position":[[289,1]]},"1282":{"position":[[280,1]]},"1375":{"position":[[94,1]]}}}],["f(u)=∑x=0n−1f(x)e−j2πuxn(9)f(u)=\\sum_{x=0}^{n",{"_index":535,"t":{"1043":{"position":[[897,45]]}}}],["f(u)=∫−∞+∞f(x)e−j2πuxdx(5)f(u)=\\int_",{"_index":521,"t":{"1043":{"position":[[295,37]]}}}],["f(u,v)=∑x=0m−1∑y=0n−1f(x,y)e−j2π(uxm+vyn)(11)f(u,v)=\\sum_{x=0}^{m",{"_index":542,"t":{"1043":{"position":[[1158,65]]}}}],["f(u,v)=∫−∞∞∫−∞∞f(x,y)e−j2π(ux+vy)dxdy(7)f(u,v)=\\int_",{"_index":528,"t":{"1043":{"position":[[528,53]]}}}],["f(x",{"_index":1410,"t":{"1282":{"position":[[18,4]]},"1285":{"position":[[176,4]]}}}],["f(x)=1n∑u=0n−1f(u)ej2πuxn(10)f(x)=\\frac{1}{n}\\sum_{u=0}^{n",{"_index":539,"t":{"1043":{"position":[[1020,58]]}}}],["f(x)={0x<0xx≥0(3",{"_index":1409,"t":{"1282":{"position":[[0,17]]}}}],["f(x)=∫−∞∞f(u)ej2πuxdu(6)f(x)=\\int_",{"_index":525,"t":{"1043":{"position":[[415,35]]}}}],["f(x)]^2",{"_index":1421,"t":{"1285":{"position":[[102,9],[210,9]]}}}],["f(x,y)=1mn∑u=0m−1∑v=0n−1f(u,v)ej2π(uxm+vyn)(12)f(x,y)=\\frac{1}{mn}\\sum_{u=0}^{m",{"_index":546,"t":{"1043":{"position":[[1355,79]]}}}],["f(x,y)=∫−∞∞∫−∞∞f(u,v)ej2π(ux+vy)dudv(8)f(x,y)=\\int_",{"_index":532,"t":{"1043":{"position":[[710,52]]}}}],["f(x,y)f(x,y)f(x,y)经过退化系统h(x,y)h(x,y)h(x,y)后再与噪声n(x,y)n(x,y)n(x,y)叠加，得到最后退化的图像g(x,y)g(x,y)g(x,i",{"_index":613,"t":{"1074":{"position":[[0,98]]}}}],["f.relu(x",{"_index":1417,"t":{"1282":{"position":[[329,9]]}}}],["f.sigmoid(x",{"_index":1407,"t":{"1280":{"position":[[338,12]]}}}],["f.softmax(scor",{"_index":1292,"t":{"1217":{"position":[[1872,17],[4168,17]]}}}],["f0f_0f0",{"_index":2856,"t":{"1633":{"position":[[1797,8]]}}}],["f=1f=1f=1",{"_index":2238,"t":{"1438":{"position":[[49,9]]}}}],["f=2mf=2^mf=2m",{"_index":2195,"t":{"1431":{"position":[[956,13]]}}}],["f=e(im)f=\\mathcal{e}(im)f=e(im",{"_index":2461,"t":{"1489":{"position":[[116,31]]},"1617":{"position":[[116,31]]}}}],["f=h/h=w/wf=h",{"_index":2192,"t":{"1431":{"position":[[913,12]]},"1438":{"position":[[14,12]]}}}],["f^=lookup⁡(z,q)\\hat{f}=\\operatorname{lookup}(z,q)f^​=lookup(z,q",{"_index":2467,"t":{"1489":{"position":[[504,64]]},"1617":{"position":[[504,64]]}}}],["f^\\hat{f}f",{"_index":2466,"t":{"1489":{"position":[[482,12]]},"1617":{"position":[[482,12]]}}}],["f^{(i,j)}\\|_2\\right)\\in[v]q(i,j)=(argv∈[v]min​∥lookup(z,v)−f(i,j)∥2​)∈[v",{"_index":2465,"t":{"1489":{"position":[[378,73]]},"1617":{"position":[[378,73]]}}}],["f_\\theta\\left(\\mathbf{x}_t",{"_index":2861,"t":{"1633":{"position":[[1963,27]]}}}],["facilit",{"_index":1839,"t":{"1381":{"position":[[178,10]]},"1403":{"position":[[1302,10]]},"1528":{"position":[[1302,10]]},"1539":{"position":[[178,10]]}}}],["factor",{"_index":1316,"t":{"1217":{"position":[[2722,6]]}}}],["fals",{"_index":2982,"t":{"1644":{"position":[[141,6]]}}}],["famili",{"_index":1923,"t":{"1403":{"position":[[29,6]]},"1528":{"position":[[29,6]]}}}],["fast",{"_index":2432,"t":{"1485":{"position":[[373,4]]},"1613":{"position":[[373,4]]}}}],["faster",{"_index":2440,"t":{"1485":{"position":[[691,6]]},"1613":{"position":[[691,6]]}}}],["fa根据当前的状态及扫描的输入字符，便能唯一地知道fa",{"_index":75,"t":{"925":{"position":[[24,49]]}}}],["fcn",{"_index":3180,"t":{"1737":{"position":[[235,9]]}}}],["featur",{"_index":898,"t":{"1149":{"position":[[778,8]]},"1151":{"position":[[1877,62]]},"1163":{"position":[[709,8]]},"1183":{"position":[[30,9]]},"1254":{"position":[[778,8]]},"1256":{"position":[[1877,62]]},"1268":{"position":[[709,8]]},"1489":{"position":[[103,7],[148,9],[1262,7]]},"1494":{"position":[[96,7],[128,7],[163,7],[178,7]]},"1617":{"position":[[103,7],[148,9],[1262,7]]},"1622":{"position":[[96,7],[128,7],[163,7],[178,7]]}}}],["few",{"_index":2355,"t":{"1476":{"position":[[95,3],[105,5]]},"1633":{"position":[[6996,3]]}}}],["fewer",{"_index":2950,"t":{"1633":{"position":[[7396,5]]}}}],["fewshot",{"_index":2386,"t":{"1476":{"position":[[602,7]]}}}],["fff",{"_index":1191,"t":{"1190":{"position":[[6,3]]},"1192":{"position":[[6,3]]},"1438":{"position":[[5,3],[81,3],[127,3],[191,3]]}}}],["ffhq",{"_index":958,"t":{"1151":{"position":[[2130,4],[2166,4],[2210,4],[2235,4],[2272,4],[2299,4],[2322,4],[2486,4],[2513,4],[2539,4],[2564,4],[2583,4],[2610,4],[2633,4]]},"1256":{"position":[[2130,4],[2166,4],[2210,4],[2235,4],[2272,4],[2299,4],[2322,4],[2486,4],[2513,4],[2539,4],[2564,4],[2583,4],[2610,4],[2633,4]]}}}],["fid",{"_index":941,"t":{"1151":{"position":[[1469,3],[1556,3],[1699,3],[1761,3],[1843,3],[1989,4]]},"1256":{"position":[[1469,3],[1556,3],[1699,3],[1761,3],[1843,3],[1989,4]]},"1403":{"position":[[800,3]]},"1410":{"position":[[2447,3]]},"1485":{"position":[[615,5]]},"1487":{"position":[[205,3]]},"1528":{"position":[[800,3]]},"1535":{"position":[[2448,3]]},"1613":{"position":[[615,5]]},"1615":{"position":[[205,3]]}}}],["fid=∥μ1−μ2∥22+tr(σ1+σ2−2(σ1σ2)12)(1)\\mathrm{fid}=\\left\\|\\mu_1",{"_index":729,"t":{"1116":{"position":[[382,61]]}}}],["fidel",{"_index":2165,"t":{"1423":{"position":[[899,9]]}}}],["fid中，做出了如下重要的假设**：将生成的图像真实的图像经过cnn输出的representation看作是sample自两个高斯分布的随机变量**。然后，通过计算两个特征向量的均值和协方差矩阵来得到两个高斯分布的参数。最后，利用两个高斯分布之间的fréchet",{"_index":728,"t":{"1116":{"position":[[229,152]]}}}],["fid指标需要一定数量的生成图像和真实图像来进行统计估计。这是因为fid",{"_index":733,"t":{"1116":{"position":[[822,93]]}}}],["fid提供一个pr",{"_index":725,"t":{"1116":{"position":[[78,10]]}}}],["fid（fréchet",{"_index":722,"t":{"1116":{"position":[[45,11]]}}}],["file",{"_index":193,"t":{"972":{"position":[[986,4]]},"974":{"position":[[387,5]]},"1185":{"position":[[458,4]]},"1772":{"position":[[11,6]]},"1774":{"position":[[1228,5],[1443,5]]}}}],["file=/usr/local/share/bochs/bio",{"_index":258,"t":{"974":{"position":[[541,32]]},"1774":{"position":[[1597,32]]}}}],["file=/usr/local/share/bochs/vgabio",{"_index":254,"t":{"974":{"position":[[466,35]]},"1774":{"position":[[1522,35]]}}}],["filesystem",{"_index":211,"t":{"972":{"position":[[1790,12]]}}}],["filter",{"_index":566,"t":{"1061":{"position":[[63,7]]}}}],["filter都对输入图像的所有通道完成一次卷积，filter中的kernel",{"_index":1379,"t":{"1272":{"position":[[46,59]]}}}],["final",{"_index":1571,"t":{"1309":{"position":[[109,5]]},"1633":{"position":[[3744,8]]}}}],["find",{"_index":1241,"t":{"1213":{"position":[[205,4]]},"1217":{"position":[[2677,4]]},"1489":{"position":[[1706,4]]},"1617":{"position":[[1706,4]]},"1633":{"position":[[7322,4]]}}}],["finder小组件中appl",{"_index":3026,"t":{"1661":{"position":[[273,21]]}}}],["finder栏中plasmoid",{"_index":3029,"t":{"1663":{"position":[[0,29]]}}}],["fine",{"_index":446,"t":{"1026":{"position":[[570,9]]},"1171":{"position":[[259,7]]},"1366":{"position":[[570,9]]},"1414":{"position":[[489,4]]},"1476":{"position":[[150,7],[454,4]]},"1485":{"position":[[141,4]]},"1613":{"position":[[141,4]]},"1633":{"position":[[2726,4],[5815,4]]}}}],["finetuing（监督微调，sft",{"_index":2325,"t":{"1462":{"position":[[388,27]]}}}],["finetun",{"_index":2880,"t":{"1633":{"position":[[3466,9]]}}}],["fine）的方法很自然地给图像暗示了一种顺序。此外，受广泛使用的多尺度（multi",{"_index":2484,"t":{"1492":{"position":[[79,41]]},"1620":{"position":[[79,41]]}}}],["first",{"_index":2100,"t":{"1414":{"position":[[1030,5]]},"1423":{"position":[[780,5]]},"1485":{"position":[[416,5]]},"1613":{"position":[[416,5]]},"1633":{"position":[[278,5],[775,5],[3454,5],[5189,5],[6749,5]]}}}],["first(该非终结符)减去ϵ\\epsilonϵ的所有终结符元素都加入至follow",{"_index":87,"t":{"932":{"position":[[155,52]]}}}],["first=tru",{"_index":2803,"t":{"1609":{"position":[[308,22]]}}}],["first意味着不同序列中同一个时刻对应的输入单元在内存中是毗邻的，这样才能做到真正的batch",{"_index":2808,"t":{"1609":{"position":[[505,51]]}}}],["first意味着模型的输入（一个tensor）在内存中存储时，先存储第一个sequence，再存储第二个，而如果是seq_len",{"_index":2805,"t":{"1609":{"position":[[375,64]]}}}],["first集、follow集是针对于符号串而言的，而select",{"_index":88,"t":{"934":{"position":[[4,49]]}}}],["first，模型的输入在内存中，先存储每一个sequ",{"_index":2806,"t":{"1609":{"position":[[440,56]]}}}],["fisher",{"_index":2627,"t":{"1518":{"position":[[311,6]]}}}],["fish的配置文件：~/.config/fish/config.fish",{"_index":3072,"t":{"1679":{"position":[[0,36]]}}}],["fit",{"_index":2819,"t":{"1631":{"position":[[202,4]]}}}],["fix",{"_index":2733,"t":{"1597":{"position":[[95,24]]}}}],["flag",{"_index":36,"t":{"902":{"position":[[93,4],[236,4],[322,5]]},"1774":{"position":[[1200,5]]}}}],["flexibl",{"_index":2092,"t":{"1414":{"position":[[873,11]]},"1423":{"position":[[600,12],[1019,8]]},"1473":{"position":[[273,12]]}}}],["floppya",{"_index":263,"t":{"974":{"position":[[620,8],[658,9]]},"1774":{"position":[[1676,8],[1714,9]]}}}],["flow",{"_index":2524,"t":{"1500":{"position":[[109,5]]},"1585":{"position":[[126,4],[172,4]]}}}],["fno",{"_index":3268,"t":{"1774":{"position":[[1321,3]]}}}],["focal",{"_index":3197,"t":{"1749":{"position":[[0,5]]}}}],["fold",{"_index":1542,"t":{"1305":{"position":[[2,4],[128,4],[198,6],[268,4]]},"1307":{"position":[[23,4],[61,5],[122,5],[204,4]]}}}],["follow",{"_index":85,"t":{"932":{"position":[[4,20],[25,29],[130,24]]},"1181":{"position":[[69,6]]},"1633":{"position":[[3287,6]]}}}],["follow集加入到该非终结符的follow",{"_index":86,"t":{"932":{"position":[[89,40]]}}}],["follow集解决的话则是slr(1",{"_index":108,"t":{"956":{"position":[[222,29]]}}}],["font",{"_index":2995,"t":{"1644":{"position":[[415,4]]}}}],["forcing与mask",{"_index":431,"t":{"1022":{"position":[[892,14],[947,14]]},"1362":{"position":[[892,14],[947,14]]}}}],["forcing出现的问题，避免了训练与推理阶段的mismatch",{"_index":458,"t":{"1030":{"position":[[133,43]]},"1370":{"position":[[133,43]]}}}],["forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入mask",{"_index":454,"t":{"1028":{"position":[[298,163]]},"1368":{"position":[[298,163]]}}}],["forcing策略有很大的关系，具体分析见下文《teach",{"_index":430,"t":{"1022":{"position":[[860,31]]},"1362":{"position":[[860,31]]}}}],["forcing策略，将ground",{"_index":451,"t":{"1028":{"position":[[158,17]]},"1368":{"position":[[158,17]]}}}],["forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2",{"_index":461,"t":{"1030":{"position":[[449,54]]},"1370":{"position":[[449,54]]}}}],["fork",{"_index":789,"t":{"1130":{"position":[[69,4]]},"1235":{"position":[[69,4]]},"1663":{"position":[[179,6]]}}}],["form",{"_index":2828,"t":{"1633":{"position":[[238,4]]}}}],["format",{"_index":2137,"t":{"1423":{"position":[[25,9]]},"1648":{"position":[[137,7]]}}}],["formul",{"_index":2143,"t":{"1423":{"position":[[212,11]]}}}],["forward",{"_index":290,"t":{"986":{"position":[[31,7],[118,7]]}}}],["forward(self",{"_index":1728,"t":{"1375":{"position":[[368,13],[859,13]]}}}],["found",{"_index":713,"t":{"1114":{"position":[[730,5]]}}}],["foundat",{"_index":1980,"t":{"1403":{"position":[[1371,10]]},"1451":{"position":[[56,10]]},"1453":{"position":[[76,10]]},"1528":{"position":[[1371,10]]},"1581":{"position":[[50,10]]}}}],["frac",{"_index":1414,"t":{"1282":{"position":[[125,5]]}}}],["frac12dkl​(p,q)=logσ1​σ2​​+2σ22​σ12​+(μ1​−μ2​)2​−21",{"_index":2292,"t":{"1445":{"position":[[882,53]]}}}],["frac1n\\sum_{i=1}^ny_i\\log(p_i)\\tag{1}l=−n1​i=1∑n​yi​log(pi​)(1",{"_index":1089,"t":{"1173":{"position":[[296,64]]}}}],["frac{1",{"_index":336,"t":{"990":{"position":[[305,7]]},"1389":{"position":[[135,7]]},"1547":{"position":[[135,7]]}}}],["frac{1}{1",{"_index":1394,"t":{"1280":{"position":[[26,10]]}}}],["frac{\\exp\\left(\\frac{\\log(p(x_i))}{t}\\right)}{\\sum_j",{"_index":629,"t":{"1095":{"position":[[183,53]]}}}],["frac{\\lambda}{2",{"_index":1525,"t":{"1302":{"position":[[74,17],[255,17]]}}}],["frac{\\parti",{"_index":1531,"t":{"1302":{"position":[[299,14],[458,14]]}}}],["frac{\\sum{i(pred_i==y_i)}}{len(i",{"_index":1615,"t":{"1330":{"position":[[160,35]]}}}],["frac{d(u,v",{"_index":583,"t":{"1061":{"position":[[1116,12]]},"1063":{"position":[[633,12]]}}}],["frac{d(u,v)}{d_0}]^n}\\tag{17}h(u,v)=e−[d0​d(u,v)​]n(17",{"_index":579,"t":{"1061":{"position":[[826,57]]}}}],["frac{d_0}{d(u,v)}]^n}\\tag{21}h(u,v)=e−[d(u,v)d0​​]n(21",{"_index":599,"t":{"1063":{"position":[[464,57]]}}}],["frac{p(a,b,c)}{\\frac{p(a,b,c)}{p(c",{"_index":2282,"t":{"1445":{"position":[[407,35]]}}}],["frac{p(a,b,c)}{p(a",{"_index":2281,"t":{"1445":{"position":[[379,21]]}}}],["frac{p(b|a",{"_index":3098,"t":{"1692":{"position":[[469,12]]},"1701":{"position":[[469,12]]}}}],["frac{shape_{input",{"_index":1587,"t":{"1314":{"position":[[273,19]]},"1321":{"position":[[343,19]]}}}],["frac{ux}{m}+\\frac{vy}{n})}\\tag{11}f(u,v)=x=0∑m−1​y=0∑n−1​f(x,y)e−j2π(mux​+nvy​)(11",{"_index":545,"t":{"1043":{"position":[[1258,85]]}}}],["frac{ux}{m}+\\frac{vy}{n})}\\tag{12}f(x,y)=mn1​u=0∑m−1​v=0∑n−1​f(u,v)ej2π(mux​+nvy​)(12",{"_index":549,"t":{"1043":{"position":[[1468,88]]}}}],["frac{w}{2}\\\\1&d_0",{"_index":605,"t":{"1065":{"position":[[149,18]]}}}],["frac{w}{2}\\leq",{"_index":606,"t":{"1065":{"position":[[168,15]]}}}],["framework",{"_index":1972,"t":{"1403":{"position":[[1162,10]]},"1405":{"position":[[751,9]]},"1414":{"position":[[214,9],[893,9]]},"1528":{"position":[[1162,10]]},"1530":{"position":[[750,9]]}}}],["free",{"_index":65,"t":{"919":{"position":[[54,4]]},"972":{"position":[[895,4]]},"1410":{"position":[[1947,4],[2281,4]]},"1520":{"position":[[711,4]]},"1524":{"position":[[11,4],[1455,4]]},"1535":{"position":[[1948,4],[2282,4]]}}}],["freebsd",{"_index":3252,"t":{"1774":{"position":[[891,8]]}}}],["freez",{"_index":885,"t":{"1149":{"position":[[148,6]]},"1254":{"position":[[148,6]]},"1476":{"position":[[406,6]]}}}],["fréchet",{"_index":937,"t":{"1151":{"position":[[1204,7],[1730,7],[2432,7]]},"1256":{"position":[[1204,7],[1730,7],[2432,7]]},"1485":{"position":[[588,7]]},"1613":{"position":[[588,7]]}}}],["ftfi",{"_index":802,"t":{"1135":{"position":[[136,4]]},"1240":{"position":[[136,4]]}}}],["function",{"_index":1404,"t":{"1280":{"position":[[275,10]]},"1282":{"position":[[266,10]]},"1375":{"position":[[80,10]]},"1381":{"position":[[537,8]]},"1516":{"position":[[158,23]]},"1518":{"position":[[97,9],[204,46],[284,9],[343,8],[444,8]]},"1539":{"position":[[537,8]]},"1677":{"position":[[31,8],[200,8]]}}}],["function中起到更新的作用，因此不进行nm",{"_index":3170,"t":{"1733":{"position":[[760,25]]}}}],["further",{"_index":2453,"t":{"1485":{"position":[[1066,7]]},"1613":{"position":[[1066,7]]}}}],["furthermor",{"_index":2097,"t":{"1414":{"position":[[967,12]]}}}],["fθ(x)f_\\theta(x)fθ​(x",{"_index":2623,"t":{"1518":{"position":[[62,25]]}}}],["f∈rh×w×cf",{"_index":2486,"t":{"1492":{"position":[[413,9]]},"1620":{"position":[[413,9]]}}}],["g",{"_index":2853,"t":{"1633":{"position":[[1699,1]]}}}],["g(x,y)]^2\\tag{4}mse=mn1​x=1∑m​y=1∑n​[f(x,y)−g(x,y)]2(4",{"_index":515,"t":{"1039":{"position":[[118,55]]}}}],["g(z)g(z)g(z)是生成器的输出，d(g(z))d(g(z))d(g(z))是生成样本输入到判别器后的输出，zzz是随机噪声，eee",{"_index":371,"t":{"1007":{"position":[[901,78]]}}}],["g(z)g(z)g(z)是生成器的输出，zzz是随机噪声，eee",{"_index":366,"t":{"1007":{"position":[[462,41]]}}}],["g=ℓu+s(ℓc−ℓu)\\ell_g",{"_index":2039,"t":{"1410":{"position":[[2104,20]]},"1535":{"position":[[2105,20]]}}}],["g\\ell_gℓg",{"_index":2038,"t":{"1410":{"position":[[2080,11]]},"1535":{"position":[[2081,11]]}}}],["gamma",{"_index":2034,"t":{"1410":{"position":[[1770,8]]},"1522":{"position":[[124,13],[349,8]]},"1524":{"position":[[776,6],[943,7],[1205,8]]},"1535":{"position":[[1771,8]]},"1633":{"position":[[6152,8]]}}}],["gamma(p)c=γ(p",{"_index":2923,"t":{"1633":{"position":[[6198,15]]}}}],["gamma+\\betaadaln(x)=σ(x)x−μ(x",{"_index":2031,"t":{"1410":{"position":[[1668,36]]},"1535":{"position":[[1669,36]]}}}],["gan",{"_index":347,"t":{"999":{"position":[[0,9],[268,86]]},"1001":{"position":[[296,98]]},"1151":{"position":[[50,8]]},"1256":{"position":[[50,8]]},"1419":{"position":[[95,3],[156,3],[438,3]]},"1426":{"position":[[3,3],[113,3]]},"1476":{"position":[[466,5],[795,3]]},"1500":{"position":[[18,15]]},"1572":{"position":[[17,41],[59,3],[276,3]]},"1583":{"position":[[0,4],[778,3],[826,3],[842,3]]}}}],["gan模型的结构分为generator和discriminator，其中generator接受来自随机分布的向量，产生预期图像；discrimin",{"_index":774,"t":{"1126":{"position":[[0,221]]}}}],["gan（gen",{"_index":348,"t":{"1001":{"position":[[0,14]]},"1572":{"position":[[181,14]]}}}],["gan）或变分自动编码器（vae）等生成模型，uncondit",{"_index":355,"t":{"1003":{"position":[[269,45]]}}}],["gaussian",{"_index":1267,"t":{"1217":{"position":[[751,9]]},"1633":{"position":[[797,8]]}}}],["gb",{"_index":2913,"t":{"1633":{"position":[[5576,2]]}}}],["gcc",{"_index":3240,"t":{"1774":{"position":[[654,3],[973,3]]}}}],["geeko",{"_index":138,"t":{"972":{"position":[[0,8],[640,6]]},"974":{"position":[[0,16]]},"1764":{"position":[[110,12],[123,7],[206,25],[270,16]]},"1766":{"position":[[70,15]]},"1768":{"position":[[0,18]]},"1772":{"position":[[0,10],[34,14]]},"1774":{"position":[[34,8],[360,8],[584,8],[1149,8],[1371,7],[2132,15]]}}}],["geekos!\\n",{"_index":231,"t":{"972":{"position":[[2093,12]]}}}],["geekos/bootinfo.h",{"_index":195,"t":{"972":{"position":[[1014,19]]}}}],["geekos/crc32.h",{"_index":199,"t":{"972":{"position":[[1121,16]]}}}],["geekos/int.h",{"_index":201,"t":{"972":{"position":[[1171,14]]}}}],["geekos/keyboard.h",{"_index":205,"t":{"972":{"position":[[1274,19]]}}}],["geekos/kthread.h",{"_index":202,"t":{"972":{"position":[[1195,18]]}}}],["geekos/mem.h",{"_index":198,"t":{"972":{"position":[[1097,14]]}}}],["geekos/screen.h",{"_index":197,"t":{"972":{"position":[[1070,17]]}}}],["geekos/string.h",{"_index":196,"t":{"972":{"position":[[1043,17]]}}}],["geekos/timer.h",{"_index":204,"t":{"972":{"position":[[1248,16]]}}}],["geekos/trap.h",{"_index":203,"t":{"972":{"position":[[1223,15]]}}}],["geekos/tss.h",{"_index":200,"t":{"972":{"position":[[1147,14]]}}}],["geekos中makefil",{"_index":3228,"t":{"1774":{"position":[[193,23],[238,19]]}}}],["geekos是一个基于x86",{"_index":3207,"t":{"1764":{"position":[[0,27]]}}}],["geekos环境的配置，下面我们来验证环境配置的成功与否以及project",{"_index":137,"t":{"970":{"position":[[0,49]]}}}],["geekos设计的7",{"_index":3212,"t":{"1764":{"position":[[174,20]]}}}],["geekos运行依托于boch",{"_index":3217,"t":{"1766":{"position":[[21,17]]}}}],["gelu（高斯误差线性单元），⊙\\odot",{"_index":2013,"t":{"1410":{"position":[[872,22]]},"1535":{"position":[[872,22]]}}}],["gen",{"_index":2305,"t":{"1451":{"position":[[46,3],[149,3]]},"1453":{"position":[[11,3],[56,3],[103,3],[122,3],[139,3],[220,3]]},"1460":{"position":[[15,3]]},"1462":{"position":[[450,3]]},"1638":{"position":[[79,4]]}}}],["gener",{"_index":350,"t":{"1001":{"position":[[106,15]]},"1003":{"position":[[4,33],[159,11],[185,83],[315,89],[417,11]]},"1085":{"position":[[23,10]]},"1114":{"position":[[114,10]]},"1118":{"position":[[0,10],[18,10],[267,11],[771,10],[934,11]]},"1130":{"position":[[41,10]]},"1163":{"position":[[757,9]]},"1235":{"position":[[41,10]]},"1268":{"position":[[757,9]]},"1379":{"position":[[68,10]]},"1381":{"position":[[63,10],[753,11],[846,9],[995,10]]},"1403":{"position":[[45,10],[151,10],[331,10],[455,10],[729,10],[926,10],[1216,10],[1345,10]]},"1405":{"position":[[423,10]]},"1414":{"position":[[79,11],[232,10],[732,10],[857,11],[1168,10]]},"1423":{"position":[[276,10],[1028,10],[1043,7],[1389,11]]},"1451":{"position":[[74,10]]},"1460":{"position":[[110,27]]},"1471":{"position":[[84,10]]},"1473":{"position":[[241,9]]},"1476":{"position":[[0,10],[314,10],[616,10]]},"1485":{"position":[[55,10],[386,10],[494,11],[1094,14],[1307,15],[1416,10]]},"1518":{"position":[[490,10]]},"1528":{"position":[[45,10],[151,10],[331,10],[455,10],[729,10],[926,10],[1216,10],[1345,10]]},"1530":{"position":[[423,10]]},"1537":{"position":[[68,10]]},"1539":{"position":[[63,10],[753,11],[846,9],[995,10]]},"1572":{"position":[[129,10]]},"1581":{"position":[[39,10]]},"1583":{"position":[[782,11],[1188,10],[1999,10]]},"1587":{"position":[[25,10]]},"1613":{"position":[[55,10],[386,10],[494,11],[1094,14],[1307,15],[1416,10]]},"1624":{"position":[[99,29]]},"1628":{"position":[[56,10],[127,10]]},"1633":{"position":[[3362,10],[3485,8],[3610,8],[3807,9],[3885,11],[5877,11]]},"1636":{"position":[[80,10],[153,10]]},"1774":{"position":[[907,9]]}}}],["general_opt",{"_index":3235,"t":{"1774":{"position":[[490,15],[541,15],[1246,12],[1295,12]]}}}],["generation，可以继续扩展为多模态任务，text",{"_index":2810,"t":{"1624":{"position":[[63,28]]}}}],["generator_train",{"_index":883,"t":{"1149":{"position":[[16,53]]},"1254":{"position":[[16,53]]}}}],["generator）通常接收一个来自潜在空间（lat",{"_index":346,"t":{"995":{"position":[[0,33]]}}}],["geq",{"_index":666,"t":{"1099":{"position":[[374,4],[383,4],[395,4],[591,4]]},"1282":{"position":[[57,4],[193,4]]}}}],["get_text_featur",{"_index":1056,"t":{"1161":{"position":[[801,17]]},"1266":{"position":[[801,17]]}}}],["ggg",{"_index":2001,"t":{"1410":{"position":[[437,10]]},"1535":{"position":[[437,10]]}}}],["git+https://github.com/openai/clip.git",{"_index":806,"t":{"1135":{"position":[[170,38]]},"1240":{"position":[[170,38]]}}}],["github",{"_index":1146,"t":{"1181":{"position":[[89,6]]},"1440":{"position":[[14,9]]},"1640":{"position":[[30,6]]}}}],["give",{"_index":492,"t":{"1032":{"position":[[228,4]]}}}],["given",{"_index":1150,"t":{"1183":{"position":[[24,5]]},"1633":{"position":[[196,5],[747,5]]}}}],["global",{"_index":3035,"t":{"1663":{"position":[[136,6]]}}}],["global_clip_loss",{"_index":880,"t":{"1147":{"position":[[966,27]]},"1163":{"position":[[892,16]]},"1252":{"position":[[966,27]]},"1268":{"position":[[892,16]]}}}],["global_step",{"_index":1211,"t":{"1201":{"position":[[232,14]]},"1203":{"position":[[198,14]]}}}],["glu",{"_index":2007,"t":{"1410":{"position":[[587,3]]},"1535":{"position":[[587,3]]}}}],["glue",{"_index":1096,"t":{"1175":{"position":[[97,5],[851,4]]}}}],["glue（gener",{"_index":1097,"t":{"1175":{"position":[[103,12]]}}}],["glu（gat",{"_index":2003,"t":{"1410":{"position":[[527,9]]},"1535":{"position":[[527,9]]}}}],["gnu",{"_index":3256,"t":{"1774":{"position":[[999,3]]}}}],["god",{"_index":491,"t":{"1032":{"position":[[216,4]]}}}],["good",{"_index":490,"t":{"1032":{"position":[[211,4]]}}}],["googl",{"_index":807,"t":{"1137":{"position":[[14,6]]},"1151":{"position":[[13,6]]},"1185":{"position":[[187,6]]},"1242":{"position":[[14,6]]},"1256":{"position":[[13,6]]}}}],["gpt",{"_index":2433,"t":{"1485":{"position":[[434,3]]},"1494":{"position":[[338,3]]},"1592":{"position":[[8,3]]},"1613":{"position":[[434,3]]},"1622":{"position":[[338,3]]},"1633":{"position":[[3476,3],[4093,3]]}}}],["gpt、claud",{"_index":1057,"t":{"1163":{"position":[[426,10]]},"1268":{"position":[[426,10]]}}}],["gpt的结构是transformer的decod",{"_index":1139,"t":{"1179":{"position":[[0,39]]}}}],["gpt的自监督学习的特征体现在：在训练过程中，gpt根据输入的token预测输入的下一个token应该是什么，对输出的distribution与ground",{"_index":1140,"t":{"1179":{"position":[[40,78]]}}}],["gpu",{"_index":2114,"t":{"1414":{"position":[[1310,3],[1991,3]]},"1423":{"position":[[442,3]]},"1633":{"position":[[5595,3],[5750,3],[8755,3]]}}}],["gradient",{"_index":1618,"t":{"1330":{"position":[[297,8],[756,8]]},"1644":{"position":[[242,9]]}}}],["gradual",{"_index":2843,"t":{"1633":{"position":[[891,9]]}}}],["grammar，cfg",{"_index":66,"t":{"919":{"position":[[59,12]]}}}],["grammar，rg",{"_index":73,"t":{"919":{"position":[[265,11]]}}}],["granular",{"_index":2110,"t":{"1414":{"position":[[1242,11]]}}}],["gray",{"_index":232,"t":{"972":{"position":[[2137,7]]}}}],["greatli",{"_index":2163,"t":{"1423":{"position":[[875,7]]},"1473":{"position":[[256,7]]}}}],["green",{"_index":2838,"t":{"1633":{"position":[[644,5]]}}}],["green|bright",{"_index":229,"t":{"972":{"position":[[2059,15]]}}}],["grid",{"_index":3153,"t":{"1733":{"position":[[207,6],[369,8],[472,6]]}}}],["ground",{"_index":2939,"t":{"1633":{"position":[[6669,6],[7882,6]]}}}],["grow",{"_index":1323,"t":{"1217":{"position":[[2845,4]]}}}],["guarante",{"_index":3012,"t":{"1650":{"position":[[177,9]]}}}],["guid",{"_index":1145,"t":{"1181":{"position":[[80,5]]},"1423":{"position":[[237,7]]},"1633":{"position":[[121,6],[227,5]]},"1638":{"position":[[34,6]]}}}],["guidanc",{"_index":2036,"t":{"1410":{"position":[[1952,21]]},"1520":{"position":[[662,8],[689,8],[716,9]]},"1522":{"position":[[404,8]]},"1524":{"position":[[16,8],[52,8],[257,8],[1460,8]]},"1535":{"position":[[1953,21]]},"1633":{"position":[[0,23],[34,8],[48,8],[73,8],[92,9],[1143,9],[1223,9],[5782,9],[5943,8]]}}}],["guidance的比例因子，用于控制条件logit和无条件logit",{"_index":2048,"t":{"1410":{"position":[[2286,40]]},"1535":{"position":[[2287,40]]}}}],["h",{"_index":174,"t":{"972":{"position":[[703,2]]},"1314":{"position":[[20,1],[155,2],[442,1],[460,2]]},"1609":{"position":[[167,2]]},"1668":{"position":[[54,1]]},"1733":{"position":[[305,2]]},"1741":{"position":[[27,2],[150,2],[193,2]]},"1743":{"position":[[21,2]]},"1745":{"position":[[21,2],[94,2]]},"1751":{"position":[[53,2]]}}}],["h(p",{"_index":1440,"t":{"1287":{"position":[[309,4],[1154,4],[1206,4],[1224,4]]}}}],["h(p)=−∑inpi",{"_index":1437,"t":{"1287":{"position":[[259,11]]}}}],["h(u,v)=11+(2−1)[d(u,v)d0]2n(16)h(u,v)=\\frac{1}{1+(\\sqrt{2",{"_index":572,"t":{"1061":{"position":[[401,58]]}}}],["h(u,v)=11+(2−1)[d0d(u,v)]2n(20)h(u,v)=\\frac{1}{1+(\\sqrt{2",{"_index":594,"t":{"1063":{"position":[[214,58]]}}}],["h(u,v)=e−[d(u,v)d0]n(17)h(u,v)=",{"_index":578,"t":{"1061":{"position":[[791,34]]}}}],["h(u,v)=e−[d0d(u,v)]n(21)h(u,v)=",{"_index":598,"t":{"1063":{"position":[[429,34]]}}}],["h(u,v)={0d(u,v)<d0−w21d0−w2≤d(u,v)≤d0+w20d(u,v)≥d0+w2(23)h(u,v)=\\begin{cases}0&d(u,v)<d_0",{"_index":604,"t":{"1065":{"position":[[59,89]]}}}],["h(u,v)={1d(u,v)<d0d(u,v)−d1d0−d1d0≤d(u,v)≤d10d(u,v)>d1(18)h(u,v)=\\begin{cases}1&d(u,v)<d_0",{"_index":582,"t":{"1061":{"position":[[1020,92]]}}}],["h(u,v)={1d(u,v)<w10w1⩽d(u,v)≤w21d(u,v)>w2(24)h(u,v)=\\begin{cases}1&d(u,v)<w_1\\\\0&w_1\\leqsl",{"_index":610,"t":{"1065":{"position":[[420,93]]}}}],["h(u,v)={1d(u,v)>d00d(u,v)≤d0(19)h(u,v)=\\begin{cases}1&d(u,v)>d_0",{"_index":590,"t":{"1063":{"position":[[30,66]]}}}],["h(u,v)={1d(u,v)>d0d(u,v)−d1d0−d1d1≤d(u,v)≤d00d(u,v)<d1(22)h(u,v)=\\begin{cases}1&d(u,v)>d_0",{"_index":601,"t":{"1063":{"position":[[537,92]]}}}],["h(u,v)={1d(u,v)≤d00d(u,v)>d0(14)h(u,v)=\\begin{cases}1&d(u,v)\\leq",{"_index":567,"t":{"1061":{"position":[[71,64]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的0.707时的d(u,v)d(u,v)d(u,v",{"_index":596,"t":{"1063":{"position":[[345,68]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的0.707时的d(u,v)d(u,v)d(u,v)作为截止频率d0d_0d0",{"_index":574,"t":{"1061":{"position":[[532,69]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的1/2时的d(u,v)d(u,v)d(u,v",{"_index":577,"t":{"1061":{"position":[[728,62]]}}}],["h=w",{"_index":2193,"t":{"1431":{"position":[[928,3]]},"1438":{"position":[[29,3]]}}}],["h_k",{"_index":2507,"t":{"1492":{"position":[[1018,3]]},"1620":{"position":[[1018,3]]}}}],["han",{"_index":2357,"t":{"1476":{"position":[[220,8]]}}}],["happen",{"_index":1235,"t":{"1213":{"position":[[74,7]]}}}],["hat{f}\\|_2+\\lambda_\\text{p}\\mathcal{l}_\\text{p}(i\\hat{m})+\\lambda_\\text{g}\\mathcal{l}_\\text{g}(i\\hat{m})l=∥im−im^∥2​+∥f−f^​∥2​+λp​lp​(im^)+λg​lg​(im",{"_index":2471,"t":{"1489":{"position":[[691,151]]},"1617":{"position":[[691,151]]}}}],["hat{x}_\\theta",{"_index":2960,"t":{"1633":{"position":[[8280,14],[8389,14]]}}}],["hat{x}_\\theta(\\epsilon",{"_index":2925,"t":{"1633":{"position":[[6247,24]]}}}],["hat{x}_\\theta(z_{t_1",{"_index":2954,"t":{"1633":{"position":[[7923,23]]}}}],["hd",{"_index":2314,"t":{"1453":{"position":[[207,2]]}}}],["head",{"_index":401,"t":{"1018":{"position":[[57,4]]},"1022":{"position":[[790,4],[913,4],[968,4],[1363,4]]},"1219":{"position":[[31,4]]},"1223":{"position":[[122,4]]},"1229":{"position":[[24,4]]},"1358":{"position":[[57,4]]},"1362":{"position":[[790,4],[913,4],[968,4],[1363,4]]}}}],["help",{"_index":1320,"t":{"1217":{"position":[[2774,5]]}}}],["hhfq",{"_index":1053,"t":{"1161":{"position":[[705,4]]},"1266":{"position":[[705,4]]}}}],["high",{"_index":1965,"t":{"1403":{"position":[[1007,4]]},"1423":{"position":[[1106,4]]},"1528":{"position":[[1007,4]]},"1631":{"position":[[302,4]]},"1636":{"position":[[58,4],[219,4]]}}}],["higher",{"_index":1431,"t":{"1287":{"position":[[90,6],[132,6]]}}}],["highest",{"_index":1294,"t":{"1217":{"position":[[1911,7],[4207,7]]}}}],["highli",{"_index":2173,"t":{"1423":{"position":[[1310,6]]}}}],["hinton提出的一种卷积神经网络模型，它主要应用于图像分类任务。在当时，alexnet的表现远远超过了其他参赛的网络模型，并且在imagenet",{"_index":1500,"t":{"1290":{"position":[[55,83]]}}}],["hit",{"_index":145,"t":{"972":{"position":[[114,3],[1326,3]]}}}],["hk×wkh_k",{"_index":2491,"t":{"1492":{"position":[[543,8],[862,8]]},"1620":{"position":[[543,8],[862,8]]}}}],["hold",{"_index":1834,"t":{"1381":{"position":[[20,5]]},"1539":{"position":[[20,5]]}}}],["hollings@cs.umd.edu",{"_index":181,"t":{"972":{"position":[[783,21]]}}}],["hollingsworth",{"_index":180,"t":{"972":{"position":[[769,13]]}}}],["honglak",{"_index":2362,"t":{"1476":{"position":[[270,7]]}}}],["hope",{"_index":1862,"t":{"1381":{"position":[[940,4]]},"1539":{"position":[[940,4]]}}}],["host",{"_index":3246,"t":{"1774":{"position":[[735,4],[805,4]]}}}],["host_cc",{"_index":3254,"t":{"1774":{"position":[[962,7]]}}}],["hovemey",{"_index":175,"t":{"972":{"position":[[706,9]]}}}],["html",{"_index":1008,"t":{"1156":{"position":[[120,4]]},"1261":{"position":[[120,4]]}}}],["http://127.0.0.1:7890",{"_index":1723,"t":{"1375":{"position":[[199,23]]}}}],["http_proxi",{"_index":3070,"t":{"1677":{"position":[[244,10]]}}}],["http_proxy=http://127.0.0.1:7890",{"_index":3065,"t":{"1677":{"position":[[100,32]]}}}],["https://127.0.0.1:7890",{"_index":1725,"t":{"1375":{"position":[[251,24]]}}}],["https://ai.meta.com/blog/movi",{"_index":2304,"t":{"1451":{"position":[[10,35]]}}}],["https://ai.meta.com/stat",{"_index":2308,"t":{"1451":{"position":[[100,33]]}}}],["https://arxiv.org/abs/2407.07614",{"_index":2051,"t":{"1412":{"position":[[5,37]]}}}],["https://arxiv.org/pdf/2112.10752",{"_index":2134,"t":{"1421":{"position":[[5,37]]}}}],["https://arxiv.org/pdf/2208.11970",{"_index":2521,"t":{"1498":{"position":[[5,37]]}}}],["https://arxiv.org/pdf/2404.02905",{"_index":2809,"t":{"1611":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2406.06525",{"_index":1919,"t":{"1401":{"position":[[0,37]]},"1526":{"position":[[0,37]]}}}],["https://arxiv.org/pdf/2406.11838",{"_index":1828,"t":{"1379":{"position":[[0,37]]},"1537":{"position":[[0,37]]}}}],["https://blog.csdn.net/yeziyezi210/article/details/103864518",{"_index":1368,"t":{"1233":{"position":[[4,64]]}}}],["https://github.com/fusiming3/mar",{"_index":2124,"t":{"1414":{"position":[[1530,34]]}}}],["https://www.bilibili.com/video/bv12u411s7us/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":99,"t":{"951":{"position":[[284,107]]}}}],["https://www.bilibili.com/video/bv13r4y1m7sq/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":106,"t":{"951":{"position":[[732,107]]}}}],["https://www.bilibili.com/video/bv1pl4y1e7re/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":96,"t":{"951":{"position":[[121,107]]}}}],["https://www.bilibili.com/video/bv1vm4y1q7xb/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":102,"t":{"951":{"position":[[458,107]]}}}],["https://www.jianshu.com/p/41c15d301542",{"_index":2798,"t":{"1609":{"position":[[5,38]]}}}],["https_proxi",{"_index":3071,"t":{"1677":{"position":[[261,11]]}}}],["https_proxy=https://127.0.0.1:7890",{"_index":3066,"t":{"1677":{"position":[[140,34]]}}}],["hug",{"_index":2753,"t":{"1599":{"position":[[1736,9]]}}}],["hug\",\"g",{"_index":2754,"t":{"1599":{"position":[[1769,15]]}}}],["human",{"_index":2887,"t":{"1633":{"position":[[3922,5]]}}}],["hundr",{"_index":2150,"t":{"1423":{"position":[[430,8]]}}}],["hung",{"_index":2392,"t":{"1476":{"position":[[702,4]]}}}],["hvae",{"_index":2577,"t":{"1508":{"position":[[41,5],[47,10],[108,10]]},"1510":{"position":[[187,4]]},"1512":{"position":[[1043,4]]}}}],["hw4",{"_index":1190,"t":{"1187":{"position":[[53,4]]}}}],["hw×cihw",{"_index":1573,"t":{"1312":{"position":[[51,15]]}}}],["hyperparamet",{"_index":1570,"t":{"1309":{"position":[[80,14]]}}}],["hyperstyl",{"_index":987,"t":{"1154":{"position":[[20,10],[180,10]]},"1259":{"position":[[20,10],[180,10]]}}}],["h×wh",{"_index":2493,"t":{"1492":{"position":[[600,4]]},"1620":{"position":[[600,4]]}}}],["h′以及w′h'以及w'h′以及w",{"_index":1585,"t":{"1314":{"position":[[177,24]]}}}],["i'll",{"_index":478,"t":{"1032":{"position":[[73,4],[125,4]]}}}],["i(zt)∈rn×dϵi\\varphi_i\\left(z_t\\right",{"_index":2233,"t":{"1435":{"position":[[855,38]]}}}],["i)n(0,i",{"_index":1905,"t":{"1389":{"position":[[331,8]]},"1547":{"position":[[331,8]]}}}],["i)p(z)=n(z;0,i",{"_index":2543,"t":{"1506":{"position":[[497,15]]}}}],["i)x=μ+σϵ,ϵ∼n(0,i",{"_index":2570,"t":{"1506":{"position":[[1528,17]]}}}],["i)xt​∼n(0,i",{"_index":1910,"t":{"1389":{"position":[[410,12]]},"1547":{"position":[[410,12]]}}}],["i,ji,ji,j代表输出神经元的二维索引坐标，h,wh,wh,w",{"_index":1592,"t":{"1319":{"position":[[27,49]]}}}],["i440fxsupport",{"_index":276,"t":{"974":{"position":[[824,14]]},"1774":{"position":[[1880,14]]}}}],["i\\hat{m}\\|_2+\\|f",{"_index":2470,"t":{"1489":{"position":[[674,16]]},"1617":{"position":[[674,16]]}}}],["i\\right)p(xt​)=n(xt​;0,i",{"_index":2609,"t":{"1512":{"position":[[1000,25]]}}}],["i\\right)q(xt​∣xt−1​)=n(xt​;αt​​xt−1​,(1−αt​)i",{"_index":2601,"t":{"1512":{"position":[[667,46]]}}}],["i\\right)qϕ​(z∣x)=n(z;μϕ​(x),σϕ2​(x)i",{"_index":2541,"t":{"1506":{"position":[[408,37]]}}}],["i\\theta_iθi",{"_index":2025,"t":{"1410":{"position":[[1347,13]]},"1535":{"position":[[1348,13]]}}}],["iccv",{"_index":946,"t":{"1151":{"position":[[1795,4]]},"1256":{"position":[[1795,4]]}}}],["iclr",{"_index":2364,"t":{"1476":{"position":[[350,5]]},"1633":{"position":[[102,4],[1153,4]]},"1636":{"position":[[114,4]]}}}],["icom",{"_index":3044,"t":{"1663":{"position":[[289,4]]}}}],["icon",{"_index":3042,"t":{"1663":{"position":[[239,4],[256,5],[304,5]]}}}],["id",{"_index":2978,"t":{"1644":{"position":[[67,3]]}}}],["idea",{"_index":1548,"t":{"1305":{"position":[[114,4]]}}}],["ideal",{"_index":563,"t":{"1061":{"position":[[48,5]]}}}],["ident",{"_index":955,"t":{"1151":{"position":[[2040,8]]},"1256":{"position":[[2040,8]]}}}],["identifi",{"_index":2942,"t":{"1633":{"position":[[6733,11],[7138,12],[7172,12],[7230,10],[7288,10],[7544,10]]}}}],["idx",{"_index":3080,"t":{"1687":{"position":[[99,3],[174,4],[554,6]]},"1689":{"position":[[186,3],[261,4],[641,6]]}}}],["if(!((keycod",{"_index":151,"t":{"972":{"position":[[186,13],[1398,13]]}}}],["if((keycod",{"_index":156,"t":{"972":{"position":[[303,11],[1515,11]]}}}],["if(read_key(&keycod",{"_index":150,"t":{"972":{"position":[[161,22],[1373,22]]}}}],["ifm",{"_index":2987,"t":{"1644":{"position":[[266,3],[300,3],[339,3],[379,3]]}}}],["ihpf",{"_index":589,"t":{"1063":{"position":[[15,14]]}}}],["iii",{"_index":631,"t":{"1095":{"position":[[353,3]]},"1410":{"position":[[1338,3],[1365,3]]},"1535":{"position":[[1339,3],[1366,3]]}}}],["illustr",{"_index":1222,"t":{"1205":{"position":[[16,12]]},"1414":{"position":[[1403,12]]},"1633":{"position":[[594,10]]}}}],["ilpf",{"_index":561,"t":{"1061":{"position":[[18,14],[37,4]]}}}],["im^=d(f^)\\hat{im}=\\mathcal{d}(\\hat{f})im^=d(f",{"_index":2468,"t":{"1489":{"position":[[569,48]]},"1617":{"position":[[569,48]]}}}],["imag",{"_index":717,"t":{"1114":{"position":[[845,5]]},"1116":{"position":[[981,5]]},"1149":{"position":[[1104,5]]},"1151":{"position":[[1724,5]]},"1161":{"position":[[282,5],[366,5],[513,5],[844,5]]},"1163":{"position":[[45,35],[128,8]]},"1254":{"position":[[1104,5]]},"1256":{"position":[[1724,5]]},"1266":{"position":[[282,5],[366,5],[513,5],[844,5]]},"1268":{"position":[[45,35],[128,8]]},"1379":{"position":[[62,5]]},"1381":{"position":[[57,5],[840,5]]},"1403":{"position":[[39,5],[325,5],[405,5],[449,5],[559,5],[723,5],[920,5],[1031,7],[1210,5]]},"1405":{"position":[[353,5],[382,5],[417,5],[569,5]]},"1408":{"position":[[66,5],[244,5]]},"1414":{"position":[[156,5],[842,5],[1055,5],[1218,5],[1257,5]]},"1423":{"position":[[19,5],[169,5],[270,5],[1251,5],[1290,5],[1383,5],[1409,5]]},"1460":{"position":[[94,5]]},"1464":{"position":[[159,5]]},"1473":{"position":[[0,10],[202,5]]},"1476":{"position":[[610,5]]},"1485":{"position":[[121,6],[488,5],[833,5],[1147,5]]},"1489":{"position":[[180,5],[934,5],[1221,5],[1289,5],[1541,7],[1715,5],[1758,5],[1812,5],[1844,8]]},"1496":{"position":[[224,5],[294,5]]},"1528":{"position":[[39,5],[325,5],[405,5],[449,5],[559,5],[723,5],[920,5],[1031,7],[1210,5]]},"1530":{"position":[[353,5],[382,5],[417,5],[569,5]]},"1533":{"position":[[66,5],[244,5]]},"1537":{"position":[[62,5]]},"1539":{"position":[[57,5],[840,5]]},"1581":{"position":[[31,7]]},"1583":{"position":[[1199,5],[1571,5],[2055,5]]},"1613":{"position":[[121,6],[488,5],[833,5],[1147,5]]},"1617":{"position":[[180,5],[934,5],[1221,5],[1289,5],[1541,7],[1715,5],[1758,5],[1812,5],[1844,8]]},"1626":{"position":[[224,5],[294,5]]},"1631":{"position":[[26,5],[318,6]]},"1633":{"position":[[67,5],[128,5],[211,5],[350,5],[547,6],[704,6],[968,7],[1199,5],[1444,7],[1468,5],[3294,5],[3376,5],[3628,6],[3830,6],[3910,6],[5129,5],[5776,5],[5835,5],[5986,5],[6031,5],[6881,6],[7857,5]]},"1638":{"position":[[131,5]]}}}],["imagen",{"_index":2817,"t":{"1631":{"position":[[50,6]]},"1633":{"position":[[7311,7],[7522,6],[8688,6]]},"1636":{"position":[[44,6]]}}}],["imagenet",{"_index":929,"t":{"1151":{"position":[[1009,8],[1327,10],[1364,8]]},"1256":{"position":[[1009,8],[1327,10],[1364,8]]},"1403":{"position":[[669,8],[807,8]]},"1485":{"position":[[509,8]]},"1528":{"position":[[669,8],[807,8]]},"1613":{"position":[[509,8]]}}}],["imagen将压缩版本的图片作为gener",{"_index":698,"t":{"1114":{"position":[[353,28]]}}}],["imagen的实验结果，相对于decoder即diffus",{"_index":702,"t":{"1114":{"position":[[447,34]]}}}],["image数据，在传入visdom时仍需要先转化为numpi",{"_index":1215,"t":{"1201":{"position":[[355,35]]}}}],["image，encod",{"_index":2460,"t":{"1489":{"position":[[83,13]]},"1617":{"position":[[83,13]]}}}],["imbu",{"_index":2077,"t":{"1414":{"position":[[585,7]]}}}],["impact",{"_index":715,"t":{"1114":{"position":[[791,9]]}}}],["implant",{"_index":2943,"t":{"1633":{"position":[[6766,7]]}}}],["implement",{"_index":3015,"t":{"1652":{"position":[[15,10],[63,12]]}}}],["import",{"_index":520,"t":{"1043":{"position":[[78,9]]},"1057":{"position":[[30,9]]},"1110":{"position":[[232,9]]},"1114":{"position":[[623,9]]},"1201":{"position":[[12,6]]},"1203":{"position":[[12,6]]},"1205":{"position":[[0,9]]},"1208":{"position":[[85,9]]},"1217":{"position":[[0,9],[3234,6],[3247,6],[3279,6],[3298,6]]},"1223":{"position":[[207,9]]},"1280":{"position":[[268,6],[291,6]]},"1282":{"position":[[259,6],[282,6]]},"1287":{"position":[[1468,6]]},"1375":{"position":[[0,6],[13,6],[43,6],[73,6],[105,6],[141,6],[162,6]]},"1485":{"position":[[1250,9]]},"1601":{"position":[[0,9]]},"1603":{"position":[[259,6],[278,6]]},"1613":{"position":[[1250,9]]}}}],["improv",{"_index":711,"t":{"1114":{"position":[[702,8]]},"1464":{"position":[[899,12]]},"1485":{"position":[[555,7],[578,9]]},"1613":{"position":[[555,7],[578,9]]}}}],["in[1",{"_index":2586,"t":{"1512":{"position":[[106,6]]}}}],["incept",{"_index":723,"t":{"1116":{"position":[[57,9]]},"1151":{"position":[[67,9],[116,9],[602,9],[855,9],[923,9],[1212,9],[1309,9],[1338,9],[1502,9],[1738,9],[1859,9],[2440,9]]},"1256":{"position":[[67,9],[116,9],[602,9],[855,9],[923,9],[1212,9],[1309,9],[1338,9],[1502,9],[1738,9],[1859,9],[2440,9]]},"1485":{"position":[[596,9],[641,9]]},"1613":{"position":[[596,9],[641,9]]}}}],["includ",{"_index":5,"t":{"896":{"position":[[0,8]]},"902":{"position":[[0,8]]},"966":{"position":[[0,8]]},"972":{"position":[[1005,8],[1034,8],[1061,8],[1088,8],[1112,8],[1138,8],[1162,8],[1186,8],[1214,8],[1239,8],[1265,8]]},"1381":{"position":[[708,9]]},"1423":{"position":[[1359,9]]},"1485":{"position":[[823,9],[1137,9]]},"1539":{"position":[[708,9]]},"1613":{"position":[[823,9],[1137,9]]},"1689":{"position":[[41,8]]}}}],["incorpor",{"_index":2063,"t":{"1414":{"position":[[248,12]]}}}],["increas",{"_index":2832,"t":{"1633":{"position":[[381,8]]}}}],["indentifi",{"_index":2947,"t":{"1633":{"position":[[7096,12]]}}}],["independ",{"_index":2072,"t":{"1414":{"position":[[393,13]]}}}],["induct",{"_index":1931,"t":{"1403":{"position":[[261,9]]},"1528":{"position":[[261,9]]}}}],["inequl",{"_index":2533,"t":{"1504":{"position":[[281,16],[314,10]]}}}],["infer",{"_index":1106,"t":{"1175":{"position":[[401,37]]},"1403":{"position":[[1191,9]]},"1423":{"position":[[455,9]]},"1485":{"position":[[698,9],[848,9]]},"1528":{"position":[[1191,9]]},"1613":{"position":[[698,9],[848,9]]},"1633":{"position":[[3859,9]]}}}],["inference.pi",{"_index":992,"t":{"1154":{"position":[[218,27]]},"1259":{"position":[[218,27]]}}}],["inform",{"_index":1434,"t":{"1287":{"position":[[116,11]]}}}],["information—freez",{"_index":2073,"t":{"1414":{"position":[[440,20]]}}}],["infty}^{+\\infty}f(x)",{"_index":522,"t":{"1043":{"position":[[333,24]]}}}],["infty}^{\\infty}\\int_",{"_index":529,"t":{"1043":{"position":[[582,22],[763,22]]}}}],["infty}^{\\infty}f(u)e^{j2\\pi",{"_index":526,"t":{"1043":{"position":[[451,28]]}}}],["infty}^{\\infty}f(u,v)e^{j2\\pi",{"_index":533,"t":{"1043":{"position":[[786,30]]}}}],["infty}^{\\infty}f(x,y)",{"_index":530,"t":{"1043":{"position":[[605,25]]}}}],["init",{"_index":213,"t":{"972":{"position":[[1816,4]]}}}],["init_bss",{"_index":218,"t":{"972":{"position":[[1873,11]]}}}],["init_crc32",{"_index":221,"t":{"972":{"position":[[1920,13]]}}}],["init_interrupt",{"_index":223,"t":{"972":{"position":[[1946,18]]}}}],["init_keyboard",{"_index":227,"t":{"972":{"position":[[2011,16]]}}}],["init_mem(bootinfo",{"_index":220,"t":{"972":{"position":[[1900,19]]}}}],["init_schedul",{"_index":224,"t":{"972":{"position":[[1965,17]]}}}],["init_screen",{"_index":219,"t":{"972":{"position":[[1885,14]]}}}],["init_tim",{"_index":226,"t":{"972":{"position":[[1997,13]]}}}],["init_trap",{"_index":225,"t":{"972":{"position":[[1983,13]]}}}],["init_tss",{"_index":222,"t":{"972":{"position":[[1934,11]]}}}],["init_weights(m",{"_index":1773,"t":{"1375":{"position":[[1431,16]]}}}],["initi",{"_index":208,"t":{"972":{"position":[[1752,11]]},"1217":{"position":[[3486,10]]},"1335":{"position":[[553,10]]},"1485":{"position":[[1223,9]]},"1613":{"position":[[1223,9]]}}}],["initialis",{"_index":1265,"t":{"1217":{"position":[[684,11],[800,14]]}}}],["inlin",{"_index":3039,"t":{"1663":{"position":[[194,6],[317,6]]}}}],["innov",{"_index":2070,"t":{"1414":{"position":[[341,10]]}}}],["inpaint",{"_index":2172,"t":{"1423":{"position":[[1257,10]]}}}],["input",{"_index":1082,"t":{"1173":{"position":[[8,6]]},"1213":{"position":[[37,6],[157,6]]},"1217":{"position":[[299,6],[334,6],[386,6],[1284,6],[1309,6],[1335,6],[1750,38],[3344,6],[3381,6],[3433,6],[3848,6],[3873,6],[3899,6]]},"1423":{"position":[[1064,6]]},"1633":{"position":[[205,5],[302,6],[4068,5],[4145,5],[4269,5],[5167,5]]}}}],["input_size)，batch_size位于第二维度！虽然可以将batch_size和序列长度seq_len对换位置，此时只需令batch_first=tru",{"_index":2801,"t":{"1609":{"position":[[204,83]]}}}],["inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i)(4)inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i",{"_index":396,"t":{"1016":{"position":[[1097,135]]},"1356":{"position":[[1097,135]]}}}],["instal",{"_index":797,"t":{"1135":{"position":[[46,7],[128,7],[162,7]]},"1196":{"position":[[4,7]]},"1240":{"position":[[46,7],[128,7],[162,7]]},"1652":{"position":[[176,7]]},"1654":{"position":[[92,7]]}}}],["instanc",{"_index":902,"t":{"1149":{"position":[[872,8]]},"1254":{"position":[[872,8]]},"1633":{"position":[[6786,8]]}}}],["instruct",{"_index":2878,"t":{"1633":{"position":[[3308,13],[3494,12],[3842,13],[3936,13],[4104,11],[4177,11],[4321,11]]}}}],["instructpix2pix",{"_index":2877,"t":{"1633":{"position":[[3258,16],[3757,15]]}}}],["int",{"_index":10,"t":{"896":{"position":[[46,3],[63,4],[96,3]]},"898":{"position":[[157,3],[174,4]]},"902":{"position":[[46,3],[79,3],[134,3],[151,4]]},"966":{"position":[[46,3],[90,3],[231,4],[299,3],[397,4]]},"972":{"position":[[268,3],[1480,3]]},"1143":{"position":[[670,3]]},"1248":{"position":[[670,3]]},"1687":{"position":[[26,3],[95,3],[129,3],[154,3]]},"1689":{"position":[[113,3],[182,3],[216,3],[241,3],[766,3],[825,3],[864,3]]}}}],["integr",{"_index":2067,"t":{"1414":{"position":[[307,11],[362,10],[1683,11]]}}}],["interact",{"_index":1240,"t":{"1213":{"position":[[167,8],[303,12]]}}}],["interpol",{"_index":2511,"t":{"1494":{"position":[[143,11]]},"1622":{"position":[[143,11]]}}}],["introduc",{"_index":1920,"t":{"1403":{"position":[[3,9]]},"1414":{"position":[[190,9]]},"1423":{"position":[[912,11]]},"1528":{"position":[[3,9]]}}}],["introduct",{"_index":2974,"t":{"1640":{"position":[[52,42]]}}}],["intuit",{"_index":2431,"t":{"1485":{"position":[[281,9]]},"1613":{"position":[[281,9]]}}}],["invers",{"_index":994,"t":{"1154":{"position":[[355,9]]},"1259":{"position":[[355,9]]}}}],["ios::sync_with_stdio(fals",{"_index":136,"t":{"968":{"position":[[346,28]]}}}],["ipl",{"_index":785,"t":{"1130":{"position":[[9,3],[27,3]]},"1133":{"position":[[16,3],[46,3]]},"1151":{"position":[[1053,3],[1100,3],[1593,3],[1640,3],[2121,3],[2125,4],[2477,3],[2481,4]]},"1161":{"position":[[2,3],[927,3]]},"1163":{"position":[[914,3],[1189,3]]},"1235":{"position":[[9,3],[27,3]]},"1238":{"position":[[16,3],[46,3]]},"1256":{"position":[[1053,3],[1100,3],[1593,3],[1640,3],[2121,3],[2125,4],[2477,3],[2481,4]]},"1266":{"position":[[2,3],[927,3]]},"1268":{"position":[[914,3],[1189,3]]},"1481":{"position":[[0,11]]}}}],["ipl独立于生成模型，可以自由选择diffus",{"_index":2351,"t":{"1473":{"position":[[286,64]]}}}],["is=exp⁡(ex[kl(p(y∣x)∣∣p(y))])is=\\exp\\left(\\mathbb{e}_x[kl(p(y|x)||p(y))]\\right)is=exp(ex​[kl(p(y∣x)∣∣p(i",{"_index":922,"t":{"1151":{"position":[[627,108]]},"1256":{"position":[[627,108]]}}}],["isclos",{"_index":2981,"t":{"1644":{"position":[[128,12]]}}}],["isinstance(net",{"_index":1754,"t":{"1375":{"position":[[955,15]]}}}],["isinstance(train_lay",{"_index":892,"t":{"1149":{"position":[[347,24]]},"1254":{"position":[[347,24]]}}}],["isinstance(x",{"_index":1760,"t":{"1375":{"position":[[1114,13]]}}}],["is（incept",{"_index":957,"t":{"1151":{"position":[[2084,12]]},"1256":{"position":[[2084,12]]}}}],["it'",{"_index":1428,"t":{"1287":{"position":[[62,4]]}}}],["item",{"_index":2793,"t":{"1607":{"position":[[231,4],[440,4]]}}}],["iter",{"_index":1555,"t":{"1307":{"position":[[8,9],[272,9]]}}}],["itself",{"_index":2094,"t":{"1414":{"position":[[909,6]]}}}],["iulian",{"_index":183,"t":{"972":{"position":[[827,6]]}}}],["iμt​(xt​)=αt​​xt−1​,σt​(xt​)=(1−αt​)i",{"_index":2595,"t":{"1512":{"position":[[432,40]]}}}],["j",{"_index":2688,"t":{"1561":{"position":[[617,2]]}}}],["j2\\pi",{"_index":523,"t":{"1043":{"position":[[358,5],[631,5],[1252,5]]}}}],["j\\frac{2\\pi",{"_index":537,"t":{"1043":{"position":[[953,11]]}}}],["jae",{"_index":2382,"t":{"1476":{"position":[[559,3]]}}}],["jeffrey",{"_index":178,"t":{"972":{"position":[[758,7]]}}}],["jensen'",{"_index":2532,"t":{"1504":{"position":[[272,8],[305,8]]}}}],["jingwan",{"_index":2377,"t":{"1476":{"position":[[526,7]]}}}],["jinwoo",{"_index":2369,"t":{"1476":{"position":[[393,6]]}}}],["joint",{"_index":2091,"t":{"1414":{"position":[[836,5]]},"1460":{"position":[[88,5]]}}}],["j}\\right)p(xi,j​∣x<i,j",{"_index":2690,"t":{"1561":{"position":[[632,24]]}}}],["j}xi,j",{"_index":2692,"t":{"1561":{"position":[[676,7]]}}}],["k",{"_index":179,"t":{"972":{"position":[[766,2]]},"1097":{"position":[[4,1],[42,1],[77,1],[100,1],[237,1],[368,1],[437,1],[496,1]]},"1099":{"position":[[46,1],[423,5],[429,1]]},"1101":{"position":[[66,1]]},"1227":{"position":[[289,1],[338,1]]},"1305":{"position":[[0,1],[126,1]]},"1307":{"position":[[21,1]]},"1435":{"position":[[539,2]]}}}],["k=w_k^{(i",{"_index":2229,"t":{"1435":{"position":[[736,11]]}}}],["k^t}{\\sqrt{d}}\\right",{"_index":2225,"t":{"1435":{"position":[[581,21]]}}}],["k_h",{"_index":1580,"t":{"1314":{"position":[[73,3]]}}}],["k_wco​×ci​×kh​×kw",{"_index":1581,"t":{"1314":{"position":[[84,18]]}}}],["kaim",{"_index":1269,"t":{"1217":{"position":[[772,7]]}}}],["kaiyang",{"_index":2407,"t":{"1478":{"position":[[177,7]]}}}],["katex",{"_index":3010,"t":{"1650":{"position":[[126,5],[229,5],[278,6]]}}}],["kernel",{"_index":207,"t":{"972":{"position":[[1723,6],[1764,6],[2162,6]]},"974":{"position":[[994,7]]},"1774":{"position":[[2050,7]]}}}],["kernel_size=5",{"_index":1737,"t":{"1375":{"position":[[574,14],[673,15]]}}}],["kernel_thread",{"_index":165,"t":{"972":{"position":[[542,13],[2224,13]]}}}],["key",{"_index":236,"t":{"972":{"position":[[2192,4]]},"1217":{"position":[[929,5],[1252,5],[1277,4],[1369,5],[2751,3],[2835,3],[3513,5],[3816,5],[3841,4],[3933,5]]}}}],["key^{n",{"_index":1339,"t":{"1219":{"position":[[135,6]]}}}],["key_ctrl_flag)==key_ctrl_flag",{"_index":157,"t":{"972":{"position":[[317,29],[1529,29]]}}}],["key_release_flag",{"_index":153,"t":{"972":{"position":[[234,21],[1446,21]]}}}],["key_special_flag",{"_index":152,"t":{"972":{"position":[[202,17],[1414,17]]}}}],["keyboard_serial_delay",{"_index":269,"t":{"974":{"position":[[720,22]]},"1774":{"position":[[1776,22]]}}}],["keycod",{"_index":148,"t":{"972":{"position":[[133,7],[141,8],[223,8],[284,7],[1345,7],[1353,8],[1435,8],[1496,7]]}}}],["keys.t",{"_index":1287,"t":{"1217":{"position":[[1706,6],[4076,6]]}}}],["key，query以及valu",{"_index":1246,"t":{"1215":{"position":[[0,140]]},"1217":{"position":[[1222,19]]}}}],["kh=kw=1k_h=k_w=1kh​=kw​=1",{"_index":1572,"t":{"1312":{"position":[[0,50]]}}}],["kien",{"_index":2395,"t":{"1476":{"position":[[736,4]]}}}],["kkk",{"_index":1551,"t":{"1305":{"position":[[179,3],[239,3]]},"1307":{"position":[[57,3],[183,3]]},"1408":{"position":[[225,6]]},"1492":{"position":[[472,3],[895,3],[991,3],[1065,3]]},"1494":{"position":[[686,4]]},"1533":{"position":[[225,6]]},"1583":{"position":[[1336,3],[1433,3],[1486,3]]},"1620":{"position":[[472,3],[895,3],[991,3],[1065,3]]},"1622":{"position":[[686,5]]}}}],["kl",{"_index":925,"t":{"1151":{"position":[[825,2]]},"1256":{"position":[[825,2]]},"1287":{"position":[[471,5],[477,15],[687,11]]},"1431":{"position":[[473,2],[532,2]]},"1445":{"position":[[598,10]]},"1504":{"position":[[298,2],[328,2],[339,2],[364,2]]},"1506":{"position":[[517,2]]}}}],["kl(p(y∣x)∣∣p(y))kl(p(y|x)||p(y))kl(p(y∣x)∣∣p(i",{"_index":924,"t":{"1151":{"position":[[757,59]]},"1256":{"position":[[757,59]]}}}],["knife",{"_index":486,"t":{"1032":{"position":[[173,6]]}}}],["kpple",{"_index":3030,"t":{"1663":{"position":[[30,5]]}}}],["krizhevsky、ilya",{"_index":1498,"t":{"1290":{"position":[[20,15]]}}}],["kruskal",{"_index":3059,"t":{"1673":{"position":[[94,9]]}}}],["kullback–leibl",{"_index":1447,"t":{"1287":{"position":[[493,16]]}}}],["k}r≤k",{"_index":2510,"t":{"1492":{"position":[[1148,11]]},"1620":{"position":[[1148,11]]}}}],["k−1k",{"_index":1558,"t":{"1307":{"position":[[112,4]]}}}],["l",{"_index":110,"t":{"956":{"position":[[348,1],[461,1]]},"958":{"position":[[84,1]]},"960":{"position":[[76,1]]},"1055":{"position":[[208,1]]},"1375":{"position":[[2035,1]]}}}],["l(w",{"_index":1513,"t":{"1300":{"position":[[43,4]]},"1302":{"position":[[314,4]]}}}],["l(w,b",{"_index":1510,"t":{"1300":{"position":[[4,6],[124,6]]}}}],["l(w,b)+λ2∥w∥12(2)l(w",{"_index":1524,"t":{"1302":{"position":[[47,21]]}}}],["l(w_t",{"_index":1536,"t":{"1302":{"position":[[473,6]]}}}],["l(x,e,θ)=et,ϵ[∥ϵ−fθ(xt,t,e)∥22]\\mathcal{l}(\\mathbf{x",{"_index":2857,"t":{"1633":{"position":[[1829,54]]}}}],["l(y,z)=max(0,−y∗z)(1)l(y,z)=max(0",{"_index":1652,"t":{"1335":{"position":[[366,34]]}}}],["l(z,x)=eε,t[∥ε−εθ(xt∣t,z)∥2]l(z",{"_index":1875,"t":{"1387":{"position":[[179,32]]},"1545":{"position":[[179,32]]}}}],["l.backward",{"_index":1803,"t":{"1375":{"position":[[2054,12]]}}}],["l1正则化(硬性限制)、l2",{"_index":1507,"t":{"1298":{"position":[[204,35]]}}}],["l1正则化会使得一部分参数变为0，从而实现特征选择的效果；l2正则化则会使得模型参数尽量接近0",{"_index":1508,"t":{"1298":{"position":[[240,93]]}}}],["l1正则化限制权重参数的l1",{"_index":1521,"t":{"1300":{"position":[[154,26]]}}}],["l2",{"_index":907,"t":{"1149":{"position":[[1146,2],[1269,2]]},"1254":{"position":[[1146,2],[1269,2]]}}}],["l2l_2l2",{"_index":1993,"t":{"1408":{"position":[[161,8]]},"1533":{"position":[[161,8]]}}}],["l2正则化是指在模型的损失函数中，加入对模型参数的l2",{"_index":1523,"t":{"1302":{"position":[[0,46]]}}}],["l2范数是对元素求平方和后再开根号，需要.pow(2",{"_index":1418,"t":{"1285":{"position":[[0,36]]}}}],["l=5l=5l=5",{"_index":1362,"t":{"1231":{"position":[[13,19]]}}}],["l=ee(x),e(ci),ct,ε∼n(0,1),t[∥ε−ϵθ(zt,t,e(ci),ct))∥22]\\left.l=\\mathbb{e}_{\\mathcal{e}(x",{"_index":2895,"t":{"1633":{"position":[[4709,88]]}}}],["l=−1n∑i=1nyilog⁡(pi)(1)l",{"_index":1088,"t":{"1173":{"position":[[270,25]]}}}],["l=∥im−im^∥2+∥f−f^∥2+λplp(im^)+λglg(im^)\\mathcal{l}=\\|im",{"_index":2469,"t":{"1489":{"position":[[618,55]]},"1617":{"position":[[618,55]]}}}],["label",{"_index":1489,"t":{"1287":{"position":[[1626,5],[1672,6],[1809,5],[1858,6]]}}}],["laion",{"_index":1963,"t":{"1403":{"position":[[992,5]]},"1405":{"position":[[649,5]]},"1528":{"position":[[992,5]]},"1530":{"position":[[649,5]]}}}],["lalr(1",{"_index":104,"t":{"951":{"position":[[620,10]]}}}],["lambda",{"_index":1527,"t":{"1302":{"position":[[137,23],[337,7],[555,7]]},"1633":{"position":[[8371,7],[8564,37]]}}}],["lambda)w_t",{"_index":1535,"t":{"1302":{"position":[[439,11]]}}}],["lambda_l",{"_index":881,"t":{"1147":{"position":[[1219,9]]},"1252":{"position":[[1219,9]]}}}],["lambda_src",{"_index":882,"t":{"1147":{"position":[[1265,10]]},"1252":{"position":[[1265,10]]}}}],["landmark",{"_index":999,"t":{"1154":{"position":[[539,8]]},"1259":{"position":[[539,8]]}}}],["languag",{"_index":719,"t":{"1114":{"position":[[878,8]]},"1116":{"position":[[972,8]]},"1173":{"position":[[193,8]]},"1175":{"position":[[116,8],[392,8]]},"1403":{"position":[[125,8]]},"1414":{"position":[[70,8],[298,8],[798,8],[1674,8]]},"1528":{"position":[[125,8]]},"1633":{"position":[[7735,32]]}}}],["lantent",{"_index":2409,"t":{"1481":{"position":[[34,19]]}}}],["laplac",{"_index":621,"t":{"1081":{"position":[[187,10]]},"1083":{"position":[[339,22],[381,51]]}}}],["larg",{"_index":1324,"t":{"1217":{"position":[[2854,5],[2899,5]]},"1403":{"position":[[119,5]]},"1528":{"position":[[119,5]]}}}],["latent",{"_index":351,"t":{"1001":{"position":[[122,35]]},"1114":{"position":[[220,17]]},"1118":{"position":[[456,11],[484,11],[1048,11],[1076,12]]},"1147":{"position":[[256,9]]},"1154":{"position":[[79,6],[462,6],[624,6]]},"1252":{"position":[[256,9]]},"1259":{"position":[[79,6],[462,6],[624,6]]},"1423":{"position":[[634,6],[1180,6]]},"1428":{"position":[[0,13]]},"1431":{"position":[[226,57]]},"1464":{"position":[[85,6],[1061,6]]},"1481":{"position":[[12,13],[223,11],[380,11],[587,12]]},"1633":{"position":[[4681,6]]},"1636":{"position":[[210,8],[256,6]]}}}],["later",{"_index":3242,"t":{"1774":{"position":[[668,5]]}}}],["latest",{"_index":256,"t":{"974":{"position":[[507,6],[580,6]]},"1774":{"position":[[1563,6],[1636,6]]}}}],["latex",{"_index":3014,"t":{"1650":{"position":[[238,5]]}}}],["law",{"_index":2446,"t":{"1485":{"position":[[942,3],[954,4],[1288,4]]},"1487":{"position":[[61,4],[140,4],[190,4]]},"1492":{"position":[[1322,4]]},"1496":{"position":[[535,4]]},"1613":{"position":[[942,3],[954,4],[1288,4]]},"1615":{"position":[[61,4],[140,4],[190,4]]},"1620":{"position":[[1322,4]]},"1626":{"position":[[535,4]]}}}],["layer",{"_index":421,"t":{"1022":{"position":[[485,34]]},"1147":{"position":[[588,6]]},"1149":{"position":[[325,5]]},"1159":{"position":[[399,6]]},"1252":{"position":[[588,6]]},"1254":{"position":[[325,5]]},"1264":{"position":[[399,6]]},"1362":{"position":[[485,34]]},"1410":{"position":[[157,5],[1483,5]]},"1423":{"position":[[940,6]]},"1462":{"position":[[317,23]]},"1489":{"position":[[1574,6],[1668,6]]},"1535":{"position":[[157,5],[1484,5]]},"1617":{"position":[[1574,6],[1668,6]]},"1633":{"position":[[5209,6]]}}}],["layernorm",{"_index":1996,"t":{"1410":{"position":[[210,9],[248,9],[288,9]]},"1535":{"position":[[210,9],[248,9],[288,9]]}}}],["layers.append",{"_index":873,"t":{"1147":{"position":[[634,14]]},"1252":{"position":[[634,14]]}}}],["layers.append(pixelnorm",{"_index":1035,"t":{"1159":{"position":[[780,26]]},"1264":{"position":[[780,26]]}}}],["layers.append(self.final_linear",{"_index":1043,"t":{"1159":{"position":[[1025,32]]},"1264":{"position":[[1025,32]]}}}],["layers.append(self.linear",{"_index":1040,"t":{"1159":{"position":[[882,26]]},"1264":{"position":[[882,26]]}}}],["layers.append(self.transformer_encod",{"_index":1033,"t":{"1159":{"position":[[683,39]]},"1264":{"position":[[683,39]]}}}],["layers）来适应更丰富的宽高比，同时增加了更多的时间位置编码层（tempor",{"_index":2323,"t":{"1462":{"position":[[253,42]]}}}],["layman’",{"_index":1236,"t":{"1213":{"position":[[101,8]]}}}],["ld",{"_index":3257,"t":{"1774":{"position":[[1003,2]]}}}],["ldm",{"_index":1959,"t":{"1403":{"position":[[887,4]]},"1423":{"position":[[1204,6]]},"1433":{"position":[[512,3]]},"1435":{"position":[[9,3]]},"1438":{"position":[[248,3],[256,3]]},"1464":{"position":[[151,3]]},"1528":{"position":[[887,4]]},"1636":{"position":[[287,5]]}}}],["ldm=ex,ϵ∼n(0,1),t[∥ϵ−ϵθ(xt,t)∥22]l_{d",{"_index":2201,"t":{"1433":{"position":[[256,37]]}}}],["ldot",{"_index":640,"t":{"1097":{"position":[[175,7]]},"1099":{"position":[[125,7],[388,6]]},"1433":{"position":[[149,6],[481,7]]},"1492":{"position":[[507,7],[680,7],[732,7],[936,7]]},"1561":{"position":[[163,7],[322,7]]},"1620":{"position":[[507,7],[680,7],[732,7],[936,7]]}}}],["ldots,\\left(w_v",{"_index":663,"t":{"1099":{"position":[[286,17]]}}}],["learn",{"_index":1074,"t":{"1163":{"position":[[1136,8]]},"1183":{"position":[[40,5]]},"1268":{"position":[[1136,8]]},"1305":{"position":[[55,8]]},"1464":{"position":[[17,37]]},"1478":{"position":[[138,18],[242,47]]},"1481":{"position":[[546,8]]},"1485":{"position":[[109,8],[346,5],[1439,9]]},"1583":{"position":[[2042,8]]},"1613":{"position":[[109,8],[346,5],[1439,9]]},"1628":{"position":[[67,8]]},"1633":{"position":[[3275,8]]}}}],["learning（ipl）方法来解决风格迁移任务中生成模型从源域到目标域的适应问题。一个lat",{"_index":2344,"t":{"1473":{"position":[[27,50]]}}}],["lecun",{"_index":2622,"t":{"1518":{"position":[[9,5]]}}}],["lecun等人于1998年提出的卷积神经网络结构，该结构由卷积层、池化层和全连接层组成，可以高效地处理手写数字图像，并在mnist",{"_index":1715,"t":{"1373":{"position":[[12,78]]}}}],["lee",{"_index":2363,"t":{"1476":{"position":[[278,4],[563,4]]}}}],["left",{"_index":2934,"t":{"1633":{"position":[[6489,6],[8266,6]]}}}],["left(\\theta_i\\right)+x_{i+1",{"_index":2022,"t":{"1410":{"position":[[1221,29]]},"1535":{"position":[[1222,29]]}}}],["left(\\theta_i\\right)rope(xi​)=xi​⋅cos(θi​)+xi+1​⋅sin(θi",{"_index":2023,"t":{"1410":{"position":[[1262,58]]},"1535":{"position":[[1263,58]]}}}],["legend=[\"curve_name_1",{"_index":1218,"t":{"1203":{"position":[[110,23]]}}}],["legend=['train",{"_index":1788,"t":{"1375":{"position":[[1736,14]]}}}],["len",{"_index":3089,"t":{"1689":{"position":[[829,3],[950,3]]}}}],["len(train_it",{"_index":1792,"t":{"1375":{"position":[[1818,15]]}}}],["lend",{"_index":2093,"t":{"1414":{"position":[[903,5]]}}}],["lenet",{"_index":1716,"t":{"1373":{"position":[[91,5]]},"1375":{"position":[[2745,5]]}}}],["lenet5",{"_index":1824,"t":{"1375":{"position":[[2753,8]]}}}],["lenet5(nn.modul",{"_index":1731,"t":{"1375":{"position":[[424,18]]}}}],["lenetreshap",{"_index":1735,"t":{"1375":{"position":[[526,15]]}}}],["lenetreshape(nn.modul",{"_index":1726,"t":{"1375":{"position":[[282,24]]}}}],["lenet是由yann",{"_index":1714,"t":{"1373":{"position":[[0,11]]}}}],["length",{"_index":1172,"t":{"1185":{"position":[[312,6]]}}}],["leq",{"_index":1517,"t":{"1300":{"position":[[101,4]]}}}],["less",{"_index":1433,"t":{"1287":{"position":[[111,4]]}}}],["leverag",{"_index":2478,"t":{"1489":{"position":[[1549,9]]},"1617":{"position":[[1549,9]]}}}],["lg=−ez∼pz(z)[log⁡d(g(z))](4)l_g",{"_index":368,"t":{"1007":{"position":[[800,32]]}}}],["lgpl",{"_index":255,"t":{"974":{"position":[[502,4]]},"1774":{"position":[[1558,4]]}}}],["li",{"_index":482,"t":{"1032":{"position":[[119,5]]},"1476":{"position":[[522,3]]}}}],["life",{"_index":493,"t":{"1032":{"position":[[240,5]]}}}],["lighter",{"_index":2990,"t":{"1644":{"position":[[284,9],[318,8]]}}}],["lightest",{"_index":2992,"t":{"1644":{"position":[[357,9],[397,9]]}}}],["likelihood",{"_index":2522,"t":{"1500":{"position":[[34,10],[253,10]]}}}],["limit",{"_index":2154,"t":{"1423":{"position":[[534,7]]}}}],["line",{"_index":250,"t":{"974":{"position":[[423,5]]},"1774":{"position":[[1479,5]]}}}],["linear",{"_index":2004,"t":{"1410":{"position":[[537,6]]},"1485":{"position":[[999,6]]},"1535":{"position":[[537,6]]},"1613":{"position":[[999,6]]},"1644":{"position":[[235,6]]}}}],["linguist",{"_index":1114,"t":{"1175":{"position":[[597,10]]},"1414":{"position":[[418,10]]}}}],["linker",{"_index":3255,"t":{"1774":{"position":[[991,7]]}}}],["linux",{"_index":3251,"t":{"1774":{"position":[[881,5]]}}}],["linux操作系统后需要安装bochs以及nasm",{"_index":3218,"t":{"1766":{"position":[[39,30]]}}}],["linux自带的编译环境以及编译命令对特定的geeko",{"_index":3219,"t":{"1768":{"position":[[47,30]]}}}],["list",{"_index":893,"t":{"1149":{"position":[[372,6]]},"1163":{"position":[[799,5],[849,5],[884,5]]},"1254":{"position":[[372,6]]},"1268":{"position":[[799,5],[849,5],[884,5]]},"1347":{"position":[[526,16]]},"1375":{"position":[[1128,6]]},"1712":{"position":[[316,4]]}}}],["list.end",{"_index":46,"t":{"904":{"position":[[58,12],[138,13]]}}}],["list1",{"_index":2788,"t":{"1607":{"position":[[92,5]]}}}],["list2",{"_index":2789,"t":{"1607":{"position":[[110,5],[202,6]]}}}],["list3",{"_index":2790,"t":{"1607":{"position":[[134,5],[209,6]]}}}],["list和tensor",{"_index":1680,"t":{"1347":{"position":[[409,17]]}}}],["list的*乘法是复制元素，改变list的shap",{"_index":1681,"t":{"1347":{"position":[[427,26]]}}}],["llama",{"_index":1930,"t":{"1403":{"position":[[246,6]]},"1405":{"position":[[602,5]]},"1410":{"position":[[34,5]]},"1528":{"position":[[246,6]]},"1530":{"position":[[602,5]]},"1535":{"position":[[34,5]]},"1590":{"position":[[13,5]]},"1597":{"position":[[35,5]]},"1599":{"position":[[0,5],[68,5]]}}}],["llamagen",{"_index":1921,"t":{"1403":{"position":[[13,9]]},"1410":{"position":[[971,13],[1916,8]]},"1528":{"position":[[13,9]]},"1535":{"position":[[977,8],[1917,8]]}}}],["lldm:=ee(x),y,ϵ∼n(0,1),t[∥ϵ−ϵθ(zt,t,τθ(y))∥22]l_{l",{"_index":2236,"t":{"1435":{"position":[[981,50]]}}}],["lldm:=ee(x),ϵ∼n(0,1),t[∥ϵ−ϵθ(zt,t)∥22]l_{l",{"_index":2211,"t":{"1433":{"position":[[696,42]]}}}],["lll",{"_index":557,"t":{"1055":{"position":[[243,17]]},"1223":{"position":[[187,13]]},"1225":{"position":[[16,12]]}}}],["llm",{"_index":1970,"t":{"1403":{"position":[[1150,3]]},"1405":{"position":[[211,4],[288,4],[500,4],[739,3]]},"1410":{"position":[[112,4],[1444,4]]},"1414":{"position":[[385,4],[574,4],[1731,20],[1760,3]]},"1417":{"position":[[5,76]]},"1419":{"position":[[29,3],[332,3]]},"1485":{"position":[[988,5],[1274,5]]},"1487":{"position":[[84,4]]},"1492":{"position":[[1305,4]]},"1496":{"position":[[518,4]]},"1528":{"position":[[1150,3]]},"1530":{"position":[[211,4],[288,4],[500,4],[738,3]]},"1535":{"position":[[112,4],[1445,4]]},"1613":{"position":[[988,5],[1274,5]]},"1615":{"position":[[84,4]]},"1620":{"position":[[1305,4]]},"1624":{"position":[[265,4],[281,4]]},"1626":{"position":[[518,4]]},"1633":{"position":[[3958,4],[6982,4]]}}}],["llms）的性能，同时能够有效处理生僻词及词汇表之外的词汇。tiktoken",{"_index":2752,"t":{"1599":{"position":[[1616,53]]}}}],["ll×l",{"_index":1360,"t":{"1227":{"position":[[366,4]]}}}],["log",{"_index":267,"t":{"974":{"position":[[701,4]]},"1506":{"position":[[998,4]]},"1520":{"position":[[601,4]]},"1522":{"position":[[182,4],[216,4],[253,4]]},"1524":{"position":[[115,4],[149,4],[183,4],[478,4],[528,4],[583,4],[630,4],[686,4],[736,4],[790,4],[858,4],[958,4]]},"1774":{"position":[[1757,4]]}}}],["log2(1pi)\\begin{align",{"_index":1439,"t":{"1287":{"position":[[286,22]]}}}],["log2(pi)=∑inpi",{"_index":1438,"t":{"1287":{"position":[[271,14]]}}}],["log2(pi)−log2(qi)](9)d_{kl}(p",{"_index":1460,"t":{"1287":{"position":[[839,30]]}}}],["log2(qi)\\begin{align",{"_index":1472,"t":{"1287":{"position":[[1184,21]]}}}],["log2​(pi​)=i∑n​pi",{"_index":1445,"t":{"1287":{"position":[[434,18]]}}}],["log2​(pi​)−log2​(qi​)](9",{"_index":1464,"t":{"1287":{"position":[[956,26]]}}}],["log2​(pi​1​)​(7",{"_index":1446,"t":{"1287":{"position":[[453,17]]}}}],["log2​(qi​)​(10",{"_index":1478,"t":{"1287":{"position":[[1350,16]]}}}],["log_2(p_i",{"_index":1462,"t":{"1287":{"position":[[907,11]]}}}],["log_2(q_i)]}\\tag{9}dkl​(p",{"_index":1463,"t":{"1287":{"position":[[919,25]]}}}],["logist",{"_index":1608,"t":{"1324":{"position":[[0,8]]}}}],["logit",{"_index":2037,"t":{"1410":{"position":[[2074,5]]},"1535":{"position":[[2075,5]]}}}],["logit提供的通用信息，同时保留条件logit",{"_index":2049,"t":{"1410":{"position":[[2327,80]]},"1535":{"position":[[2328,80]]}}}],["logit，即不考虑任何条件信息时生成的logit",{"_index":2046,"t":{"1410":{"position":[[2233,31]]},"1535":{"position":[[2234,31]]}}}],["logit，即基于输入文本提示的信息生成的logit",{"_index":2044,"t":{"1410":{"position":[[2189,31]]},"1535":{"position":[[2190,31]]}}}],["logp(xt​∣y)​​+uncondit",{"_index":2673,"t":{"1524":{"position":[[1146,29]]}}}],["log⁡p(xt∣y)=∇log⁡p(xt)+γ(∇log⁡p(xt∣y)−∇log⁡p(xt))=∇log⁡p(xt)+γ∇log⁡p(xt∣y)−γ∇log⁡p(xt)=γ∇log⁡p(xt∣y)⏟condit",{"_index":2660,"t":{"1524":{"position":[[298,113]]}}}],["log⁡p(xt∣y)=∇log⁡p(xt)+γ∇log⁡p(y∣xt)\\nabla",{"_index":2649,"t":{"1522":{"position":[[138,43]]}}}],["log⁡p(y∣xt)=∇log⁡p(xt∣y)−∇log⁡p(xt)\\nabla",{"_index":2655,"t":{"1524":{"position":[[72,42]]}}}],["long",{"_index":3076,"t":{"1683":{"position":[[4,17],[22,32]]}}}],["loss",{"_index":903,"t":{"1149":{"position":[[1024,4]]},"1161":{"position":[[790,4],[886,4]]},"1163":{"position":[[24,8],[40,4]]},"1179":{"position":[[139,10]]},"1201":{"position":[[280,8]]},"1254":{"position":[[1024,4]]},"1266":{"position":[[790,4],[886,4]]},"1268":{"position":[[24,8],[40,4]]},"1375":{"position":[[1623,4],[1751,6]]},"1381":{"position":[[504,5],[532,4]]},"1387":{"position":[[127,4],[893,4]]},"1464":{"position":[[1024,34]]},"1481":{"position":[[890,39]]},"1539":{"position":[[504,5],[532,4]]},"1545":{"position":[[127,4],[893,4]]},"1633":{"position":[[2547,4],[2719,4],[7729,5],[7831,5]]},"1726":{"position":[[129,4]]},"1749":{"position":[[6,43],[87,14]]}}}],["loss(y_hat",{"_index":1802,"t":{"1375":{"position":[[2039,11]]}}}],["loss.to(devic",{"_index":1784,"t":{"1375":{"position":[[1658,15]]}}}],["lossdiscriminator=lossreal+lossfake(3)loss_{discriminator}=loss_{real}+loss_{fake}\\tag{3}lossdiscriminator​=lossreal​+lossfake​(3",{"_index":367,"t":{"1007":{"position":[[532,130]]}}}],["lossfake=−ez∼pz(z)[log(1−d(g(z)))](2)loss_{fak",{"_index":362,"t":{"1007":{"position":[[332,49]]}}}],["lossmse=∑[y−f(x)]2(5)loss_{ms",{"_index":1419,"t":{"1285":{"position":[[57,31]]}}}],["lossreal=−ex∼pdata(x)[log⁡d(x)](1)loss_{r",{"_index":357,"t":{"1007":{"position":[[160,46]]}}}],["loss、discrimin",{"_index":2335,"t":{"1464":{"position":[[989,18]]}}}],["loss、perceptu",{"_index":2336,"t":{"1464":{"position":[[1008,15]]}}}],["loss得到6",{"_index":3138,"t":{"1726":{"position":[[74,11]]}}}],["loss来训练目标域生成器，使源于生成器向目标域迁移学习。需要输入源域以及目标域图像、源域以及目标域的prompt描述。源域图像的lat",{"_index":2422,"t":{"1481":{"position":[[644,71]]}}}],["loss的输入来约束从源域中学习到的prompt",{"_index":2417,"t":{"1481":{"position":[[346,33]]}}}],["loss的输入，约束学习到的prompt",{"_index":2421,"t":{"1481":{"position":[[555,31]]}}}],["lot",{"_index":282,"t":{"974":{"position":[[936,3]]},"1774":{"position":[[1992,3]]}}}],["low",{"_index":564,"t":{"1061":{"position":[[54,3]]}}}],["lr",{"_index":91,"t":{"946":{"position":[[29,9]]},"1375":{"position":[[1414,3],[2720,3],[2810,3]]}}}],["lr(0",{"_index":95,"t":{"951":{"position":[[98,8]]},"956":{"position":[[139,6],[160,13]]}}}],["lr(1",{"_index":101,"t":{"951":{"position":[[435,8]]},"956":{"position":[[154,5]]}}}],["lr=lr",{"_index":1782,"t":{"1375":{"position":[[1616,6]]}}}],["lr_mul=0.01",{"_index":1038,"t":{"1159":{"position":[[843,12],[986,12]]},"1264":{"position":[[843,12],[986,12]]}}}],["lr_mul=lr_mlp",{"_index":875,"t":{"1147":{"position":[[684,14]]},"1252":{"position":[[684,14]]}}}],["lu",{"_index":2378,"t":{"1476":{"position":[[534,3]]},"1699":{"position":[[810,57]]},"1707":{"position":[[682,57]]}}}],["l}\\left(q_\\phi(z",{"_index":2555,"t":{"1506":{"position":[[918,16],[1041,16]]}}}],["l×dkl",{"_index":1356,"t":{"1227":{"position":[[246,5]]}}}],["l×dl",{"_index":1348,"t":{"1225":{"position":[[54,4]]}}}],["l×ll",{"_index":1359,"t":{"1227":{"position":[[354,4]]}}}],["m",{"_index":1203,"t":{"1199":{"position":[[52,1]]},"1774":{"position":[[1086,1]]}}}],["m32",{"_index":3245,"t":{"1774":{"position":[[729,3],[978,3]]}}}],["machin",{"_index":1544,"t":{"1305":{"position":[[47,7]]}}}],["made",{"_index":2055,"t":{"1414":{"position":[[28,4]]}}}],["mae",{"_index":1915,"t":{"1392":{"position":[[15,3]]},"1550":{"position":[[15,3]]}}}],["mage",{"_index":2724,"t":{"1583":{"position":[[1981,10]]}}}],["main",{"_index":11,"t":{"896":{"position":[[50,6]]},"902":{"position":[[50,6]]},"966":{"position":[[50,6]]},"972":{"position":[[503,31]]},"1689":{"position":[[770,6]]}}}],["main(struct",{"_index":215,"t":{"972":{"position":[[1838,11]]}}}],["make",{"_index":242,"t":{"974":{"position":[[70,4],[82,4]]},"1217":{"position":[[2783,6]]},"1485":{"position":[[428,5]]},"1613":{"position":[[428,5]]},"1636":{"position":[[125,4]]},"1650":{"position":[[84,4]]},"1764":{"position":[[338,7]]},"1768":{"position":[[144,7]]},"1774":{"position":[[147,19]]}}}],["man",{"_index":2397,"t":{"1476":{"position":[[758,3]]}}}],["manifold",{"_index":2846,"t":{"1633":{"position":[[948,8]]}}}],["manipul",{"_index":2829,"t":{"1633":{"position":[[246,12]]}}}],["manner",{"_index":2171,"t":{"1423":{"position":[[1168,7]]}}}],["map",{"_index":867,"t":{"1147":{"position":[[470,12],[566,10]]},"1151":{"position":[[1940,3]]},"1252":{"position":[[470,12],[566,10]]},"1256":{"position":[[1940,3]]},"1270":{"position":[[83,3]]},"1276":{"position":[[43,21]]},"1489":{"position":[[111,4],[1270,3]]},"1492":{"position":[[213,3],[265,4],[289,4],[386,14]]},"1494":{"position":[[104,3],[136,3],[171,6],[186,3]]},"1496":{"position":[[236,14]]},"1617":{"position":[[111,4],[1270,3]]},"1620":{"position":[[213,3],[265,4],[289,4],[386,14]]},"1622":{"position":[[104,3],[136,3],[171,6],[186,3]]},"1626":{"position":[[236,14]]}}}],["mapper",{"_index":850,"t":{"1145":{"position":[[2,6]]},"1147":{"position":[[994,13],[1114,15]]},"1151":{"position":[[1106,6],[1646,6]]},"1159":{"position":[[0,6],[61,6]]},"1161":{"position":[[257,20],[341,6],[348,12],[492,16],[935,6],[1110,6]]},"1163":{"position":[[121,6],[187,6],[245,6],[330,6],[378,6],[1063,6]]},"1250":{"position":[[2,6]]},"1252":{"position":[[994,13],[1114,15]]},"1256":{"position":[[1106,6],[1646,6]]},"1264":{"position":[[0,6],[61,6]]},"1266":{"position":[[257,20],[341,6],[348,12],[492,16],[935,6],[1110,6]]},"1268":{"position":[[121,6],[187,6],[245,6],[330,6],[378,6],[1063,6]]},"1481":{"position":[[26,7],[600,20]]}}}],["mapper接收源域图像的lat",{"_index":2411,"t":{"1481":{"position":[[91,19]]}}}],["mapper接收源域图像的隐式表示后输出再分别与源域和目标域标签concat而得到。分别将源域图像、生成的目标域图像以及源域、目标域的图片prompt描述一起输入至direct",{"_index":2424,"t":{"1481":{"position":[[791,93]]}}}],["mapper来为每一个训练集的源域图片生成一组prompt。lat",{"_index":2410,"t":{"1481":{"position":[[54,36]]}}}],["mapper来从源域图像中学习出包含图像特征且适应目标域的prompt",{"_index":2345,"t":{"1473":{"position":[[78,50]]}}}],["mapper输出的prompt与源域标签concat后送入来自clip的text",{"_index":2418,"t":{"1481":{"position":[[392,40]]}}}],["mapper输出的prompt与目标域标签concat后送入来自clip的text",{"_index":2414,"t":{"1481":{"position":[[235,41]]}}}],["mapper，增加多头注意力，减小transform",{"_index":1012,"t":{"1159":{"position":[[129,28]]},"1264":{"position":[[129,28]]}}}],["mapping)。具体来说，w",{"_index":899,"t":{"1149":{"position":[[787,15]]},"1254":{"position":[[787,15]]}}}],["mapping.json",{"_index":1184,"t":{"1185":{"position":[[522,12]]}}}],["map与ground",{"_index":3136,"t":{"1726":{"position":[[53,10],[108,10]]}}}],["map进行concat拼接，得到6通道的融合featur",{"_index":3132,"t":{"1724":{"position":[[300,29]]}}}],["map通道数也为1。将每一层的featur",{"_index":3131,"t":{"1724":{"position":[[277,22]]}}}],["map，quant",{"_index":2462,"t":{"1489":{"position":[[158,13]]},"1617":{"position":[[158,13]]}}}],["map，最后使用1x1卷积以及sigmoid",{"_index":3133,"t":{"1724":{"position":[[330,38]]}}}],["mar",{"_index":1854,"t":{"1381":{"position":[[787,5]]},"1399":{"position":[[3,3]]},"1414":{"position":[[200,5],[697,4],[980,4],[1281,4],[1610,4],[1861,7],[1946,11]]},"1417":{"position":[[0,4]]},"1419":{"position":[[279,4],[423,4]]},"1539":{"position":[[787,5]]},"1557":{"position":[[3,3]]}}}],["mardown",{"_index":3000,"t":{"1648":{"position":[[32,7]]}}}],["markdown",{"_index":3003,"t":{"1648":{"position":[[126,10]]},"1652":{"position":[[43,8]]}}}],["marr",{"_index":622,"t":{"1081":{"position":[[224,36]]}}}],["mars：超越pixart",{"_index":2052,"t":{"1412":{"position":[[43,31]]}}}],["mask",{"_index":426,"t":{"1022":{"position":[[766,17]]},"1030":{"position":[[1565,4]]},"1173":{"position":[[0,7]]},"1362":{"position":[[766,17]]},"1370":{"position":[[1565,4]]},"1381":{"position":[[765,6]]},"1405":{"position":[[165,6]]},"1489":{"position":[[1435,4],[1603,5]]},"1530":{"position":[[165,6]]},"1539":{"position":[[765,6]]},"1583":{"position":[[1120,6],[1181,6],[1364,6],[1387,6],[1410,6],[1607,6],[1992,6]]},"1617":{"position":[[1435,4],[1603,5]]},"1633":{"position":[[1218,4]]}}}],["maskgit",{"_index":1916,"t":{"1392":{"position":[[21,7]]},"1405":{"position":[[152,7]]},"1530":{"position":[[152,7]]},"1550":{"position":[[21,7]]},"1583":{"position":[[1167,13],[1511,7],[1583,10],[1803,7],[1856,24],[1881,69]]}}}],["mask置为负无穷是因为这是在经过softmax之前进行的掩码，在经过softmax之后负无穷小就变成了0",{"_index":474,"t":{"1030":{"position":[[1660,60]]},"1370":{"position":[[1660,60]]}}}],["match",{"_index":2536,"t":{"1506":{"position":[[178,8],[531,8]]},"1512":{"position":[[1129,8],[1371,8],[1450,8],[1513,8],[1682,8]]},"1516":{"position":[[14,8]]}}}],["math",{"_index":3006,"t":{"1650":{"position":[[32,4],[108,4],[263,4]]}}}],["mathbb{r}^dx∈rd",{"_index":1869,"t":{"1387":{"position":[[29,26]]},"1545":{"position":[[29,26]]}}}],["mathbb{r}^dz∈rd",{"_index":1871,"t":{"1387":{"position":[[91,18]]},"1545":{"position":[[91,18]]}}}],["mathbb{r}^dε∈rd",{"_index":1882,"t":{"1387":{"position":[[384,16]]},"1545":{"position":[[384,16]]}}}],["mathbb{r}^{h",{"_index":2185,"t":{"1431":{"position":[[620,13],[747,13]]},"1492":{"position":[[427,13]]},"1620":{"position":[[427,13]]}}}],["mathbb{r}^{m",{"_index":2221,"t":{"1435":{"position":[[335,13]]}}}],["mathbb{r}^{n",{"_index":2234,"t":{"1435":{"position":[[898,13]]}}}],["mathbb{r}^{t",{"_index":2854,"t":{"1633":{"position":[[1708,13]]}}}],["mathbf{",{"_index":2858,"t":{"1633":{"position":[[1884,11]]}}}],["mathbf{c",{"_index":2933,"t":{"1633":{"position":[[6464,11],[6562,11],[8230,11],[8337,11]]}}}],["mathbf{c})xgen​=x^θ​(ϵ,c",{"_index":2926,"t":{"1633":{"position":[[6272,52]]}}}],["mathbf{e}\\right)\\right\\|_2^2\\right]l(x,e,θ)=et,ϵ​[∥ϵ−fθ​(xt​,t,e)∥22",{"_index":2862,"t":{"1633":{"position":[[1994,71]]}}}],["mathbf{i})n(0,i",{"_index":1884,"t":{"1387":{"position":[[425,17]]},"1545":{"position":[[425,17]]}}}],["mathbf{i})zt1​​∼n(0,i",{"_index":2957,"t":{"1633":{"position":[[8023,23]]}}}],["mathbf{i})ϵ∼n(0,i",{"_index":2921,"t":{"1633":{"position":[[6124,19]]}}}],["mathbf{x",{"_index":2929,"t":{"1633":{"position":[[6352,10],[6530,10],[6576,10],[8305,10],[8351,10]]}}}],["mathcal{e}\\left(c_i\\right",{"_index":2896,"t":{"1633":{"position":[[4798,28],[4909,28]]}}}],["mathcal{n}(0",{"_index":1909,"t":{"1389":{"position":[[395,14]]},"1547":{"position":[[395,14]]},"1633":{"position":[[6109,14],[8008,14]]}}}],["mathcal{n}(0,1",{"_index":2204,"t":{"1433":{"position":[[326,17],[787,17]]},"1435":{"position":[[1083,17]]}}}],["mathcal{n}(\\mu_1,\\sigma_1^2)p∼n(μ1​,σ12​)和q∼n(μ2,σ22)q\\sim",{"_index":2288,"t":{"1445":{"position":[[639,59]]}}}],["mathcal{n}(\\mu_2,\\sigma_2^2)q∼n(μ2​,σ22​)而言，它们的kl",{"_index":2289,"t":{"1445":{"position":[[699,56]]}}}],["mathrm{t}t∈t",{"_index":2891,"t":{"1633":{"position":[[4472,27]]}}}],["matlab",{"_index":475,"t":{"1032":{"position":[[4,49]]}}}],["matplotlib",{"_index":1718,"t":{"1375":{"position":[[130,10]]}}}],["matplotlib.pyplot",{"_index":1336,"t":{"1217":{"position":[[3305,17]]}}}],["max",{"_index":2548,"t":{"1506":{"position":[[841,4],[964,4]]}}}],["max(maxx",{"_index":41,"t":{"902":{"position":[[253,9]]}}}],["maxpool",{"_index":1503,"t":{"1292":{"position":[[24,14]]}}}],["maxx",{"_index":35,"t":{"902":{"position":[[83,4],[246,4],[344,4]]}}}],["mco",{"_index":3037,"t":{"1663":{"position":[[186,4]]}}}],["md",{"_index":3001,"t":{"1648":{"position":[[69,3]]}}}],["mdx",{"_index":2999,"t":{"1648":{"position":[[14,3],[59,3],[79,4]]},"1650":{"position":[[71,3],[159,3]]}}}],["mean",{"_index":562,"t":{"1061":{"position":[[42,5]]},"1287":{"position":[[105,5]]},"1735":{"position":[[126,23]]}}}],["measur",{"_index":1429,"t":{"1287":{"position":[[69,7]]}}}],["mechan",{"_index":1238,"t":{"1213":{"position":[[136,9]]},"1223":{"position":[[22,70]]},"1423":{"position":[[245,9]]}}}],["media",{"_index":2306,"t":{"1451":{"position":[[50,5]]}}}],["meg",{"_index":260,"t":{"974":{"position":[[604,5]]},"1774":{"position":[[1660,5]]}}}],["mel",{"_index":1161,"t":{"1185":{"position":[[122,3],[480,3]]}}}],["mention",{"_index":1310,"t":{"1217":{"position":[[2610,9]]}}}],["menu",{"_index":3031,"t":{"1663":{"position":[[36,4],[143,4],[299,4]]}}}],["merg",{"_index":2747,"t":{"1599":{"position":[[359,12]]}}}],["messag",{"_index":280,"t":{"974":{"position":[[895,8]]},"1774":{"position":[[1951,8]]}}}],["meta",{"_index":2303,"t":{"1451":{"position":[[5,4],[95,4]]},"1453":{"position":[[0,4]]},"1460":{"position":[[0,4]]}}}],["metadata",{"_index":1170,"t":{"1185":{"position":[[285,9]]}}}],["metadata.json",{"_index":1185,"t":{"1185":{"position":[[539,13]]}}}],["metadata_path",{"_index":1169,"t":{"1185":{"position":[[254,14]]}}}],["method",{"_index":2837,"t":{"1633":{"position":[[632,7],[3332,6]]}}}],["methodolog",{"_index":2074,"t":{"1414":{"position":[[528,11]]},"1485":{"position":[[291,11]]},"1613":{"position":[[291,11]]}}}],["metric",{"_index":1758,"t":{"1375":{"position":[[1060,6],[1834,6]]}}}],["metric.add(d2l.accuracy(net(x",{"_index":1763,"t":{"1375":{"position":[[1205,31]]}}}],["metric.add(l",{"_index":1805,"t":{"1375":{"position":[[2084,12]]}}}],["metric[0",{"_index":1765,"t":{"1375":{"position":[[1275,9],[2165,9]]}}}],["metric[1",{"_index":1766,"t":{"1375":{"position":[[1287,9],[2199,9]]}}}],["metric[2",{"_index":1809,"t":{"1375":{"position":[[2177,9],[2211,9]]}}}],["mhvae",{"_index":2582,"t":{"1508":{"position":[[146,6]]},"1510":{"position":[[27,20]]}}}],["mid",{"_index":647,"t":{"1097":{"position":[[404,4]]},"1099":{"position":[[569,4]]},"1387":{"position":[[162,4],[295,4],[718,4]]},"1389":{"position":[[21,4],[203,4],[470,4]]},"1445":{"position":[[368,4],[443,4],[463,4],[483,4],[501,4]]},"1492":{"position":[[717,4]]},"1512":{"position":[[185,4],[231,4],[586,4],[897,4]]},"1545":{"position":[[162,4],[295,4],[718,4]]},"1547":{"position":[[21,4],[203,4],[470,4]]},"1561":{"position":[[238,4],[476,4],[620,4]]},"1620":{"position":[[717,4]]}}}],["migrat",{"_index":2095,"t":{"1414":{"position":[[919,9]]}}}],["million",{"_index":1990,"t":{"1405":{"position":[[665,7],[688,7]]},"1530":{"position":[[665,7],[688,7]]}}}],["min",{"_index":1509,"t":{"1300":{"position":[[0,3]]},"1633":{"position":[[8711,10],[8765,4]]}}}],["minsu",{"_index":2367,"t":{"1476":{"position":[[378,5]]}}}],["mit",{"_index":1003,"t":{"1156":{"position":[[3,3]]},"1261":{"position":[[3,3]]}}}],["mixing_noise(args.batch_mapp",{"_index":857,"t":{"1147":{"position":[[33,31]]},"1252":{"position":[[33,31]]}}}],["ml2021spring",{"_index":1189,"t":{"1187":{"position":[[40,12]]}}}],["mlp",{"_index":1892,"t":{"1387":{"position":[[673,3],[785,8]]},"1545":{"position":[[673,3],[785,8]]}}}],["mnli（multinli",{"_index":1099,"t":{"1175":{"position":[[254,53]]}}}],["mo",{"_index":2366,"t":{"1476":{"position":[[374,3]]}}}],["modal",{"_index":2820,"t":{"1631":{"position":[[234,5]]}}}],["mode",{"_index":2401,"t":{"1476":{"position":[[1018,69]]}}}],["model",{"_index":289,"t":{"984":{"position":[[58,28]]},"986":{"position":[[823,7]]},"1106":{"position":[[107,97]]},"1114":{"position":[[690,5],[861,6]]},"1118":{"position":[[11,6]]},"1130":{"position":[[52,5]]},"1149":{"position":[[634,5]]},"1151":{"position":[[43,6]]},"1235":{"position":[[52,5]]},"1254":{"position":[[634,5]]},"1256":{"position":[[43,6]]},"1305":{"position":[[97,6],[233,5]]},"1309":{"position":[[24,5]]},"1381":{"position":[[46,6],[271,9],[309,5],[423,6],[549,5],[742,6],[927,9]]},"1403":{"position":[[56,6],[134,6],[232,7],[466,7],[740,6],[872,6],[937,5],[1227,6],[1282,6],[1382,7]]},"1405":{"position":[[183,5],[260,14],[434,23]]},"1410":{"position":[[19,5]]},"1414":{"position":[[16,6],[132,6]]},"1421":{"position":[[147,6]]},"1423":{"position":[[110,6],[336,6],[733,6],[956,5],[994,6],[1197,6]]},"1426":{"position":[[443,12],[466,6]]},"1428":{"position":[[34,26]]},"1431":{"position":[[47,5],[367,5]]},"1433":{"position":[[19,5]]},"1440":{"position":[[103,5]]},"1451":{"position":[[67,6]]},"1453":{"position":[[87,9]]},"1471":{"position":[[95,5]]},"1476":{"position":[[11,5]]},"1485":{"position":[[33,8],[447,6],[914,6],[1344,6],[1398,6]]},"1489":{"position":[[1511,6]]},"1498":{"position":[[74,7]]},"1500":{"position":[[209,5],[242,10]]},"1518":{"position":[[34,6],[501,9]]},"1522":{"position":[[14,5]]},"1528":{"position":[[56,6],[134,6],[232,7],[466,7],[740,6],[872,6],[937,5],[1227,6],[1282,6],[1382,7]]},"1530":{"position":[[183,5],[260,14],[434,23]]},"1535":{"position":[[19,5]]},"1539":{"position":[[46,6],[271,9],[309,5],[423,6],[549,5],[742,6],[927,9]]},"1559":{"position":[[21,137]]},"1581":{"position":[[61,6]]},"1583":{"position":[[2082,6]]},"1585":{"position":[[83,6]]},"1613":{"position":[[33,8],[447,6],[914,6],[1344,6],[1398,6]]},"1617":{"position":[[1511,6]]},"1624":{"position":[[221,5]]},"1628":{"position":[[46,7],[138,6],[166,5]]},"1631":{"position":[[42,5],[161,6]]},"1633":{"position":[[1497,7],[2359,9],[2601,5],[2810,9],[3068,7],[3146,12],[3241,5],[3424,5],[3783,5],[3879,5],[4003,16],[4046,6],[5851,6],[6002,6],[6047,5],[6825,5],[6858,5],[7873,5],[8626,6]]},"1636":{"position":[[30,7],[106,7],[273,6]]},"1638":{"position":[[72,6]]}}}],["model'",{"_index":1567,"t":{"1307":{"position":[[346,7]]}}}],["models）模型为例，模型在denoise时为每个denoise步骤赋予一个编号，越早进行denoise的步骤编号越大，因此，这个编号也代表着图像中噪声的严重程度。在denoise模块中，模型根据输入的带有噪声的图片、文字prompt以及噪声的严重程度（即denoise的步骤）预测出该图片中噪声的分布，然后将输入的图片中减去预测出的噪声得到denois",{"_index":780,"t":{"1128":{"position":[[177,184]]}}}],["models，norm",{"_index":2523,"t":{"1500":{"position":[[90,18]]}}}],["model以及gan",{"_index":769,"t":{"1120":{"position":[[35,23]]}}}],["model其实就是训练一个nois",{"_index":745,"t":{"1118":{"position":[[226,18]]}}}],["model或gan",{"_index":2352,"t":{"1473":{"position":[[351,11]]}}}],["model时的训练资料可以通过对数据集中的原始图片添加与图像大小一致地从已知随机分布中sample出的噪声来获得。此时加入噪声后的图像可以作为压缩图像输入至nois",{"_index":747,"t":{"1118":{"position":[[323,83]]}}}],["model概率扩散模型理论与完整pytorch",{"_index":2247,"t":{"1440":{"position":[[57,29]]}}}],["model生成的压缩的图片或lat",{"_index":759,"t":{"1118":{"position":[[846,20]]}}}],["model的中间产物是压缩图像时，如diffusion模型，在训练gener",{"_index":746,"t":{"1118":{"position":[[279,43]]}}}],["model的中间产物，st",{"_index":699,"t":{"1114":{"position":[[382,17]]}}}],["model的具体数学推导，可以参考胡老师推荐的论文understand",{"_index":311,"t":{"986":{"position":[[774,38]]}}}],["model的最终输出是中间产物，这个中间产物可以是图像的压缩版本，也可以是一个lat",{"_index":743,"t":{"1118":{"position":[[149,45]]}}}],["model的模型大小，text",{"_index":703,"t":{"1114":{"position":[[482,15]]}}}],["model的生成过程其实就是denoise的过程。具体来讲，输入文字prompt以及从随机分布中sample出的与预期生成图像具有相同大小的噪声矩阵，预测出输入图片中的噪声分布，在输入图像中减去噪声，输出去噪后的图像。gener",{"_index":742,"t":{"1118":{"position":[[29,119]]}}}],["model的训练需要大量成对的（pair",{"_index":757,"t":{"1118":{"position":[[782,23]]}}}],["model的输出是压缩版本的图像时，decoder的训练资料可以将从互联网上fetch到的图像作为label，并对这些图像做down",{"_index":761,"t":{"1118":{"position":[[946,66]]}}}],["model等生成模型，都不只是单独使用文字作为输入来生成图像，而是使用了从已知的随机分布（e.g",{"_index":685,"t":{"1110":{"position":[[19,49]]}}}],["model非常相似：vae对训练集中的原始图像使用encoder将其变换为某种lat",{"_index":307,"t":{"986":{"position":[[606,45]]}}}],["model（mlm）任务的交叉熵损失，通过最小化encoder输出的概率分布与ground",{"_index":1087,"t":{"1173":{"position":[[202,45]]}}}],["model（non",{"_index":2721,"t":{"1583":{"position":[[1138,9]]}}}],["model：接受text",{"_index":693,"t":{"1114":{"position":[[125,12]]}}}],["modifi",{"_index":191,"t":{"972":{"position":[[956,6]]}}}],["modul",{"_index":1234,"t":{"1213":{"position":[[17,6],[90,7]]}}}],["monitor",{"_index":3036,"t":{"1663":{"position":[[171,7]]}}}],["more",{"_index":708,"t":{"1114":{"position":[[618,4],[786,4]]},"1213":{"position":[[234,4]]},"1307":{"position":[[316,4]]},"1473":{"position":[[145,4]]}}}],["motherfuck",{"_index":206,"t":{"972":{"position":[[1613,13]]}}}],["motiv",{"_index":1863,"t":{"1381":{"position":[[960,8]]},"1539":{"position":[[960,8]]}}}],["mount",{"_index":210,"t":{"972":{"position":[[1783,6]]}}}],["mous",{"_index":273,"t":{"974":{"position":[[777,6]]},"1774":{"position":[[1833,6]]}}}],["move(t,a)move(t",{"_index":80,"t":{"925":{"position":[[292,18]]}}}],["movi",{"_index":2310,"t":{"1453":{"position":[[5,5],[50,5],[97,5],[116,5],[133,5],[214,5]]},"1460":{"position":[[9,5]]},"1462":{"position":[[444,5]]}}}],["mrpc（microsoft",{"_index":1116,"t":{"1175":{"position":[[653,14]]}}}],["mse",{"_index":513,"t":{"1039":{"position":[[0,29]]},"1326":{"position":[[72,50]]}}}],["mse=1mn∑x=1m∑y=1n[f(x,y)−g(x,y)]2(4)mse=\\frac{1}{mn}\\sum_{x=1}^{m}\\sum_{y=1}^{n}[f(x,i",{"_index":514,"t":{"1039":{"position":[[30,87]]}}}],["mse作为损失函数，其目标是让输出的概率更接近于1",{"_index":1611,"t":{"1328":{"position":[[0,56]]}}}],["mu(x)}{\\sigma(x",{"_index":2030,"t":{"1410":{"position":[[1643,18]]},"1535":{"position":[[1644,18]]}}}],["mu_2)^2}{2\\sigma_2^2",{"_index":2291,"t":{"1445":{"position":[[859,22]]}}}],["mu_2\\right\\|_2^2+\\mathrm{tr}\\left(\\sigma_1+\\sigma_2",{"_index":730,"t":{"1116":{"position":[[444,52]]}}}],["mu_\\phi(x",{"_index":2539,"t":{"1506":{"position":[[378,12]]}}}],["multi",{"_index":427,"t":{"1022":{"position":[[784,5],[907,5],[962,5]]},"1223":{"position":[[105,16]]},"1229":{"position":[[0,23]]},"1362":{"position":[[784,5],[907,5],[962,5]]},"1414":{"position":[[995,5]]},"1492":{"position":[[1229,5]]},"1494":{"position":[[0,5]]},"1620":{"position":[[1229,5]]},"1622":{"position":[[0,5]]},"1631":{"position":[[228,5]]}}}],["multihead",{"_index":455,"t":{"1030":{"position":[[0,14]]},"1370":{"position":[[0,14]]}}}],["multimod",{"_index":1979,"t":{"1403":{"position":[[1360,10]]},"1528":{"position":[[1360,10]]}}}],["multipl",{"_index":2442,"t":{"1485":{"position":[[803,8]]},"1613":{"position":[[803,8]]}}}],["mutil",{"_index":438,"t":{"1022":{"position":[[1357,5]]},"1362":{"position":[[1357,5]]}}}],["mux=σ∗z",{"_index":2302,"t":{"1449":{"position":[[128,10]]}}}],["muμ，背景像素的正态分布概率密度函数的均值为ν\\nu",{"_index":614,"t":{"1077":{"position":[[7,102]]}}}],["mvtm",{"_index":2723,"t":{"1583":{"position":[[1348,7]]}}}],["m}:=\\mathbb{e}_{\\mathcal{e}(x",{"_index":2212,"t":{"1433":{"position":[[741,31]]},"1435":{"position":[[1034,31]]}}}],["m}=\\mathbb{e}_{x",{"_index":2202,"t":{"1433":{"position":[[294,17]]}}}],["n",{"_index":161,"t":{"972":{"position":[[409,5],[474,4],[1635,5],[1689,4]]},"1133":{"position":[[14,1]]},"1217":{"position":[[2325,4],[4484,4]]},"1238":{"position":[[14,1]]},"1671":{"position":[[9,1],[18,1]]},"1689":{"position":[[19,13]]},"1699":{"position":[[297,12],[310,26],[337,27]]},"1707":{"position":[[169,12],[182,26],[209,27]]}}}],["n\"代替endl",{"_index":135,"t":{"968":{"position":[[304,41]]}}}],["n(0",{"_index":2569,"t":{"1506":{"position":[[1523,4]]}}}],["n(0,1",{"_index":2899,"t":{"1633":{"position":[[4849,7]]}}}],["n(0,i)\\epsilon",{"_index":2920,"t":{"1633":{"position":[[6087,16]]}}}],["n(0,i)\\mathcal{n}(0",{"_index":1883,"t":{"1387":{"position":[[404,20]]},"1389":{"position":[[310,20]]},"1545":{"position":[[404,20]]},"1547":{"position":[[310,20]]}}}],["n(0,i)z=μϕ​(x)+σϕ​(x)⊙ϵ,ϵ∼n(0,i",{"_index":2574,"t":{"1506":{"position":[[1689,32]]}}}],["n(μ,σ2)\\mathcal{n}(\\mu,\\sigma^2)n(μ,σ2)采样xxx时，可以先从标准高斯分布n(0,1)\\mathcal{n}(0,1)n(0,1)中sample出zzz",{"_index":2300,"t":{"1449":{"position":[[0,105]]}}}],["n2",{"_index":3058,"t":{"1671":{"position":[[88,2]]}}}],["n2n^2n2",{"_index":2516,"t":{"1496":{"position":[[284,7]]},"1626":{"position":[[284,7]]}}}],["n\\left(x;\\mu,\\sigma^2\\right)x∼n(x;μ,σ2",{"_index":2567,"t":{"1506":{"position":[[1424,46]]}}}],["n_dim",{"_index":1018,"t":{"1159":{"position":[[311,7],[393,5],[966,5]]},"1217":{"position":[[87,5],[117,18]]},"1223":{"position":[[284,5],[314,18]]},"1264":{"position":[[311,7],[393,5],[966,5]]}}}],["n_latent",{"_index":897,"t":{"1149":{"position":[[672,8],[817,8]]},"1254":{"position":[[672,8],[817,8]]}}}],["nabla",{"_index":2645,"t":{"1520":{"position":[[594,6]]},"1522":{"position":[[246,6]]},"1524":{"position":[[176,6],[471,6],[520,7],[623,6],[678,7],[729,6],[783,6],[851,6],[951,6]]}}}],["nada",{"_index":913,"t":{"1151":{"position":[[5,4],[38,4],[1045,4],[1585,4],[2116,4],[2472,4]]},"1256":{"position":[[5,4],[38,4],[1045,4],[1585,4],[2116,4],[2472,4]]}}}],["nada率先引入了clip模型来获取必须的先验知识，通过预训练大模型的语言理解能力实现在目标域只需要文字标签而不需要图片，将源域和目标域之间的差距编码为在clip",{"_index":2399,"t":{"1476":{"position":[[831,112]]}}}],["namespac",{"_index":8,"t":{"896":{"position":[[31,9]]},"902":{"position":[[31,9]]},"966":{"position":[[31,9]]},"1689":{"position":[[72,9]]}}}],["nar",{"_index":683,"t":{"1108":{"position":[[0,63]]}}}],["nasm",{"_index":3223,"t":{"1772":{"position":[[27,6],[100,4]]}}}],["nat",{"_index":412,"t":{"1020":{"position":[[91,9]]},"1360":{"position":[[91,9]]}}}],["natur",{"_index":1105,"t":{"1175":{"position":[[384,7]]},"1633":{"position":[[960,7]]}}}],["neamtiu",{"_index":184,"t":{"972":{"position":[[834,7]]}}}],["neamtiu@cs.umd.edu",{"_index":185,"t":{"972":{"position":[[842,20]]}}}],["near",{"_index":2160,"t":{"1423":{"position":[[802,4]]},"1485":{"position":[[1031,4]]},"1613":{"position":[[1031,4]]}}}],["necess",{"_index":1841,"t":{"1381":{"position":[[242,9]]},"1539":{"position":[[242,9]]}}}],["need",{"_index":248,"t":{"974":{"position":[[404,4]]},"1381":{"position":[[611,4]]},"1414":{"position":[[1319,6]]},"1539":{"position":[[611,4]]},"1774":{"position":[[1460,4]]}}}],["neq",{"_index":1454,"t":{"1287":{"position":[[754,4]]}}}],["net",{"_index":710,"t":{"1114":{"position":[[640,3],[698,3],[812,3]]},"1585":{"position":[[40,3]]},"1631":{"position":[[5,3]]},"1724":{"position":[[7,8]]}}}],["net(x",{"_index":1801,"t":{"1375":{"position":[[2028,6]]}}}],["net.apply(init_weight",{"_index":1778,"t":{"1375":{"position":[[1531,23]]}}}],["net.ev",{"_index":1756,"t":{"1375":{"position":[[989,10]]}}}],["net.generator_frozen.style(sample_z",{"_index":862,"t":{"1147":{"position":[[122,36]]},"1252":{"position":[[122,36]]}}}],["net.to(devic",{"_index":1779,"t":{"1375":{"position":[[1555,14]]}}}],["net.train",{"_index":1794,"t":{"1375":{"position":[[1862,11]]}}}],["network",{"_index":353,"t":{"1003":{"position":[[38,48]]},"1005":{"position":[[42,53]]},"1147":{"position":[[506,7],[577,10]]},"1151":{"position":[[1869,7]]},"1217":{"position":[[626,7]]},"1252":{"position":[[506,7],[577,10]]},"1256":{"position":[[1869,7]]},"1476":{"position":[[337,9]]},"1572":{"position":[[152,12],[208,26]]},"1583":{"position":[[806,8]]}}}],["network进行映射得到的，map",{"_index":868,"t":{"1147":{"position":[[483,22]]},"1252":{"position":[[483,22]]}}}],["network），fcn通过最后通过反卷积将tensor还原到原始图像尺寸，即在cnn中，输入与输出（下游任务的要求）都影响着cnn",{"_index":1226,"t":{"1208":{"position":[[212,72]]}}}],["network，生成对抗网络）包括两个主要的组件：生成器（generator）和判别器（discrimin",{"_index":349,"t":{"1001":{"position":[[27,78]]}}}],["neural",{"_index":1259,"t":{"1217":{"position":[[619,6]]}}}],["neurip",{"_index":2969,"t":{"1636":{"position":[[0,7]]}}}],["new",{"_index":1922,"t":{"1403":{"position":[[25,3]]},"1423":{"position":[[1219,3]]},"1485":{"position":[[51,3]]},"1528":{"position":[[25,3]]},"1613":{"position":[[51,3]]}}}],["next",{"_index":1092,"t":{"1173":{"position":[[428,4]]},"1403":{"position":[[83,5]]},"1485":{"position":[[146,5],[173,5],[243,5]]},"1487":{"position":[[32,4]]},"1489":{"position":[[21,4],[892,4],[929,4],[985,4]]},"1492":{"position":[[155,4],[298,4],[326,4],[1205,4]]},"1496":{"position":[[57,4]]},"1528":{"position":[[83,5]]},"1583":{"position":[[1092,4]]},"1613":{"position":[[146,5],[173,5],[243,5]]},"1615":{"position":[[32,4]]},"1617":{"position":[[21,4],[892,4],[929,4],[985,4]]},"1620":{"position":[[155,4],[298,4],[326,4],[1205,4]]},"1624":{"position":[[181,4]]},"1626":{"position":[[57,4]]}}}],["next(iter(net.parameters())).devic",{"_index":1757,"t":{"1375":{"position":[[1024,35]]}}}],["next_permutation(list.begin",{"_index":48,"t":{"904":{"position":[[106,31]]}}}],["next_permutation(s.begin",{"_index":42,"t":{"902":{"position":[[279,28]]}}}],["nfa",{"_index":77,"t":{"925":{"position":[[194,14]]}}}],["nfa的确定化，即将nfa转换为dfa",{"_index":78,"t":{"925":{"position":[[209,24]]}}}],["nfa终态的集合要标*，代表其为等价dfa",{"_index":79,"t":{"925":{"position":[[251,40]]}}}],["ngai",{"_index":2396,"t":{"1476":{"position":[[753,4]]}}}],["ngoc",{"_index":2388,"t":{"1476":{"position":[[675,9],[713,4]]}}}],["nguyen",{"_index":2394,"t":{"1476":{"position":[[722,7],[741,7]]}}}],["nhead=4",{"_index":1027,"t":{"1159":{"position":[[541,8]]},"1264":{"position":[[541,8]]}}}],["night/128x128/apps(deppend",{"_index":3023,"t":{"1661":{"position":[[109,29]]}}}],["ninja",{"_index":805,"t":{"1135":{"position":[[152,5]]},"1240":{"position":[[152,5]]}}}],["nli",{"_index":1125,"t":{"1175":{"position":[[795,16]]}}}],["nllloss",{"_index":1484,"t":{"1287":{"position":[[1492,11],[1504,7]]}}}],["nllloss(predict",{"_index":1491,"t":{"1287":{"position":[[1655,16]]}}}],["nlp",{"_index":1981,"t":{"1405":{"position":[[9,3],[282,3]]},"1414":{"position":[[554,3]]},"1487":{"position":[[76,3]]},"1489":{"position":[[884,3]]},"1530":{"position":[[9,3],[282,3]]},"1615":{"position":[[76,3]]},"1617":{"position":[[884,3]]}}}],["nlp任务中很重要的一个benchmark：glu",{"_index":1094,"t":{"1175":{"position":[[47,38]]}}}],["nlp领域的，但是bert是seq2seq模型，图片、语音等信号也都可以作为sequence输入至bert中，因此bert",{"_index":1135,"t":{"1175":{"position":[[1394,88]]}}}],["nm",{"_index":624,"t":{"1081":{"position":[[293,32]]},"1733":{"position":[[590,9]]}}}],["nn",{"_index":1483,"t":{"1287":{"position":[[1487,2]]},"1375":{"position":[[50,2],[56,2]]}}}],["nn.avgpool2d(kernel_size=2",{"_index":1740,"t":{"1375":{"position":[[617,27],[705,27]]}}}],["nn.conv2d",{"_index":1776,"t":{"1375":{"position":[[1486,10]]}}}],["nn.conv2d(1",{"_index":1736,"t":{"1375":{"position":[[558,12]]}}}],["nn.conv2d(6",{"_index":1742,"t":{"1375":{"position":[[656,12]]}}}],["nn.crossentropyloss",{"_index":1495,"t":{"1287":{"position":[[1740,21]]}}}],["nn.flatten",{"_index":1744,"t":{"1375":{"position":[[744,13]]}}}],["nn.init.xavier_uniform_(m.weight",{"_index":1777,"t":{"1375":{"position":[[1497,33]]}}}],["nn.leakyrelu",{"_index":1739,"t":{"1375":{"position":[[601,15],[689,15],[786,15]]}}}],["nn.linear",{"_index":1775,"t":{"1375":{"position":[[1462,9]]}}}],["nn.linear(120",{"_index":1747,"t":{"1375":{"position":[[802,14]]}}}],["nn.linear(16",{"_index":1745,"t":{"1375":{"position":[[758,12]]}}}],["nn.linear(84",{"_index":1749,"t":{"1375":{"position":[[836,13]]}}}],["nn.nllloss",{"_index":1485,"t":{"1287":{"position":[[1514,12]]}}}],["nn.sequential(*lay",{"_index":878,"t":{"1147":{"position":[[741,22]]},"1252":{"position":[[741,22]]}}}],["nn.sequential(*layers).to(devic",{"_index":1045,"t":{"1159":{"position":[[1073,33]]},"1264":{"position":[[1073,33]]}}}],["nn.sigmoid",{"_index":1748,"t":{"1375":{"position":[[822,13]]}}}],["nnn",{"_index":466,"t":{"1030":{"position":[[1079,20]]},"1116":{"position":[[716,30],[747,74]]},"1173":{"position":[[365,17]]},"1213":{"position":[[33,3],[56,3]]},"1219":{"position":[[0,29]]},"1370":{"position":[[1079,20]]},"1410":{"position":[[427,9]]},"1535":{"position":[[427,9]]}}}],["node_modul",{"_index":3020,"t":{"1654":{"position":[[56,12]]}}}],["nois",{"_index":293,"t":{"986":{"position":[[165,19]]},"988":{"position":[[164,20]]},"1387":{"position":[[579,5],[600,5],[832,5]]},"1512":{"position":[[524,5]]},"1545":{"position":[[579,5],[600,5],[832,5]]},"1633":{"position":[[289,5],[806,5],[841,5]]}}}],["noisi",{"_index":2659,"t":{"1524":{"position":[[274,5]]}}}],["none",{"_index":468,"t":{"1030":{"position":[[1577,5]]},"1217":{"position":[[2265,5],[2295,5],[4424,5],[4454,5]]},"1370":{"position":[[1577,5]]},"1375":{"position":[[2360,6],[2440,6],[2447,5]]},"1603":{"position":[[394,5],[509,5]]}}}],["norm",{"_index":908,"t":{"1149":{"position":[[1149,4],[1272,4]]},"1159":{"position":[[271,10]]},"1254":{"position":[[1149,4],[1272,4]]},"1264":{"position":[[271,10]]}}}],["normal",{"_index":329,"t":{"990":{"position":[[0,7]]},"1014":{"position":[[73,14]]},"1110":{"position":[[69,6]]},"1122":{"position":[[178,6]]},"1149":{"position":[[881,14]]},"1159":{"position":[[224,15]]},"1217":{"position":[[1826,9],[4122,9]]},"1254":{"position":[[881,14]]},"1264":{"position":[[224,15]]},"1354":{"position":[[73,14]]},"1408":{"position":[[170,16]]},"1410":{"position":[[163,13]]},"1533":{"position":[[170,16]]},"1535":{"position":[[163,13]]}}}],["normalization:\\n",{"_index":1296,"t":{"1217":{"position":[[1959,18],[4255,18]]}}}],["normalization（adaln",{"_index":2513,"t":{"1494":{"position":[[380,21]]},"1622":{"position":[[380,21]]}}}],["normalization）是一种自适应层归一化方法，旨在为不同的样本动态调整归一化参数。与传统的层归一化方法不同，adaln",{"_index":2028,"t":{"1410":{"position":[[1489,63]]},"1535":{"position":[[1490,63]]}}}],["normalization，不需要进行pixelnorm",{"_index":1024,"t":{"1159":{"position":[[432,28]]},"1264":{"position":[[432,28]]}}}],["normalization，之后送入fcn并进行residu",{"_index":405,"t":{"1018":{"position":[[119,32]]},"1358":{"position":[[119,32]]}}}],["normalization，以上构成了一个encod",{"_index":407,"t":{"1018":{"position":[[186,28]]},"1358":{"position":[[186,28]]}}}],["notabl",{"_index":2112,"t":{"1414":{"position":[[1272,8]]}}}],["notebook",{"_index":2980,"t":{"1644":{"position":[[116,11]]}}}],["noun",{"_index":2948,"t":{"1633":{"position":[[7158,13],[7647,5],[8117,6]]}}}],["novel",{"_index":2061,"t":{"1414":{"position":[[208,5]]},"1633":{"position":[[6875,5]]}}}],["now",{"_index":39,"t":{"902":{"position":[[138,3],[184,3],[190,3],[218,4],[263,5]]},"972":{"position":[[2315,3]]},"1652":{"position":[[11,3]]}}}],["np",{"_index":1335,"t":{"1217":{"position":[[3295,2]]},"1375":{"position":[[29,2]]},"1603":{"position":[[275,2]]},"1692":{"position":[[789,24]]},"1701":{"position":[[789,24]]}}}],["npm",{"_index":3017,"t":{"1652":{"position":[[172,3]]},"1654":{"position":[[88,3]]}}}],["np完全问题是一类特殊的np问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的np",{"_index":3105,"t":{"1692":{"position":[[814,52]]},"1701":{"position":[[814,52]]}}}],["ntfsfix",{"_index":3051,"t":{"1668":{"position":[[18,9],[35,7],[64,7]]}}}],["ntfsfix修复ntf",{"_index":3050,"t":{"1668":{"position":[[0,17]]}}}],["nucleu",{"_index":659,"t":{"1099":{"position":[[13,7]]}}}],["num)(batch,num",{"_index":1298,"t":{"1217":{"position":[[2113,16],[2467,16]]}}}],["num_batch",{"_index":1790,"t":{"1375":{"position":[[1791,11],[2238,12],[2274,11],[2326,12]]}}}],["num_epoch",{"_index":1772,"t":{"1375":{"position":[[1402,11],[1723,12],[2566,10],[2724,10],[2798,11]]}}}],["num_head",{"_index":1250,"t":{"1217":{"position":[[152,28]]},"1223":{"position":[[349,28]]}}}],["num_layers=2",{"_index":1032,"t":{"1159":{"position":[[669,13]]},"1264":{"position":[[669,13]]}}}],["number",{"_index":1264,"t":{"1217":{"position":[[675,8]]},"1330":{"position":[[790,6]]}}}],["numnumnum的注意力分数向量，考虑到有batchbatchbatch个输入向量，因此最终的注意力分数矩阵的形状为(batch,num)(batch",{"_index":1307,"t":{"1217":{"position":[[2358,108]]}}}],["numpi",{"_index":1334,"t":{"1217":{"position":[[3286,5]]},"1375":{"position":[[20,5]]},"1603":{"position":[[266,5]]}}}],["nu}{2}\\tag{25}t=2μ+ν​(25",{"_index":616,"t":{"1077":{"position":[[132,27]]}}}],["nvidia",{"_index":794,"t":{"1135":{"position":[[4,6],[117,6]]},"1240":{"position":[[4,6],[117,6]]},"1633":{"position":[[5583,6],[5738,6],[8743,6]]}}}],["n})x=(x1​,x2​,…,xn×n",{"_index":2481,"t":{"1489":{"position":[[1970,22]]},"1617":{"position":[[1970,22]]}}}],["n位整数求余10可以得到最后一位，再除以10可以得到除去上述最后一位之后的n",{"_index":22,"t":{"898":{"position":[[21,41]]}}}],["n是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求n",{"_index":4,"t":{"894":{"position":[[4,43]]}}}],["n维向量w=(w1,w2,...,wn)w=(w_1,w_2,...,w_n)w=(w1​,w2​,...,wn",{"_index":1649,"t":{"1335":{"position":[[89,88]]}}}],["n维向量x=(x1,x2,...,xn)x=(x_1,x_2,...,x_n)x=(x1​,x2​,...,xn",{"_index":1648,"t":{"1335":{"position":[[0,88]]}}}],["o",{"_index":3265,"t":{"1774":{"position":[[1263,1],[1312,1]]}}}],["o(co×ci×h×w×h′×w′)o(c_o",{"_index":1590,"t":{"1314":{"position":[[394,29]]}}}],["o(log(n))\\mathcal{o}(log(n))o(log(n",{"_index":2519,"t":{"1496":{"position":[[421,37]]},"1626":{"position":[[421,37]]}}}],["o(n2)\\mathcal{o}(n^2)o(n2",{"_index":2517,"t":{"1496":{"position":[[336,26]]},"1626":{"position":[[336,26]]}}}],["o(n2)\\mathcal{o}(n^{2})o(n2",{"_index":2482,"t":{"1489":{"position":[[2007,28]]},"1617":{"position":[[2007,28]]}}}],["o(n4)\\mathcal{o}(n^4)o(n4",{"_index":2520,"t":{"1496":{"position":[[464,27]]},"1626":{"position":[[464,27]]}}}],["o(n6)\\mathcal{o}(n^6)o(n6",{"_index":2518,"t":{"1496":{"position":[[370,26]]},"1626":{"position":[[370,26]]}}}],["o(n6)\\mathcal{o}(n^{6})o(n6",{"_index":2483,"t":{"1489":{"position":[[2045,28]]},"1617":{"position":[[2045,28]]}}}],["o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5",{"_index":460,"t":{"1030":{"position":[[265,163]]},"1370":{"position":[[265,163]]}}}],["o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix",{"_index":464,"t":{"1030":{"position":[[822,203]]},"1370":{"position":[[822,203]]}}}],["o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix",{"_index":462,"t":{"1030":{"position":[[504,227]]},"1370":{"position":[[504,227]]}}}],["o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}​o1​o2​⋮on​​​=​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​​​v1​v2​⋮vn​​​(8",{"_index":467,"t":{"1030":{"position":[[1100,405]]},"1370":{"position":[[1100,405]]}}}],["object",{"_index":2334,"t":{"1464":{"position":[[928,19]]},"1633":{"position":[[4698,10]]},"1722":{"position":[[15,6]]}}}],["observ",{"_index":1837,"t":{"1381":{"position":[[131,7]]},"1485":{"position":[[976,8]]},"1539":{"position":[[131,7]]},"1613":{"position":[[976,8]]}}}],["odena",{"_index":2361,"t":{"1476":{"position":[[259,6]]}}}],["odot",{"_index":2573,"t":{"1506":{"position":[[1659,5],[1726,7]]}}}],["offer",{"_index":487,"t":{"1032":{"position":[[180,5]]}}}],["offer的也不用着急，因为每个学生只能上一个学校，928/929当天就算手里一堆offer的学生也是只能选择最想去的学校而释放掉其他offer。稳住心态沉住气，一般10月20",{"_index":3112,"t":{"1712":{"position":[[80,112]]}}}],["ojha",{"_index":2375,"t":{"1476":{"position":[[510,5]]}}}],["on",{"_index":1556,"t":{"1307":{"position":[[46,3]]},"1631":{"position":[[186,3]]},"1774":{"position":[[1026,3]]}}}],["onc",{"_index":1270,"t":{"1217":{"position":[[823,4]]},"1307":{"position":[[228,4]]},"1309":{"position":[[131,4]]}}}],["open",{"_index":1977,"t":{"1403":{"position":[[1313,4]]},"1471":{"position":[[18,4]]},"1528":{"position":[[1313,4]]}}}],["openai",{"_index":2709,"t":{"1576":{"position":[[14,6]]},"1599":{"position":[[12,6]]}}}],["oper",{"_index":2146,"t":{"1423":{"position":[[353,7]]}}}],["operatorname{uniform}[1",{"_index":2864,"t":{"1633":{"position":[[2091,25]]}}}],["opt",{"_index":1017,"t":{"1159":{"position":[[305,5],[375,4]]},"1264":{"position":[[305,5],[375,4]]}}}],["optim",{"_index":1780,"t":{"1375":{"position":[[1570,9]]},"1403":{"position":[[1176,10]]},"1423":{"position":[[386,12],[807,7]]},"1528":{"position":[[1176,10]]},"1633":{"position":[[2431,12]]}}}],["optimizer.step",{"_index":1804,"t":{"1375":{"position":[[2067,16]]}}}],["optimizer.zero_grad",{"_index":1799,"t":{"1375":{"position":[[1964,21]]}}}],["opts.n_ctx",{"_index":1042,"t":{"1159":{"position":[[974,11]]},"1264":{"position":[[974,11]]}}}],["opts=dic(title=\"win_titl",{"_index":1217,"t":{"1203":{"position":[[82,27]]}}}],["opts=dict(title=\"win_titl",{"_index":1209,"t":{"1201":{"position":[[151,29]]}}}],["opt}}eopt",{"_index":2868,"t":{"1633":{"position":[[2269,13]]}}}],["origin",{"_index":1153,"t":{"1185":{"position":[[4,8]]},"1403":{"position":[[74,8]]},"1528":{"position":[[74,8]]}}}],["os",{"_index":1721,"t":{"1375":{"position":[[169,2]]}}}],["os.environ['http_proxi",{"_index":1722,"t":{"1375":{"position":[[172,24]]}}}],["os.environ['https_proxi",{"_index":1724,"t":{"1375":{"position":[[223,25]]}}}],["out",{"_index":1242,"t":{"1213":{"position":[[210,3]]},"1414":{"position":[[709,3]]},"1485":{"position":[[1166,3]]},"1613":{"position":[[1166,3]]}}}],["outcom",{"_index":1941,"t":{"1403":{"position":[[511,7]]},"1528":{"position":[[511,7]]}}}],["outperform",{"_index":1956,"t":{"1403":{"position":[[836,13]]},"1485":{"position":[[756,11]]},"1528":{"position":[[836,13]]},"1613":{"position":[[756,11]]}}}],["output",{"_index":283,"t":{"974":{"position":[[943,7]]},"1163":{"position":[[859,6]]},"1213":{"position":[[60,8],[271,7]]},"1217":{"position":[[2558,7],[2566,7],[2922,6],[4516,7],[4524,7]]},"1268":{"position":[[859,6]]},"1287":{"position":[[1681,7],[1867,7]]},"1347":{"position":[[885,7],[939,7]]},"1603":{"position":[[602,6]]},"1633":{"position":[[6804,6]]},"1774":{"position":[[1999,7]]}}}],["over",{"_index":2885,"t":{"1633":{"position":[[3708,4]]}}}],["overfitting）以及语言漂移（languag",{"_index":2945,"t":{"1633":{"position":[[7005,41]]}}}],["p",{"_index":658,"t":{"1099":{"position":[[4,1],[67,1]]},"1101":{"position":[[74,1]]},"1143":{"position":[[89,1],[364,1]]},"1248":{"position":[[89,1],[364,1]]},"1692":{"position":[[740,1],[770,18]]},"1701":{"position":[[740,1],[770,18]]}}}],["p(a)=∑i=1np(a∣bi)⋅p(bi)p(a)=\\sum_{i=1}^np(a\\mid",{"_index":2257,"t":{"1443":{"position":[[389,47]]}}}],["p(a)p(a)p(a)和p(b)p(b)p(b",{"_index":3102,"t":{"1692":{"position":[[627,30]]},"1701":{"position":[[627,30]]}}}],["p(a)p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣a,b)⋅p(b∣a)⋅p(a)p(b,c∣a)=p(b∣a)⋅p(c∣a,b)p(b,c\\mid",{"_index":2275,"t":{"1445":{"position":[[124,82]]}}}],["p(a)p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣b)⋅p(b∣a)⋅p(a)p(b,c∣a)=p(b∣a)⋅p(c∣b)p(b,c\\mid",{"_index":2298,"t":{"1447":{"position":[[169,78]]}}}],["p(a)}{p(b)}p(a∣b)=p(b)p(b∣a)∗p(a",{"_index":3099,"t":{"1692":{"position":[[484,34]]},"1701":{"position":[[484,34]]}}}],["p(a,b)=p(c\\mid",{"_index":2272,"t":{"1445":{"position":[[83,14]]},"1447":{"position":[[130,14]]}}}],["p(a,b)p(a,b)p(a,b)是事件aaa、bbb",{"_index":2253,"t":{"1443":{"position":[[180,42]]}}}],["p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣a,b)⋅p(b∣a)⋅p(a)p(a,b,c)=p(c\\mid",{"_index":2270,"t":{"1445":{"position":[[11,61]]}}}],["p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣b)⋅p(b∣a)⋅p(a)p(a,b,c",{"_index":2296,"t":{"1447":{"position":[[59,51]]}}}],["p(a∣b)=p(a,b)p(b)p(a\\mid",{"_index":2251,"t":{"1443":{"position":[[110,24]]}}}],["p(a∣b)=p(b∣a)∗p(a)p(b)p(a|b",{"_index":3097,"t":{"1692":{"position":[[438,28]]},"1701":{"position":[[438,28]]}}}],["p(a∣b)p(a\\mid",{"_index":2249,"t":{"1443":{"position":[[9,53]]}}}],["p(a∣b)p(a|b)p(a∣b",{"_index":3100,"t":{"1692":{"position":[[523,26]]},"1701":{"position":[[523,26]]}}}],["p(a∣bi)p(a\\mid",{"_index":2268,"t":{"1443":{"position":[[829,14]]}}}],["p(b",{"_index":2284,"t":{"1445":{"position":[[459,3],[479,3]]}}}],["p(b)p(b)p(b)是事件bbb",{"_index":2254,"t":{"1443":{"position":[[223,25]]}}}],["p(b,c",{"_index":2280,"t":{"1445":{"position":[[362,5]]}}}],["p(b,c∣a)=p(a,b,c)p(a)=p(a,b,c)p(a,b,c)p(c∣a,b)⋅p(b∣a)=p(b∣a)⋅p(c∣a,b)\\begin{align",{"_index":2279,"t":{"1445":{"position":[[278,83]]}}}],["p(b\\mid",{"_index":2273,"t":{"1445":{"position":[[108,7]]},"1447":{"position":[[153,7]]}}}],["p(b_i)p(a)=i=1∑n​p(a∣bi​)⋅p(bi",{"_index":2259,"t":{"1443":{"position":[[447,32]]}}}],["p(b_i)}{p(a)}p(bi​∣a)=p(a)p(a∣bi​)⋅p(bi",{"_index":2264,"t":{"1443":{"position":[[710,42]]}}}],["p(bi)p(b_i)p(bi​)以及p(a)p(a)p(a",{"_index":2265,"t":{"1443":{"position":[[757,37]]}}}],["p(bi∣a)=p(a∣bi)⋅p(bi)p(a)p(b_i\\mid",{"_index":2262,"t":{"1443":{"position":[[648,34]]}}}],["p(bi∣a)p(b_i\\mid",{"_index":2266,"t":{"1443":{"position":[[795,16]]}}}],["p(b∣a)p(b|a)p(b∣a",{"_index":3101,"t":{"1692":{"position":[[577,23]]},"1701":{"position":[[577,23]]}}}],["p(c",{"_index":2285,"t":{"1445":{"position":[[497,3]]}}}],["p(c\\mid",{"_index":2277,"t":{"1445":{"position":[[226,7]]},"1447":{"position":[[111,8],[267,7]]}}}],["p(r1,r2,…,rk)=∏k=1kp(rk∣r1,r2,…,rk−1)p(r_1",{"_index":2495,"t":{"1492":{"position":[[631,43]]},"1620":{"position":[[631,43]]}}}],["p(r_k",{"_index":2498,"t":{"1492":{"position":[[711,5]]},"1620":{"position":[[711,5]]}}}],["p(x",{"_index":1913,"t":{"1389":{"position":[[466,3]]},"1518":{"position":[[400,4]]},"1547":{"position":[[466,3]]}}}],["p(x)=∏t=1tp(xt∣x<t)p(x)=\\prod_{t=1}^t",{"_index":2685,"t":{"1561":{"position":[[427,37]]}}}],["p(x)\\nabla_{x}log",{"_index":2629,"t":{"1518":{"position":[[364,17]]}}}],["p(x)p(x)p(x",{"_index":2631,"t":{"1520":{"position":[[22,12]]}}}],["p(x)∇x​log",{"_index":2630,"t":{"1518":{"position":[[389,10]]}}}],["p(x0:t)=p(xt)∏t=1tpθ(xt−1∣xt)p\\left(x_{0",{"_index":2603,"t":{"1512":{"position":[[791,41]]}}}],["p(x0:t∣y)=p(xt)∏t=1tpθ(xt−1∣xt,y)p\\left(x_{0",{"_index":2634,"t":{"1520":{"position":[[136,45]]}}}],["p(x_t)∇xt​​log",{"_index":2619,"t":{"1516":{"position":[[216,14]]}}}],["p(xi)p(x_i)p(xi",{"_index":627,"t":{"1095":{"position":[[89,38],[326,26]]}}}],["p(xi,j∣x<i,j)p\\left(x_{i",{"_index":2687,"t":{"1561":{"position":[[591,25]]}}}],["p(xt",{"_index":2620,"t":{"1516":{"position":[[231,7]]}}}],["p(xt)=n(xt;0,i)p\\left(x_t\\right)=n\\left(x_t",{"_index":2608,"t":{"1512":{"position":[[948,46]]}}}],["p(xt)\\nabla_{x_t}log\\spac",{"_index":2618,"t":{"1516":{"position":[[189,26]]}}}],["p(xt)p\\left(x_t\\right)p(xt",{"_index":2602,"t":{"1512":{"position":[[728,28]]}}}],["p(xt∣x<t)p\\left(x_t",{"_index":2681,"t":{"1561":{"position":[[218,19]]}}}],["p(x∣y)p(x",{"_index":2632,"t":{"1520":{"position":[[59,9]]}}}],["p(x∣y)p(x|y)p(x∣y)，而图像生成模型需要完成的任务就是将输入的从某一随机分布中sampl",{"_index":687,"t":{"1110":{"position":[[112,119]]}}}],["p(x∣z)p(x",{"_index":1873,"t":{"1387":{"position":[[152,9]]},"1389":{"position":[[11,9]]},"1545":{"position":[[152,9]]},"1547":{"position":[[11,9]]}}}],["p(y)p(y)p(i",{"_index":920,"t":{"1151":{"position":[[383,12],[449,33],[483,13],[991,17]]},"1256":{"position":[[383,12],[449,33],[483,13],[991,17]]}}}],["p(y∣x)p(y|x)p(y∣x",{"_index":918,"t":{"1151":{"position":[[218,18],[428,18]]},"1256":{"position":[[218,18],[428,18]]}}}],["p(y∣xt)p\\left(y|x_t\\right)p(y∣xt",{"_index":2648,"t":{"1522":{"position":[[56,34]]}}}],["p(z)=n(z;0,i)p(z)=n(z",{"_index":2542,"t":{"1506":{"position":[[470,21]]}}}],["p(z)=n(z;0,i)p(z)=n(z;0,i)p(z)=n(z;0,i",{"_index":2576,"t":{"1506":{"position":[[1814,39]]}}}],["p(z)\\right",{"_index":2556,"t":{"1506":{"position":[[943,12],[1066,11]]}}}],["p(z∣x)p(z|x)p(z∣x",{"_index":2531,"t":{"1504":{"position":[[227,19]]}}}],["p)(8)d_{kl}(p",{"_index":1453,"t":{"1287":{"position":[[720,13]]}}}],["p)(8)dkl(p",{"_index":1458,"t":{"1287":{"position":[[818,10]]}}}],["p)\\tag{8}dkl​(p",{"_index":1456,"t":{"1287":{"position":[[785,15]]}}}],["p1≥p2≥…≥pvp_1",{"_index":665,"t":{"1099":{"position":[[360,13]]}}}],["p={p1,p2,…,pv}p=\\left\\{p_1",{"_index":638,"t":{"1097":{"position":[[142,27]]},"1099":{"position":[[92,27]]}}}],["p\\left(\\boldsymbol{x}_t",{"_index":2663,"t":{"1524":{"position":[[483,23],[588,23],[741,23],[863,23]]}}}],["p\\left(\\boldsymbol{x}_t\\right",{"_index":2667,"t":{"1524":{"position":[[795,30]]}}}],["p\\left(\\boldsymbol{x}_t\\right)+\\gamma",{"_index":2666,"t":{"1524":{"position":[[691,37]]}}}],["p\\left(\\boldsymbol{x}_t\\right)+\\gamma\\left(\\nabla",{"_index":2664,"t":{"1524":{"position":[[533,49]]}}}],["p\\left(\\boldsymbol{x}_t\\right)\\right",{"_index":2665,"t":{"1524":{"position":[[635,37]]}}}],["p\\left(\\boldsymbol{x}_t\\right)}_{\\text",{"_index":2671,"t":{"1524":{"position":[[963,38]]}}}],["p\\left(i",{"_index":2652,"t":{"1522":{"position":[[258,8]]},"1524":{"position":[[120,8]]}}}],["p\\left(x_t",{"_index":2646,"t":{"1520":{"position":[[606,10]]},"1522":{"position":[[187,10]]},"1524":{"position":[[154,10]]},"1561":{"position":[[465,10]]}}}],["p\\left(x_t\\right)+\\gamma",{"_index":2651,"t":{"1522":{"position":[[221,24]]}}}],["p\\left(x_t\\right)∇logp(y∣xt​)=∇logp(xt​∣y)−∇logp(xt",{"_index":2657,"t":{"1524":{"position":[[188,53]]}}}],["p\\right\\}ck​={wi​∣pi",{"_index":649,"t":{"1097":{"position":[[456,22]]}}}],["p\\right\\}cp​={wi​∣j=1∑i​pj​≥p}pi′=pi∑wj∈cppj",{"_index":672,"t":{"1099":{"position":[[596,44]]}}}],["p^(y)=1n∑i=1np(y∣x(i))\\hat{p}(y)=\\frac{1}{n}\\sum_{i=1}^{n}p(y|\\mathbf{x}^{(i)})p^​(y)=n1​∑i=1n​p(y∣x(i",{"_index":921,"t":{"1151":{"position":[[497,104]]},"1256":{"position":[[497,104]]}}}],["p_1\\right),\\left(w_2",{"_index":661,"t":{"1099":{"position":[[252,21]]}}}],["p_2",{"_index":639,"t":{"1097":{"position":[[170,4]]},"1099":{"position":[[120,4],[379,3]]}}}],["p_2\\right",{"_index":662,"t":{"1099":{"position":[[274,11]]}}}],["p_\\text{data}{(x)}}[\\log",{"_index":359,"t":{"1007":{"position":[[216,24]]}}}],["p_\\theta(x",{"_index":2552,"t":{"1506":{"position":[[890,10]]}}}],["p_\\theta(x|z)\\right]eqϕ​(z∣x)​[logpθ​(x∣z",{"_index":2545,"t":{"1506":{"position":[[662,43]]}}}],["p_\\theta\\left(x",{"_index":2558,"t":{"1506":{"position":[[1003,15]]}}}],["p_\\theta\\left(x_{t",{"_index":2606,"t":{"1512":{"position":[[875,18]]},"1520":{"position":[[228,18]]}}}],["p_attn",{"_index":472,"t":{"1030":{"position":[[1628,6]]},"1370":{"position":[[1628,6]]}}}],["p_i",{"_index":648,"t":{"1097":{"position":[[409,3]]}}}],["p_j",{"_index":653,"t":{"1097":{"position":[[584,4]]},"1099":{"position":[[587,3],[693,4]]}}}],["p_v\\right)\\right\\}{(w1​,p1​),(w2​,p2​),…,(wv​,pv",{"_index":664,"t":{"1099":{"position":[[304,51]]}}}],["p_v\\right\\}p={p1​,p2​,…,pv",{"_index":641,"t":{"1097":{"position":[[183,28]]},"1099":{"position":[[133,28]]}}}],["p_vp1​≥p2​≥…≥pv",{"_index":667,"t":{"1099":{"position":[[400,16]]}}}],["p_z(z)}[\\log",{"_index":369,"t":{"1007":{"position":[[842,12]]}}}],["p_z(z)}[log(1",{"_index":364,"t":{"1007":{"position":[[391,13]]}}}],["package.json",{"_index":3019,"t":{"1654":{"position":[[12,12]]}}}],["pad",{"_index":1369,"t":{"1233":{"position":[[107,22]]}}}],["padding=2",{"_index":1738,"t":{"1375":{"position":[[589,11]]}}}],["paint",{"_index":964,"t":{"1151":{"position":[[2183,8],[2226,8],[2530,8],[2555,8]]},"1256":{"position":[[2183,8],[2226,8],[2530,8],[2555,8]]},"1485":{"position":[[1156,9],[1170,9]]},"1613":{"position":[[1156,9],[1170,9]]},"1633":{"position":[[438,95],[722,10],[762,9],[932,8],[1020,9],[1051,8],[1113,8]]}}}],["pair",{"_index":1102,"t":{"1175":{"position":[[327,32]]},"1473":{"position":[[208,5]]},"1599":{"position":[[46,4]]},"1633":{"position":[[3619,5],[3640,5]]}}}],["paper",{"_index":949,"t":{"1151":{"position":[[1810,5]]},"1256":{"position":[[1810,5]]},"1451":{"position":[[162,5]]}}}],["par",{"_index":2059,"t":{"1414":{"position":[[113,3]]}}}],["paradigm",{"_index":1924,"t":{"1403":{"position":[[107,8]]},"1485":{"position":[[66,8]]},"1528":{"position":[[107,8]]},"1613":{"position":[[66,8]]}}}],["paragraph",{"_index":1312,"t":{"1217":{"position":[[2633,10]]}}}],["paramet",{"_index":1152,"t":{"1183":{"position":[[87,10]]},"1309":{"position":[[37,9]]},"1403":{"position":[[773,11],[953,11]]},"1528":{"position":[[773,11],[953,11]]}}}],["paraphras",{"_index":1118,"t":{"1175":{"position":[[677,10]]}}}],["part",{"_index":2879,"t":{"1633":{"position":[[3355,6]]}}}],["parti",{"_index":1983,"t":{"1405":{"position":[[90,5]]},"1530":{"position":[[90,5]]},"1578":{"position":[[0,5],[6,71],[103,10],[272,14]]}}}],["partit",{"_index":1552,"t":{"1305":{"position":[[183,11]]}}}],["pass",{"_index":565,"t":{"1061":{"position":[[58,4]]}}}],["patch",{"_index":1917,"t":{"1392":{"position":[[68,5]]},"1399":{"position":[[26,5]]},"1550":{"position":[[68,5]]},"1557":{"position":[[26,5]]},"1631":{"position":[[107,5]]}}}],["path",{"_index":1166,"t":{"1185":{"position":[[226,4],[273,4]]}}}],["path/terminal_proxy.sh",{"_index":3075,"t":{"1679":{"position":[[96,23]]}}}],["pay",{"_index":1243,"t":{"1213":{"position":[[230,3]]}}}],["pc",{"_index":3209,"t":{"1764":{"position":[[102,7]]}}}],["pe(k,2i)\\\\pe(pos+k,2i+1)=pe(pos,2i+1)\\tim",{"_index":389,"t":{"1016":{"position":[[835,43]]},"1356":{"position":[[835,43]]}}}],["pe(k,2i)\\end{array",{"_index":392,"t":{"1016":{"position":[[907,19]]},"1356":{"position":[[907,19]]}}}],["pe(k,2i+1",{"_index":390,"t":{"1016":{"position":[[879,10]]},"1356":{"position":[[879,10]]}}}],["pe(k,2i+1)+pe(pos,2i+1)\\tim",{"_index":388,"t":{"1016":{"position":[[805,29]]},"1356":{"position":[[805,29]]}}}],["pe(pos+k,2i)=pe(pos,2i)×pe(k,2i+1)+pe(pos,2i+1)×pe(k,2i)pe(pos+k,2i+1)=pe(pos,2i+1)×pe(k,2i+1)−pe(pos,2i)×pe(k,2i)(3)\\begin{array}{l}pe(pos+k,2i)=pe(pos,2i)\\tim",{"_index":387,"t":{"1016":{"position":[[642,162]]},"1356":{"position":[[642,162]]}}}],["pe(pos,2i)=sin(pos100002i/dmodel)(1)pe_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model",{"_index":383,"t":{"1016":{"position":[[212,96]]},"1356":{"position":[[212,96]]}}}],["pe(pos,2i)\\tim",{"_index":391,"t":{"1016":{"position":[[890,16]]},"1356":{"position":[[890,16]]}}}],["penalti",{"_index":1506,"t":{"1298":{"position":[[151,52]]}}}],["per",{"_index":1844,"t":{"1381":{"position":[[319,3],[559,3]]},"1539":{"position":[[319,3],[559,3]]}}}],["perceptu",{"_index":2177,"t":{"1426":{"position":[[267,17]]}}}],["perform",{"_index":1546,"t":{"1305":{"position":[[80,11]]},"1307":{"position":[[354,12]]},"1403":{"position":[[342,11],[1065,11]]},"1414":{"position":[[102,7]]},"1423":{"position":[[1329,11]]},"1528":{"position":[[342,11],[1065,11]]}}}],["permit",{"_index":189,"t":{"972":{"position":[[918,9]]}}}],["perspect",{"_index":314,"t":{"986":{"position":[[841,12]]},"1498":{"position":[[92,11]]}}}],["perturb",{"_index":2841,"t":{"1633":{"position":[[781,7]]}}}],["phi",{"_index":2575,"t":{"1506":{"position":[[1783,6]]},"1510":{"position":[[235,7]]}}}],["photo",{"_index":814,"t":{"1141":{"position":[[44,5],[225,16],[244,5],[255,18]]},"1143":{"position":[[139,5],[150,5],[414,5]]},"1145":{"position":[[72,5],[94,5]]},"1161":{"position":[[59,5],[687,5]]},"1163":{"position":[[621,5],[649,6]]},"1246":{"position":[[44,5],[225,16],[244,5],[255,18]]},"1248":{"position":[[139,5],[150,5],[414,5]]},"1250":{"position":[[72,5],[94,5]]},"1266":{"position":[[59,5],[687,5]]},"1268":{"position":[[621,5],[649,6]]}}}],["photo.’或‘a",{"_index":852,"t":{"1145":{"position":[[83,10]]},"1250":{"position":[[83,10]]}}}],["photorealist",{"_index":716,"t":{"1114":{"position":[[822,14]]}}}],["photo→anim",{"_index":963,"t":{"1151":{"position":[[2171,11],[2518,11]]},"1256":{"position":[[2171,11],[2518,11]]}}}],["photo→cartoon",{"_index":982,"t":{"1151":{"position":[[2365,13],[2658,13]]},"1256":{"position":[[2365,13],[2658,13]]}}}],["photo→cub",{"_index":984,"t":{"1151":{"position":[[2407,12],[2700,12]]},"1256":{"position":[[2407,12],[2700,12]]}}}],["photo→disney",{"_index":959,"t":{"1151":{"position":[[2135,12],[2491,12]]},"1256":{"position":[[2135,12],[2491,12]]}}}],["photo→pixar",{"_index":973,"t":{"1151":{"position":[[2277,11],[2588,11]]},"1256":{"position":[[2277,11],[2588,11]]}}}],["photo→pointil",{"_index":983,"t":{"1151":{"position":[[2384,17],[2677,17]]},"1256":{"position":[[2384,17],[2677,17]]}}}],["photo→tolkien",{"_index":975,"t":{"1151":{"position":[[2304,13],[2615,13]]},"1256":{"position":[[2304,13],[2615,13]]}}}],["photo→ukiyo",{"_index":969,"t":{"1151":{"position":[[2240,11],[2569,11]]},"1256":{"position":[[2240,11],[2569,11]]}}}],["photo→wal",{"_index":968,"t":{"1151":{"position":[[2215,10],[2544,10]]},"1256":{"position":[[2215,10],[2544,10]]}}}],["photo→werewolf",{"_index":977,"t":{"1151":{"position":[[2327,14],[2638,14]]},"1256":{"position":[[2327,14],[2638,14]]}}}],["pip",{"_index":801,"t":{"1135":{"position":[[124,3],[158,3]]},"1196":{"position":[[0,3]]},"1240":{"position":[[124,3],[158,3]]}}}],["pip_{i}pi",{"_index":1091,"t":{"1173":{"position":[[404,23]]}}}],["pipelin",{"_index":2319,"t":{"1460":{"position":[[194,9]]}}}],["piscart",{"_index":2340,"t":{"1471":{"position":[[30,10]]}}}],["pix2video",{"_index":2973,"t":{"1638":{"position":[[100,10]]}}}],["pixel",{"_index":2148,"t":{"1423":{"position":[[373,5],[1516,5]]},"1633":{"position":[[28,5],[86,5],[263,7]]}}}],["pixelcnn",{"_index":2695,"t":{"1566":{"position":[[14,14]]},"1568":{"position":[[114,8],[141,8]]}}}],["pixelnorm",{"_index":869,"t":{"1147":{"position":[[516,9],[597,13]]},"1252":{"position":[[516,9],[597,13]]}}}],["pixelnorm以及全连接层，将每个点归一化（除以模长），避免输入nois",{"_index":1034,"t":{"1159":{"position":[[725,54]]},"1264":{"position":[[725,54]]}}}],["pixelnorm，防止与transformer中的lay",{"_index":1013,"t":{"1159":{"position":[[185,38]]},"1264":{"position":[[185,38]]}}}],["pixelrnn",{"_index":2693,"t":{"1564":{"position":[[0,8],[52,19]]},"1566":{"position":[[5,8]]},"1568":{"position":[[125,8],[152,8]]}}}],["pi′p_i^{\\prime}pi",{"_index":657,"t":{"1097":{"position":[[652,20]]},"1099":{"position":[[757,22]]}}}],["plasmpkg2",{"_index":3047,"t":{"1663":{"position":[[336,9]]}}}],["platform",{"_index":3249,"t":{"1774":{"position":[[810,9],[841,9]]}}}],["pleas",{"_index":1300,"t":{"1217":{"position":[[2198,6],[4357,6]]}}}],["plot",{"_index":1337,"t":{"1217":{"position":[[3326,4]]},"1633":{"position":[[667,5]]}}}],["plt",{"_index":1720,"t":{"1375":{"position":[[158,3]]}}}],["plt.show",{"_index":1821,"t":{"1375":{"position":[[2628,10]]}}}],["plugin",{"_index":3008,"t":{"1650":{"position":[[75,8]]}}}],["point",{"_index":170,"t":{"972":{"position":[[660,5],[1743,6]]},"1423":{"position":[[815,5]]}}}],["polynomi",{"_index":3104,"t":{"1692":{"position":[[753,10]]},"1701":{"position":[[753,10]]}}}],["popular",{"_index":1957,"t":{"1403":{"position":[[854,7]]},"1528":{"position":[[854,7]]}}}],["portrait",{"_index":1067,"t":{"1163":{"position":[[738,10]]},"1268":{"position":[[738,10]]}}}],["pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1",{"_index":386,"t":{"1016":{"position":[[505,136]]},"1356":{"position":[[505,136]]}}}],["posit",{"_index":2017,"t":{"1410":{"position":[[1017,8]]},"1462":{"position":[[232,10],[296,10]]},"1535":{"position":[[1018,8]]},"1597":{"position":[[43,21]]}}}],["pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel",{"_index":382,"t":{"1016":{"position":[[57,154]]},"1356":{"position":[[57,154]]}}}],["possibl",{"_index":2170,"t":{"1423":{"position":[[1140,8]]}}}],["post",{"_index":2326,"t":{"1462":{"position":[[416,12]]}}}],["potenti",{"_index":2120,"t":{"1414":{"position":[[1448,9]]}}}],["power",{"_index":2081,"t":{"1414":{"position":[[655,8]]},"1423":{"position":[[402,8],[650,8],[1006,8]]},"1485":{"position":[[936,5]]},"1613":{"position":[[936,5]]}}}],["ppp",{"_index":668,"t":{"1099":{"position":[[446,14]]},"1633":{"position":[[6167,3],[6704,4]]}}}],["ppp的坐标为(x,y)(x",{"_index":501,"t":{"1037":{"position":[[118,19]]}}}],["practic",{"_index":1144,"t":{"1181":{"position":[[44,8]]}}}],["pre",{"_index":736,"t":{"1116":{"position":[[987,3]]},"1175":{"position":[[1023,6]]},"1414":{"position":[[373,3],[676,3]]}}}],["pre_stylegan",{"_index":811,"t":{"1137":{"position":[[54,14]]},"1242":{"position":[[54,14]]}}}],["precis",{"_index":2346,"t":{"1473":{"position":[[150,7]]}}}],["predict",{"_index":1093,"t":{"1173":{"position":[[442,11]]},"1287":{"position":[[1527,7],[1574,7],[1762,7]]},"1403":{"position":[[95,11]]},"1405":{"position":[[172,10]]},"1485":{"position":[[158,11],[190,12],[255,12]]},"1489":{"position":[[32,10],[946,10],[996,11]]},"1492":{"position":[[166,11],[309,10],[337,10],[1216,10]]},"1528":{"position":[[95,11]]},"1530":{"position":[[172,10]]},"1583":{"position":[[1108,11],[1127,10]]},"1613":{"position":[[158,11],[190,12],[255,12]]},"1617":{"position":[[32,10],[946,10],[996,11]]},"1620":{"position":[[166,11],[309,10],[337,10],[1216,10]]},"1624":{"position":[[192,11]]}}}],["prediction，图（b",{"_index":2472,"t":{"1489":{"position":[[903,25]]},"1617":{"position":[[903,25]]}}}],["predictor",{"_index":294,"t":{"986":{"position":[[185,46]]},"988":{"position":[[185,10]]},"1118":{"position":[[245,10]]},"1128":{"position":[[568,14]]}}}],["predictor中。从随机分布中sample出的噪声就是nois",{"_index":754,"t":{"1118":{"position":[[703,34]]}}}],["predictor中，而需要预测出的噪声分布的ground",{"_index":748,"t":{"1118":{"position":[[407,29]]}}}],["predictor对噪声denois",{"_index":777,"t":{"1128":{"position":[[107,29]]}}}],["predictor的ground",{"_index":755,"t":{"1118":{"position":[[738,16]]}}}],["predictor预测出的噪声，αˉ1,αˉ2,...αˉt\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_tαˉ1​,αˉ2​,...αˉt​以及α1,α2,...αt\\alpha_1,\\alpha_2,...\\alpha_tα1​,α2​,...αt",{"_index":341,"t":{"990":{"position":[[592,158]]}}}],["predictor，其输入是加入噪声的图像以及sample出的ttt，而ϵθ\\epsilon_\\thetaϵθ​训练的ground",{"_index":326,"t":{"988":{"position":[[713,65]]}}}],["predictor，根据文字prompt对从随机分布中sampl",{"_index":301,"t":{"986":{"position":[[490,54]]}}}],["predictor；在生成图片时，输入从该随机分布中sample出的向量，使用训练出的nois",{"_index":776,"t":{"1128":{"position":[[58,48]]}}}],["predit",{"_index":940,"t":{"1151":{"position":[[1402,9]]},"1256":{"position":[[1402,9]]}}}],["preprocess",{"_index":1158,"t":{"1185":{"position":[[88,10],[161,12]]}}}],["present",{"_index":2425,"t":{"1485":{"position":[[3,7]]},"1613":{"position":[[3,7]]}}}],["preserv",{"_index":2075,"t":{"1414":{"position":[[540,9]]},"1423":{"position":[[861,13]]},"1633":{"position":[[7716,12],[7818,12]]}}}],["press",{"_index":235,"t":{"972":{"position":[[2184,7]]}}}],["pretrain",{"_index":1080,"t":{"1171":{"position":[[208,28]]},"1423":{"position":[[659,10]]}}}],["previou",{"_index":2158,"t":{"1423":{"position":[[699,8]]}}}],["prewitt",{"_index":620,"t":{"1081":{"position":[[116,10]]}}}],["prim",{"_index":3060,"t":{"1673":{"position":[[104,6]]}}}],["primari",{"_index":2989,"t":{"1644":{"position":[[276,7],[310,7],[349,7],[389,7]]}}}],["print",{"_index":237,"t":{"972":{"position":[[2201,5]]}}}],["print(\"%c\",(asciicode=='\\r",{"_index":163,"t":{"972":{"position":[[443,28],[1658,28]]}}}],["print(\"\\n",{"_index":159,"t":{"972":{"position":[[376,9],[1588,9]]}}}],["print(\"argmax",{"_index":1701,"t":{"1347":{"position":[[871,13]]}}}],["print(\"attent",{"_index":1288,"t":{"1217":{"position":[[1713,16],[1929,16],[4083,16],[4225,16]]}}}],["print(\"keys:\\n",{"_index":1281,"t":{"1217":{"position":[[1352,16],[3916,16]]}}}],["print(\"queries:\\n",{"_index":1282,"t":{"1217":{"position":[[1384,19],[3948,19]]}}}],["print(\"to",{"_index":143,"t":{"972":{"position":[[99,9],[1311,9]]}}}],["print(\"values:\\n",{"_index":1283,"t":{"1217":{"position":[[1422,18],[3986,18]]}}}],["print(\"weight",{"_index":1306,"t":{"1217":{"position":[[2301,15],[4460,15]]}}}],["print(\"welcom",{"_index":230,"t":{"972":{"position":[[2075,14]]}}}],["print(a",{"_index":1684,"t":{"1347":{"position":[[543,7]]}}}],["print(b",{"_index":1686,"t":{"1347":{"position":[[581,7]]}}}],["print(c.shap",{"_index":1673,"t":{"1347":{"position":[[252,14]]}}}],["print(d.shap",{"_index":1678,"t":{"1347":{"position":[[373,14]]}}}],["print(f'loss",{"_index":1813,"t":{"1375":{"position":[[2464,12]]}}}],["print(f'{metric[2",{"_index":1817,"t":{"1375":{"position":[[2545,18]]}}}],["print(i",{"_index":1706,"t":{"1347":{"position":[[1121,8],[1315,8]]}}}],["print(i)16'''17(tensor([1",{"_index":1639,"t":{"1330":{"position":[[651,26]]}}}],["print(i)6'''7(tensor(1",{"_index":1630,"t":{"1330":{"position":[[450,24]]}}}],["print(item",{"_index":2794,"t":{"1607":{"position":[[253,11],[464,11]]}}}],["print(output",{"_index":2765,"t":{"1603":{"position":[[619,13]]}}}],["print(x",{"_index":2759,"t":{"1603":{"position":[[372,8]]}}}],["print(x1",{"_index":2761,"t":{"1603":{"position":[[412,9]]}}}],["print(x2",{"_index":2764,"t":{"1603":{"position":[[527,9]]}}}],["printf(\"%d\\n",{"_index":129,"t":{"966":{"position":[[430,14]]}}}],["prior",{"_index":2535,"t":{"1506":{"position":[[172,5],[454,5],[525,5]]},"1512":{"position":[[1123,5],[1444,5]]},"1633":{"position":[[372,5],[7710,5],[7812,5]]}}}],["private_colormap",{"_index":275,"t":{"974":{"position":[[794,17]]},"1774":{"position":[[1850,17]]}}}],["probabilist",{"_index":779,"t":{"1128":{"position":[[163,13]]}}}],["probabl",{"_index":645,"t":{"1097":{"position":[[370,13],[439,13],[498,13]]},"1381":{"position":[[329,11],[569,12]]},"1539":{"position":[[329,11],[569,12]]},"1774":{"position":[[1009,8]]}}}],["probing（知识探测）方法，给定完形填空（cloz",{"_index":2404,"t":{"1478":{"position":[[23,28]]}}}],["procedur",{"_index":1845,"t":{"1381":{"position":[[372,10]]},"1539":{"position":[[372,10]]},"1633":{"position":[[3671,9]]}}}],["process",{"_index":214,"t":{"972":{"position":[[1821,8]]},"986":{"position":[[146,18]]},"1128":{"position":[[469,7]]},"1307":{"position":[[163,7]]},"1414":{"position":[[407,10],[1179,8]]},"1423":{"position":[[35,7],[287,7]]},"1599":{"position":[[372,47]]},"1633":{"position":[[617,7],[883,7]]}}}],["process。此时将加入噪声后的图片、文字prompt以及denoise的步骤序号作为输入，sample出的噪声作为ground",{"_index":783,"t":{"1128":{"position":[[490,65]]}}}],["process又叫做diffus",{"_index":292,"t":{"986":{"position":[[126,19]]}}}],["process训练的nois",{"_index":300,"t":{"986":{"position":[[474,15]]}}}],["process：使用diffus",{"_index":299,"t":{"986":{"position":[[454,19]]}}}],["process：对训练集中的图片不断加入与图片shape相同的、从某随机分布中sample出的噪声，直至图片可以被认为是从该随机分布中sampl",{"_index":291,"t":{"986":{"position":[[39,78]]}}}],["prod_{k=1}^{k",{"_index":2497,"t":{"1492":{"position":[[695,15]]},"1620":{"position":[[695,15]]}}}],["prod_{t=1}^t",{"_index":2605,"t":{"1512":{"position":[[861,13]]},"1520":{"position":[[214,13]]}}}],["produc",{"_index":281,"t":{"974":{"position":[[925,8]]},"1307":{"position":[[306,7]]},"1473":{"position":[[134,8]]},"1774":{"position":[[1981,8]]}}}],["product",{"_index":1303,"t":{"1217":{"position":[[2229,7],[2666,7],[2808,8],[2879,7],[2981,8],[4388,7]]},"1219":{"position":[[387,8]]},"1227":{"position":[[309,19]]}}}],["product后，为了避免点积运算经过softmax后的输出太小，在点积后除以key",{"_index":1327,"t":{"1217":{"position":[[2997,56]]}}}],["product），得到的scalar数量与输入向量个数相同，都为batchbatchbatch，即scores矩阵的形状应为(batch,batch)(batch",{"_index":1285,"t":{"1217":{"position":[[1547,82]]}}}],["product，在经过softmax",{"_index":1134,"t":{"1175":{"position":[[1322,65]]}}}],["product，而不考虑aia^iai之后的输入的key",{"_index":436,"t":{"1022":{"position":[[1305,29]]},"1362":{"position":[[1305,29]]}}}],["program",{"_index":3247,"t":{"1774":{"position":[[776,8]]}}}],["progress",{"_index":2057,"t":{"1414":{"position":[[45,8]]},"1633":{"position":[[816,13]]}}}],["project",{"_index":2844,"t":{"1633":{"position":[[901,8]]},"1768":{"position":[[78,14]]},"1774":{"position":[[2148,7]]}}}],["project0",{"_index":142,"t":{"972":{"position":[[87,11],[1299,11]]},"1774":{"position":[[7,26],[95,17]]}}}],["project0实现检测键盘输入ctrl+d",{"_index":140,"t":{"972":{"position":[[50,31]]}}}],["project6这7",{"_index":3211,"t":{"1764":{"position":[[158,15]]}}}],["promot",{"_index":2458,"t":{"1485":{"position":[[1364,7]]},"1613":{"position":[[1364,7]]}}}],["prompt",{"_index":692,"t":{"1114":{"position":[[101,12]]},"1141":{"position":[[17,15]]},"1143":{"position":[[598,6],[712,6]]},"1145":{"position":[[12,7],[24,7]]},"1147":{"position":[[1014,7],[1035,7],[1054,7],[1137,7],[1174,7],[1196,7],[1229,35]]},"1149":{"position":[[1220,7]]},"1159":{"position":[[47,8]]},"1161":{"position":[[21,7],[297,7],[380,7],[528,7],[859,7],[897,7],[947,7],[968,7],[1000,7],[1033,7],[1053,7],[1073,7],[1155,7],[1173,7],[1212,7]]},"1163":{"position":[[90,16],[146,7],[163,23],[308,7],[393,7],[416,7],[437,8],[674,7],[770,7],[815,6],[934,7],[967,7],[1052,10],[1078,7],[1095,7],[1112,6],[1129,6]]},"1246":{"position":[[17,15]]},"1248":{"position":[[598,6],[712,6]]},"1250":{"position":[[12,7],[24,7]]},"1252":{"position":[[1014,7],[1035,7],[1054,7],[1137,7],[1174,7],[1196,7],[1229,35]]},"1254":{"position":[[1220,7]]},"1264":{"position":[[47,8]]},"1266":{"position":[[21,7],[297,7],[380,7],[528,7],[859,7],[897,7],[947,7],[968,7],[1000,7],[1033,7],[1053,7],[1073,7],[1155,7],[1173,7],[1212,7]]},"1268":{"position":[[90,16],[146,7],[163,23],[308,7],[393,7],[416,7],[437,8],[674,7],[770,7],[815,6],[934,7],[967,7],[1052,10],[1078,7],[1095,7],[1112,6],[1129,6]]},"1414":{"position":[[807,7]]},"1473":{"position":[[20,6]]},"1624":{"position":[[92,6]]},"1633":{"position":[[3585,6],[3595,6]]}}}],["prompt2prompt",{"_index":2889,"t":{"1633":{"position":[[4252,13]]}}}],["prompt_prefix",{"_index":816,"t":{"1141":{"position":[[73,14],[132,14]]},"1246":{"position":[[73,14],[132,14]]}}}],["prompt工程最初是一种knowledg",{"_index":2403,"t":{"1478":{"position":[[0,22]]}}}],["prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（target",{"_index":295,"t":{"986":{"position":[[240,72]]},"1110":{"position":[[242,49]]}}}],["prompt通常不是最优的，可能提供不准确的适应方向。为了解决这个问题，在nlp领域的prompt",{"_index":2406,"t":{"1478":{"position":[[81,56]]}}}],["prompt（‘a",{"_index":851,"t":{"1145":{"position":[[62,9]]},"1250":{"position":[[62,9]]}}}],["pronounc",{"_index":343,"t":{"992":{"position":[[12,9]]}}}],["propag",{"_index":449,"t":{"1028":{"position":[[132,13]]},"1368":{"position":[[132,13]]}}}],["properli",{"_index":1936,"t":{"1403":{"position":[[365,9]]},"1528":{"position":[[365,9]]}}}],["properti",{"_index":1940,"t":{"1403":{"position":[[435,10]]},"1485":{"position":[[1260,10]]},"1528":{"position":[[435,10]]},"1613":{"position":[[1260,10]]}}}],["propos",{"_index":1843,"t":{"1381":{"position":[[298,7]]},"1539":{"position":[[298,7]]}}}],["protector",{"_index":3269,"t":{"1774":{"position":[[1331,9]]}}}],["provid",{"_index":1064,"t":{"1163":{"position":[[656,7]]},"1268":{"position":[[656,7]]}}}],["proxy_off",{"_index":3067,"t":{"1677":{"position":[[209,12]]},"1681":{"position":[[43,9]]}}}],["proxy_on",{"_index":3062,"t":{"1677":{"position":[[40,11]]},"1681":{"position":[[17,8]]}}}],["pr曲线所围成的面积即使该类的ap",{"_index":3144,"t":{"1731":{"position":[[0,18]]}}}],["psnr：峰值信噪比，图像所允许的最大像素值的平方与均方误差的比值的对数的10",{"_index":517,"t":{"1039":{"position":[[217,81]]}}}],["psp",{"_index":1001,"t":{"1154":{"position":[[645,3]]},"1259":{"position":[[645,3]]}}}],["put",{"_index":1068,"t":{"1163":{"position":[[749,3]]},"1268":{"position":[[749,3]]}}}],["px",{"_index":2321,"t":{"1462":{"position":[[126,22]]}}}],["pyplot",{"_index":1719,"t":{"1375":{"position":[[148,6]]}}}],["pyramid",{"_index":2812,"t":{"1624":{"position":[[166,11]]}}}],["python",{"_index":1071,"t":{"1163":{"position":[[792,6],[877,6]]},"1199":{"position":[[44,6]]},"1268":{"position":[[792,6],[877,6]]},"1347":{"position":[[986,6]]},"1603":{"position":[[197,46]]},"1605":{"position":[[0,61],[62,85]]}}}],["python=3.8",{"_index":792,"t":{"1133":{"position":[[20,10]]},"1238":{"position":[[20,10]]}}}],["pytorch",{"_index":796,"t":{"1135":{"position":[[22,7],[54,7],[85,7],[106,7]]},"1156":{"position":[[12,7]]},"1185":{"position":[[445,7]]},"1240":{"position":[[22,7],[54,7],[85,7],[106,7]]},"1261":{"position":[[12,7]]}}}],["pytorch中的crossentropyloss",{"_index":1479,"t":{"1287":{"position":[[1367,26]]}}}],["pytorch框架，可以使用visdom或tensorboardx实现可视化，本篇主要讲述visdom",{"_index":1201,"t":{"1194":{"position":[[41,54]]}}}],["p}c_k=\\left\\{w_i",{"_index":646,"t":{"1097":{"position":[[387,16]]}}}],["p}pi′=pi∑wj∈ckpj",{"_index":650,"t":{"1097":{"position":[[515,16]]}}}],["pθ(x)p_\\theta(x)pθ​(x",{"_index":2625,"t":{"1518":{"position":[[152,22]]}}}],["pθ(x∣z)p_{\\theta}(x|z)pθ​(x∣z",{"_index":2534,"t":{"1506":{"position":[[39,57]]}}}],["p′(xi)=exp⁡(log⁡(p(xi))t)∑jexp⁡(log⁡(p(xj))t)p'(x_i",{"_index":628,"t":{"1095":{"position":[[128,52]]}}}],["p∼n(μ1,σ12)p\\sim",{"_index":2287,"t":{"1445":{"position":[[609,29]]}}}],["p和q",{"_index":1469,"t":{"1287":{"position":[[1123,30]]}}}],["p和q，其离散型随机变量xxx的可能取值为x=x1,x2,...,xnx=x_1,x_2,...,x_nx=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率分别为pi,qip_i,q_ipi​,qi",{"_index":1450,"t":{"1287":{"position":[[567,119]]}}}],["p问题、np问题以及np",{"_index":3103,"t":{"1692":{"position":[[719,16]]},"1701":{"position":[[719,16]]}}}],["q",{"_index":1358,"t":{"1227":{"position":[[285,1],[329,1]]},"1287":{"position":[[751,2],[887,2],[1218,2],[1256,2]]},"1633":{"position":[[1403,1]]}}}],["q(i,j)=(arg⁡min⁡v∈[v]∥lookup(z,v)−f(i,j)∥2)∈[v]q^{(i,j)}=\\left(\\arg\\min_{v\\in[v]}\\|\\text{lookup}(z,v",{"_index":2464,"t":{"1489":{"position":[[276,101]]},"1617":{"position":[[276,101]]}}}],["q(xt−1∣xt,x0)q(x_{t",{"_index":2612,"t":{"1512":{"position":[[1595,19]]}}}],["q(xt∣xt−1)=n(xt;αtxt−1,(1−αt)i)q\\left(x_t",{"_index":2597,"t":{"1512":{"position":[[544,41]]}}}],["q)=h(p)+dkl(p",{"_index":1470,"t":{"1287":{"position":[[1159,13]]}}}],["q)=∑pi",{"_index":1459,"t":{"1287":{"position":[[832,6],[948,7]]}}}],["q)=−∑pi",{"_index":1471,"t":{"1287":{"position":[[1176,7],[1341,8]]}}}],["q)​=h(p)+dkl​(p",{"_index":1477,"t":{"1287":{"position":[[1322,15]]}}}],["q)≠dkl(q",{"_index":1452,"t":{"1287":{"position":[[708,8]]}}}],["q)=dkl​(q",{"_index":1457,"t":{"1287":{"position":[[804,10]]}}}],["q=q(f)q=\\mathcal{q}(f)q=q(f",{"_index":2463,"t":{"1489":{"position":[[193,28]]},"1617":{"position":[[193,28]]}}}],["q=wq(i)⋅φi(zt),k=wk(i)⋅τθ(y),v=wv(i)⋅τθ(y)q=w_q^{(i",{"_index":2227,"t":{"1435":{"position":[[649,53]]}}}],["q_\\phi\\left(x_t",{"_index":2590,"t":{"1512":{"position":[[215,15]]}}}],["q_{pred})dkl​(plabel",{"_index":1467,"t":{"1287":{"position":[[1039,21]]}}}],["qnli（quest",{"_index":1103,"t":{"1175":{"position":[[360,13]]}}}],["qpred)d_{kl}(p_{label",{"_index":1466,"t":{"1287":{"position":[[1000,22]]}}}],["qpred​)表示当用概率分布q来拟合真实分布p时，产生的信息损耗，其中p表示真实分布，q表示p",{"_index":1468,"t":{"1287":{"position":[[1063,54]]}}}],["qqp（quora",{"_index":1100,"t":{"1175":{"position":[[308,9]]}}}],["qr",{"_index":3108,"t":{"1699":{"position":[[868,52]]},"1707":{"position":[[740,52]]}}}],["quadex,c,ϵ,t​[wt​∥x~θ​(αt​x+σt​ϵ,c)−x∥22",{"_index":2938,"t":{"1633":{"position":[[6602,43]]}}}],["qualiti",{"_index":712,"t":{"1114":{"position":[[718,8]]},"1403":{"position":[[498,8],[619,7],[1023,7],[1087,7]]},"1423":{"position":[[588,7]]},"1485":{"position":[[839,8]]},"1528":{"position":[[498,8],[619,7],[1023,7],[1087,7]]},"1613":{"position":[[839,8]]}}}],["quantiz",{"_index":1831,"t":{"1379":{"position":[[94,13]]},"1381":{"position":[[110,9],[822,13]]},"1383":{"position":[[225,35]]},"1408":{"position":[[23,9]]},"1492":{"position":[[1244,16],[1264,9]]},"1494":{"position":[[15,10],[210,9]]},"1496":{"position":[[197,12]]},"1533":{"position":[[23,9]]},"1537":{"position":[[94,13]]},"1539":{"position":[[110,9],[822,13]]},"1541":{"position":[[225,35]]},"1568":{"position":[[188,9],[329,9]]},"1572":{"position":[[119,9]]},"1574":{"position":[[141,12]]},"1583":{"position":[[701,13]]},"1620":{"position":[[1244,16],[1264,9]]},"1622":{"position":[[15,10],[210,9]]},"1626":{"position":[[197,12]]}}}],["quantizer（var",{"_index":2512,"t":{"1494":{"position":[[230,13]]},"1622":{"position":[[230,13]]}}}],["queri",{"_index":1273,"t":{"1217":{"position":[[935,7],[1258,7],[1299,7],[1404,8],[1696,7],[2825,5],[3519,7],[3822,7],[3863,7],[3968,8],[4066,7]]},"1633":{"position":[[1312,5],[6848,5]]}}}],["query^{n",{"_index":1341,"t":{"1219":{"position":[[195,8]]}}}],["query、key、valu",{"_index":1351,"t":{"1227":{"position":[[107,19]]}}}],["query分别与所有向量的key做内积（dot",{"_index":1284,"t":{"1217":{"position":[[1504,42]]}}}],["query来自解码器，key和value来自编码器。解码器每个向量的查询（query）与编码器位置的键（key）进行点积得到了注意力分数，通过softmax操作后转换为注意力权重，再与编码器位置的值（value）weight",{"_index":443,"t":{"1022":{"position":[[1591,132]]},"1362":{"position":[[1591,132]]}}}],["query）向量、键（key）向量和值（valu",{"_index":3205,"t":{"1753":{"position":[[49,55]]}}}],["query，q）、键（key，k）和值（value，v",{"_index":1350,"t":{"1227":{"position":[[0,106]]}}}],["question",{"_index":1101,"t":{"1175":{"position":[[318,8],[1177,8]]}}}],["quotient",{"_index":3079,"t":{"1687":{"position":[[80,9],[293,29],[657,9]]},"1689":{"position":[[167,9],[380,29],[744,9]]}}}],["quotient.assign(\"0",{"_index":3087,"t":{"1687":{"position":[[626,21]]},"1689":{"position":[[713,21]]}}}],["quotient.empti",{"_index":3085,"t":{"1687":{"position":[[418,19],[576,18]]},"1689":{"position":[[505,19],[663,18]]}}}],["quotient.push_back('0",{"_index":3086,"t":{"1687":{"position":[[477,24]]},"1689":{"position":[[564,24]]}}}],["quotient.push_back(temp",{"_index":3084,"t":{"1687":{"position":[[323,23]]},"1689":{"position":[[410,23]]}}}],["qwen",{"_index":2082,"t":{"1414":{"position":[[688,4],[1801,4]]},"1419":{"position":[[33,4]]}}}],["qϕ(x1:t∣x0)=∏t=1tqϕ(xt∣xt−1)q_\\phi\\left(x_{1",{"_index":2588,"t":{"1512":{"position":[[136,45]]}}}],["qϕ(z∣x)=n(z;μϕ(x),σϕ2(x)i)q_\\phi(z",{"_index":2537,"t":{"1506":{"position":[[327,34]]}}}],["qϕ(z∣x)q_\\phi(z",{"_index":2563,"t":{"1506":{"position":[[1241,15]]}}}],["qϕ(z∣x)q_\\phi(z|x)qϕ​(z∣x",{"_index":2571,"t":{"1506":{"position":[[1562,26]]}}}],["qϕ(z∣x)q_{\\phi}(z|x)qϕ​(z∣x",{"_index":2530,"t":{"1504":{"position":[[102,31]]},"1510":{"position":[[202,28]]}}}],["q、k",{"_index":1247,"t":{"1217":{"position":[[75,3]]},"1223":{"position":[[272,3]]}}}],["q、k、v",{"_index":1352,"t":{"1227":{"position":[[164,5],[234,5]]},"1229":{"position":[[82,40]]}}}],["r",{"_index":2848,"t":{"1633":{"position":[[1339,1],[1389,1]]}}}],["r1,...,rkr_1,...,r_kr1​,...,rk",{"_index":2514,"t":{"1494":{"position":[[444,31]]},"1622":{"position":[[444,31]]}}}],["r1,r2,…,rk)(r_1",{"_index":2488,"t":{"1492":{"position":[[484,17]]},"1620":{"position":[[484,17]]}}}],["r1,r2,…,rk−1)(r_1",{"_index":2505,"t":{"1492":{"position":[[911,19]]},"1620":{"position":[[911,19]]}}}],["r_1",{"_index":2499,"t":{"1492":{"position":[[722,4]]},"1620":{"position":[[722,4]]}}}],["r_2",{"_index":2489,"t":{"1492":{"position":[[502,4],[675,4],[727,4],[931,4]]},"1620":{"position":[[502,4],[675,4],[727,4],[931,4]]}}}],["r_k",{"_index":2496,"t":{"1492":{"position":[[688,4]]},"1620":{"position":[[688,4]]}}}],["r_k)(r1​,r2​,…,rk",{"_index":2490,"t":{"1492":{"position":[[515,27]]},"1620":{"position":[[515,27]]}}}],["r_{k",{"_index":2500,"t":{"1492":{"position":[[740,4],[944,4]]},"1620":{"position":[[740,4],[944,4]]}}}],["random",{"_index":1179,"t":{"1185":{"position":[[415,7],[580,7]]},"1217":{"position":[[726,6]]},"1633":{"position":[[7346,6]]}}}],["randomli",{"_index":1156,"t":{"1185":{"position":[[38,8]]},"1217":{"position":[[696,8]]}}}],["rang",{"_index":1851,"t":{"1381":{"position":[[692,5]]},"1403":{"position":[[747,7]]},"1528":{"position":[[747,7]]},"1539":{"position":[[692,5]]},"1633":{"position":[[7479,5]]}}}],["range(n_mlp",{"_index":872,"t":{"1147":{"position":[[620,13]]},"1252":{"position":[[620,13]]}}}],["range(num_epoch",{"_index":1795,"t":{"1375":{"position":[[1887,18]]}}}],["rank",{"_index":3123,"t":{"1714":{"position":[[177,27]]}}}],["rank：前1%（非rank",{"_index":3116,"t":{"1714":{"position":[[31,14]]}}}],["raster",{"_index":2429,"t":{"1485":{"position":[[231,6]]},"1613":{"position":[[231,6]]}}}],["ratio",{"_index":1944,"t":{"1403":{"position":[[591,5]]},"1528":{"position":[[591,5]]}}}],["raw",{"_index":1159,"t":{"1185":{"position":[[103,3]]},"1217":{"position":[[1661,3],[4032,3]]},"1489":{"position":[[79,3]]},"1617":{"position":[[79,3]]}}}],["rd\\varepsilon",{"_index":1881,"t":{"1387":{"position":[[364,15]]},"1545":{"position":[[364,15]]}}}],["re",{"_index":1997,"t":{"1410":{"position":[[261,2]]},"1535":{"position":[[261,2]]},"1585":{"position":[[0,5]]}}}],["reach",{"_index":2159,"t":{"1423":{"position":[[794,5]]}}}],["real",{"_index":2849,"t":{"1633":{"position":[[1463,4],[3905,4]]}}}],["realism",{"_index":2833,"t":{"1633":{"position":[[394,8]]}}}],["realm",{"_index":2058,"t":{"1414":{"position":[[61,5]]}}}],["reboot",{"_index":3056,"t":{"1668":{"position":[[95,6]]}}}],["reconstrcut",{"_index":2871,"t":{"1633":{"position":[[2532,14]]}}}],["reconstruct",{"_index":1945,"t":{"1403":{"position":[[604,14]]},"1464":{"position":[[969,19]]},"1489":{"position":[[1529,11]]},"1506":{"position":[[249,14],[561,14]]},"1512":{"position":[[1065,14],[1386,14]]},"1528":{"position":[[604,14]]},"1617":{"position":[[1529,11]]},"1633":{"position":[[2704,14]]}}}],["rectifi",{"_index":2727,"t":{"1585":{"position":[[116,9]]}}}],["redefin",{"_index":2426,"t":{"1485":{"position":[[80,9]]},"1613":{"position":[[80,9]]}}}],["redistribut",{"_index":190,"t":{"972":{"position":[[938,13]]}}}],["reduc",{"_index":1689,"t":{"1347":{"position":[[680,6]]},"1423":{"position":[[1468,8]]}}}],["reduce项时只写前向搜索符对应的act",{"_index":103,"t":{"951":{"position":[[566,53]]}}}],["reduce项时只写前向搜索符集对应的act",{"_index":105,"t":{"951":{"position":[[645,86]]}}}],["reduce项时，act",{"_index":97,"t":{"951":{"position":[[229,30]]}}}],["reduce项时，只写产生式左部的follow集对应的act",{"_index":100,"t":{"951":{"position":[[392,42]]}}}],["reduct",{"_index":2162,"t":{"1423":{"position":[[840,9]]}}}],["reexamin",{"_index":1937,"t":{"1403":{"position":[[378,9]]},"1528":{"position":[[378,9]]}}}],["refer",{"_index":2821,"t":{"1633":{"position":[[57,9],[5766,9]]},"1774":{"position":[[1111,9]]}}}],["refin",{"_index":2108,"t":{"1414":{"position":[[1151,8]]}}}],["reflect",{"_index":251,"t":{"974":{"position":[[432,7]]},"1774":{"position":[[1488,7]]}}}],["reg",{"_index":2182,"t":{"1431":{"position":[[497,7]]}}}],["regex",{"_index":803,"t":{"1135":{"position":[[141,5]]},"1240":{"position":[[141,5]]}}}],["regress",{"_index":1609,"t":{"1324":{"position":[[9,51]]},"1414":{"position":[[5,10]]}}}],["regular",{"_index":1055,"t":{"1161":{"position":[[775,14]]},"1163":{"position":[[997,15],[1022,14]]},"1266":{"position":[[775,14]]},"1268":{"position":[[997,15],[1022,14]]},"1298":{"position":[[0,150]]},"1476":{"position":[[295,14]]}}}],["rehyp",{"_index":3009,"t":{"1650":{"position":[[119,6],[271,6]]}}}],["relat",{"_index":2975,"t":{"1640":{"position":[[98,7]]}}}],["relax",{"_index":2343,"t":{"1471":{"position":[[114,7]]}}}],["releas",{"_index":1976,"t":{"1403":{"position":[[1270,7]]},"1485":{"position":[[1331,8]]},"1528":{"position":[[1270,7]]},"1613":{"position":[[1331,8]]}}}],["relev",{"_index":1314,"t":{"1217":{"position":[[2682,10]]}}}],["relu",{"_index":1501,"t":{"1292":{"position":[[0,8]]},"1410":{"position":[[649,21]]},"1535":{"position":[[649,21]]},"1751":{"position":[[141,4]]}}}],["relu激活函数。因为relu的范围是[0",{"_index":1827,"t":{"1377":{"position":[[0,43]]}}}],["remain",{"_index":1557,"t":{"1307":{"position":[[102,9]]}}}],["remaind",{"_index":3081,"t":{"1687":{"position":[[133,9],[217,9],[365,9],[504,9]]},"1689":{"position":[[220,9],[304,9],[452,9],[591,9],[868,9]]}}}],["remark",{"_index":2117,"t":{"1414":{"position":[[1352,10]]},"1650":{"position":[[101,6],[256,6]]},"1652":{"position":[[81,6],[122,6],[191,6]]}}}],["remov",{"_index":1856,"t":{"1381":{"position":[[806,8]]},"1539":{"position":[[806,8]]},"1633":{"position":[[830,6]]}}}],["render",{"_index":3005,"t":{"1650":{"position":[[25,6]]}}}],["repeat",{"_index":1560,"t":{"1307":{"position":[[174,8]]},"1335":{"position":[[580,6]]},"1644":{"position":[[225,9]]}}}],["repo",{"_index":1147,"t":{"1181":{"position":[[96,5]]}}}],["repres",{"_index":1181,"t":{"1185":{"position":[[434,10]]},"1381":{"position":[[189,12]]},"1539":{"position":[[189,12]]},"1633":{"position":[[673,9]]}}}],["represent",{"_index":695,"t":{"1114":{"position":[[238,15],[425,21]]},"1118":{"position":[[468,15],[588,15],[1060,15]]},"1171":{"position":[[77,15]]},"1423":{"position":[[750,14]]},"1583":{"position":[[2027,14]]}}}],["representation。因此，训练gener",{"_index":744,"t":{"1118":{"position":[[195,30]]}}}],["representation分别输入至源域生成器和目标域生成器中得到对应的图像，同时指导风格迁移方向的源域以及目标域的prompt描述由lat",{"_index":2423,"t":{"1481":{"position":[[716,74]]}}}],["representation时，同样采取从已知随机分布中sample出噪声再添加到网络的输入作为生成ground",{"_index":750,"t":{"1118":{"position":[[496,56]]}}}],["representation时，需要训练一个auto",{"_index":763,"t":{"1118":{"position":[[1089,26]]}}}],["representation的分布也是符合某种随机分布的，vae再通过decod",{"_index":309,"t":{"986":{"position":[[676,58]]}}}],["representation），输出的是还原出的高分辨率的图像，它的训练是不需要额外pair",{"_index":760,"t":{"1118":{"position":[[867,49]]}}}],["representation，decoder再吃encoder的输出，最终输出还原出的高清label图片，训练的方向是让输出的图片与输入的图片越接近越好。在这个过程中，不需要额外的标注，auto",{"_index":767,"t":{"1118":{"position":[[1209,97]]}}}],["representation，生成一组prompt向量。第一阶段需要解决两个问题，即在zero",{"_index":2412,"t":{"1481":{"position":[[111,47]]}}}],["representation，经过从随机分布中sample出的噪声的加入，输入至nois",{"_index":753,"t":{"1118":{"position":[[657,45]]}}}],["representation，这种lat",{"_index":308,"t":{"986":{"position":[[652,23]]}}}],["requir",{"_index":2113,"t":{"1414":{"position":[[1286,8]]},"1423":{"position":[[1491,12]]}}}],["research",{"_index":1117,"t":{"1175":{"position":[[668,8]]},"1451":{"position":[[153,8]]},"1471":{"position":[[44,8]]}}}],["residu",{"_index":3125,"t":{"1724":{"position":[[20,8],[113,11]]}}}],["resolut",{"_index":2169,"t":{"1423":{"position":[[1111,10],[1436,11]]},"1485":{"position":[[179,10]]},"1583":{"position":[[1097,10]]},"1613":{"position":[[179,10]]},"1631":{"position":[[307,10]]},"1636":{"position":[[224,10]]}}}],["resourc",{"_index":2155,"t":{"1423":{"position":[[556,9]]},"1663":{"position":[[161,9]]}}}],["resource/movi",{"_index":2309,"t":{"1451":{"position":[[134,14]]}}}],["respect",{"_index":2840,"t":{"1633":{"position":[[733,13]]}}}],["restyl",{"_index":998,"t":{"1154":{"position":[[433,7]]},"1156":{"position":[[186,7]]},"1259":{"position":[[433,7]]},"1261":{"position":[[186,7]]}}}],["restyle_e4e_encod",{"_index":995,"t":{"1154":{"position":[[382,26],[582,19]]},"1259":{"position":[[382,26],[582,19]]}}}],["result",{"_index":1563,"t":{"1307":{"position":[[254,7]]},"1381":{"position":[[872,7]]},"1414":{"position":[[1363,7]]},"1423":{"position":[[158,7]]},"1485":{"position":[[1199,7]]},"1539":{"position":[[872,7]]},"1613":{"position":[[1199,7]]},"1633":{"position":[[340,9]]}}}],["retain",{"_index":2156,"t":{"1423":{"position":[[572,9]]}}}],["retrain",{"_index":2145,"t":{"1423":{"position":[[303,11]]}}}],["return",{"_index":21,"t":{"896":{"position":[[203,6]]},"902":{"position":[[358,6]]},"966":{"position":[[461,6]]},"1213":{"position":[[48,7]]},"1375":{"position":[[386,6],[877,6],[1268,6],[1321,6]]},"1687":{"position":[[650,6]]},"1689":{"position":[[737,6],[1097,6]]}}}],["revers",{"_index":298,"t":{"986":{"position":[[446,7]]},"1633":{"position":[[865,7]]}}}],["revis",{"_index":186,"t":{"972":{"position":[[865,10]]}}}],["rfid",{"_index":1947,"t":{"1403":{"position":[[635,4]]},"1528":{"position":[[635,4]]}}}],["rgb",{"_index":1228,"t":{"1208":{"position":[[445,3]]},"1633":{"position":[[24,3],[82,3],[259,3],[421,3]]}}}],["richard",{"_index":2385,"t":{"1476":{"position":[[587,7]]}}}],["right",{"_index":2937,"t":{"1633":{"position":[[6594,7]]}}}],["right]ex,c,ϵ,ϵ′,t​[wt​∥x^θ​(αt​x+σt​ϵ,c)−x∥22​+λwt′​∥x^θ​(αt′​xpr​+σt′​ϵ′,cpr​)−xpr​∥22",{"_index":2966,"t":{"1633":{"position":[[8473,90]]}}}],["rightarrow",{"_index":52,"t":{"915":{"position":[[89,13]]},"917":{"position":[[16,13]]},"919":{"position":[[135,11]]}}}],["rkr_krk",{"_index":552,"t":{"1055":{"position":[[67,26],[524,74]]},"1492":{"position":[[580,8],[973,8],[1006,8],[1047,8],[1120,8]]},"1620":{"position":[[580,8],[973,8],[1006,8],[1047,8],[1120,8]]}}}],["rk∈[v]hk×wkr_k",{"_index":2502,"t":{"1492":{"position":[[804,14]]},"1620":{"position":[[804,14]]}}}],["rmsnorm",{"_index":1995,"t":{"1410":{"position":[[132,7],[140,13],[184,7],[236,7],[457,7]]},"1535":{"position":[[132,7],[140,13],[184,7],[236,7],[457,7]]}}}],["rmsnorm(x)=x1n∑i=1nxi2∗grmsnorm(x)=\\frac",{"_index":1999,"t":{"1410":{"position":[[313,40]]},"1535":{"position":[[313,40]]}}}],["rnn",{"_index":2694,"t":{"1564":{"position":[[9,38],[48,3]]}}}],["rnn的输入是(seq_len",{"_index":2800,"t":{"1609":{"position":[[174,17]]}}}],["rnn输入默认不是batch",{"_index":2802,"t":{"1609":{"position":[[288,19]]}}}],["robert",{"_index":618,"t":{"1081":{"position":[[0,9]]}}}],["robust",{"_index":2102,"t":{"1414":{"position":[[1048,6]]}}}],["romimag",{"_index":257,"t":{"974":{"position":[[531,9]]},"1774":{"position":[[1587,9]]}}}],["root",{"_index":1318,"t":{"1217":{"position":[[2743,4]]}}}],["rope",{"_index":2015,"t":{"1410":{"position":[[999,5],[1393,4]]},"1535":{"position":[[1000,5],[1394,4]]},"1597":{"position":[[27,4],[77,17]]}}}],["rope⁡(xi)=xi⋅cos⁡(θi)+xi+1⋅sin⁡(θi)\\operatorname{rope}\\left(x_i\\right)=x_i",{"_index":2019,"t":{"1410":{"position":[[1135,74]]},"1535":{"position":[[1136,74]]}}}],["rope（rotari",{"_index":2016,"t":{"1410":{"position":[[1005,11]]},"1535":{"position":[[1006,11]]}}}],["rotari",{"_index":2732,"t":{"1597":{"position":[[0,11]]}}}],["rq",{"_index":2705,"t":{"1574":{"position":[[112,7]]}}}],["rqtransform",{"_index":2704,"t":{"1574":{"position":[[0,13],[14,60]]}}}],["rrg",{"_index":2180,"t":{"1431":{"position":[[476,7]]}}}],["rte（recogn",{"_index":1107,"t":{"1175":{"position":[[439,15]]}}}],["run_loop",{"_index":1000,"t":{"1154":{"position":[[569,8]]},"1259":{"position":[[569,8]]}}}],["rɪˈzɪdjuəl",{"_index":3126,"t":{"1724":{"position":[[29,12]]}}}],["r≤kr_{\\leq",{"_index":2509,"t":{"1492":{"position":[[1137,10]]},"1620":{"position":[[1137,10]]}}}],["s",{"_index":24,"t":{"898":{"position":[[142,14]]},"902":{"position":[[66,2],[76,2]]},"915":{"position":[[67,5],[87,1]]},"917":{"position":[[0,5]]},"956":{"position":[[307,1],[432,1],[440,15]]},"958":{"position":[[43,1]]},"960":{"position":[[47,1],[55,15]]},"1668":{"position":[[33,1]]},"1687":{"position":[[23,2]]},"1689":{"position":[[110,2],[786,2],[803,2],[851,2],[930,1]]},"1772":{"position":[[92,1]]}}}],["s(\\ell_c",{"_index":2041,"t":{"1410":{"position":[[2136,8]]},"1535":{"position":[[2137,8]]}}}],["s(k)=ceil(sk×l−1)(13)s(k)=\\mathbf{ceil}(s_k\\tim",{"_index":555,"t":{"1055":{"position":[[158,49]]}}}],["s(k)s(k)s(k",{"_index":554,"t":{"1055":{"position":[[119,38],[366,29]]}}}],["s(k)s(k)s(k)和z(k)z(k)z(k)都是归一化后的均匀分布，使用二者之间的就近原则将s(k)s(k)s(k",{"_index":559,"t":{"1055":{"position":[[430,78]]}}}],["s)^2+(i",{"_index":504,"t":{"1037":{"position":[[219,7]]}}}],["s.end",{"_index":38,"t":{"902":{"position":[[119,9],[308,10]]}}}],["s.size",{"_index":26,"t":{"898":{"position":[[190,9]]},"902":{"position":[[167,9]]},"1687":{"position":[[181,9]]},"1689":{"position":[[268,9],[835,9],[956,9]]}}}],["s[i",{"_index":27,"t":{"898":{"position":[[224,5]]},"902":{"position":[[201,4]]}}}],["s[idx",{"_index":3083,"t":{"1687":{"position":[[234,7]]},"1689":{"position":[[321,7]]}}}],["s[len",{"_index":3090,"t":{"1689":{"position":[[880,6]]}}}],["s\\vert+\\vert",{"_index":507,"t":{"1037":{"position":[[310,12]]}}}],["s\\vert,\\vert",{"_index":511,"t":{"1037":{"position":[[416,12]]}}}],["salient",{"_index":3124,"t":{"1722":{"position":[[0,14]]}}}],["same",{"_index":1070,"t":{"1163":{"position":[[787,4]]},"1268":{"position":[[787,4]]},"1774":{"position":[[924,4]]}}}],["sampl",{"_index":625,"t":{"1085":{"position":[[0,13]]},"1087":{"position":[[0,101]]},"1114":{"position":[[711,6]]},"1154":{"position":[[126,6]]},"1259":{"position":[[126,6]]},"1633":{"position":[[7353,8]]}}}],["sample_w",{"_index":861,"t":{"1147":{"position":[[111,8]]},"1252":{"position":[[111,8]]}}}],["sample_z",{"_index":856,"t":{"1147":{"position":[[22,8]]},"1252":{"position":[[22,8]]}}}],["sample出原始图像x0\\mathbf{x}_0x0",{"_index":316,"t":{"988":{"position":[[13,36]]}}}],["sample出的向量，并在这个过程中训练出nois",{"_index":775,"t":{"1128":{"position":[[0,57]]}}}],["sampling来获得压缩版本的图像作为decod",{"_index":762,"t":{"1118":{"position":[[1013,34]]}}}],["sangwoo",{"_index":2365,"t":{"1476":{"position":[[362,11]]}}}],["save",{"_index":3018,"t":{"1652":{"position":[[186,4]]}}}],["scalabl",{"_index":1939,"t":{"1403":{"position":[[423,11]]},"1405":{"position":[[408,8]]},"1485":{"position":[[886,12]]},"1528":{"position":[[423,11]]},"1530":{"position":[[408,8]]},"1585":{"position":[[64,8]]},"1613":{"position":[[886,12]]},"1631":{"position":[[142,8]]}}}],["scale",{"_index":706,"t":{"1114":{"position":[[589,7],[656,7],[736,7]]},"1217":{"position":[[2700,5],[2967,5]]},"1403":{"position":[[357,7]]},"1485":{"position":[[152,5],[899,7],[946,7],[1280,7]]},"1487":{"position":[[53,7],[132,7],[182,7]]},"1489":{"position":[[990,5]]},"1492":{"position":[[121,33],[160,5],[331,5],[1210,5],[1235,5],[1314,7]]},"1494":{"position":[[6,5]]},"1496":{"position":[[62,5],[527,7]]},"1528":{"position":[[357,7]]},"1613":{"position":[[152,5],[899,7],[946,7],[1280,7]]},"1615":{"position":[[53,7],[132,7],[182,7]]},"1617":{"position":[[990,5]]},"1620":{"position":[[121,33],[160,5],[331,5],[1210,5],[1235,5],[1314,7]]},"1622":{"position":[[6,5]]},"1624":{"position":[[186,5]]},"1626":{"position":[[62,5],[527,7]]},"1631":{"position":[[253,5]]}}}],["scan",{"_index":2430,"t":{"1485":{"position":[[238,4]]},"1613":{"position":[[238,4]]}}}],["scanf(\"%d",{"_index":120,"t":{"966":{"position":[[106,10],[321,10]]}}}],["schedul",{"_index":1890,"t":{"1387":{"position":[[585,8],[606,8],[838,18]]},"1512":{"position":[[530,13]]},"1545":{"position":[[585,8],[606,8],[838,18]]}}}],["score",{"_index":469,"t":{"1030":{"position":[[1583,6]]},"1116":{"position":[[38,6],[921,6]]},"1151":{"position":[[612,5],[865,5],[933,34],[2097,7]]},"1213":{"position":[[330,7]]},"1217":{"position":[[1680,6],[1687,6],[1742,7],[1850,5],[1946,6],[2317,7],[4051,5],[4057,6],[4112,7],[4146,5],[4242,6],[4476,7]]},"1256":{"position":[[612,5],[865,5],[933,34],[2097,7]]},"1370":{"position":[[1583,6]]},"1423":{"position":[[1240,6]]},"1485":{"position":[[651,5]]},"1500":{"position":[[217,6],[283,5]]},"1516":{"position":[[152,5]]},"1518":{"position":[[278,5],[334,8],[438,5],[478,5]]},"1522":{"position":[[2,5]]},"1524":{"position":[[412,5],[449,5],[919,5],[1017,5],[1140,5],[1176,5]]},"1613":{"position":[[651,5]]}}}],["score_softmax",{"_index":1291,"t":{"1217":{"position":[[1856,13],[1978,14],[2170,13],[4152,13],[4274,14],[4329,13]]}}}],["score_softmax.t",{"_index":1305,"t":{"1217":{"position":[[2273,18],[4432,18]]}}}],["scores.masked_fill(mask",{"_index":470,"t":{"1030":{"position":[[1592,23]]},"1370":{"position":[[1592,23]]}}}],["scores.softmax(dim",{"_index":473,"t":{"1030":{"position":[[1637,19]]},"1370":{"position":[[1637,19]]}}}],["scores:\\n",{"_index":1289,"t":{"1217":{"position":[[1730,11],[4100,11]]}}}],["score。分数越小，代表文字和图像更align",{"_index":741,"t":{"1116":{"position":[[1156,25]]}}}],["score中的clip指的就是openai的clip（contrast",{"_index":735,"t":{"1116":{"position":[[933,38]]}}}],["score时，使用每一个query查询对应的key，即query0query^{0}query0只与其他每一个输入向量的key0key^{0}key0做dot",{"_index":1345,"t":{"1219":{"position":[[307,79]]}}}],["score的计算方式是将用于生成图像的文字prompt输入至clip的text",{"_index":738,"t":{"1116":{"position":[[1014,39]]}}}],["score（i",{"_index":914,"t":{"1151":{"position":[[77,9]]},"1256":{"position":[[77,9]]}}}],["score（sc",{"_index":954,"t":{"1151":{"position":[[2017,10]]},"1256":{"position":[[2017,10]]}}}],["score（sifid",{"_index":945,"t":{"1151":{"position":[[1748,12]]},"1256":{"position":[[1748,12]]}}}],["sd",{"_index":2053,"t":{"1412":{"position":[[75,4]]}}}],["sd1.5",{"_index":2116,"t":{"1414":{"position":[[1329,6]]}}}],["sde",{"_index":2831,"t":{"1633":{"position":[[368,3],[873,4]]}}}],["sdedit",{"_index":2823,"t":{"1633":{"position":[[113,7],[271,6],[572,7]]}}}],["search",{"_index":3043,"t":{"1663":{"position":[[249,6]]}}}],["seat",{"_index":2737,"t":{"1597":{"position":[[275,7]]}}}],["segment",{"_index":1174,"t":{"1185":{"position":[[328,7]]}}}],["segment_len",{"_index":1171,"t":{"1185":{"position":[[295,12]]}}}],["select",{"_index":89,"t":{"939":{"position":[[0,23],[24,65]]},"1185":{"position":[[47,6]]},"1217":{"position":[[1900,6],[4196,6]]}}}],["self",{"_index":402,"t":{"1018":{"position":[[62,4]]},"1022":{"position":[[795,4],[918,4],[973,4],[1057,53],[1368,4]]},"1205":{"position":[[29,4],[44,10]]},"1213":{"position":[[2,4],[121,4],[192,8],[338,4]]},"1217":{"position":[[187,4],[1665,4],[2484,14],[3219,4],[4036,4]]},"1219":{"position":[[36,4]]},"1221":{"position":[[0,4]]},"1223":{"position":[[0,11],[127,4]]},"1358":{"position":[[62,4]]},"1362":{"position":[[795,4],[918,4],[973,4],[1057,53],[1368,4]]},"1489":{"position":[[1559,4],[1653,4],[1742,4]]},"1617":{"position":[[1559,4],[1653,4],[1742,4]]}}}],["self).__init__",{"_index":1020,"t":{"1159":{"position":[[346,16]]},"1264":{"position":[[346,16]]},"1375":{"position":[[347,16],[477,16]]}}}],["self.auto_layer_it",{"_index":888,"t":{"1149":{"position":[[199,21]]},"1254":{"position":[[199,21]]}}}],["self.determine_opt_lay",{"_index":891,"t":{"1149":{"position":[[295,27]]},"1254":{"position":[[295,27]]}}}],["self.final_linear",{"_index":1041,"t":{"1159":{"position":[[929,17]]},"1264":{"position":[[929,17]]}}}],["self.generator_trainable.freeze_lay",{"_index":894,"t":{"1149":{"position":[[409,40]]},"1254":{"position":[[409,40]]}}}],["self.generator_trainable.unfreeze_lay",{"_index":889,"t":{"1149":{"position":[[226,42]]},"1254":{"position":[[226,42]]}}}],["self.generator_trainable.unfreeze_layers(train_lay",{"_index":895,"t":{"1149":{"position":[[450,54]]},"1254":{"position":[[450,54]]}}}],["self.linear",{"_index":1036,"t":{"1159":{"position":[[807,11]]},"1264":{"position":[[807,11]]}}}],["self.map",{"_index":1044,"t":{"1159":{"position":[[1058,12]]},"1264":{"position":[[1058,12]]}}}],["self.n_dim",{"_index":1022,"t":{"1159":{"position":[[380,10]]},"1264":{"position":[[380,10]]}}}],["self.net",{"_index":1733,"t":{"1375":{"position":[[494,8]]}}}],["self.net(x",{"_index":1750,"t":{"1375":{"position":[[884,11]]}}}],["self.opt",{"_index":1021,"t":{"1159":{"position":[[363,9]]},"1264":{"position":[[363,9]]}}}],["self.styl",{"_index":877,"t":{"1147":{"position":[[728,10]]},"1252":{"position":[[728,10]]}}}],["self.train",{"_index":887,"t":{"1149":{"position":[[181,13]]},"1254":{"position":[[181,13]]}}}],["self.transformer_encod",{"_index":1030,"t":{"1159":{"position":[[604,24]]},"1264":{"position":[[604,24]]}}}],["semant",{"_index":2065,"t":{"1414":{"position":[[282,8],[1649,17]]},"1426":{"position":[[330,15]]},"1633":{"position":[[1190,8]]}}}],["semvi",{"_index":2069,"t":{"1414":{"position":[[326,9]]}}}],["sentenc",{"_index":424,"t":{"1022":{"position":[[592,10]]},"1173":{"position":[[433,8]]},"1362":{"position":[[592,10]]}}}],["sentencepiec",{"_index":2742,"t":{"1599":{"position":[[89,13],[1676,13]]},"1633":{"position":[[8794,24]]}}}],["sentence），都是表示生成的开始。end符号又叫eos符号（end",{"_index":423,"t":{"1022":{"position":[[552,36]]},"1362":{"position":[[552,36]]}}}],["sentiment",{"_index":1122,"t":{"1175":{"position":[[737,9],[916,9]]}}}],["seq2seq",{"_index":377,"t":{"1009":{"position":[[103,9]]},"1349":{"position":[[103,9]]}}}],["seq_len",{"_index":2807,"t":{"1609":{"position":[[497,7]]}}}],["sequenc",{"_index":376,"t":{"1009":{"position":[[94,8]]},"1349":{"position":[[94,8]]},"1381":{"position":[[918,8]]},"1433":{"position":[[58,8]]},"1489":{"position":[[1426,8]]},"1539":{"position":[[918,8]]},"1617":{"position":[[1426,8]]}}}],["sequenti",{"_index":2138,"t":{"1423":{"position":[[50,10],[485,10]]}}}],["seri",{"_index":1951,"t":{"1403":{"position":[[695,6]]},"1528":{"position":[[695,6]]}}}],["serv",{"_index":1971,"t":{"1403":{"position":[[1154,7]]},"1405":{"position":[[743,7]]},"1528":{"position":[[1154,7]]},"1530":{"position":[[742,7]]}}}],["set",{"_index":1260,"t":{"1217":{"position":[[634,8]]},"1307":{"position":[[87,4],[153,4],[245,4]]},"1309":{"position":[[6,4],[65,4],[100,4]]}}}],["set_current_attr(attrib(black",{"_index":228,"t":{"972":{"position":[[2028,30],[2106,30]]}}}],["sfid",{"_index":951,"t":{"1151":{"position":[[1847,7]]},"1256":{"position":[[1847,7]]}}}],["sfid（singl",{"_index":985,"t":{"1151":{"position":[[2420,11]]},"1256":{"position":[[2420,11]]}}}],["sg2_model.pi",{"_index":871,"t":{"1147":{"position":[[541,24]]},"1252":{"position":[[541,24]]}}}],["sg2gener",{"_index":896,"t":{"1149":{"position":[[535,49]]},"1254":{"position":[[535,49]]}}}],["shape",{"_index":1253,"t":{"1217":{"position":[[318,5],[3365,5]]}}}],["shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(1)shape_{output",{"_index":1586,"t":{"1314":{"position":[[202,68]]}}}],["shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(5)shape_{output",{"_index":1606,"t":{"1321":{"position":[[272,68]]}}}],["shape为[5,5,3][5",{"_index":1371,"t":{"1270":{"position":[[4,19]]}}}],["shape为[5,5,4][5",{"_index":1373,"t":{"1270":{"position":[[40,21]]}}}],["shape应为[dim0",{"_index":1690,"t":{"1347":{"position":[[716,25]]}}}],["sharp",{"_index":939,"t":{"1151":{"position":[[1394,5]]},"1256":{"position":[[1394,5]]}}}],["sharpen",{"_index":485,"t":{"1032":{"position":[[160,7]]}}}],["shechtman",{"_index":2384,"t":{"1476":{"position":[[572,10]]}}}],["shin",{"_index":2370,"t":{"1476":{"position":[[400,5]]}}}],["shot",{"_index":787,"t":{"1130":{"position":[[36,4]]},"1235":{"position":[[36,4]]},"1471":{"position":[[79,4]]},"1476":{"position":[[89,5],[99,5],[825,5]]},"1485":{"position":[[1089,4],[1302,4]]},"1613":{"position":[[1089,4],[1302,4]]},"1633":{"position":[[7000,4]]}}}],["shot任务，一般是通过有限的目标域训练集资料fin",{"_index":2356,"t":{"1476":{"position":[[111,27]]}}}],["shot和zero",{"_index":2354,"t":{"1476":{"position":[[79,9]]}}}],["shot的背景下，如何实现prompt与源域图像特征的对齐以及prompt",{"_index":2413,"t":{"1481":{"position":[[159,63]]}}}],["showcas",{"_index":2454,"t":{"1485":{"position":[[1074,9]]},"1613":{"position":[[1074,9]]}}}],["shown",{"_index":1176,"t":{"1185":{"position":[[391,5]]}}}],["shrine",{"_index":481,"t":{"1032":{"position":[[104,6]]}}}],["sifid",{"_index":950,"t":{"1151":{"position":[[1821,21],[1958,5]]},"1256":{"position":[[1821,21],[1958,5]]}}}],["sigma",{"_index":1399,"t":{"1280":{"position":[[117,6],[136,7]]},"1410":{"position":[[847,14]]},"1535":{"position":[[847,14]]}}}],["sigma_\\phi^2(x",{"_index":2540,"t":{"1506":{"position":[[391,16]]}}}],["sigma_t",{"_index":2930,"t":{"1633":{"position":[[6365,8],[6543,8],[8318,8]]}}}],["sigma_t\\left(x_t\\right)=\\left(1",{"_index":2593,"t":{"1512":{"position":[[383,32]]}}}],["sigma_{t",{"_index":2964,"t":{"1633":{"position":[[8426,11]]}}}],["sigmoid",{"_index":1402,"t":{"1280":{"position":[[197,56]]},"1326":{"position":[[36,35]]},"1375":{"position":[[544,13]]},"1410":{"position":[[597,7]]},"1535":{"position":[[597,7]]}}}],["sigmoid函数输出的结果可将其视为probability，而后根据设定的置信度阈值来判断该特征向量对应的标签是1还是0",{"_index":1610,"t":{"1324":{"position":[[61,78]]}}}],["sigmoid改成了relu",{"_index":1504,"t":{"1294":{"position":[[73,26]]}}}],["signal",{"_index":1933,"t":{"1403":{"position":[[288,7]]},"1528":{"position":[[288,7]]}}}],["signific",{"_index":2056,"t":{"1414":{"position":[[33,11]]}}}],["significantli",{"_index":714,"t":{"1114":{"position":[[772,13]]},"1414":{"position":[[1188,13]]},"1423":{"position":[[1454,13]]},"1485":{"position":[[541,13]]},"1613":{"position":[[541,13]]}}}],["sim",{"_index":1908,"t":{"1389":{"position":[[390,4],[461,4]]},"1433":{"position":[[321,4],[782,4]]},"1435":{"position":[[1078,4]]},"1506":{"position":[[1419,4],[1518,4],[1684,4]]},"1547":{"position":[[390,4],[461,4]]},"1633":{"position":[[2086,4],[4844,4],[6104,4],[8003,4]]}}}],["similar",{"_index":1112,"t":{"1175":{"position":[[530,10]]},"1485":{"position":[[959,7]]},"1613":{"position":[[959,7]]}}}],["similarity（id",{"_index":956,"t":{"1151":{"position":[[2049,14]]},"1256":{"position":[[2049,14]]}}}],["simpl",{"_index":1330,"t":{"1217":{"position":[[3203,6]]},"1476":{"position":[[434,6]]},"1485":{"position":[[273,7]]},"1613":{"position":[[273,7]]},"1631":{"position":[[259,6]]}}}],["simul",{"_index":2842,"t":{"1633":{"position":[[850,10]]}}}],["sin",{"_index":484,"t":{"1032":{"position":[[142,5]]},"1410":{"position":[[1257,4]]},"1535":{"position":[[1258,4]]}}}],["sine函数进行编码，对偶数维度使用cosin",{"_index":381,"t":{"1016":{"position":[[0,56]]},"1356":{"position":[[0,56]]}}}],["singl",{"_index":944,"t":{"1151":{"position":[[1717,6]]},"1256":{"position":[[1717,6]]}}}],["situation)中。在logo文件夹中挑选想要的logo，在desktop中的icon",{"_index":3024,"t":{"1661":{"position":[[151,51]]}}}],["size",{"_index":707,"t":{"1114":{"position":[[610,4],[644,5],[668,4],[761,4],[816,5]]},"1319":{"position":[[796,4]]},"1462":{"position":[[155,4]]},"1633":{"position":[[5521,4]]}}}],["size_{kernel}+2*padding}{stride}+1",{"_index":1588,"t":{"1314":{"position":[[293,34]]},"1321":{"position":[[363,34]]}}}],["sks_ksk",{"_index":553,"t":{"1055":{"position":[[94,24]]}}}],["slr(1",{"_index":98,"t":{"951":{"position":[[260,9]]},"956":{"position":[[146,7],[187,20]]}}}],["small",{"_index":1263,"t":{"1217":{"position":[[669,5],[2942,6]]}}}],["snr：参考图像像素值的平方均值与均方误差的比值的对数的10",{"_index":516,"t":{"1039":{"position":[[174,42]]}}}],["sobel",{"_index":619,"t":{"1081":{"position":[[67,8]]}}}],["softmax",{"_index":1290,"t":{"1217":{"position":[[1799,24],[2914,7]]},"1227":{"position":[[452,7],[480,7]]}}}],["softwar",{"_index":188,"t":{"972":{"position":[[900,9]]}}}],["solid",{"_index":2451,"t":{"1485":{"position":[[1046,5]]},"1613":{"position":[[1046,5]]}}}],["solut",{"_index":1188,"t":{"1187":{"position":[[28,8]]}}}],["someth",{"_index":47,"t":{"904":{"position":[[85,12]]}}}],["sonder",{"_index":2,"t":{"890":{"position":[[28,12]]}}}],["sophisticated），是长度不定的向量序列（sequence）时，cnn",{"_index":1229,"t":{"1208":{"position":[[799,88]]}}}],["sora",{"_index":2813,"t":{"1624":{"position":[[241,4]]}}}],["sort(list.begin",{"_index":45,"t":{"904":{"position":[[39,18]]}}}],["sort(s.begin",{"_index":37,"t":{"902":{"position":[[103,15]]}}}],["sot",{"_index":825,"t":{"1143":{"position":[[132,4],[407,4]]},"1248":{"position":[[132,4],[407,4]]}}}],["sota",{"_index":1988,"t":{"1405":{"position":[[594,4]]},"1410":{"position":[[52,4]]},"1426":{"position":[[198,4]]},"1530":{"position":[[594,4]]},"1535":{"position":[[52,4]]},"1583":{"position":[[1533,4]]}}}],["sota的图像生成模型的共同点，并初步了解了diffus",{"_index":288,"t":{"984":{"position":[[4,53]]}}}],["sourc",{"_index":1062,"t":{"1163":{"position":[[606,7]]},"1268":{"position":[[606,7]]},"1403":{"position":[[1318,6]]},"1528":{"position":[[1318,6]]},"1679":{"position":[[89,6]]},"1774":{"position":[[1221,6]]}}}],["source_embed",{"_index":844,"t":{"1143":{"position":[[853,16]]},"1248":{"position":[[853,16]]}}}],["source_prompt",{"_index":815,"t":{"1141":{"position":[[56,14],[183,14]]},"1246":{"position":[[56,14],[183,14]]}}}],["source_prompts]).to(devic",{"_index":823,"t":{"1143":{"position":[[94,27]]},"1248":{"position":[[94,27]]}}}],["source_tokenized_prompt",{"_index":821,"t":{"1143":{"position":[[30,24],[757,24]]},"1248":{"position":[[30,24],[757,24]]}}}],["space",{"_index":69,"t":{"919":{"position":[[176,6]]},"995":{"position":[[34,72]]},"1001":{"position":[[158,65]]},"1147":{"position":[[266,5],[401,5]]},"1252":{"position":[[266,5],[401,5]]},"1280":{"position":[[124,6]]},"1287":{"position":[[734,6],[744,6],[768,6],[778,6],[870,6],[880,6],[1023,6],[1032,6],[1211,6],[1249,6]]},"1300":{"position":[[36,6],[51,6],[76,6]]},"1381":{"position":[[168,5],[453,6]]},"1403":{"position":[[395,6]]},"1423":{"position":[[379,6],[641,5]]},"1428":{"position":[[14,9]]},"1431":{"position":[[284,59]]},"1464":{"position":[[92,21]]},"1518":{"position":[[382,6]]},"1528":{"position":[[395,6]]},"1539":{"position":[[168,5],[453,6]]},"1633":{"position":[[7430,7]]}}}],["spatial",{"_index":2322,"t":{"1462":{"position":[[195,36]]},"1464":{"position":[[55,7],[231,7]]},"1471":{"position":[[122,7]]}}}],["spawn",{"_index":212,"t":{"972":{"position":[[1809,6]]}}}],["speaker",{"_index":1149,"t":{"1183":{"position":[[13,7]]},"1185":{"position":[[58,8]]}}}],["specfic",{"_index":1051,"t":{"1161":{"position":[[372,7]]},"1266":{"position":[[372,7]]}}}],["special",{"_index":2064,"t":{"1414":{"position":[[263,9]]}}}],["specif",{"_index":1049,"t":{"1161":{"position":[[288,8],[519,8],[850,8]]},"1163":{"position":[[81,8],[137,8]]},"1266":{"position":[[288,8],[519,8],[850,8]]},"1268":{"position":[[81,8],[137,8]]},"1435":{"position":[[252,8]]},"1473":{"position":[[11,8]]},"1633":{"position":[[7701,8],[7803,8]]},"1661":{"position":[[142,8]]}}}],["specifi",{"_index":192,"t":{"972":{"position":[[969,9]]}}}],["spectrogram",{"_index":1162,"t":{"1185":{"position":[[126,13],[484,11]]}}}],["speed",{"_index":1860,"t":{"1381":{"position":[[899,5]]},"1403":{"position":[[1201,5]]},"1485":{"position":[[708,6],[858,6]]},"1528":{"position":[[1201,5]]},"1539":{"position":[[899,5]]},"1613":{"position":[[708,6],[858,6]]}}}],["speedup",{"_index":1975,"t":{"1403":{"position":[[1258,8]]},"1528":{"position":[[1258,8]]}}}],["split",{"_index":1550,"t":{"1305":{"position":[[156,5]]}}}],["sqrt[2]{\\sum{[i",{"_index":1425,"t":{"1285":{"position":[[191,16]]}}}],["sqrt{\\alpha_t",{"_index":2599,"t":{"1512":{"position":[[619,15]]}}}],["squar",{"_index":1317,"t":{"1217":{"position":[[2736,6]]}}}],["squeez",{"_index":3199,"t":{"1751":{"position":[[0,7]]}}}],["squeeze挤压操作就是将[b,c,h,w][b",{"_index":3201,"t":{"1751":{"position":[[23,26]]}}}],["ssim",{"_index":518,"t":{"1039":{"position":[[299,22]]}}}],["sss",{"_index":2047,"t":{"1410":{"position":[[2265,3]]},"1535":{"position":[[2266,3]]}}}],["sss个时间步，mask",{"_index":437,"t":{"1022":{"position":[[1339,17]]},"1362":{"position":[[1339,17]]}}}],["sst",{"_index":1120,"t":{"1175":{"position":[[722,3]]}}}],["ss×s个grid",{"_index":3151,"t":{"1733":{"position":[[174,9]]}}}],["st",{"_index":1110,"t":{"1175":{"position":[[507,3]]}}}],["stabl",{"_index":688,"t":{"1112":{"position":[[0,6]]},"1114":{"position":[[0,10],[303,9]]},"1161":{"position":[[1191,6]]},"1266":{"position":[[1191,6]]},"1414":{"position":[[1964,6]]},"1421":{"position":[[43,11],[65,22]]},"1431":{"position":[[547,6]]},"1438":{"position":[[263,13],[306,6]]},"1631":{"position":[[57,6]]},"1633":{"position":[[3986,6],[4232,6],[4353,6],[5278,6],[5405,6],[8722,6]]}}}],["stablediffus",{"_index":2881,"t":{"1633":{"position":[[3544,15]]}}}],["stack",{"_index":1665,"t":{"1347":{"position":[[15,34]]},"1774":{"position":[[1325,5]]}}}],["stack和concat",{"_index":1666,"t":{"1347":{"position":[[85,14]]}}}],["stage",{"_index":879,"t":{"1147":{"position":[[946,10]]},"1149":{"position":[[1004,5]]},"1161":{"position":[[330,5],[484,5]]},"1252":{"position":[[946,10]]},"1254":{"position":[[1004,5]]},"1266":{"position":[[330,5],[484,5]]},"1403":{"position":[[974,5]]},"1414":{"position":[[1001,5]]},"1426":{"position":[[297,32],[358,26]]},"1528":{"position":[[974,5]]}}}],["stand",{"_index":2084,"t":{"1414":{"position":[[702,6]]},"1692":{"position":[[742,6]]},"1701":{"position":[[742,6]]}}}],["standard",{"_index":1853,"t":{"1381":{"position":[[718,8]]},"1485":{"position":[[222,8]]},"1539":{"position":[[718,8]]},"1613":{"position":[[222,8]]}}}],["star",{"_index":287,"t":{"978":{"position":[[16,4]]},"982":{"position":[[16,4]]},"1642":{"position":[[16,4]]},"1658":{"position":[[16,4]]},"1696":{"position":[[16,4]]}}}],["starganv2",{"_index":1007,"t":{"1156":{"position":[[58,9]]},"1261":{"position":[[58,9]]}}}],["start_kernel_thread(&project0,0,priority_normal,fals",{"_index":167,"t":{"972":{"position":[[574,55],[2256,55]]}}}],["startoftext",{"_index":839,"t":{"1143":{"position":[[625,11]]},"1248":{"position":[[625,11]]}}}],["state",{"_index":1934,"t":{"1403":{"position":[[308,5]]},"1423":{"position":[[131,5],[1223,5]]},"1528":{"position":[[308,5]]}}}],["static）元素，而是巧妙地融入了旋转（rot",{"_index":2734,"t":{"1597":{"position":[[124,82]]}}}],["status=insert",{"_index":265,"t":{"974":{"position":[[642,15],[685,15]]},"1774":{"position":[[1698,15],[1741,15]]}}}],["std",{"_index":9,"t":{"896":{"position":[[41,4]]},"902":{"position":[[41,4]]},"966":{"position":[[41,4]]},"1689":{"position":[[82,4]]}}}],["stl",{"_index":44,"t":{"904":{"position":[[6,12]]}}}],["stochast",{"_index":2824,"t":{"1633":{"position":[[161,10]]}}}],["str(devic",{"_index":1820,"t":{"1375":{"position":[[2612,15]]}}}],["strategi",{"_index":2099,"t":{"1414":{"position":[[1016,8]]}}}],["stride=1padding=1,stride=1",{"_index":1377,"t":{"1270":{"position":[[138,26]]}}}],["stride=2",{"_index":1741,"t":{"1375":{"position":[[645,10],[733,10]]}}}],["string",{"_index":33,"t":{"902":{"position":[[59,6]]},"1163":{"position":[[827,6]]},"1268":{"position":[[827,6]]},"1687":{"position":[[0,6],[73,6]]},"1689":{"position":[[87,6],[160,6],[779,6]]}}}],["string}.pt",{"_index":1180,"t":{"1185":{"position":[[423,10],[588,10]]}}}],["stroke",{"_index":2834,"t":{"1633":{"position":[[425,12],[559,7],[715,6],[755,6],[925,6],[1013,6],[1044,6],[1106,6]]}}}],["strong",{"_index":1858,"t":{"1381":{"position":[[865,6]]},"1539":{"position":[[865,6]]}}}],["struct",{"_index":164,"t":{"972":{"position":[[535,6],[2217,6]]}}}],["structur",{"_index":952,"t":{"1151":{"position":[[1994,10]]},"1256":{"position":[[1994,10]]},"1471":{"position":[[130,10]]},"1638":{"position":[[12,9]]}}}],["style",{"_index":866,"t":{"1147":{"position":[[392,8]]},"1149":{"position":[[838,6]]},"1252":{"position":[[392,8]]},"1254":{"position":[[838,6]]},"1485":{"position":[[438,5]]},"1583":{"position":[[836,5]]},"1613":{"position":[[438,5]]}}}],["style_dim",{"_index":874,"t":{"1147":{"position":[[662,10],[673,10]]},"1252":{"position":[[662,10],[673,10]]}}}],["stylegan",{"_index":865,"t":{"1147":{"position":[[191,8],[314,8],[443,8],[781,8],[899,17]]},"1149":{"position":[[706,8],[715,21]]},"1151":{"position":[[26,11],[1036,8],[1576,8]]},"1154":{"position":[[335,8]]},"1156":{"position":[[85,8],[257,8]]},"1252":{"position":[[191,8],[314,8],[443,8],[781,8],[899,17]]},"1254":{"position":[[706,8],[715,21]]},"1256":{"position":[[26,11],[1036,8],[1576,8]]},"1259":{"position":[[335,8]]},"1261":{"position":[[85,8],[257,8]]}}}],["stylegan2",{"_index":989,"t":{"1154":{"position":[[59,9]]},"1259":{"position":[[59,9]]}}}],["style）类的prompt",{"_index":2405,"t":{"1478":{"position":[[52,28]]}}}],["subject",{"_index":1511,"t":{"1300":{"position":[[11,7],[131,7]]},"1633":{"position":[[5862,7],[5914,23],[6725,7],[6778,7],[6895,8],[7088,7],[7222,7]]}}}],["subsequ",{"_index":2106,"t":{"1414":{"position":[[1122,12]]},"1633":{"position":[[314,12]]}}}],["subsystem",{"_index":209,"t":{"972":{"position":[[1771,11]]}}}],["such",{"_index":1958,"t":{"1403":{"position":[[879,4]]},"1423":{"position":[[743,4],[1071,4]]},"1528":{"position":[[879,4]]},"1633":{"position":[[6831,4]]},"1774":{"position":[[873,4]]}}}],["sudo",{"_index":3054,"t":{"1668":{"position":[[59,4]]}}}],["suggest",{"_index":2456,"t":{"1485":{"position":[[1207,7]]},"1613":{"position":[[1207,7]]}}}],["sum",{"_index":25,"t":{"898":{"position":[[161,3],[207,3],[213,3]]},"1022":{"position":[[1724,37]]},"1362":{"position":[[1724,37]]}}}],["sum_i^n{p_i}\\space{log_2(p_i",{"_index":1441,"t":{"1287":{"position":[[318,31]]}}}],["sum_i^n{p_i}\\space{log_2({\\frac{1}{p_i",{"_index":1442,"t":{"1287":{"position":[[356,43]]}}}],["sum_{j=1}^i",{"_index":671,"t":{"1099":{"position":[[574,12]]}}}],["sum_{l=1}^l",{"_index":2557,"t":{"1506":{"position":[[985,12]]}}}],["sum{[{i",{"_index":1420,"t":{"1285":{"position":[[91,8]]}}}],["sum{p_i\\spac",{"_index":1461,"t":{"1287":{"position":[[892,14]]}}}],["sum{p_i}\\space{log_2({q_i",{"_index":1474,"t":{"1287":{"position":[[1267,29]]}}}],["sum产生加入噪声后的图像。通常来说，αˉ1\\bar{\\alpha}_1αˉ1​至αˉt\\bar{\\alpha}_tαˉt​是递减的，当在第2步中sample到的ttt越大，则原始图像x0\\mathbf{x}_0x0",{"_index":324,"t":{"988":{"position":[[564,119]]}}}],["super",{"_index":2174,"t":{"1423":{"position":[[1430,5]]}}}],["super(lenet5",{"_index":1732,"t":{"1375":{"position":[[463,13]]}}}],["super(lenetreshap",{"_index":1727,"t":{"1375":{"position":[[327,19]]}}}],["super(transformermapperv2",{"_index":1019,"t":{"1159":{"position":[[319,26]]},"1264":{"position":[[319,26]]}}}],["supervis",{"_index":2324,"t":{"1462":{"position":[[377,10]]}}}],["support",{"_index":2904,"t":{"1633":{"position":[[5121,7]]}}}],["sur",{"_index":3022,"t":{"1661":{"position":[[105,3]]}}}],["sure",{"_index":1321,"t":{"1217":{"position":[[2790,4]]},"1650":{"position":[[89,4]]}}}],["surpass",{"_index":2434,"t":{"1485":{"position":[[454,7]]},"1613":{"position":[[454,7]]}}}],["surpris",{"_index":1430,"t":{"1287":{"position":[[80,9]]},"1489":{"position":[[1484,10]]},"1617":{"position":[[1484,10]]}}}],["sutskever和geoffrey",{"_index":1499,"t":{"1290":{"position":[[36,18]]}}}],["svd",{"_index":3109,"t":{"1699":{"position":[[977,61]]},"1707":{"position":[[849,61]]}}}],["swift",{"_index":2121,"t":{"1414":{"position":[[1462,5]]}}}],["swiglu",{"_index":2002,"t":{"1410":{"position":[[504,6],[511,11],[904,6]]},"1535":{"position":[[504,6],[511,11],[904,6]]},"1595":{"position":[[0,14]]}}}],["swiglu(x)=σ(xw1+b1)⊙(xw2+b2)\\mathrm{swiglu}(x)=\\sigma(xw_1+b_1)\\odot(xw_2+b_2)swiglu(x)=σ(xw1​+b1​)⊙(xw2​+b2",{"_index":2008,"t":{"1410":{"position":[[671,110]]},"1535":{"position":[[671,110]]}}}],["swish",{"_index":2006,"t":{"1410":{"position":[[551,5],[630,5]]},"1535":{"position":[[551,5],[630,5]]}}}],["synchroni",{"_index":2109,"t":{"1414":{"position":[[1224,9]]}}}],["synthes",{"_index":2835,"t":{"1633":{"position":[[534,12]]}}}],["synthesi",{"_index":2060,"t":{"1414":{"position":[[162,10]]},"1423":{"position":[[148,9],[1122,9],[1296,9],[1415,10]]},"1583":{"position":[[2061,10]]},"1633":{"position":[[134,9]]},"1636":{"position":[[241,9]]},"1638":{"position":[[47,9]]}}}],["system",{"_index":252,"t":{"974":{"position":[[445,7]]},"1774":{"position":[[864,8],[1501,7]]}}}],["s×ss",{"_index":3150,"t":{"1733":{"position":[[152,14]]}}}],["sθ(x)s_\\theta(x)sθ​(x",{"_index":2626,"t":{"1518":{"position":[[251,22]]}}}],["sθ(xt,t,y)≈∇log⁡p(xt∣y)s_\\theta\\left(x_t",{"_index":2644,"t":{"1520":{"position":[[532,41]]}}}],["t",{"_index":1879,"t":{"1387":{"position":[[300,2],[723,2]]},"1389":{"position":[[208,2]]},"1435":{"position":[[100,2],[1151,2]]},"1512":{"position":[[182,2],[1154,1],[1475,1]]},"1520":{"position":[[182,2],[402,2],[488,2],[574,2]]},"1545":{"position":[[300,2],[723,2]]},"1547":{"position":[[208,2]]},"1633":{"position":[[1701,2],[1991,2],[4906,2],[6486,2],[8263,2]]}}}],["t(xt)=αtxt−1,σt(xt)=(1−αt)i\\mu_t\\left(x_t\\right)=\\sqrt{\\alpha_t",{"_index":2592,"t":{"1512":{"position":[[308,65]]}}}],["t)^2}\\tag{1}de​(p,q)=(x−s)2+(y−t)2​(1",{"_index":505,"t":{"1037":{"position":[[227,38]]}}}],["t2a",{"_index":2317,"t":{"1453":{"position":[[251,22]]}}}],["t2i",{"_index":2062,"t":{"1414":{"position":[[228,3],[1164,3],[1835,3]]},"1453":{"position":[[163,3]]},"1460":{"position":[[39,3]]},"1462":{"position":[[36,3],[90,3]]}}}],["t2i/v",{"_index":2320,"t":{"1462":{"position":[[68,5],[183,5],[351,5]]}}}],["t2v",{"_index":2312,"t":{"1453":{"position":[[170,3]]},"1460":{"position":[[46,3]]}}}],["t5",{"_index":2811,"t":{"1624":{"position":[[129,2]]},"1633":{"position":[[7462,2],[7584,2],[8819,2]]}}}],["t<1t",{"_index":635,"t":{"1095":{"position":[[436,4]]}}}],["t=0t=0t=0",{"_index":2584,"t":{"1512":{"position":[[66,9]]}}}],["t=1",{"_index":2199,"t":{"1433":{"position":[[145,3]]}}}],["t=1t=1t=1时，得到x0\\mathbf{x}_0x0",{"_index":342,"t":{"990":{"position":[[762,42]]}}}],["t=μ+ν2(25)t=\\frac{\\mu",{"_index":615,"t":{"1077":{"position":[[110,21]]}}}],["t>1t",{"_index":633,"t":{"1095":{"position":[[387,4]]}}}],["t\\alpha_tαt",{"_index":2596,"t":{"1512":{"position":[[473,13]]}}}],["t\\bar{\\alpha}_tαˉt",{"_index":1889,"t":{"1387":{"position":[[551,21]]},"1545":{"position":[[551,21]]}}}],["t\\right",{"_index":2198,"t":{"1433":{"position":[[134,8]]}}}],["t\\right)\\right\\|_2^2\\right]ldm​=ex,ϵ∼n(0,1),t​[∥ϵ−ϵθ​(xt​,t)∥22",{"_index":2206,"t":{"1433":{"position":[[394,65]]}}}],["t\\right)\\right\\|_2^2\\right]lldm​:=ee(x),ϵ∼n(0,1),t​[∥ϵ−ϵθ​(zt​,t)∥22",{"_index":2214,"t":{"1433":{"position":[[855,70]]}}}],["t\\sigma_tσt",{"_index":1906,"t":{"1389":{"position":[[346,13]]},"1547":{"position":[[346,13]]}}}],["t\\vert",{"_index":508,"t":{"1037":{"position":[[325,6]]}}}],["t\\vert)\\tag{3}d8​(p,q)=max(∣x−s∣,∣y−t∣)(3",{"_index":512,"t":{"1037":{"position":[[431,42]]}}}],["t\\}{1,…,t",{"_index":2208,"t":{"1433":{"position":[[489,10]]}}}],["t]t∈[1,t",{"_index":2587,"t":{"1512":{"position":[[113,9]]}}}],["t]t∼uniform[1,t]，xt\\mathbf{x}_txt",{"_index":2865,"t":{"1633":{"position":[[2117,34]]}}}],["tae",{"_index":2327,"t":{"1464":{"position":[[13,3],[114,3],[140,3],[955,3]]}}}],["tag{10",{"_index":1475,"t":{"1287":{"position":[[1297,8]]}}}],["tag{1}",{"_index":57,"t":{"915":{"position":[[145,12]]}}}],["tag{1}3×3×3×4=108(1",{"_index":1382,"t":{"1272":{"position":[[168,21]]}}}],["tag{1}acc=len(y)∑i(predi​==yi​)​(1",{"_index":1616,"t":{"1330":{"position":[[196,36]]}}}],["tag{1}attention(q,k,v)=softmax(dk​​qkt​)v(1",{"_index":1329,"t":{"1217":{"position":[[3149,45]]}}}],["tag{1}l(y,z)=max(0,−y∗z)(1",{"_index":1654,"t":{"1335":{"position":[[406,28]]}}}],["tag{1}min",{"_index":1519,"t":{"1300":{"position":[[113,10]]}}}],["tag{1}pe(pos,2i)​=sin(100002i/dmodel​pos​)(1)pe(pos,2i+1)=cos(pos100002i/dmodel)(2)pe_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model",{"_index":384,"t":{"1016":{"position":[[309,146]]},"1356":{"position":[[309,146]]}}}],["tag{1}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(1",{"_index":1589,"t":{"1314":{"position":[[328,65]]}}}],["tag{1}x1[0,:,:]+x2[0,:,:](1",{"_index":2773,"t":{"1603":{"position":[[894,29]]}}}],["tag{1}yi,j​=h,w∑​wi,j,h,w​∗xh,w​(1",{"_index":1594,"t":{"1319":{"position":[[142,36]]}}}],["tag{1}σ(x)=1+e−x1​(1)dσdx",{"_index":1395,"t":{"1280":{"position":[[47,28]]}}}],["tag{2}",{"_index":62,"t":{"917":{"position":[[59,12]]}}}],["tag{2}3×3××3=27(2",{"_index":1386,"t":{"1274":{"position":[[100,19]]}}}],["tag{2}d4​(p,q)=∣x−s∣+∣y−t∣(2",{"_index":509,"t":{"1037":{"position":[[332,30]]}}}],["tag{2}dxd",{"_index":1400,"t":{"1280":{"position":[[144,14]]}}}],["tag{2}l(w,b)+2λ​∥w∥12​(2",{"_index":1526,"t":{"1302":{"position":[[110,26]]}}}],["tag{2}pe(pos,2i+1)​=cos(100002i/dmodel​pos​)(2",{"_index":385,"t":{"1016":{"position":[[456,48]]},"1356":{"position":[[456,48]]}}}],["tag{2}x1[1,:,:]+x2[1,:,:](2",{"_index":2776,"t":{"1603":{"position":[[972,29]]}}}],["tag{2}yi,j​=h,w∑​wi,j,h,w​∗xh,w​=a,b∑​vi,j,a,b​∗xi+a,j+b​(2",{"_index":1597,"t":{"1319":{"position":[[364,61]]}}}],["tag{3}1×1×3×4=12(3",{"_index":1392,"t":{"1276":{"position":[[112,20]]}}}],["tag{3}a",{"_index":70,"t":{"919":{"position":[[210,11]]}}}],["tag{3}f(x)={0x​x<0x≥0​(3)df(x)dx={0x<01x≥0(4",{"_index":1413,"t":{"1282":{"position":[[78,46]]}}}],["tag{3}pe(pos+k,2i)=pe(pos,2i)×pe(k,2i+1)+pe(pos,2i+1)×pe(k,2i)pe(pos+k,2i+1)=pe(pos,2i+1)×pe(k,2i+1)−pe(pos,2i)×pe(k,2i)​(3",{"_index":393,"t":{"1016":{"position":[[927,125]]},"1356":{"position":[[927,125]]}}}],["tag{3}x1[2,:,:]+x2[2,:,:](3",{"_index":2779,"t":{"1603":{"position":[[1050,29]]}}}],["tag{3}yi,j​=a,b∑​vi,j,a,b​∗xi+a,j+b​=a,b∑​va,b​∗xi+a,j+b​(3",{"_index":1600,"t":{"1319":{"position":[[636,61]]}}}],["tag{3}∂w∂​(l(w,b)+2λ​∥w∥12​)=∂w∂l(w,b)​+λw(3)wt+1=(1−ηλ)wt+η∂l(wt,bt)∂wt(4)w_{t+1}=(1",{"_index":1533,"t":{"1302":{"position":[[347,86]]}}}],["tag{4}dxdf(x)​={01​x<0x≥0​(4",{"_index":1416,"t":{"1282":{"position":[[214,30]]}}}],["tag{4}inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i)(4",{"_index":397,"t":{"1016":{"position":[[1233,76]]},"1356":{"position":[[1233,76]]}}}],["tag{4}wt+1​=(1−ηλ)wt​+η∂wt​∂l(wt​,bt​)​(4",{"_index":1539,"t":{"1302":{"position":[[500,43]]}}}],["tag{4}yi,j​=a,b∑​va,b​∗xi+a,j+b​=a=−δ∑δ​b=−δ∑δ​va,b​∗xia​,j+b​(4",{"_index":1605,"t":{"1321":{"position":[[194,66]]}}}],["tag{5}lossmse​=∑[y−f(x)]2(5",{"_index":1422,"t":{"1285":{"position":[[112,29]]}}}],["tag{5}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(5",{"_index":1607,"t":{"1321":{"position":[[398,65]]}}}],["tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6",{"_index":463,"t":{"1030":{"position":[[732,57]]},"1370":{"position":[[732,57]]}}}],["tag{6}∥y−f(x)∥2​=2∑[y−f(x)]2​(6",{"_index":1426,"t":{"1285":{"position":[[220,33]]}}}],["tag{7",{"_index":1443,"t":{"1287":{"position":[[400,7]]}}}],["tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7",{"_index":465,"t":{"1030":{"position":[[1026,52]]},"1370":{"position":[[1026,52]]}}}],["take",{"_index":476,"t":{"1032":{"position":[[54,4]]},"1213":{"position":[[24,5]]}}}],["target",{"_index":2349,"t":{"1473":{"position":[[227,6]]},"1774":{"position":[[635,6],[828,6],[938,6],[984,6]]}}}],["target_cc",{"_index":3243,"t":{"1774":{"position":[[692,9]]}}}],["target_cc_prefix)gcc",{"_index":3244,"t":{"1774":{"position":[[705,22]]}}}],["target_cc_prefix)ld",{"_index":3260,"t":{"1774":{"position":[[1063,21]]}}}],["target_class",{"_index":1063,"t":{"1163":{"position":[[634,14]]},"1268":{"position":[[634,14]]}}}],["target_direct",{"_index":909,"t":{"1149":{"position":[[1160,16]]},"1254":{"position":[[1160,16]]}}}],["target_direction：mapp",{"_index":910,"t":{"1149":{"position":[[1186,23]]},"1254":{"position":[[1186,23]]}}}],["target_embed",{"_index":848,"t":{"1143":{"position":[[1005,16]]},"1248":{"position":[[1005,16]]}}}],["target_ld",{"_index":3259,"t":{"1774":{"position":[[1050,9]]}}}],["target_prompt",{"_index":818,"t":{"1141":{"position":[[115,14]]},"1246":{"position":[[115,14]]}}}],["target_prompts]).to(devic",{"_index":836,"t":{"1143":{"position":[[369,27]]},"1248":{"position":[[369,27]]}}}],["target_tokenized_prompt",{"_index":835,"t":{"1143":{"position":[[305,24],[784,24]]},"1248":{"position":[[305,24],[784,24]]}}}],["task",{"_index":1060,"t":{"1163":{"position":[[585,4]]},"1171":{"position":[[337,11]]},"1175":{"position":[[909,6]]},"1268":{"position":[[585,4]]},"1414":{"position":[[948,4],[1112,5]]},"1423":{"position":[[1352,6]]},"1485":{"position":[[1131,5]]},"1613":{"position":[[1131,5]]},"1633":{"position":[[6755,4]]}}}],["tau_\\theta(i",{"_index":2230,"t":{"1435":{"position":[[754,15]]}}}],["tau_\\theta(y)\\right)\\right\\|_2^2\\right]lldm​:=ee(x),y,ϵ∼n(0,1),t​[∥ϵ−ϵθ​(zt​,t,τθ​(y))∥22",{"_index":2237,"t":{"1435":{"position":[[1154,92]]}}}],["tau_\\theta(y)q=wq(i)​⋅φi​(zt​),k=wk(i)​⋅τθ​(y),v=wv(i)​⋅τθ​(i",{"_index":2232,"t":{"1435":{"position":[[788,63]]}}}],["teacher",{"_index":450,"t":{"1028":{"position":[[146,11]]},"1030":{"position":[[429,19]]},"1368":{"position":[[146,11]]},"1370":{"position":[[429,19]]}}}],["techniqu",{"_index":1543,"t":{"1305":{"position":[[29,9]]}}}],["tell",{"_index":483,"t":{"1032":{"position":[[130,4]]}}}],["temp",{"_index":3082,"t":{"1687":{"position":[[158,4],[210,4],[253,13],[270,5],[377,4],[516,5]]},"1689":{"position":[[245,4],[297,4],[340,13],[357,5],[464,4],[603,5]]}}}],["templat",{"_index":1047,"t":{"1161":{"position":[[103,25],[632,9],[647,9],[739,18]]},"1266":{"position":[[103,25],[632,9],[647,9],[739,18]]}}}],["tempor",{"_index":2328,"t":{"1464":{"position":[[63,10],[191,13],[433,16]]}}}],["tensor",{"_index":2766,"t":{"1603":{"position":[[637,10]]}}}],["tensor(0.2684",{"_index":1492,"t":{"1287":{"position":[[1689,14],[1875,14]]}}}],["tensor(1",{"_index":1707,"t":{"1347":{"position":[[1134,11]]}}}],["tensor(2",{"_index":1709,"t":{"1347":{"position":[[1157,11]]}}}],["tensor(3",{"_index":1711,"t":{"1347":{"position":[[1180,11]]}}}],["tensor(4",{"_index":1708,"t":{"1347":{"position":[[1146,10]]}}}],["tensor(4))8(tensor(2",{"_index":1631,"t":{"1330":{"position":[[475,22]]}}}],["tensor(5",{"_index":1710,"t":{"1347":{"position":[[1169,10]]}}}],["tensor(5))9(tensor(3",{"_index":1632,"t":{"1330":{"position":[[498,22]]}}}],["tensor(6",{"_index":1712,"t":{"1347":{"position":[[1192,10]]}}}],["tensor(6))10'''11a",{"_index":1633,"t":{"1330":{"position":[[521,18]]}}}],["tensor([1",{"_index":1704,"t":{"1347":{"position":[[947,10],[965,10],[1328,11]]}}}],["tensor([3",{"_index":1713,"t":{"1347":{"position":[[1367,11]]}}}],["tensor([4",{"_index":1640,"t":{"1330":{"position":[[686,10]]},"1347":{"position":[[1348,10]]}}}],["tensor([6",{"_index":1642,"t":{"1330":{"position":[[726,10]]},"1347":{"position":[[1387,10]]}}}],["tensor([[9",{"_index":1685,"t":{"1347":{"position":[[558,11]]}}}],["tensor([[[0",{"_index":2762,"t":{"1603":{"position":[[426,14],[541,13]]}}}],["tensorflow框架，可以使用tensorboard",{"_index":1200,"t":{"1194":{"position":[[4,36]]}}}],["tensor的*乘法是对tensor",{"_index":1682,"t":{"1347":{"position":[[454,28]]}}}],["term",{"_index":1237,"t":{"1213":{"position":[[110,6]]},"1506":{"position":[[187,5],[264,5],[540,4],[576,4]]},"1512":{"position":[[1080,8],[1138,15],[1194,19],[1380,5],[1401,8],[1459,15],[1691,4]]},"1516":{"position":[[23,4]]}}}],["terminal_proxy.sh",{"_index":3061,"t":{"1677":{"position":[[0,23]]}}}],["term：其中，pθ(xt−1∣xt)p_{\\theta}(x_{t",{"_index":2610,"t":{"1512":{"position":[[1522,34]]}}}],["test",{"_index":1553,"t":{"1305":{"position":[[224,4],[277,7]]},"1307":{"position":[[82,4],[240,4]]},"1309":{"position":[[95,4],[115,5]]},"1375":{"position":[[1771,5],[2519,4]]}}}],["test_acc",{"_index":1812,"t":{"1375":{"position":[[2367,8],[2453,10]]}}}],["test_acc:.3f",{"_index":1816,"t":{"1375":{"position":[[2528,16]]}}}],["test_it",{"_index":1771,"t":{"1375":{"position":[[1391,10],[2405,10],[2668,9],[2787,10]]}}}],["testdata.json",{"_index":1186,"t":{"1185":{"position":[[557,13]]}}}],["text",{"_index":626,"t":{"1085":{"position":[[18,4]]},"1097":{"position":[[413,6],[589,5]]},"1099":{"position":[[698,5]]},"1114":{"position":[[78,4],[597,4],[748,4],[837,4]]},"1163":{"position":[[669,4]]},"1268":{"position":[[669,4]]},"1282":{"position":[[131,7]]},"1403":{"position":[[903,4],[1099,4]]},"1414":{"position":[[852,4],[1061,4],[1213,4]]},"1423":{"position":[[1079,4],[1401,4]]},"1528":{"position":[[903,4],[1099,4]]},"1585":{"position":[[16,4]]},"1599":{"position":[[137,27]]},"1624":{"position":[[132,4]]},"1631":{"position":[[18,4]]},"1633":{"position":[[43,4],[1138,4],[1452,4],[2223,4],[2416,4],[2659,4],[5827,4],[5938,4],[5978,4],[6023,4],[7849,4]]},"1636":{"position":[[139,4],[172,4]]},"1663":{"position":[[80,4]]}}}],["text_direct",{"_index":1052,"t":{"1161":{"position":[[616,15]]},"1266":{"position":[[616,15]]}}}],["text_featur",{"_index":911,"t":{"1149":{"position":[[1230,13]]},"1161":{"position":[[243,13]]},"1254":{"position":[[1230,13]]},"1266":{"position":[[243,13]]}}}],["textual",{"_index":1108,"t":{"1175":{"position":[[455,7],[522,7]]},"1414":{"position":[[465,7]]}}}],["text{subject",{"_index":1514,"t":{"1300":{"position":[[58,13]]}}}],["theta",{"_index":1518,"t":{"1300":{"position":[[106,6],[192,23]]},"1387":{"position":[[655,8]]},"1506":{"position":[[97,9],[854,7],[977,7],[1792,8]]},"1545":{"position":[[655,8]]},"1633":{"position":[[2171,14]]}}}],["theta)=\\mathbb{e}_{t",{"_index":2859,"t":{"1633":{"position":[[1896,22]]}}}],["those",{"_index":2447,"t":{"1485":{"position":[[970,5]]},"1613":{"position":[[970,5]]}}}],["thpf",{"_index":600,"t":{"1063":{"position":[[522,14]]}}}],["thread",{"_index":166,"t":{"972":{"position":[[556,8],[565,6],[2169,6],[2238,8],[2247,6],[2324,6]]}}}],["through",{"_index":2103,"t":{"1414":{"position":[[1076,7]]},"1633":{"position":[[356,7]]}}}],["tiktoken",{"_index":2739,"t":{"1599":{"position":[[23,8],[1694,16]]}}}],["tilde{x}_\\theta",{"_index":2935,"t":{"1633":{"position":[[6503,16]]}}}],["time",{"_index":1193,"t":{"1190":{"position":[[39,6],[70,6]]},"1192":{"position":[[37,6]]},"1225":{"position":[[59,6]]},"1227":{"position":[[193,6],[252,6],[359,6]]},"1231":{"position":[[101,6],[141,6],[174,6]]},"1270":{"position":[[94,6]]},"1272":{"position":[[135,6],[144,6],[153,6]]},"1274":{"position":[[70,6],[79,6],[86,6]]},"1276":{"position":[[7,6],[80,6],[89,6],[98,6]]},"1305":{"position":[[243,6],[290,5]]},"1307":{"position":[[187,6]]},"1312":{"position":[[67,6],[98,6]]},"1314":{"position":[[13,6],[22,6],[55,6],[66,6],[77,6],[115,6],[148,6],[158,6],[424,6],[435,6],[444,6],[453,6],[463,6]]},"1423":{"position":[[786,4]]},"1431":{"position":[[634,6],[643,6],[761,6],[770,6]]},"1435":{"position":[[349,6],[912,6]]},"1485":{"position":[[422,5]]},"1492":{"position":[[441,6],[450,6],[552,6],[605,6],[832,6],[871,6],[1022,6]]},"1613":{"position":[[422,5]]},"1620":{"position":[[441,6],[450,6],[552,6],[605,6],[832,6],[871,6],[1022,6]]},"1633":{"position":[[1722,6],[2377,6],[2568,6],[2748,6],[2776,6],[3039,6],[3084,6],[3112,6],[3170,6],[3204,6],[3869,5],[5490,6],[5641,6],[5689,6]]},"1728":{"position":[[143,6]]},"1733":{"position":[[167,6]]},"1735":{"position":[[68,6]]},"1745":{"position":[[134,6]]},"1747":{"position":[[70,6],[89,6],[115,6]]}}}],["timer",{"_index":1789,"t":{"1375":{"position":[[1784,6]]}}}],["timer.start",{"_index":1798,"t":{"1375":{"position":[[1950,13]]}}}],["timer.stop",{"_index":1807,"t":{"1375":{"position":[[2142,12]]}}}],["timer.sum():.1f",{"_index":1818,"t":{"1375":{"position":[[2579,16]]}}}],["tip",{"_index":3,"t":{"894":{"position":[[0,3]]},"900":{"position":[[0,3]]},"925":{"position":[[74,3],[247,3],[409,3]]},"932":{"position":[[0,3]]},"934":{"position":[[0,3]]},"937":{"position":[[0,3]]},"944":{"position":[[38,3]]},"956":{"position":[[135,3],[252,3]]},"964":{"position":[[0,3]]},"976":{"position":[[0,3]]},"980":{"position":[[0,3]]},"984":{"position":[[0,3]]},"1022":{"position":[[1335,3]]},"1032":{"position":[[0,3]]},"1053":{"position":[[271,3]]},"1061":{"position":[[33,3]]},"1122":{"position":[[126,3]]},"1165":{"position":[[0,3]]},"1194":{"position":[[0,3]]},"1210":{"position":[[279,3]]},"1233":{"position":[[0,3]]},"1270":{"position":[[0,3]]},"1276":{"position":[[133,3]]},"1296":{"position":[[0,3]]},"1362":{"position":[[1335,3]]},"1476":{"position":[[809,4]]},"1656":{"position":[[0,3]]},"1683":{"position":[[0,3]]},"1689":{"position":[[15,3]]},"1692":{"position":[[736,3]]},"1694":{"position":[[0,3]]},"1699":{"position":[[244,3],[386,3]]},"1701":{"position":[[736,3]]},"1703":{"position":[[0,3]]},"1707":{"position":[[116,3],[258,3]]},"1724":{"position":[[16,3],[136,3]]},"1733":{"position":[[0,3],[519,3],[721,3]]},"1737":{"position":[[154,3]]},"1739":{"position":[[0,3]]}}}],["titile(if",{"_index":3033,"t":{"1663":{"position":[[66,9]]}}}],["titl",{"_index":3028,"t":{"1661":{"position":[[321,7]]},"1663":{"position":[[100,5]]}}}],["title/window",{"_index":3032,"t":{"1663":{"position":[[53,12]]}}}],["title文字不能垂直居中，可以更换为window",{"_index":3027,"t":{"1661":{"position":[[295,25]]}}}],["tlpf",{"_index":580,"t":{"1061":{"position":[[945,14]]}}}],["todo(\"start",{"_index":233,"t":{"972":{"position":[[2148,11]]}}}],["token",{"_index":820,"t":{"1143":{"position":[[20,9],[577,8]]},"1145":{"position":[[44,8],[179,8]]},"1248":{"position":[[20,9],[577,8]]},"1250":{"position":[[44,8],[179,8]]},"1381":{"position":[[120,7],[323,5],[563,5],[636,11]]},"1383":{"position":[[174,5],[261,5],[302,5]]},"1385":{"position":[[67,5],[116,5]]},"1387":{"position":[[56,24]]},"1392":{"position":[[76,5],[137,5]]},"1399":{"position":[[34,5]]},"1403":{"position":[[89,5],[411,11],[565,9]]},"1405":{"position":[[575,9]]},"1408":{"position":[[72,12],[250,9]]},"1410":{"position":[[2066,7]]},"1419":{"position":[[0,17],[71,20],[217,10],[228,5],[303,5],[389,5],[450,5],[460,5],[490,5]]},"1485":{"position":[[249,5]]},"1487":{"position":[[37,5]]},"1489":{"position":[[26,5],[186,6],[897,5],[940,5],[1090,5],[1117,5],[1295,6],[1764,6],[1818,6],[1853,6],[1995,5]]},"1492":{"position":[[207,5],[259,5],[283,5],[303,5],[380,5],[401,11]]},"1494":{"position":[[47,16],[244,21],[296,9],[410,9],[668,9]]},"1496":{"position":[[230,5],[300,6]]},"1528":{"position":[[89,5],[411,11],[565,9]]},"1530":{"position":[[575,9]]},"1533":{"position":[[72,12],[250,9]]},"1535":{"position":[[2067,7]]},"1539":{"position":[[120,7],[323,5],[563,5],[636,11]]},"1541":{"position":[[174,5],[261,5],[302,5]]},"1543":{"position":[[67,5],[116,5]]},"1545":{"position":[[56,24]]},"1550":{"position":[[76,5],[137,5]]},"1557":{"position":[[34,5]]},"1583":{"position":[[1245,8],[1290,6],[1308,6],[1342,5],[1371,15],[1397,12],[1420,12],[1445,5],[1467,5],[1577,5],[1614,6],[1639,5],[1675,37],[1720,5]]},"1592":{"position":[[20,6]]},"1613":{"position":[[249,5]]},"1615":{"position":[[37,5]]},"1617":{"position":[[26,5],[186,6],[897,5],[940,5],[1090,5],[1117,5],[1295,6],[1764,6],[1818,6],[1853,6],[1995,5]]},"1620":{"position":[[207,5],[259,5],[283,5],[303,5],[380,5],[401,11]]},"1622":{"position":[[47,16],[244,21],[296,9],[410,9],[668,9]]},"1624":{"position":[[12,9]]},"1626":{"position":[[230,5],[300,6]]},"1631":{"position":[[117,6]]},"1633":{"position":[[1759,5],[1776,5],[7266,21],[7365,6],[7448,6],[7469,9],[7560,5],[7591,9],[7628,5],[8782,9]]}}}],["tokenizer、quant",{"_index":1987,"t":{"1405":{"position":[[388,19]]},"1530":{"position":[[388,19]]}}}],["tokenize后为tensor",{"_index":827,"t":{"1143":{"position":[[161,19],[433,19]]},"1248":{"position":[[161,19],[433,19]]}}}],["tokens。vqgan",{"_index":2722,"t":{"1583":{"position":[[1269,12]]}}}],["token或random",{"_index":1084,"t":{"1173":{"position":[[92,12]]}}}],["token所对应的输出向量，随机初始化两个相同维度的向量，分别与输出向量做dot",{"_index":1133,"t":{"1175":{"position":[[1264,57]]}}}],["token进行遮挡后，喂入encoder中。对于每个被mask掉的词汇，bert",{"_index":1085,"t":{"1173":{"position":[[105,68]]}}}],["token）出发进行思考，产生了自回归模型是否有必要与向量量化（vector",{"_index":1866,"t":{"1383":{"position":[[186,38]]},"1541":{"position":[[186,38]]}}}],["top",{"_index":637,"t":{"1097":{"position":[[0,3],[73,3],[364,3],[433,3],[492,3]]},"1099":{"position":[[0,3]]},"1101":{"position":[[62,3],[70,3]]}}}],["torch",{"_index":1331,"t":{"1217":{"position":[[3241,5]]},"1280":{"position":[[298,5]]},"1282":{"position":[[289,5]]},"1375":{"position":[[7,5],[37,5],[112,5]]},"1603":{"position":[[285,5]]}}}],["torch.cat([clip.tokenize(p",{"_index":822,"t":{"1143":{"position":[[57,27],[332,27]]},"1248":{"position":[[57,27],[332,27]]}}}],["torch.concat((a",{"_index":1675,"t":{"1347":{"position":[[295,16]]}}}],["torch.linspac",{"_index":1405,"t":{"1280":{"position":[[308,15]]},"1282":{"position":[[299,15]]}}}],["torch.log",{"_index":1481,"t":{"1287":{"position":[[1438,9]]}}}],["torch.log(torch.softmax(predict",{"_index":1488,"t":{"1287":{"position":[[1584,32]]}}}],["torch.nn",{"_index":1403,"t":{"1280":{"position":[[259,8]]},"1282":{"position":[[250,8]]},"1287":{"position":[[1475,8]]},"1375":{"position":[[64,8]]}}}],["torch.nn.crossentropyloss",{"_index":1783,"t":{"1375":{"position":[[1630,27]]}}}],["torch.nn.crossentropyloss相当于torch.softmax",{"_index":1480,"t":{"1287":{"position":[[1394,41]]}}}],["torch.nn.funct",{"_index":1332,"t":{"1217":{"position":[[3254,19]]}}}],["torch.nn.modul",{"_index":1755,"t":{"1375":{"position":[[971,17]]}}}],["torch.nn.nllloss",{"_index":1482,"t":{"1287":{"position":[[1450,17]]}}}],["torch.nn.sequenti",{"_index":1734,"t":{"1375":{"position":[[505,20]]}}}],["torch.optim.sgd(net.paramet",{"_index":1781,"t":{"1375":{"position":[[1582,33]]}}}],["torch.rand(4",{"_index":1667,"t":{"1347":{"position":[[104,13],[143,13]]}}}],["torch.reshape(x",{"_index":2758,"t":{"1603":{"position":[[347,16]]}}}],["torch.size([2",{"_index":1674,"t":{"1347":{"position":[[269,14]]}}}],["torch.size([4",{"_index":1679,"t":{"1347":{"position":[[390,14]]}}}],["torch.stack((a",{"_index":1670,"t":{"1347":{"position":[[182,15]]}}}],["torch.sum(y_hat.argmax(dim=1",{"_index":1768,"t":{"1375":{"position":[[1328,29]]}}}],["torch.tensor([1",{"_index":1490,"t":{"1287":{"position":[[1634,16],[1817,16]]},"1330":{"position":[[371,16]]},"1347":{"position":[[1043,16]]}}}],["torch.tensor([4",{"_index":1625,"t":{"1330":{"position":[[399,16]]},"1347":{"position":[[1071,16]]}}}],["torch.tensor([[0",{"_index":1276,"t":{"1217":{"position":[[962,17],[1142,17],[3546,17],[3726,17]]}}}],["torch.tensor([[0.1",{"_index":1692,"t":{"1347":{"position":[[777,19]]}}}],["torch.tensor([[1",{"_index":1278,"t":{"1217":{"position":[[1052,17],[3636,17]]},"1330":{"position":[[542,17]]},"1347":{"position":[[1211,17]]}}}],["torch.tensor([[2",{"_index":1486,"t":{"1287":{"position":[[1537,17],[1772,17]]}}}],["torch.tensor([[3",{"_index":1683,"t":{"1347":{"position":[[487,17]]}}}],["torch.tensor([[4",{"_index":1635,"t":{"1330":{"position":[[584,17]]},"1347":{"position":[[1252,17]]}}}],["torch.tensor(input",{"_index":1254,"t":{"1217":{"position":[[395,20],[3442,20]]}}}],["torch.tensor(np.arange(9",{"_index":2757,"t":{"1603":{"position":[[295,26]]}}}],["torchaudio",{"_index":799,"t":{"1135":{"position":[[74,10]]},"1240":{"position":[[74,10]]}}}],["torchvis",{"_index":798,"t":{"1135":{"position":[[62,11]]},"1240":{"position":[[62,11]]}}}],["toward",{"_index":2096,"t":{"1414":{"position":[[929,7]]}}}],["tpuv4",{"_index":2967,"t":{"1633":{"position":[[8699,5]]}}}],["tqdm",{"_index":804,"t":{"1135":{"position":[[147,4]]},"1240":{"position":[[147,4]]}}}],["trade",{"_index":2050,"t":{"1410":{"position":[[2451,29]]},"1535":{"position":[[2452,29]]}}}],["tradeoff",{"_index":2179,"t":{"1431":{"position":[[24,12]]}}}],["train",{"_index":737,"t":{"1116":{"position":[[991,12]]},"1149":{"position":[[334,5]]},"1185":{"position":[[340,9]]},"1217":{"position":[[835,9]]},"1254":{"position":[[334,5]]},"1305":{"position":[[214,5]]},"1307":{"position":[[144,8]]},"1309":{"position":[[0,5],[14,5]]},"1375":{"position":[[1758,6],[2492,5]]},"1403":{"position":[[484,8],[980,8]]},"1414":{"position":[[377,7],[680,7],[1007,8],[1420,8]]},"1423":{"position":[[522,8],[714,8]]},"1462":{"position":[[429,14]]},"1464":{"position":[[919,8]]},"1476":{"position":[[799,9]]},"1489":{"position":[[1518,7]]},"1528":{"position":[[484,8],[980,8]]},"1617":{"position":[[1518,7]]},"1633":{"position":[[3403,8],[3721,8],[3792,7]]}}}],["train(lenet",{"_index":1825,"t":{"1375":{"position":[[2762,12]]}}}],["train(net",{"_index":1769,"t":{"1375":{"position":[[1368,10]]}}}],["train_acc",{"_index":1810,"t":{"1375":{"position":[[2187,9],[2349,10]]}}}],["train_acc:.3f",{"_index":1815,"t":{"1375":{"position":[[2502,16]]}}}],["train_it",{"_index":1770,"t":{"1375":{"position":[[1379,11],[2656,11],[2775,11]]}}}],["train_l",{"_index":1808,"t":{"1375":{"position":[[2155,7],[2339,9]]}}}],["train_l:.3f",{"_index":1814,"t":{"1375":{"position":[[2477,14]]}}}],["train_lay",{"_index":890,"t":{"1149":{"position":[[280,12],[379,12],[394,14]]},"1254":{"position":[[280,12],[379,12],[394,14]]}}}],["trained的cnn，该cnn通常使用预训练的incept",{"_index":726,"t":{"1116":{"position":[[89,33]]}}}],["training&fin",{"_index":1128,"t":{"1175":{"position":[[1030,13]]}}}],["tran",{"_index":2390,"t":{"1476":{"position":[[691,5],[707,5]]}}}],["transform",{"_index":373,"t":{"1009":{"position":[[20,23]]},"1014":{"position":[[0,11]]},"1026":{"position":[[2,11],[104,11],[486,18],[609,11]]},"1106":{"position":[[0,11]]},"1159":{"position":[[114,14],[240,13],[463,20],[587,16]]},"1177":{"position":[[412,11]]},"1181":{"position":[[56,12]]},"1183":{"position":[[57,11],[101,12]]},"1223":{"position":[[93,11]]},"1231":{"position":[[340,11]]},"1264":{"position":[[114,14],[240,13],[463,20],[587,16]]},"1349":{"position":[[20,23]]},"1354":{"position":[[0,11]]},"1366":{"position":[[2,11],[104,11],[486,18],[609,11]]},"1485":{"position":[[330,12],[472,12],[782,11]]},"1492":{"position":[[217,28]]},"1494":{"position":[[270,12],[320,11]]},"1574":{"position":[[154,20],[175,11],[247,11],[306,11]]},"1576":{"position":[[29,11],[155,11]]},"1578":{"position":[[120,11]]},"1583":{"position":[[866,11],[1205,12]]},"1585":{"position":[[47,16],[95,12]]},"1613":{"position":[[330,12],[472,12],[782,11]]},"1620":{"position":[[217,28]]},"1622":{"position":[[270,12],[320,11]]},"1631":{"position":[[85,11],[128,11],[173,12],[190,11]]}}}],["transformer_lay",{"_index":1025,"t":{"1159":{"position":[[484,17]]},"1264":{"position":[[484,17]]}}}],["transformerencoder(transformer_lay",{"_index":1031,"t":{"1159":{"position":[[631,37]]},"1264":{"position":[[631,37]]}}}],["transformerencoderlayer(d_model=512",{"_index":1026,"t":{"1159":{"position":[[504,36]]},"1264":{"position":[[504,36]]}}}],["transformermapperv2(nn.modul",{"_index":1011,"t":{"1159":{"position":[[78,31]]},"1264":{"position":[[78,31]]}}}],["transformers）本身是一种预训练的模型架构，通常是在大规模无标签数据上进行预训练，然后在特定任务上进行微调。bert",{"_index":1079,"t":{"1171":{"position":[[98,92]]}}}],["transformer中有lay",{"_index":1023,"t":{"1159":{"position":[[413,18]]},"1264":{"position":[[413,18]]}}}],["transformer实战练习，代码见github",{"_index":1143,"t":{"1181":{"position":[[5,28]]}}}],["transformer是sequ",{"_index":375,"t":{"1009":{"position":[[70,20]]},"1349":{"position":[[70,20]]}}}],["transformer由encoder和decoder组成，编码器和解码器都包含6个block",{"_index":378,"t":{"1011":{"position":[[0,58]]},"1351":{"position":[[0,58]]}}}],["transformer的推理阶段，自回归类型的decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（error",{"_index":448,"t":{"1028":{"position":[[0,131]]},"1368":{"position":[[0,131]]}}}],["transformer训练时采取的teach",{"_index":429,"t":{"1022":{"position":[[826,33]]},"1362":{"position":[[826,33]]}}}],["transformer（residu",{"_index":2706,"t":{"1574":{"position":[[120,20]]}}}],["treat",{"_index":3230,"t":{"1774":{"position":[[336,7]]}}}],["treebank",{"_index":1123,"t":{"1175":{"position":[[747,33]]}}}],["truncat",{"_index":842,"t":{"1143":{"position":[[725,19]]},"1248":{"position":[[725,19]]}}}],["trung",{"_index":2389,"t":{"1476":{"position":[[685,5],[730,5]]}}}],["truth",{"_index":756,"t":{"1118":{"position":[[755,6]]},"1173":{"position":[[248,21]]},"1633":{"position":[[6676,5],[7889,5]]}}}],["truth一次性喂到decod",{"_index":452,"t":{"1028":{"position":[[176,38]]},"1368":{"position":[[176,38]]}}}],["truth做bc",{"_index":3137,"t":{"1726":{"position":[[64,9]]}}}],["truth做cross",{"_index":1141,"t":{"1179":{"position":[[119,11]]}}}],["truth对nois",{"_index":784,"t":{"1128":{"position":[[556,11]]}}}],["truth就是sampl",{"_index":749,"t":{"1118":{"position":[[437,18]]}}}],["truth就是第3步中sample出的噪声ϵ\\epsilon",{"_index":327,"t":{"988":{"position":[[779,32]]}}}],["truth的bc",{"_index":3140,"t":{"1726":{"position":[[119,9]]}}}],["truth的策略，但是还额外需要一个encoder来产生lat",{"_index":751,"t":{"1118":{"position":[[553,34]]}}}],["tsinghua",{"_index":809,"t":{"1137":{"position":[[30,8]]},"1242":{"position":[[30,8]]}}}],["ttt",{"_index":632,"t":{"1095":{"position":[[367,17]]},"1387":{"position":[[594,3],[772,3]]},"1389":{"position":[[365,3]]},"1433":{"position":[[460,6]]},"1545":{"position":[[594,3],[772,3]]},"1547":{"position":[[365,3]]},"1633":{"position":[[1529,3],[1745,3]]}}}],["ttt从t,…,1t,\\ldots,1t,…,1范围循环ttt",{"_index":331,"t":{"990":{"position":[[54,33]]}}}],["ttt是从1,…,t1,\\ldots,t1,…,t范围中sample出的一个integ",{"_index":317,"t":{"988":{"position":[[50,46]]}}}],["ttt计数的循环，若t>1t>1t>1，则从normal",{"_index":332,"t":{"990":{"position":[[88,34]]}}}],["ttt，ztz_tzt",{"_index":2894,"t":{"1633":{"position":[[4637,12]]}}}],["ttt，我们可以直接获得任意时间步对应的原始图像加噪版本，换句话说，dm",{"_index":2615,"t":{"1514":{"position":[[54,36]]}}}],["tune",{"_index":447,"t":{"1026":{"position":[[580,28]]},"1163":{"position":[[1119,9]]},"1171":{"position":[[267,13]]},"1268":{"position":[[1119,9]]},"1366":{"position":[[580,28]]},"1414":{"position":[[494,6]]},"1476":{"position":[[139,10],[158,54],[459,6]]},"1633":{"position":[[2731,4],[5820,6]]}}}],["tuning范式与scratch范式的训练效果做了对比，其中scratch范式即使用传统的随机初始化的方式从头训练整个分类网络。可以看到预训练&微调的训练范式可以加速模型的收敛（converg",{"_index":1129,"t":{"1175":{"position":[[1044,109]]}}}],["turn",{"_index":2166,"t":{"1423":{"position":[[979,4]]}}}],["tutori",{"_index":2814,"t":{"1628":{"position":[[16,9],[95,9]]}}}],["two",{"_index":1962,"t":{"1403":{"position":[[970,3]]},"1485":{"position":[[1246,3]]},"1528":{"position":[[970,3]]},"1613":{"position":[[1246,3]]},"1633":{"position":[[3351,3]]}}}],["tx0+1−αˉtϵ,t)∥2(1)\\nabla_{\\theta}\\left\\|\\boldsymbol{\\epsilon",{"_index":320,"t":{"988":{"position":[[196,71]]}}}],["type(m",{"_index":1774,"t":{"1375":{"position":[[1451,7],[1475,7]]}}}],["typic",{"_index":1835,"t":{"1381":{"position":[[78,9]]},"1423":{"position":[[343,9]]},"1539":{"position":[[78,9]]}}}],["t}\\left",{"_index":2900,"t":{"1633":{"position":[[4857,10]]}}}],["t}\\left[\\left\\|\\epsilon",{"_index":2205,"t":{"1433":{"position":[[344,23],[805,23]]},"1435":{"position":[[1101,23]]}}}],["t}\\left[\\left\\|\\varepsilon",{"_index":1877,"t":{"1387":{"position":[[240,26]]},"1545":{"position":[[240,26]]}}}],["t}\\right)=p\\left(x_t\\right",{"_index":2604,"t":{"1512":{"position":[[833,27]]}}}],["tϵθ​(xt​,t);t=1…t",{"_index":2200,"t":{"1433":{"position":[[156,17]]}}}],["t∈[1,t]t",{"_index":2585,"t":{"1512":{"position":[[97,8]]}}}],["t∈tt",{"_index":2890,"t":{"1633":{"position":[[4463,4]]}}}],["t∼uniform⁡[1,t]t",{"_index":2863,"t":{"1633":{"position":[[2069,16]]}}}],["u",{"_index":709,"t":{"1114":{"position":[[638,1],[696,1],[810,1]]},"1585":{"position":[[38,1]]},"1631":{"position":[[3,1]]},"1663":{"position":[[347,1]]},"1724":{"position":[[0,4],[125,1]]}}}],["u\\ell_uℓu",{"_index":2045,"t":{"1410":{"position":[[2221,11]]},"1535":{"position":[[2222,11]]}}}],["ui",{"_index":1006,"t":{"1156":{"position":[[43,2],[241,2],[266,12],[279,2]]},"1261":{"position":[[43,2],[241,2],[266,12],[279,2]]}}}],["uncertainti",{"_index":1435,"t":{"1287":{"position":[[139,12]]}}}],["unchang",{"_index":1620,"t":{"1330":{"position":[[322,9]]}}}],["uncom",{"_index":277,"t":{"974":{"position":[[851,9]]},"1774":{"position":[[1907,9]]}}}],["uncondit",{"_index":354,"t":{"1003":{"position":[[145,13],[171,13]]},"1423":{"position":[[1369,13]]},"1524":{"position":[[1002,14]]}}}],["undefin",{"_index":3262,"t":{"1774":{"position":[[1101,9]]}}}],["underbrace{(1",{"_index":2670,"t":{"1524":{"position":[[925,17]]}}}],["underbrace{\\gamma",{"_index":2668,"t":{"1524":{"position":[[831,19]]}}}],["understand",{"_index":720,"t":{"1114":{"position":[[887,13]]},"1175":{"position":[[125,13]]},"1414":{"position":[[622,14]]},"1498":{"position":[[50,13]]}}}],["unet",{"_index":2217,"t":{"1435":{"position":[[170,4],[445,4],[951,4]]}}}],["unfreez",{"_index":886,"t":{"1149":{"position":[[161,8],[271,8],[507,8]]},"1254":{"position":[[161,8],[271,8],[507,8]]}}}],["unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.zssgan.zssgan.determine_opt_lay",{"_index":884,"t":{"1149":{"position":[[70,77]]},"1254":{"position":[[70,77]]}}}],["unicod",{"_index":2951,"t":{"1633":{"position":[[7402,7]]}}}],["unifi",{"_index":313,"t":{"986":{"position":[[833,7]]},"1485":{"position":[[1431,7]]},"1498":{"position":[[84,7]]},"1583":{"position":[[2021,5]]},"1613":{"position":[[1431,7]]}}}],["uniform",{"_index":2949,"t":{"1633":{"position":[[7338,7]]}}}],["uniqu",{"_index":2941,"t":{"1633":{"position":[[6718,6]]}}}],["unit",{"_index":2005,"t":{"1410":{"position":[[544,6]]},"1535":{"position":[[544,6]]}}}],["unit）\"bc",{"_index":2749,"t":{"1599":{"position":[[477,28]]}}}],["unrealist",{"_index":2845,"t":{"1633":{"position":[[913,11]]}}}],["unset",{"_index":3068,"t":{"1677":{"position":[[222,5],[238,5],[255,5]]}}}],["until",{"_index":1660,"t":{"1335":{"position":[[646,5]]}}}],["unzipped_list",{"_index":2796,"t":{"1607":{"position":[[389,14],[448,15]]}}}],["up",{"_index":2443,"t":{"1485":{"position":[[907,2]]},"1613":{"position":[[907,2]]}}}],["updat",{"_index":1568,"t":{"1309":{"position":[[47,6]]}}}],["update='append",{"_index":1212,"t":{"1201":{"position":[[261,16],[336,16]]},"1203":{"position":[[227,16]]}}}],["upgrad",{"_index":3007,"t":{"1650":{"position":[[59,7]]}}}],["upon",{"_index":2080,"t":{"1414":{"position":[[646,4]]}}}],["url：rec",{"_index":2710,"t":{"1581":{"position":[[8,10]]}}}],["url：video",{"_index":2729,"t":{"1587":{"position":[[8,9]]}}}],["us",{"_index":7,"t":{"896":{"position":[[25,5]]},"902":{"position":[[25,5]]},"966":{"position":[[25,5]]},"972":{"position":[[931,4]]},"974":{"position":[[969,6]]},"1183":{"position":[[53,3]]},"1217":{"position":[[705,5],[2658,3]]},"1305":{"position":[[39,4],[250,5]]},"1307":{"position":[[70,4],[132,4],[215,4]]},"1309":{"position":[[126,4]]},"1381":{"position":[[354,5],[472,5],[973,3]]},"1489":{"position":[[1628,4],[1730,4]]},"1539":{"position":[[354,5],[472,5],[973,3]]},"1617":{"position":[[1628,4],[1730,4]]},"1633":{"position":[[3460,3],[3540,3],[3662,3],[7332,5],[7442,5]]},"1638":{"position":[[125,5]]},"1650":{"position":[[7,3],[97,3],[152,6]]},"1689":{"position":[[66,5]]},"1774":{"position":[[760,4],[1206,4],[2025,6]]}}}],["usag",{"_index":1949,"t":{"1403":{"position":[[653,5]]},"1528":{"position":[[653,5]]}}}],["user",{"_index":2827,"t":{"1633":{"position":[[222,4]]}}}],["usual",{"_index":1262,"t":{"1217":{"position":[[661,7]]}}}],["utils/text_templates.pi",{"_index":1046,"t":{"1161":{"position":[[76,23]]},"1266":{"position":[[76,23]]}}}],["utkarsh",{"_index":2374,"t":{"1476":{"position":[[497,12]]}}}],["uttr",{"_index":1178,"t":{"1185":{"position":[[410,4],[575,4]]}}}],["ux+vy)}dudv\\tag{8}f(x,y)=∫−∞∞​∫−∞∞​f(u,v)ej2π(ux+vy)dudv(8",{"_index":534,"t":{"1043":{"position":[[817,60]]}}}],["ux+vy)}dxdy\\tag{7}f(u,v)=∫−∞∞​∫−∞∞​f(x,y)e−j2π(ux+vy)dxdy(7",{"_index":531,"t":{"1043":{"position":[[637,61]]}}}],["ux}du\\tag{6}f(x)=∫−∞∞​f(u)ej2πuxdu(6",{"_index":527,"t":{"1043":{"position":[[480,37]]}}}],["ux}dx\\tag{5}f(u)=∫−∞+∞​f(x)e−j2πuxdx(5",{"_index":524,"t":{"1043":{"position":[[364,39]]}}}],["ux}{n}}\\tag{10}f(x)=n1​u=0∑n−1​f(u)ejn2πux​(10",{"_index":541,"t":{"1043":{"position":[[1100,47]]}}}],["ux}{n}}\\tag{9}f(u)=x=0∑n−1​f(x)e−jn2πux​(9",{"_index":538,"t":{"1043":{"position":[[965,43]]}}}],["v",{"_index":1248,"t":{"1217":{"position":[[81,1]]},"1223":{"position":[[278,1]]},"1227":{"position":[[562,1],[592,1]]}}}],["v)=\\operatorname{softmax}\\left(\\frac{q",{"_index":2224,"t":{"1435":{"position":[[542,38]]}}}],["v1",{"_index":2127,"t":{"1414":{"position":[[1981,2]]},"1733":{"position":[[22,12]]}}}],["v1.5",{"_index":2909,"t":{"1633":{"position":[[5422,4]]}}}],["v2",{"_index":2242,"t":{"1438":{"position":[[287,2]]}}}],["v2.4.3",{"_index":2997,"t":{"1646":{"position":[[21,6]]}}}],["v2a",{"_index":2316,"t":{"1453":{"position":[[244,3]]}}}],["v3",{"_index":916,"t":{"1151":{"position":[[126,2],[1319,2],[1348,2]]},"1256":{"position":[[126,2],[1319,2],[1348,2]]},"1648":{"position":[[4,2],[22,9]]},"1650":{"position":[[149,2],[163,4]]}}}],["v3.5.2",{"_index":2998,"t":{"1646":{"position":[[32,16]]}}}],["v3模型。在计算fid时，生成图像和真实图像分别输入到预训练的cnn中，提取出各自的特征表示向量（representation）。这两个represent",{"_index":727,"t":{"1116":{"position":[[123,105]]}}}],["v=w_v^{(i",{"_index":2231,"t":{"1435":{"position":[[770,11]]}}}],["v]^{h_k",{"_index":2503,"t":{"1492":{"position":[[823,8]]},"1620":{"position":[[823,8]]}}}],["v_n",{"_index":56,"t":{"915":{"position":[[138,6]]},"919":{"position":[[171,4],[203,6]]}}}],["v_t",{"_index":54,"t":{"915":{"position":[[128,4]]},"917":{"position":[[53,5]]},"919":{"position":[[193,4]]}}}],["vae",{"_index":2181,"t":{"1431":{"position":[[484,9]]},"1464":{"position":[[965,3]]},"1489":{"position":[[1388,3],[1686,4],[1721,3]]},"1500":{"position":[[117,4]]},"1502":{"position":[[163,3]]},"1504":{"position":[[191,3]]},"1506":{"position":[[22,3],[193,8],[278,3],[1548,3],[1755,3]]},"1508":{"position":[[2,3],[15,25]]},"1512":{"position":[[1089,3],[1410,3]]},"1568":{"position":[[87,3],[105,3],[249,3],[506,3]]},"1570":{"position":[[13,3],[87,3],[247,3]]},"1572":{"position":[[13,3],[168,3],[270,3],[312,3]]},"1574":{"position":[[291,3]]},"1583":{"position":[[263,3],[310,3],[322,3],[331,3],[335,25],[380,3],[401,8],[410,64],[510,3],[521,3],[549,3],[610,3],[727,3],[887,3],[2094,15]]},"1617":{"position":[[1388,3],[1686,4],[1721,3]]}}}],["vaes（vari",{"_index":2700,"t":{"1568":{"position":[[512,16]]}}}],["vae、gan以及diffus",{"_index":684,"t":{"1110":{"position":[[0,18]]}}}],["vae、vqvae（2017",{"_index":2715,"t":{"1583":{"position":[[233,21]]}}}],["vae在训练过程中，期待ecoder输入多张图片后，输出的向量在一起符合某个随机分布（e.g",{"_index":771,"t":{"1122":{"position":[[130,47]]}}}],["vae的数学原理，从vae到diffus",{"_index":310,"t":{"986":{"position":[[735,38]]}}}],["vae（vector",{"_index":2698,"t":{"1568":{"position":[[177,10],[318,10]]}}}],["vae）与diffus",{"_index":306,"t":{"986":{"position":[[591,14]]}}}],["vae）的训练策略是使用encoder将输入图像对应（嵌入）到一个符合某随机分布的向量，再将该向量作为decoder的输入，加上文字prompt",{"_index":770,"t":{"1122":{"position":[[39,86]]}}}],["vae，vq",{"_index":2701,"t":{"1570":{"position":[[240,6]]}}}],["valid",{"_index":1183,"t":{"1185":{"position":[[474,5]]},"1305":{"position":[[13,10],[139,10]]},"1307":{"position":[[34,11]]},"1309":{"position":[[54,10]]}}}],["valu",{"_index":1274,"t":{"1217":{"position":[[947,6],[1270,6],[1326,6],[1441,7],[1993,18],[2153,6],[2189,6],[2255,9],[3531,6],[3834,6],[3890,6],[4005,7],[4312,6],[4348,6],[4414,9]]},"1381":{"position":[[161,6],[446,6],[629,6],[1026,6]]},"1539":{"position":[[161,6],[446,6],[629,6],[1026,6]]}}}],["value^{n",{"_index":1343,"t":{"1219":{"position":[[262,8]]}}}],["vanilla",{"_index":1928,"t":{"1403":{"position":[[209,7]]},"1528":{"position":[[209,7]]}}}],["var",{"_index":1984,"t":{"1405":{"position":[[192,3]]},"1485":{"position":[[42,6],[403,4],[537,3],[752,3],[910,3],[1062,3],[1215,3]]},"1489":{"position":[[851,3],[864,3],[1018,3],[1787,3]]},"1492":{"position":[[1092,3]]},"1494":{"position":[[266,3],[292,3],[316,3]]},"1496":{"position":[[413,3],[506,3]]},"1530":{"position":[[192,3]]},"1583":{"position":[[987,9],[997,21]]},"1613":{"position":[[42,6],[403,4],[537,3],[752,3],[910,3],[1062,3],[1215,3]]},"1617":{"position":[[851,3],[864,3],[1018,3],[1787,3]]},"1620":{"position":[[1092,3]]},"1622":{"position":[[266,3],[292,3],[316,3]]},"1624":{"position":[[27,3],[252,3]]},"1626":{"position":[[413,3],[506,3]]},"1644":{"position":[[260,4],[294,4],[333,4],[373,4]]}}}],["varepsilon",{"_index":2898,"t":{"1633":{"position":[[4832,11],[4868,11]]}}}],["varepsilon_\\theta",{"_index":1891,"t":{"1387":{"position":[[627,23]]},"1545":{"position":[[627,23]]}}}],["varepsilon_\\theta\\left(x_t",{"_index":1878,"t":{"1387":{"position":[[267,27]]},"1545":{"position":[[267,27]]}}}],["varepsilonxt​=αˉt​x​+1−αˉt",{"_index":1888,"t":{"1387":{"position":[[517,33]]},"1545":{"position":[[517,33]]}}}],["vari",{"_index":2944,"t":{"1633":{"position":[[6868,6]]}}}],["variant",{"_index":1855,"t":{"1381":{"position":[[793,9]]},"1539":{"position":[[793,9]]},"1568":{"position":[[5,7]]},"1583":{"position":[[281,7]]}}}],["variat",{"_index":302,"t":{"986":{"position":[[545,25]]},"1122":{"position":[[0,18]]},"1504":{"position":[[134,17]]},"1568":{"position":[[198,11],[339,11]]}}}],["varieti",{"_index":2118,"t":{"1414":{"position":[[1380,7]]}}}],["variou",{"_index":2122,"t":{"1414":{"position":[[1482,7]]},"1423":{"position":[[1344,7]]}}}],["varphi_i\\left(z_t\\right",{"_index":2228,"t":{"1435":{"position":[[709,26]]}}}],["vattention(q,k,v)=softmax(d​qkt​)⋅v",{"_index":2226,"t":{"1435":{"position":[[609,35]]}}}],["vdm",{"_index":2583,"t":{"1510":{"position":[[5,3],[20,3]]},"1512":{"position":[[1214,3]]},"1520":{"position":[[341,3],[345,17]]},"1522":{"position":[[460,3]]}}}],["vec",{"_index":3088,"t":{"1689":{"position":[[820,4]]}}}],["vec.empti",{"_index":3093,"t":{"1689":{"position":[[971,13]]}}}],["vec.push_back(remaind",{"_index":3091,"t":{"1689":{"position":[[904,25]]}}}],["vec.rbegin",{"_index":3094,"t":{"1689":{"position":[[1024,13]]}}}],["vec.rend",{"_index":3095,"t":{"1689":{"position":[[1044,11]]}}}],["vector",{"_index":900,"t":{"1149":{"position":[[845,10]]},"1254":{"position":[[845,10]]},"1379":{"position":[[87,6]]},"1381":{"position":[[103,6],[815,6]]},"1537":{"position":[[87,6]]},"1539":{"position":[[103,6],[815,6]]},"1583":{"position":[[693,7]]}}}],["vector<int",{"_index":116,"t":{"966":{"position":[[59,11]]},"1689":{"position":[[808,11]]}}}],["vector）zzz",{"_index":1867,"t":{"1385":{"position":[[92,10]]},"1543":{"position":[[92,10]]}}}],["veri",{"_index":284,"t":{"974":{"position":[[962,4]]},"1217":{"position":[[2937,4]]},"1774":{"position":[[2018,4]]}}}],["verifi",{"_index":1969,"t":{"1403":{"position":[[1122,6]]},"1485":{"position":[[738,8]]},"1528":{"position":[[1122,6]]},"1613":{"position":[[738,8]]}}}],["version",{"_index":3013,"t":{"1650":{"position":[[193,8]]}}}],["version/src/project0/build目录下执行mak",{"_index":3225,"t":{"1774":{"position":[[43,35]]}}}],["version/src/projecti/build",{"_index":3214,"t":{"1764":{"position":[[287,33]]},"1768":{"position":[[114,29]]}}}],["version/src/projecti/build文件夹下进行，即要在终端中通过cd",{"_index":241,"t":{"974":{"position":[[17,49]]}}}],["version/src/projecti/build目录下创建.bochsrc",{"_index":3270,"t":{"1774":{"position":[[1379,41]]}}}],["version/src/projecti/build目录下的makefi",{"_index":3238,"t":{"1774":{"position":[[593,39],[1158,39]]}}}],["version/src/projecti/build目录下的makefie文件(由于每个project下都存在一个对应的makefil",{"_index":3232,"t":{"1774":{"position":[[369,71]]}}}],["version/src/projecti/src/geeko",{"_index":3213,"t":{"1764":{"position":[[232,37]]}}}],["version/src/projecti/src/geekos/main.c",{"_index":139,"t":{"972":{"position":[[9,40]]}}}],["version/src/目录下会存在project0",{"_index":3210,"t":{"1764":{"position":[[131,26]]}}}],["vert",{"_index":1515,"t":{"1300":{"position":[[83,5]]},"1302":{"position":[[92,5],[273,5]]}}}],["vert^2_1",{"_index":1516,"t":{"1300":{"position":[[91,9]]},"1302":{"position":[[100,9],[281,9]]}}}],["vert_2",{"_index":1424,"t":{"1285":{"position":[[181,7]]}}}],["vertic",{"_index":3034,"t":{"1663":{"position":[[124,11]]}}}],["vga_update_interv",{"_index":271,"t":{"974":{"position":[[749,20]]},"1774":{"position":[[1805,20]]}}}],["vgaromimag",{"_index":253,"t":{"974":{"position":[[453,12]]},"1774":{"position":[[1509,12]]}}}],["vi",{"_index":1205,"t":{"1201":{"position":[[26,3]]},"1203":{"position":[[26,3]]}}}],["via",{"_index":2342,"t":{"1471":{"position":[[110,3]]},"1476":{"position":[[627,3]]}}}],["video",{"_index":2307,"t":{"1451":{"position":[[88,6]]},"1453":{"position":[[107,5]]},"1460":{"position":[[19,5],[104,5]]},"1489":{"position":[[1680,5]]},"1617":{"position":[[1680,5]]},"1628":{"position":[[121,5]]},"1636":{"position":[[14,5],[51,6],[74,5],[132,6],[147,5],[177,5],[235,5],[280,6]]},"1638":{"position":[[41,5],[111,5]]}}}],["video：30b",{"_index":2311,"t":{"1453":{"position":[[143,9]]}}}],["viet",{"_index":2391,"t":{"1476":{"position":[[697,4]]}}}],["vis.line([0",{"_index":1207,"t":{"1201":{"position":[[116,14]]}}}],["vis.line([[0",{"_index":1216,"t":{"1203":{"position":[[41,14]]}}}],["vis.line([loss.item",{"_index":1213,"t":{"1201":{"position":[[289,23]]}}}],["visdom",{"_index":1202,"t":{"1196":{"position":[[12,6]]},"1199":{"position":[[0,28],[37,6]]},"1201":{"position":[[5,6],[19,6],[32,8]]},"1203":{"position":[[5,6],[19,6],[32,8]]}}}],["visdom.serv",{"_index":1204,"t":{"1199":{"position":[[54,13]]}}}],["vision",{"_index":2066,"t":{"1414":{"position":[[291,6],[1667,6]]}}}],["visual",{"_index":1925,"t":{"1403":{"position":[[144,6],[281,6],[1080,6],[1338,6]]},"1414":{"position":[[433,6],[505,6],[615,6]]},"1423":{"position":[[892,6]]},"1485":{"position":[[11,6],[352,6],[1409,6]]},"1487":{"position":[[168,6]]},"1528":{"position":[[144,6],[281,6],[1080,6],[1338,6]]},"1583":{"position":[[1262,6],[1632,6],[1668,6],[1713,6]]},"1613":{"position":[[11,6],[352,6],[1409,6]]},"1615":{"position":[[168,6]]}}}],["vit",{"_index":2718,"t":{"1583":{"position":[[668,8],[934,16]]}}}],["viz.line([[y1",{"_index":1220,"t":{"1203":{"position":[[177,14]]}}}],["viz.line([real_y_data",{"_index":1210,"t":{"1201":{"position":[[208,23]]}}}],["vllm",{"_index":1991,"t":{"1405":{"position":[[761,4]]},"1530":{"position":[[760,4]]}}}],["vnv_nvn",{"_index":94,"t":{"951":{"position":[[68,21]]}}}],["voc1voc_1voc1​词汇向量输入时，在decoder中，voc1voc_1voc1",{"_index":459,"t":{"1030":{"position":[[177,87]]},"1370":{"position":[[177,87]]}}}],["vocabulari",{"_index":415,"t":{"1022":{"position":[[6,16]]},"1362":{"position":[[6,16]]},"1633":{"position":[[7248,10]]}}}],["vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（nlp",{"_index":416,"t":{"1022":{"position":[[23,95]]},"1362":{"position":[[23,95]]}}}],["voc中，类别种类为20类，因此在预测阶段输出的[7",{"_index":3162,"t":{"1733":{"position":[[423,27]]}}}],["void",{"_index":141,"t":{"972":{"position":[[82,4],[1294,4],[1833,4]]}}}],["voxceleb1",{"_index":1155,"t":{"1185":{"position":[[24,10],[72,10]]}}}],["vq",{"_index":2128,"t":{"1419":{"position":[[92,2],[153,2],[435,2]]},"1431":{"position":[[494,2],[537,2]]},"1492":{"position":[[1241,2],[1261,2]]},"1494":{"position":[[12,2],[44,2],[220,9],[407,2],[665,2]]},"1568":{"position":[[78,8],[102,2],[161,15],[310,7],[503,2]]},"1570":{"position":[[10,2],[79,7],[237,2]]},"1572":{"position":[[10,2],[165,2],[267,2],[309,2]]},"1574":{"position":[[288,2]]},"1583":{"position":[[260,2],[307,2],[328,2],[377,2],[507,2],[525,23],[553,56],[690,2],[724,2],[821,2],[884,2]]},"1620":{"position":[[1241,2],[1261,2]]},"1622":{"position":[[12,2],[44,2],[220,9],[407,2],[665,2]]}}}],["vqgan",{"_index":1992,"t":{"1408":{"position":[[5,5]]},"1431":{"position":[[505,26]]},"1489":{"position":[[1033,5],[1212,5],[1331,5]]},"1494":{"position":[[346,5]]},"1533":{"position":[[5,5]]},"1572":{"position":[[0,5],[63,15]]},"1583":{"position":[[893,5],[1234,10]]},"1617":{"position":[[1033,5],[1212,5],[1331,5]]},"1622":{"position":[[346,5]]}}}],["vqgan、vqvae、var、maskgit",{"_index":1865,"t":{"1383":{"position":[[108,23]]},"1541":{"position":[[108,23]]}}}],["vqgan（2021",{"_index":2717,"t":{"1583":{"position":[[650,17]]}}}],["vqgan（2022",{"_index":2719,"t":{"1583":{"position":[[677,12]]}}}],["vqgan（vector",{"_index":2702,"t":{"1572":{"position":[[101,17]]}}}],["vqgan，rq",{"_index":2707,"t":{"1574":{"position":[[297,8]]}}}],["vqvae",{"_index":2477,"t":{"1489":{"position":[[1505,5]]},"1494":{"position":[[64,5]]},"1568":{"position":[[31,5]]},"1570":{"position":[[0,5]]},"1617":{"position":[[1505,5]]},"1622":{"position":[[64,5]]},"1624":{"position":[[6,5]]}}}],["vqvae、vqgan",{"_index":2176,"t":{"1426":{"position":[[73,11]]},"1561":{"position":[[517,47]]}}}],["vqvae、vqga、dal",{"_index":1982,"t":{"1405":{"position":[[64,21]]},"1530":{"position":[[64,21]]}}}],["vtv_tvt",{"_index":93,"t":{"951":{"position":[[47,20]]}}}],["vt​∪vn​)∗(1",{"_index":58,"t":{"915":{"position":[[158,15]]}}}],["vt​∪vn​)∗(3",{"_index":71,"t":{"919":{"position":[[229,15]]}}}],["vt∗(2)",{"_index":59,"t":{"917":{"position":[[6,9]]}}}],["vt∗​(2",{"_index":63,"t":{"917":{"position":[[72,9]]}}}],["vt∪vn)∗(1",{"_index":51,"t":{"915":{"position":[[73,13]]}}}],["vt∪vn)∗(3)\\alpha",{"_index":68,"t":{"919":{"position":[[115,19]]}}}],["vvv",{"_index":642,"t":{"1097":{"position":[[216,3]]},"1099":{"position":[[166,3]]}}}],["w",{"_index":864,"t":{"1147":{"position":[[185,1],[200,36],[390,1],[407,3],[411,1],[452,3],[770,1],[808,1],[818,1],[853,1],[887,1],[897,1]]},"1149":{"position":[[533,1],[585,1],[664,1],[737,6],[896,15],[951,1]]},"1154":{"position":[[72,1],[346,1],[618,1]]},"1159":{"position":[[13,1]]},"1252":{"position":[[185,1],[200,36],[390,1],[407,3],[411,1],[452,3],[770,1],[808,1],[818,1],[853,1],[887,1],[897,1]]},"1254":{"position":[[533,1],[585,1],[664,1],[737,6],[896,15],[951,1]]},"1259":{"position":[[72,1],[346,1],[618,1]]},"1264":{"position":[[13,1]]},"1300":{"position":[[89,1]]},"1302":{"position":[[98,1],[237,2],[279,1],[332,2],[345,1]]},"1314":{"position":[[451,1]]},"1335":{"position":[[564,1],[608,1],[612,1]]},"1431":{"position":[[641,1],[768,1]]},"1492":{"position":[[448,1]]},"1609":{"position":[[170,3]]},"1620":{"position":[[448,1]]},"1733":{"position":[[308,2]]}}}],["w')o(co​×ci​×h×w×h′×w",{"_index":1591,"t":{"1314":{"position":[[470,23]]}}}],["w'co​×h′×w",{"_index":1584,"t":{"1314":{"position":[[165,11]]}}}],["w(l(w,b)+λ2∥w∥12)=∂l(w,b)∂w+λw(3)\\frac{\\partial}{\\parti",{"_index":1528,"t":{"1302":{"position":[[177,59]]}}}],["w1,p1),(w2,p2),…,(wv,pv)}\\left\\{\\left(w_1",{"_index":660,"t":{"1099":{"position":[[207,44]]}}}],["w1,w2w_{1",{"_index":2009,"t":{"1410":{"position":[[789,17]]},"1535":{"position":[[789,17]]}}}],["w][b,1,h,w]的tensor",{"_index":3187,"t":{"1741":{"position":[[196,46]]}}}],["w][b,1,h,w]的tensor，再将二者concat后通过7×77",{"_index":3191,"t":{"1745":{"position":[[97,36]]}}}],["w][b,c,h,w]分别经过最大池化和平均池化来压缩空间维度、学习通道之间的特征，得到[b,c,1,1][b",{"_index":3188,"t":{"1743":{"position":[[24,56]]}}}],["w][b,c,h,w]分别经过最大池化和平均池化（通过torch.max和torch.mean函数实现）得到[b,1,h,w][b",{"_index":3190,"t":{"1745":{"position":[[24,66]]}}}],["w][b,c,h,w]的特征图通过池化挤压宽高维度，得到[b,c,1,1][b",{"_index":3202,"t":{"1751":{"position":[[56,40]]}}}],["w][b,c,h,w]经过空间注意力机制算法得到[b,1,h,w][b",{"_index":3186,"t":{"1741":{"position":[[153,36]]}}}],["w][b,c,h,w]经过通道注意力机制算法得到[b,c,1,1][b",{"_index":3184,"t":{"1741":{"position":[[30,36]]}}}],["w_2\\\\1&d(u,v",{"_index":611,"t":{"1065":{"position":[[525,14]]}}}],["w_2\\end{cases}\\tag{24}h(u,v)=⎩⎨⎧​101​d(u,v)<w1​w1​⩽d(u,v)≤w2​d(u,v)>w2​​(24",{"_index":612,"t":{"1065":{"position":[[540,76]]}}}],["w_code",{"_index":990,"t":{"1154":{"position":[[143,20]]},"1259":{"position":[[143,20]]}}}],["w_encod",{"_index":993,"t":{"1154":{"position":[[292,9]]},"1259":{"position":[[292,9]]}}}],["w_i",{"_index":654,"t":{"1097":{"position":[[603,3]]},"1099":{"position":[[712,3]]}}}],["w_k",{"_index":2508,"t":{"1492":{"position":[[1029,3]]},"1620":{"position":[[1029,3]]}}}],["w_key",{"_index":1275,"t":{"1217":{"position":[[954,5],[1293,5],[3538,5],[3857,5]]}}}],["w_khk​×wk",{"_index":2492,"t":{"1492":{"position":[[559,10],[878,10]]},"1620":{"position":[[559,10],[878,10]]}}}],["w_k}rk​∈[v]hk​×wk",{"_index":2504,"t":{"1492":{"position":[[839,18]]},"1620":{"position":[[839,18]]}}}],["w_queri",{"_index":1277,"t":{"1217":{"position":[[1042,7],[1318,7],[3626,7],[3882,7]]}}}],["w_t",{"_index":1538,"t":{"1302":{"position":[[495,4]]},"1633":{"position":[[6496,3],[8273,3]]}}}],["w_valu",{"_index":1279,"t":{"1217":{"position":[[1132,7],[1344,7],[3716,7],[3908,7]]}}}],["w_{2}w1​,w2",{"_index":2010,"t":{"1410":{"position":[[807,12]]},"1535":{"position":[[807,12]]}}}],["w_{t",{"_index":2961,"t":{"1633":{"position":[[8379,6]]}}}],["wall",{"_index":3266,"t":{"1774":{"position":[[1266,4],[1315,4]]}}}],["warn",{"_index":3229,"t":{"1774":{"position":[[321,8]]}}}],["waveform",{"_index":1160,"t":{"1185":{"position":[[107,9]]}}}],["wci​×h×w",{"_index":1577,"t":{"1314":{"position":[[29,8]]}}}],["web",{"_index":1005,"t":{"1156":{"position":[[39,3]]},"1261":{"position":[[39,3]]}}}],["web_ui",{"_index":1009,"t":{"1156":{"position":[[298,8]]},"1261":{"position":[[298,8]]}}}],["weight",{"_index":1261,"t":{"1217":{"position":[[649,7],[917,7],[2144,8],[3501,7],[4303,8]]},"1330":{"position":[[336,7]]},"1433":{"position":[[49,8]]},"1644":{"position":[[420,7]]}}}],["weighted_valu",{"_index":1304,"t":{"1217":{"position":[[2237,15],[2330,16],[4396,15],[4489,16]]}}}],["weighted_values.sum(dim=0",{"_index":1309,"t":{"1217":{"position":[[2576,26],[4534,26]]}}}],["welcom",{"_index":2979,"t":{"1644":{"position":[[101,8]]}}}],["well",{"_index":1315,"t":{"1217":{"position":[[2712,4]]},"1485":{"position":[[397,5]]},"1613":{"position":[[397,5]]},"1633":{"position":[[7513,5]]}}}],["werror",{"_index":3236,"t":{"1774":{"position":[[507,6]]}}}],["wf=h/h=w/w",{"_index":2194,"t":{"1431":{"position":[[934,13]]},"1438":{"position":[[35,13]]}}}],["whether",{"_index":1927,"t":{"1403":{"position":[[201,7]]},"1528":{"position":[[201,7]]}}}],["while(1",{"_index":149,"t":{"972":{"position":[[150,8],[1362,8]]}}}],["wh×w",{"_index":2494,"t":{"1492":{"position":[[612,4]]},"1620":{"position":[[612,4]]}}}],["wide",{"_index":1850,"t":{"1381":{"position":[[687,4]]},"1539":{"position":[[687,4]]}}}],["win='win_id",{"_index":1208,"t":{"1201":{"position":[[137,13],[247,13],[322,13]]},"1203":{"position":[[68,13],[213,13]]}}}],["window",{"_index":3049,"t":{"1666":{"position":[[0,20]]}}}],["winograd",{"_index":1126,"t":{"1175":{"position":[[812,8]]}}}],["wisdom",{"_index":1833,"t":{"1381":{"position":[[13,6]]},"1539":{"position":[[13,6]]}}}],["wise",{"_index":395,"t":{"1016":{"position":[[1086,10]]},"1147":{"position":[[1076,4]]},"1149":{"position":[[1129,4],[1253,15]]},"1161":{"position":[[441,4],[599,4]]},"1252":{"position":[[1076,4]]},"1254":{"position":[[1129,4],[1253,15]]},"1266":{"position":[[441,4],[599,4]]},"1356":{"position":[[1086,10]]},"1506":{"position":[[1745,4]]},"1728":{"position":[[73,7]]}}}],["wise）以及逐点（point",{"_index":3142,"t":{"1728":{"position":[[57,15]]}}}],["without",{"_index":1830,"t":{"1379":{"position":[[79,7]]},"1403":{"position":[[253,7]]},"1423":{"position":[[295,7]]},"1489":{"position":[[1581,7]]},"1528":{"position":[[253,7]]},"1537":{"position":[[79,7]]},"1617":{"position":[[1581,7]]},"1633":{"position":[[7421,8]]},"1636":{"position":[[164,7]]}}}],["wi​∈ck",{"_index":656,"t":{"1097":{"position":[[640,7]]}}}],["wi​∈cp",{"_index":676,"t":{"1099":{"position":[[749,7]]}}}],["wi∈ckp_i^{\\prime}=\\frac{p_i}{\\sum_{w_j",{"_index":651,"t":{"1097":{"position":[[536,38]]}}}],["wi∈cpp_i^{\\prime}=\\frac{p_i}{\\sum_{w_j",{"_index":673,"t":{"1099":{"position":[[645,38]]}}}],["wl",{"_index":3114,"t":{"1712":{"position":[[321,65]]}}}],["wl/wait",{"_index":3113,"t":{"1712":{"position":[[305,10]]}}}],["wnli（winograd",{"_index":1124,"t":{"1175":{"position":[[781,13]]}}}],["word",{"_index":398,"t":{"1018":{"position":[[0,9]]},"1177":{"position":[[186,4]]},"1358":{"position":[[0,9]]}}}],["word）或短语（phrase）与上下文的相关性（relevance）调整其重要性（import",{"_index":2731,"t":{"1595":{"position":[[15,62]]}}}],["work",{"_index":1842,"t":{"1381":{"position":[[289,5],[950,4]]},"1414":{"position":[[181,5]]},"1423":{"position":[[708,5]]},"1489":{"position":[[1614,4],[1725,4]]},"1539":{"position":[[289,5],[950,4]]},"1617":{"position":[[1614,4],[1725,4]]},"1633":{"position":[[7507,5]]},"1640":{"position":[[106,4]]},"1650":{"position":[[207,5]]},"1774":{"position":[[681,5]]}}}],["work.109",{"_index":3258,"t":{"1774":{"position":[[1040,9]]}}}],["workshop",{"_index":2372,"t":{"1476":{"position":[[480,10]]}}}],["worship",{"_index":479,"t":{"1032":{"position":[[78,7]]}}}],["write",{"_index":278,"t":{"974":{"position":[[869,5]]},"1774":{"position":[[1925,5]]}}}],["written",{"_index":2888,"t":{"1633":{"position":[[3928,7]]}}}],["www和偏置项bbb",{"_index":1656,"t":{"1335":{"position":[[458,39]]}}}],["w∥12​≤θ(1",{"_index":1520,"t":{"1300":{"position":[[142,11]]}}}],["w∥12≤θ(1)min",{"_index":1512,"t":{"1300":{"position":[[22,13]]}}}],["w为bbox的宽高，c为该bbox是否存在object",{"_index":3160,"t":{"1733":{"position":[[338,30]]}}}],["w归约为文法开始符号",{"_index":107,"t":{"956":{"position":[[103,31]]}}}],["x",{"_index":14,"t":{"896":{"position":[[100,1],[124,2],[147,1],[155,1]]},"898":{"position":[[91,2],[114,1],[131,1]]},"1037":{"position":[[308,1],[414,1]]},"1280":{"position":[[43,3],[304,1]]},"1282":{"position":[[43,1],[51,1],[55,1],[179,1],[191,1],[295,1]]},"1375":{"position":[[382,3],[873,3],[1092,2],[1135,1],[1157,1],[1162,2],[1171,1],[1917,3],[1986,2]]},"1506":{"position":[[937,2],[1060,2]]},"1603":{"position":[[291,1],[343,1],[386,4],[504,4]]},"1607":{"position":[[142,5],[278,4],[506,5]]}}}],["x)=11+e−x(1)\\sigma(x",{"_index":1393,"t":{"1280":{"position":[[0,23]]}}}],["x)=\\mathbb{e}_{\\varepsilon",{"_index":1876,"t":{"1387":{"position":[[212,27]]},"1545":{"position":[[212,27]]}}}],["x)=n\\left(z",{"_index":2538,"t":{"1506":{"position":[[364,11]]}}}],["x)\\mu(x)μ(x",{"_index":2032,"t":{"1410":{"position":[[1716,14],[1816,14]]},"1535":{"position":[[1717,14],[1817,14]]}}}],["x)\\sigma(x)σ(x",{"_index":2033,"t":{"1410":{"position":[[1733,17],[1836,18]]},"1535":{"position":[[1734,17],[1837,18]]}}}],["x)qϕ​(z∣x",{"_index":2564,"t":{"1506":{"position":[[1259,10]]}}}],["x)}\\left[\\log",{"_index":2551,"t":{"1506":{"position":[[876,13]]}}}],["x,y)(x",{"_index":494,"t":{"1035":{"position":[[0,41],[90,15]]}}}],["x.reshap",{"_index":1729,"t":{"1375":{"position":[[393,10]]}}}],["x.shape[0",{"_index":1806,"t":{"1375":{"position":[[2099,11]]}}}],["x.to(devic",{"_index":1761,"t":{"1375":{"position":[[1139,13],[1175,12],[1993,13]]}}}],["x0\\mathbf{x}_0x0​和ϵ\\epsilonϵ根据权重αˉ1,αˉ2,...αˉt\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_tαˉ1​,αˉ2​,...αˉt​做weight",{"_index":323,"t":{"988":{"position":[[441,122]]}}}],["x0x_0x0",{"_index":1911,"t":{"1389":{"position":[[436,8]]},"1512":{"position":[[76,10]]},"1514":{"position":[[37,8]]},"1516":{"position":[[83,9]]},"1547":{"position":[[436,8]]}}}],["x0∼p(x∣z)x_0",{"_index":1912,"t":{"1389":{"position":[[448,12]]},"1547":{"position":[[448,12]]}}}],["x1",{"_index":2760,"t":{"1603":{"position":[[381,2],[611,2]]}}}],["x1,...,xt−1][x_1,...,x_{t",{"_index":2713,"t":{"1583":{"position":[[85,26]]}}}],["x1,x2,...,xt−1)(x_1",{"_index":2473,"t":{"1489":{"position":[[1126,21]]},"1617":{"position":[[1126,21]]}}}],["x1[0",{"_index":2786,"t":{"1603":{"position":[[1195,21],[1232,20]]}}}],["x1[0,:,:]+x2[0,:,:](1)x1[0",{"_index":2771,"t":{"1603":{"position":[[846,27]]}}}],["x1[1,:,:]+x2[1,:,:](2)x1[1",{"_index":2774,"t":{"1603":{"position":[[924,27]]}}}],["x1[2,:,:]+x2[2,:,:](3)x1[2",{"_index":2777,"t":{"1603":{"position":[[1002,27]]}}}],["x1与x2在第0维度上维度相同，所以python",{"_index":2770,"t":{"1603":{"position":[[798,47]]}}}],["x2",{"_index":2763,"t":{"1603":{"position":[[499,2],[616,2]]}}}],["x2[0",{"_index":2772,"t":{"1603":{"position":[[882,5],[1220,8]]}}}],["x2[0,0",{"_index":2787,"t":{"1603":{"position":[[1256,15]]}}}],["x2[1",{"_index":2775,"t":{"1603":{"position":[[960,5]]}}}],["x2[2",{"_index":2778,"t":{"1603":{"position":[[1038,5]]}}}],["x86",{"_index":3208,"t":{"1764":{"position":[[89,12]]},"1774":{"position":[[835,5]]}}}],["x86/elf",{"_index":3250,"t":{"1774":{"position":[[854,7]]}}}],["x86_64与i386",{"_index":3237,"t":{"1774":{"position":[[561,16]]}}}],["x<t=(x1,x2,…,xt−1)x_{<t}=\\left(x_1",{"_index":2683,"t":{"1561":{"position":[[281,35]]}}}],["x=(x1,x2,…,xn×n)x=(x_1,x_2,\\ldots,x_{n\\tim",{"_index":2480,"t":{"1489":{"position":[[1925,44]]},"1617":{"position":[[1925,44]]}}}],["x=(x1,x2,…,xt)x=\\left(x_1",{"_index":2679,"t":{"1561":{"position":[[131,26]]}}}],["x=μ+σϵ,ϵ∼n(0,i)x=\\mu+\\sigma",{"_index":2568,"t":{"1506":{"position":[[1471,27]]}}}],["x=σ∗z+μx=\\sigma",{"_index":2301,"t":{"1449":{"position":[[106,15]]}}}],["x\\mathbf{x}x",{"_index":2866,"t":{"1633":{"position":[[2158,12],[6649,12]]}}}],["x^θ(xt,t,y)≈x0\\hat{x}_\\theta\\left(x_t",{"_index":2638,"t":{"1520":{"position":[[363,38]]}}}],["x^θ\\hat{x}_\\thetax",{"_index":2919,"t":{"1633":{"position":[[6053,33]]}}}],["x_0\\right)=\\prod_{t=1}^t",{"_index":2589,"t":{"1512":{"position":[[190,24]]}}}],["x_0x^θ​(xt​,t,y)≈x0",{"_index":2641,"t":{"1520":{"position":[[422,20]]}}}],["x_2",{"_index":2474,"t":{"1489":{"position":[[1148,4]]},"1561":{"position":[[158,4],[317,4]]},"1617":{"position":[[1148,4]]}}}],["x_t",{"_index":2636,"t":{"1520":{"position":[[252,4]]}}}],["x_t\\right)=\\nabla",{"_index":2656,"t":{"1524":{"position":[[131,17]]}}}],["x_t\\right)p(x0:t​)=p(xt​)t=1∏t​pθ​(xt−1​∣xt",{"_index":2607,"t":{"1512":{"position":[[902,45]]}}}],["x_t\\right)x=(x1​,x2​,…,xt",{"_index":2680,"t":{"1561":{"position":[[171,27]]}}}],["x_t\\right)∇logp(xt​∣y)=∇logp(xt​)+γ∇logp(y∣xt",{"_index":2653,"t":{"1522":{"position":[[269,47]]}}}],["x_{<i",{"_index":2689,"t":{"1561":{"position":[[625,6]]}}}],["x_{<t}\\right)p(x)=t=1∏t​p(xt​∣x<t",{"_index":2686,"t":{"1561":{"position":[[481,35]]}}}],["x_{<t}\\right)p(xt​∣x<t",{"_index":2682,"t":{"1561":{"position":[[243,24]]}}}],["x_{pr",{"_index":2963,"t":{"1633":{"position":[[8417,6],[8459,6]]}}}],["x_{t",{"_index":2475,"t":{"1489":{"position":[[1158,4]]},"1512":{"position":[[236,4],[374,4],[591,4],[635,4]]},"1561":{"position":[[330,4]]},"1617":{"position":[[1158,4]]}}}],["xavier",{"_index":1268,"t":{"1217":{"position":[[761,6]]}}}],["xavier和kaim",{"_index":1272,"t":{"1217":{"position":[[845,58]]}}}],["xgen=x^θ(ϵ,c)x_{gen",{"_index":2924,"t":{"1633":{"position":[[6224,20]]}}}],["xi",{"_index":1659,"t":{"1335":{"position":[[621,2]]}}}],["xi,jx_{i",{"_index":2691,"t":{"1561":{"position":[[666,9]]}}}],["xix_ixi",{"_index":2024,"t":{"1410":{"position":[[1321,8]]},"1535":{"position":[[1322,8]]}}}],["xl",{"_index":2054,"t":{"1412":{"position":[[80,13]]}}}],["xlim=[1",{"_index":1787,"t":{"1375":{"position":[[1714,8]]}}}],["xlog",{"_index":2628,"t":{"1518":{"position":[[358,5]]}}}],["xor异或等非线性问题，导致第一次ai",{"_index":1663,"t":{"1337":{"position":[[43,35]]}}}],["xpr=x^θ(zt1,cpr)x_{pr",{"_index":2953,"t":{"1633":{"position":[[7898,22]]}}}],["xt,t,y)≈ϵ\\hat{\\epsilon}_\\theta\\left(x_t",{"_index":2642,"t":{"1520":{"position":[[443,44]]}}}],["xt=αˉtx+1−αˉtεx_t=\\sqrt{\\bar{\\alpha}_t",{"_index":1885,"t":{"1387":{"position":[[451,38]]},"1545":{"position":[[451,38]]}}}],["xt\\mathbf{x}_txt​代表上一步骤中输出的降噪后的图像，xt−1\\mathbf{x}_{t",{"_index":339,"t":{"990":{"position":[[484,54]]}}}],["xtlog",{"_index":2617,"t":{"1516":{"position":[[182,6]]}}}],["xtx_txt",{"_index":1895,"t":{"1387":{"position":[[754,8]]},"1433":{"position":[[184,8],[216,8]]},"1489":{"position":[[1096,8]]},"1512":{"position":[[42,8]]},"1545":{"position":[[754,8]]},"1561":{"position":[[378,8]]},"1583":{"position":[[137,10]]},"1617":{"position":[[1096,8]]}}}],["xt−1=1αt(xt−1−αt1−αˉtϵθ(xt,t))+σtz(2)\\mathbf{x}_{t",{"_index":334,"t":{"990":{"position":[[203,50]]}}}],["xt−1=1αt(xt−1−αt1−αˉtϵθ(xt∣t,z))+σtδx_{t",{"_index":1898,"t":{"1389":{"position":[[56,40]]},"1547":{"position":[[56,40]]}}}],["xt∣t,z)\\varepsilon_\\theta\\left(x_t",{"_index":1893,"t":{"1387":{"position":[[677,40]]},"1545":{"position":[[677,40]]}}}],["xt∼n(0,i)x_t",{"_index":1907,"t":{"1389":{"position":[[377,12]]},"1547":{"position":[[377,12]]}}}],["xxl",{"_index":2952,"t":{"1633":{"position":[[7465,3],[7587,3],[8822,4]]}}}],["xxx",{"_index":915,"t":{"1151":{"position":[[109,3]]},"1256":{"position":[[109,3]]},"1387":{"position":[[141,3]]},"1410":{"position":[[420,6],[782,6],[1705,3],[1757,3]]},"1433":{"position":[[229,3]]},"1502":{"position":[[186,3]]},"1506":{"position":[[1914,23]]},"1512":{"position":[[31,3]]},"1535":{"position":[[420,6],[782,6],[1706,3],[1758,3]]},"1545":{"position":[[141,3]]},"1561":{"position":[[399,3]]},"1633":{"position":[[4381,13]]}}}],["xxx.plasmoid",{"_index":3048,"t":{"1663":{"position":[[349,12]]}}}],["xxxxxxxxxx19",{"_index":1622,"t":{"1330":{"position":[[353,12]]}}}],["xxx的可能取值为x=x1,x2,...,xnx=x_1,x_2,...,x_nx=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率为pip_ipi",{"_index":1436,"t":{"1287":{"position":[[152,106]]}}}],["x{\\sqrt{\\frac1n\\sum_{i=1}^nx_i^2}}*grmsnorm(x)=n1​∑i=1n​xi2​​x​∗g",{"_index":2000,"t":{"1410":{"position":[[354,65]]},"1535":{"position":[[354,65]]}}}],["x}+\\sqrt{1",{"_index":1886,"t":{"1387":{"position":[[490,10]]},"1545":{"position":[[490,10]]}}}],["x~=d(z)=d(e(x))\\tilde{x}=\\mathcal{d}(z)=\\mathcal{d}(\\mathcal{e}(x))x~=d(z)=d(e(x",{"_index":2191,"t":{"1431":{"position":[[807,82]]}}}],["x∈rdx",{"_index":1868,"t":{"1387":{"position":[[19,5]]},"1545":{"position":[[19,5]]}}}],["x∈rh×w×3x",{"_index":2184,"t":{"1431":{"position":[[606,9]]}}}],["x∼n(x;μ,σ2)x",{"_index":2566,"t":{"1506":{"position":[[1406,12]]}}}],["x为100时，sigmoid(x)就接近于0",{"_index":1408,"t":{"1280":{"position":[[353,24]]}}}],["x和i",{"_index":498,"t":{"1035":{"position":[[124,26]]}}}],["x方向和i",{"_index":550,"t":{"1048":{"position":[[17,24]]}}}],["y",{"_index":16,"t":{"896":{"position":[[111,1],[134,1],[138,1],[175,2]]},"898":{"position":[[101,1],[105,1]]},"1037":{"position":[[323,1],[429,1]]},"1285":{"position":[[172,1]]},"1375":{"position":[[1095,1],[1188,1],[1237,3],[1317,3],[1361,2],[1921,2],[1989,1],[2051,2],[2127,3]]},"1435":{"position":[[1066,2]]},"1607":{"position":[[148,4],[292,4],[512,4]]},"1733":{"position":[[302,2]]}}}],["y)(x,i",{"_index":497,"t":{"1035":{"position":[[106,17]]}}}],["y)(x,y)方向上以及亮度函数f(x,y)f(x",{"_index":495,"t":{"1035":{"position":[[42,26]]}}}],["y)(x,y)，点qqq的坐标为(s,t)(s,t)(s,t",{"_index":502,"t":{"1037":{"position":[[138,32]]}}}],["y)f(x,i",{"_index":496,"t":{"1035":{"position":[[69,16]]}}}],["y)p(x∣i",{"_index":2633,"t":{"1520":{"position":[[71,8]]}}}],["y)∈rm×dτ\\tau_\\theta(i",{"_index":2220,"t":{"1435":{"position":[[305,25]]}}}],["y*z",{"_index":1653,"t":{"1335":{"position":[[401,4]]}}}],["y.numel",{"_index":1764,"t":{"1375":{"position":[[1241,10],[2131,10]]}}}],["y.to(devic",{"_index":1762,"t":{"1375":{"position":[[1192,12],[2007,12]]}}}],["y2",{"_index":1221,"t":{"1203":{"position":[[192,5]]}}}],["y\\right",{"_index":2639,"t":{"1520":{"position":[[405,8],[491,8],[577,8]]},"1524":{"position":[[167,8],[509,8],[614,8],[767,8]]}}}],["y\\right)=\\nabla",{"_index":2650,"t":{"1522":{"position":[[200,15]]}}}],["y\\right)=p\\left(x_t\\right",{"_index":2635,"t":{"1520":{"position":[[187,26]]}}}],["y\\right)p(x0:t​∣y)=p(xt​)t=1∏t​pθ​(xt−1​∣xt​,i",{"_index":2637,"t":{"1520":{"position":[[257,47]]}}}],["y\\right)sθ​(xt​,t,y)≈∇logp(xt​∣i",{"_index":2647,"t":{"1520":{"position":[[619,33]]}}}],["y\\right)}_{\\text",{"_index":2669,"t":{"1524":{"position":[[889,16]]}}}],["y\\right)ϵθ​(zt​,t,i",{"_index":2216,"t":{"1435":{"position":[[103,20]]}}}],["y_hat",{"_index":1800,"t":{"1375":{"position":[[2020,5]]}}}],["yann",{"_index":2621,"t":{"1518":{"position":[[4,4]]}}}],["yay",{"_index":3052,"t":{"1668":{"position":[[28,3]]},"1772":{"position":[[87,3]]}}}],["yi",{"_index":1657,"t":{"1335":{"position":[[590,2],[616,2],[636,2]]}}}],["yi,j=∑a,bva,b∗xi+a,j+b=∑a=−δδ∑b=−δδva,b∗xia,j+b(4)y_{i,j}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}}=\\sum_{a",{"_index":1602,"t":{"1321":{"position":[[32,98]]}}}],["yi,j=∑a,bvi,j,a,b∗xi+a,j+b=∑a,bva,b∗xi+a,j+b(3)y_{i,j}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b",{"_index":1599,"t":{"1319":{"position":[[513,122]]}}}],["yi,j=∑h,wwi,j,h,w∗xh,w(1)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w",{"_index":1593,"t":{"1319":{"position":[[77,64]]}}}],["yi,j=∑h,wwi,j,h,w∗xh,w=∑a,bvi,j,a,b∗xi+a,j+b(2)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b",{"_index":1596,"t":{"1319":{"position":[[241,122]]}}}],["yijun",{"_index":2376,"t":{"1476":{"position":[[516,5]]}}}],["yiy_{i}yi",{"_index":1090,"t":{"1173":{"position":[[383,20]]}}}],["yolov1",{"_index":3146,"t":{"1733":{"position":[[43,14],[58,14],[523,25]]}}}],["yolov2引入了anchor机制代替bbox，将图像划分为13×1313",{"_index":3173,"t":{"1735":{"position":[[30,37]]}}}],["yolov5使用cspnet实现特征融合，csp",{"_index":3179,"t":{"1737":{"position":[[9,52]]}}}],["yolo损失函数分为分类损失以及回归损失，可以在分类损失中引入foc",{"_index":3198,"t":{"1749":{"position":[[50,36]]}}}],["yong",{"_index":2381,"t":{"1476":{"position":[[554,4]]}}}],["yyi",{"_index":917,"t":{"1151":{"position":[[146,71]]},"1256":{"position":[[146,71]]},"1435":{"position":[[139,3],[291,3]]},"1520":{"position":[[305,3]]}}}],["yyy是样本的真实标签，zzz",{"_index":1655,"t":{"1335":{"position":[[435,22]]}}}],["yyy，本文引入了一个领域特定的编码器（domain",{"_index":2218,"t":{"1435":{"position":[[225,26]]}}}],["y−f(x)∥2=∑[y−f(x)]22(6)\\vert",{"_index":1423,"t":{"1285":{"position":[[142,29]]}}}],["y为bbox左上角坐标，h",{"_index":3159,"t":{"1733":{"position":[[323,14]]}}}],["y轴数据、x轴数据，win参数是窗口的唯一标识，opt可选字典中可以给出窗口的title和legend",{"_index":1206,"t":{"1201":{"position":[[49,66]]}}}],["z",{"_index":863,"t":{"1147":{"position":[[179,1],[243,1],[254,1],[272,3],[276,1],[323,3],[349,1],[428,1],[764,1],[800,1],[837,1],[883,1]]},"1252":{"position":[[179,1],[243,1],[254,1],[272,3],[276,1],[323,3],[349,1],[428,1],[764,1],[800,1],[837,1],[883,1]]},"1449":{"position":[[124,1]]},"1607":{"position":[[153,4],[306,4],[517,4]]}}}],["z(k)z(k)z(k",{"_index":558,"t":{"1055":{"position":[[396,33]]}}}],["z(l)l=1lz^{(l",{"_index":2561,"t":{"1506":{"position":[[1202,16]]}}}],["z(l)z^{(l)}z(l",{"_index":2565,"t":{"1506":{"position":[[1280,15]]}}}],["z)\\right",{"_index":2553,"t":{"1506":{"position":[[903,9]]}}}],["z)p(x∣z",{"_index":1874,"t":{"1387":{"position":[[167,9]]},"1389":{"position":[[26,8]]},"1545":{"position":[[167,9]]},"1547":{"position":[[26,8]]}}}],["z)x0​∼p(x∣z",{"_index":1914,"t":{"1389":{"position":[[475,14]]},"1547":{"position":[[475,14]]}}}],["z=e(x)z=\\mathcal{e}(x)z=e(x",{"_index":2188,"t":{"1431":{"position":[[701,31]]},"1633":{"position":[[4419,28]]}}}],["z=w∗x+bz=w*x+bz=w∗x+b",{"_index":1650,"t":{"1335":{"position":[[217,60]]}}}],["z=μϕ(x)+σϕ(x)⊙ϵ,ϵ∼n(0,i)z=\\mu_\\phi(x)+\\sigma_\\phi(x",{"_index":2572,"t":{"1506":{"position":[[1606,52]]}}}],["z\\right)\\right)+\\sigma_t",{"_index":1902,"t":{"1389":{"position":[[211,24]]},"1547":{"position":[[211,24]]}}}],["z\\right)\\right\\|^2\\right]l(z,x)=eε,t​[∥ε−εθ​(xt​∣t,z)∥2",{"_index":1880,"t":{"1387":{"position":[[303,56]]},"1545":{"position":[[303,56]]}}}],["z\\right)εθ​(xt​∣t,z",{"_index":1894,"t":{"1387":{"position":[[726,20]]},"1545":{"position":[[726,20]]}}}],["z^{(l)}\\right",{"_index":2559,"t":{"1506":{"position":[[1021,14]]}}}],["z_{t",{"_index":2580,"t":{"1508":{"position":[[124,4]]}}}],["zero",{"_index":786,"t":{"1130":{"position":[[31,4]]},"1235":{"position":[[31,4]]},"1476":{"position":[[820,4]]},"1485":{"position":[[1084,4],[1297,4]]},"1613":{"position":[[1084,4],[1297,4]]}}}],["zhang",{"_index":2358,"t":{"1476":{"position":[[229,6],[243,6],[595,6]]}}}],["zhou等人首先在图像分类任务中采用上下文优化，在词嵌入空间中对具有连续向量的上下文词进行建模。随后prompt",{"_index":2408,"t":{"1478":{"position":[[185,56]]}}}],["zi",{"_index":1658,"t":{"1335":{"position":[[595,2]]}}}],["zip",{"_index":1705,"t":{"1347":{"position":[[993,5],[999,39]]},"1607":{"position":[[0,68],[83,8],[160,15],[522,36]]}}}],["zip(*zipped_list",{"_index":2797,"t":{"1607":{"position":[[406,18]]}}}],["zip(a",{"_index":1627,"t":{"1330":{"position":[[427,6],[626,6]]},"1347":{"position":[[1099,6],[1293,6]]}}}],["zip(list1",{"_index":2792,"t":{"1607":{"position":[[191,10]]}}}],["zipped_list",{"_index":2791,"t":{"1607":{"position":[[176,12],[239,13]]}}}],["zip将list1、list2和list3",{"_index":2795,"t":{"1607":{"position":[[311,42]]}}}],["zizhao",{"_index":2359,"t":{"1476":{"position":[[236,6]]}}}],["zsh的配置文件：~/.zshrc",{"_index":3073,"t":{"1679":{"position":[[37,17]]}}}],["zt1∼n(0,i)z_{t_1",{"_index":2956,"t":{"1633":{"position":[[7985,17]]}}}],["zt:=αtx+σtϵz_t",{"_index":2927,"t":{"1633":{"position":[[6325,14]]}}}],["ztz_tzt",{"_index":2210,"t":{"1433":{"position":[[594,101]]},"1633":{"position":[[4517,8],[5230,8],[5316,8]]}}}],["ztz_{t}zt",{"_index":2578,"t":{"1508":{"position":[[67,10]]}}}],["zt−1",{"_index":2579,"t":{"1508":{"position":[[119,4]]}}}],["zzz",{"_index":1872,"t":{"1387":{"position":[[135,3],[778,6]]},"1489":{"position":[[263,3]]},"1502":{"position":[[196,3]]},"1506":{"position":[[1592,3],[1900,3]]},"1512":{"position":[[20,3]]},"1545":{"position":[[135,3],[778,6]]},"1617":{"position":[[263,3]]},"1633":{"position":[[4500,3]]}}}],["zzz带入阈值函数，如符号函数sign(z)sign(z)sign(z",{"_index":1651,"t":{"1335":{"position":[[278,56]]}}}],["zθz_\\thetaz",{"_index":2624,"t":{"1518":{"position":[[107,13]]}}}],["z∈rdz",{"_index":1870,"t":{"1387":{"position":[[81,5]]},"1545":{"position":[[81,5]]}}}],["z∈rh×w×cz",{"_index":2189,"t":{"1431":{"position":[[733,9]]}}}],["z空间与w",{"_index":854,"t":{"1147":{"position":[[0,8]]},"1252":{"position":[[0,8]]}}}],["z空间到w",{"_index":855,"t":{"1147":{"position":[[11,10]]},"1252":{"position":[[11,10]]}}}]],"pipeline":["stemmer"]}}]