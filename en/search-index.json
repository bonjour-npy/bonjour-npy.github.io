[{"documents":[{"i":702,"t":"排列组合（求30的倍数）","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","b":["题解"]},{"i":708,"t":"反序输出","u":"/en/docs/Algorithms/题解/反序输出","b":["题解"]},{"i":714,"t":"一维前缀和（刷出一道墙）","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","b":["题解"]},{"i":720,"t":"鸣谢","u":"/en/docs/Acknowledgement/intro","b":["🍺饮水思源"]},{"i":725,"t":"STL模板","u":"/en/docs/Algorithms/STL模板","b":[]},{"i":747,"t":"编译原理笔记","u":"/en/docs/Curriculum/编译原理/Note","b":["编译原理"]},{"i":805,"t":"Welcome","u":"/en/docs/Algorithms/intro","b":["🎰算法"]},{"i":809,"t":"机试技巧与STL","u":"/en/docs/Algorithms/机试技巧与STL","b":[]},{"i":876,"t":"GeekOS project 0的实现","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","b":["操作系统课设"]},{"i":882,"t":"Linux系统下GeekOS的环境配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","b":["操作系统课设"]},{"i":896,"t":"数字图像处理复习笔记","u":"/en/docs/Curriculum/数字图像处理/Note","b":["数字图像处理"]},{"i":949,"t":"Welcome","u":"/en/docs/Curriculum/intro","b":["📖课程学习"]},{"i":953,"t":"图像生成模型","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","b":["大模型"]},{"i":980,"t":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","b":["大模型"]},{"i":1003,"t":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","b":["大模型"]},{"i":1011,"t":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","b":["大模型","Prompt Learning"]},{"i":1042,"t":"自注意力（Self-Attention）","u":"/en/docs/Deep-Learning/大模型/Self-Attention","b":["大模型"]},{"i":1060,"t":"生成式对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型/GAN","b":["大模型"]},{"i":1077,"t":"自监督学习（Self-Supervised Learning）","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","b":["大模型"]},{"i":1093,"t":"正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","b":["基础知识"]},{"i":1101,"t":"深度可分离卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","b":["基础知识"]},{"i":1109,"t":"AlexNet","u":"/en/docs/Deep-Learning/基础知识/AlexNet","b":["基础知识"]},{"i":1116,"t":"激活函数与Loss的梯度","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","b":["基础知识"]},{"i":1127,"t":"K-fold cross-validation","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","b":["基础知识"]},{"i":1134,"t":"Perceptron","u":"/en/docs/Deep-Learning/基础知识/Perceptron","b":["基础知识"]},{"i":1141,"t":"卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","b":["基础知识"]},{"i":1146,"t":"LeNet","u":"/en/docs/Deep-Learning/基础知识/LeNet","b":["基础知识"]},{"i":1153,"t":"从全连接到卷积","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","b":["基础知识"]},{"i":1160,"t":"池化层","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","b":["基础知识"]},{"i":1167,"t":"关于Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","b":["基础知识"]},{"i":1176,"t":"CVPR 2022: High-Resolution Image Synthesis with Latent Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/High-Resolution Image Synthesis with Latent Diffusion Models","b":["论文笔记"]},{"i":1179,"t":"PyTorch基础","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","b":["基础知识"]},{"i":1182,"t":"CVPR 2023: Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","b":["论文笔记"]},{"i":1195,"t":"NeurIPS 2020: Denoising Diffusion Probabilistic Models","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","b":["论文笔记"]},{"i":1206,"t":"Speaker Classification","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","b":["实战练习"]},{"i":1214,"t":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","b":["论文笔记"]},{"i":1237,"t":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","b":["实战练习"]},{"i":1270,"t":"Visdom可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","b":["实战练习"]},{"i":1281,"t":"Welcome","u":"/en/docs/Deep-Learning/intro","b":["🤖深度学习"]},{"i":1285,"t":"Welcome","u":"/en/docs/Others/intro","b":["☃️其他"]},{"i":1289,"t":"告示栏","u":"/en/docs/Others/博客搭建/告示栏","b":["博客搭建"]},{"i":1291,"t":"查漏补缺","u":"/en/docs/Deep-Learning/Fill-The-Gaps","b":[]},{"i":1301,"t":"如何让你的Kde Plasma看起来更像macOS","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","b":["Linux","客制化"]},{"i":1306,"t":"终端代理","u":"/en/docs/Others/Linux/实用工具/终端代理","b":["Linux","实用工具"]},{"i":1314,"t":"大数除法","u":"/en/docs/Tui-Mian/机试/大数除法","b":["机试"]},{"i":1322,"t":"挂载Windows磁盘为只读文件","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","b":["Linux","问题解决"]},{"i":1327,"t":"概率论","u":"/en/docs/Tui-Mian/数学/概率论","b":["数学"]},{"i":1330,"t":"数据结构","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","b":["计算机基础综合"]},{"i":1335,"t":"夏令营面试数学部分复习","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","b":["数学"]},{"i":1340,"t":"简历面试准备","u":"/en/docs/Tui-Mian/简历/简历面试准备","b":["简历"]},{"i":1382,"t":"Welcome","u":"/en/docs/Tui-Mian/intro","b":["🤡推免"]},{"i":1386,"t":"经验贴：2023年双非计算机保研经历","u":"/en/docs/Tui-Mian/Summary","b":[]},{"i":1397,"t":"线性代数","u":"/en/docs/Tui-Mian/数学/线性代数","b":["数学"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/702",[0,4.472]],["t/708",[1,1.092]],["t/714",[1,1.092]],["t/720",[1,1.092]],["t/725",[2,3.834]],["t/747",[1,1.092]],["t/805",[3,2.85]],["t/809",[2,3.834]],["t/876",[4,2.931,5,2.931,6,2.931]],["t/882",[7,4.472]],["t/896",[1,1.092]],["t/949",[3,2.85]],["t/953",[1,1.092]],["t/980",[8,1.91,9,2.144,10,1.91,11,2.144]],["t/1003",[12,2.704,13,2.456]],["t/1011",[1,1.029,14,1.665,15,1.512]],["t/1042",[10,2.704,16,3.037]],["t/1060",[17,4.472]],["t/1077",[15,2.033,16,2.514,18,2.931]],["t/1093",[1,1.092]],["t/1101",[1,1.092]],["t/1109",[19,4.472]],["t/1116",[20,4.472]],["t/1127",[21,2.501,22,2.501,23,2.501,24,2.501]],["t/1134",[25,4.472]],["t/1141",[1,1.092]],["t/1146",[26,4.472]],["t/1153",[1,1.092]],["t/1160",[1,1.092]],["t/1167",[27,3.541,28,3.541]],["t/1176",[12,1.101,13,1,29,1.236,30,1.442,31,1.442,32,1.442,33,1.236,34,1.442,35,1.442]],["t/1179",[36,4.472]],["t/1182",[13,0.797,14,0.878,15,0.797,29,0.986,33,0.986,37,0.986,38,1.15,39,1.15,40,1.15,41,1.15,42,1.15,43,1.15]],["t/1195",[8,1.476,12,1.476,13,1.34,44,1.933,45,1.933,46,1.933]],["t/1206",[47,3.541,48,3.541]],["t/1214",[8,1.91,9,2.144,10,1.91,11,2.144]],["t/1237",[1,1.029,14,1.665,15,1.512]],["t/1270",[49,4.472]],["t/1281",[3,2.85]],["t/1285",[3,2.85]],["t/1289",[1,1.092]],["t/1291",[1,1.092]],["t/1301",[50,3.541,51,3.541]],["t/1306",[1,1.092]],["t/1314",[1,1.092]],["t/1322",[52,4.472]],["t/1327",[1,1.092]],["t/1330",[1,1.092]],["t/1335",[1,1.092]],["t/1340",[1,1.092]],["t/1382",[3,2.85]],["t/1386",[37,3.834]],["t/1397",[1,1.092]]],"invertedIndex":[["",{"_index":1,"t":{"708":{"position":[[0,4]]},"714":{"position":[[0,12]]},"720":{"position":[[0,2]]},"747":{"position":[[0,6]]},"896":{"position":[[0,10]]},"953":{"position":[[0,6]]},"1011":{"position":[[0,9],[26,3],[30,17]]},"1093":{"position":[[0,8]]},"1101":{"position":[[0,7]]},"1141":{"position":[[0,3]]},"1153":{"position":[[0,7]]},"1160":{"position":[[0,3]]},"1237":{"position":[[0,9],[26,3],[30,17]]},"1289":{"position":[[0,3]]},"1291":{"position":[[0,4]]},"1306":{"position":[[0,4]]},"1314":{"position":[[0,4]]},"1327":{"position":[[0,3]]},"1330":{"position":[[0,4]]},"1335":{"position":[[0,11]]},"1340":{"position":[[0,6]]},"1397":{"position":[[0,4]]}}}],["0",{"_index":6,"t":{"876":{"position":[[15,4]]}}}],["2017",{"_index":9,"t":{"980":{"position":[[8,5]]},"1214":{"position":[[8,5]]}}}],["2020",{"_index":44,"t":{"1195":{"position":[[8,5]]}}}],["2022",{"_index":30,"t":{"1176":{"position":[[5,5]]}}}],["2023",{"_index":37,"t":{"1182":{"position":[[5,5]]},"1386":{"position":[[0,18]]}}}],["30",{"_index":0,"t":{"702":{"position":[[0,12]]}}}],["adapt",{"_index":41,"t":{"1182":{"position":[[38,10]]}}}],["alexnet",{"_index":19,"t":{"1109":{"position":[[0,7]]}}}],["attent",{"_index":10,"t":{"980":{"position":[[14,9]]},"1042":{"position":[[10,10]]},"1214":{"position":[[14,9]]}}}],["classif",{"_index":48,"t":{"1206":{"position":[[8,14]]}}}],["cross",{"_index":23,"t":{"1127":{"position":[[7,5]]}}}],["cvpr",{"_index":29,"t":{"1176":{"position":[[0,4]]},"1182":{"position":[[0,4]]}}}],["denois",{"_index":45,"t":{"1195":{"position":[[14,9]]}}}],["diffus",{"_index":12,"t":{"1003":{"position":[[0,14]]},"1176":{"position":[[55,9]]},"1195":{"position":[[24,9]]}}}],["fold",{"_index":22,"t":{"1127":{"position":[[2,4]]}}}],["gan",{"_index":17,"t":{"1060":{"position":[[0,12]]}}}],["geeko",{"_index":4,"t":{"876":{"position":[[0,6]]}}}],["gener",{"_index":40,"t":{"1182":{"position":[[21,10]]}}}],["high",{"_index":31,"t":{"1176":{"position":[[11,4]]}}}],["imag",{"_index":33,"t":{"1176":{"position":[[27,5]]},"1182":{"position":[[53,5]]}}}],["k",{"_index":21,"t":{"1127":{"position":[[0,1]]}}}],["kde",{"_index":50,"t":{"1301":{"position":[[0,8]]}}}],["latent",{"_index":35,"t":{"1176":{"position":[[48,6]]}}}],["learn",{"_index":15,"t":{"1011":{"position":[[17,8]]},"1077":{"position":[[22,9]]},"1182":{"position":[[75,8]]},"1237":{"position":[[17,8]]}}}],["lenet",{"_index":26,"t":{"1146":{"position":[[0,5]]}}}],["linux系统下geeko",{"_index":7,"t":{"882":{"position":[[0,19]]}}}],["logist",{"_index":27,"t":{"1167":{"position":[[0,10]]}}}],["loss",{"_index":20,"t":{"1116":{"position":[[0,12]]}}}],["model",{"_index":13,"t":{"1003":{"position":[[15,6]]},"1176":{"position":[[65,6]]},"1182":{"position":[[32,5]]},"1195":{"position":[[48,6]]}}}],["need",{"_index":11,"t":{"980":{"position":[[35,4]]},"1214":{"position":[[35,4]]}}}],["neurip",{"_index":8,"t":{"980":{"position":[[0,7]]},"1195":{"position":[[0,7]]},"1214":{"position":[[0,7]]}}}],["perceptron",{"_index":25,"t":{"1134":{"position":[[0,10]]}}}],["plasma看起来更像maco",{"_index":51,"t":{"1301":{"position":[[9,16]]}}}],["probabilist",{"_index":46,"t":{"1195":{"position":[[34,13]]}}}],["project",{"_index":5,"t":{"876":{"position":[[7,7]]}}}],["prompt",{"_index":14,"t":{"1011":{"position":[[10,6]]},"1182":{"position":[[68,6]]},"1237":{"position":[[10,6]]}}}],["pytorch",{"_index":36,"t":{"1179":{"position":[[0,9]]}}}],["regress",{"_index":28,"t":{"1167":{"position":[[11,10]]}}}],["resolut",{"_index":32,"t":{"1176":{"position":[[16,10]]}}}],["self",{"_index":16,"t":{"1042":{"position":[[0,9]]},"1077":{"position":[[0,10]]}}}],["shot",{"_index":39,"t":{"1182":{"position":[[16,4]]}}}],["speaker",{"_index":47,"t":{"1206":{"position":[[0,7]]}}}],["specif",{"_index":43,"t":{"1182":{"position":[[59,8]]}}}],["stl",{"_index":2,"t":{"725":{"position":[[0,5]]},"809":{"position":[[0,8]]}}}],["supervis",{"_index":18,"t":{"1077":{"position":[[11,10]]}}}],["synthesi",{"_index":34,"t":{"1176":{"position":[[33,9]]}}}],["valid",{"_index":24,"t":{"1127":{"position":[[13,10]]}}}],["via",{"_index":42,"t":{"1182":{"position":[[49,3]]}}}],["visdom",{"_index":49,"t":{"1270":{"position":[[0,9]]}}}],["welcom",{"_index":3,"t":{"805":{"position":[[0,7]]},"949":{"position":[[0,7]]},"1281":{"position":[[0,7]]},"1285":{"position":[[0,7]]},"1382":{"position":[[0,7]]}}}],["window",{"_index":52,"t":{"1322":{"position":[[0,16]]}}}],["zero",{"_index":38,"t":{"1182":{"position":[[11,4]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":704,"t":"参考代码","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#参考代码","p":702},{"i":706,"t":"题解","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#题解","p":702},{"i":710,"t":"参考代码","u":"/en/docs/Algorithms/题解/反序输出","h":"#参考代码","p":708},{"i":712,"t":"题解","u":"/en/docs/Algorithms/题解/反序输出","h":"#题解","p":708},{"i":716,"t":"参考代码","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#参考代码","p":714},{"i":718,"t":"题解","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#题解","p":714},{"i":721,"t":"饮水思源","u":"/en/docs/Acknowledgement/intro","h":"#饮水思源","p":720},{"i":723,"t":"Disclaimer","u":"/en/docs/Acknowledgement/intro","h":"#disclaimer","p":720},{"i":727,"t":"vector","u":"/en/docs/Algorithms/STL模板","h":"#vector","p":725},{"i":729,"t":"pair","u":"/en/docs/Algorithms/STL模板","h":"#pair","p":725},{"i":731,"t":"string","u":"/en/docs/Algorithms/STL模板","h":"#string","p":725},{"i":733,"t":"query","u":"/en/docs/Algorithms/STL模板","h":"#query","p":725},{"i":735,"t":"priority_queue","u":"/en/docs/Algorithms/STL模板","h":"#priority_queue","p":725},{"i":737,"t":"stack","u":"/en/docs/Algorithms/STL模板","h":"#stack","p":725},{"i":739,"t":"deque","u":"/en/docs/Algorithms/STL模板","h":"#deque","p":725},{"i":741,"t":"set/multiset","u":"/en/docs/Algorithms/STL模板","h":"#setmultiset","p":725},{"i":743,"t":"map/multimap","u":"/en/docs/Algorithms/STL模板","h":"#mapmultimap","p":725},{"i":745,"t":"biset","u":"/en/docs/Algorithms/STL模板","h":"#biset","p":725},{"i":748,"t":"第一章：前言","u":"/en/docs/Curriculum/编译原理/Note","h":"#第一章前言","p":747},{"i":749,"t":"1.1 编译程序的逻辑结构","u":"/en/docs/Curriculum/编译原理/Note","h":"#11-编译程序的逻辑结构","p":747},{"i":751,"t":"1.2 前端和后端","u":"/en/docs/Curriculum/编译原理/Note","h":"#12-前端和后端","p":747},{"i":753,"t":"1.3 遍的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#13-遍的概念","p":747},{"i":755,"t":"第二章：文法和语言","u":"/en/docs/Curriculum/编译原理/Note","h":"#第二章文法和语言","p":747},{"i":756,"t":"2.1 句型","u":"/en/docs/Curriculum/编译原理/Note","h":"#21-句型","p":747},{"i":758,"t":"2.2 句子：","u":"/en/docs/Curriculum/编译原理/Note","h":"#22-句子","p":747},{"i":760,"t":"2.3 文法的分类：","u":"/en/docs/Curriculum/编译原理/Note","h":"#23-文法的分类","p":747},{"i":762,"t":"2.4 最左/右推导：","u":"/en/docs/Curriculum/编译原理/Note","h":"#24-最左右推导","p":747},{"i":764,"t":"第三章：词法分析","u":"/en/docs/Curriculum/编译原理/Note","h":"#第三章词法分析","p":747},{"i":765,"t":"3.1 正规文法转换成正规式","u":"/en/docs/Curriculum/编译原理/Note","h":"#31-正规文法转换成正规式","p":747},{"i":766,"t":"3.2 有穷自动机（FA）","u":"/en/docs/Curriculum/编译原理/Note","h":"#32-有穷自动机fa","p":747},{"i":768,"t":"3.3 正规式RE与有穷自动机FA的互相转化","u":"/en/docs/Curriculum/编译原理/Note","h":"#33-正规式re与有穷自动机fa的互相转化","p":747},{"i":769,"t":"3.4 正规文法RM与有穷自动机FA的互相转化","u":"/en/docs/Curriculum/编译原理/Note","h":"#34-正规文法rm与有穷自动机fa的互相转化","p":747},{"i":770,"t":"第四章：自顶向下语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第四章自顶向下语法分析方法","p":747},{"i":772,"t":"1. FIRST集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-first集的定义","p":747},{"i":773,"t":"2. Follow集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-follow集的定义","p":747},{"i":775,"t":"3. SELECT集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-select集的定义","p":747},{"i":777,"t":"4. LL(1)文法的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-ll1文法的定义","p":747},{"i":778,"t":"5. LL(1)文法的判别","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-ll1文法的判别","p":747},{"i":780,"t":"6. 预测分析表","u":"/en/docs/Curriculum/编译原理/Note","h":"#6-预测分析表","p":747},{"i":782,"t":"7. 非LL(1)文法到LL(1)文法的等价变换","u":"/en/docs/Curriculum/编译原理/Note","h":"#7-非ll1文法到ll1文法的等价变换","p":747},{"i":784,"t":"第五章：自底向上语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第五章自底向上语法分析方法","p":747},{"i":785,"t":"5.1 概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#51-概念","p":747},{"i":787,"t":"5.2 方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#52-方法","p":747},{"i":789,"t":"5.3 工作过程","u":"/en/docs/Curriculum/编译原理/Note","h":"#53-工作过程","p":747},{"i":790,"t":"5.4 移入-归约分析器的4种动作","u":"/en/docs/Curriculum/编译原理/Note","h":"#54-移入-归约分析器的4种动作","p":747},{"i":792,"t":"5.5 重要题型","u":"/en/docs/Curriculum/编译原理/Note","h":"#55-重要题型","p":747},{"i":794,"t":"概念总结","u":"/en/docs/Curriculum/编译原理/Note","h":"#概念总结","p":747},{"i":795,"t":"1 编译程序各阶段功能","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-编译程序各阶段功能","p":747},{"i":797,"t":"2 语法分析方法的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-语法分析方法的概念","p":747},{"i":799,"t":"3 翻译模式","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-翻译模式","p":747},{"i":801,"t":"4 属性文法","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-属性文法","p":747},{"i":803,"t":"5 符号表","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-符号表","p":747},{"i":807,"t":"支持我！","u":"/en/docs/Algorithms/intro","h":"#支持我","p":805},{"i":811,"t":"vs2018 快捷键","u":"/en/docs/Algorithms/机试技巧与STL","h":"#vs2018-快捷键","p":809},{"i":813,"t":"头文件","u":"/en/docs/Algorithms/机试技巧与STL","h":"#头文件","p":809},{"i":814,"t":"标准c库","u":"/en/docs/Algorithms/机试技巧与STL","h":"#标准c库","p":809},{"i":816,"t":"c++ STL","u":"/en/docs/Algorithms/机试技巧与STL","h":"#c-stl","p":809},{"i":818,"t":"常用头","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用头","p":809},{"i":820,"t":"常用宏定义","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用宏定义","p":809},{"i":822,"t":"结构体","u":"/en/docs/Algorithms/机试技巧与STL","h":"#结构体","p":809},{"i":823,"t":"定义","u":"/en/docs/Algorithms/机试技巧与STL","h":"#定义","p":809},{"i":825,"t":"初始化","u":"/en/docs/Algorithms/机试技巧与STL","h":"#初始化","p":809},{"i":827,"t":"运算符重载","u":"/en/docs/Algorithms/机试技巧与STL","h":"#运算符重载","p":809},{"i":829,"t":"c++new的使用","u":"/en/docs/Algorithms/机试技巧与STL","h":"#cnew的使用","p":809},{"i":830,"t":"常规","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常规","p":809},{"i":832,"t":"动态申请列大小固定的二维数组","u":"/en/docs/Algorithms/机试技巧与STL","h":"#动态申请列大小固定的二维数组","p":809},{"i":834,"t":"动态申请大小不固定的二维数组","u":"/en/docs/Algorithms/机试技巧与STL","h":"#动态申请大小不固定的二维数组","p":809},{"i":836,"t":"常用STL","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用stl","p":809},{"i":838,"t":"简述","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简述","p":809},{"i":840,"t":"algorithm","u":"/en/docs/Algorithms/机试技巧与STL","h":"#algorithm","p":809},{"i":842,"t":"vector","u":"/en/docs/Algorithms/机试技巧与STL","h":"#vector","p":809},{"i":844,"t":"list","u":"/en/docs/Algorithms/机试技巧与STL","h":"#list","p":809},{"i":846,"t":"string","u":"/en/docs/Algorithms/机试技巧与STL","h":"#string","p":809},{"i":848,"t":"pair","u":"/en/docs/Algorithms/机试技巧与STL","h":"#pair","p":809},{"i":850,"t":"map","u":"/en/docs/Algorithms/机试技巧与STL","h":"#map","p":809},{"i":852,"t":"stack","u":"/en/docs/Algorithms/机试技巧与STL","h":"#stack","p":809},{"i":854,"t":"queue","u":"/en/docs/Algorithms/机试技巧与STL","h":"#queue","p":809},{"i":856,"t":"set","u":"/en/docs/Algorithms/机试技巧与STL","h":"#set","p":809},{"i":858,"t":"multiset","u":"/en/docs/Algorithms/机试技巧与STL","h":"#multiset","p":809},{"i":860,"t":"bitset","u":"/en/docs/Algorithms/机试技巧与STL","h":"#bitset","p":809},{"i":862,"t":"图模板","u":"/en/docs/Algorithms/机试技巧与STL","h":"#图模板","p":809},{"i":863,"t":"不带出入度的最简模板","u":"/en/docs/Algorithms/机试技巧与STL","h":"#不带出入度的最简模板","p":809},{"i":865,"t":"带出入度的 (2019推免试题)","u":"/en/docs/Algorithms/机试技巧与STL","h":"#带出入度的-2019推免试题","p":809},{"i":867,"t":"图算法：找出u到v的所有路径-邻接表","u":"/en/docs/Algorithms/机试技巧与STL","h":"#图算法找出u到v的所有路径-邻接表","p":809},{"i":869,"t":"树模板","u":"/en/docs/Algorithms/机试技巧与STL","h":"#树模板","p":809},{"i":870,"t":"注释版","u":"/en/docs/Algorithms/机试技巧与STL","h":"#注释版","p":809},{"i":872,"t":"简化版（Val As Index，若数据不在1~N内，则可能越界）","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简化版val-as-index若数据不在1n内则可能越界","p":809},{"i":874,"t":"简化版（Val Not As Index，可以存任意的 Val）","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简化版val-not-as-index可以存任意的-val","p":809},{"i":878,"t":"1. 编写C语言代码","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#1-编写c语言代码","p":876},{"i":880,"t":"2. 使用Linux的编译系统对C语言代码进行编译","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#2-使用linux的编译系统对c语言代码进行编译","p":876},{"i":883,"t":"一、必须要知道的原理","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#一必须要知道的原理","p":882},{"i":884,"t":"1. GeekOS:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#1-geekos","p":882},{"i":886,"t":"2. bochs:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#2-bochs","p":882},{"i":888,"t":"3. 二者之间的关系","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#3-二者之间的关系","p":882},{"i":890,"t":"二、安装与配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#二安装与配置","p":882},{"i":892,"t":"1. 安装","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#1-安装","p":882},{"i":894,"t":"2. 配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#2-配置","p":882},{"i":898,"t":"第2章 数字图像处理基础","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第2章-数字图像处理基础","p":896},{"i":899,"t":"图像的采样与量化","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像的采样与量化","p":896},{"i":901,"t":"距离度量","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#距离度量","p":896},{"i":903,"t":"图像质量评价","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像质量评价","p":896},{"i":905,"t":"灰度直方图","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度直方图","p":896},{"i":906,"t":"第3章 图像变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第3章-图像变换","p":896},{"i":907,"t":"傅里叶变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#傅里叶变换","p":896},{"i":909,"t":"第4章 图像处理的基本运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第4章-图像处理的基本运算","p":896},{"i":910,"t":"点运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#点运算","p":896},{"i":912,"t":"比例缩放","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#比例缩放","p":896},{"i":914,"t":"灰度级插值","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度级插值","p":896},{"i":916,"t":"第5章 图像空域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第5章-图像空域增强","p":896},{"i":917,"t":"直接灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直接灰度变换","p":896},{"i":919,"t":"直方图灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直方图灰度变换","p":896},{"i":921,"t":"空域滤波增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#空域滤波增强","p":896},{"i":923,"t":"第6章 图像频域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第6章-图像频域增强","p":896},{"i":925,"t":"低通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#低通滤波","p":896},{"i":927,"t":"高通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#高通滤波","p":896},{"i":929,"t":"带通和带阻滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#带通和带阻滤波","p":896},{"i":931,"t":"第7章 彩色图像处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第7章-彩色图像处理","p":896},{"i":932,"t":"伪彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#伪彩色图像的处理","p":896},{"i":934,"t":"全彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#全彩色图像的处理","p":896},{"i":935,"t":"第8章 图像复原","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第8章-图像复原","p":896},{"i":936,"t":"图像退化机理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化机理","p":896},{"i":938,"t":"图像退化模型","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化模型","p":896},{"i":940,"t":"第11章 图像分割","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第11章-图像分割","p":896},{"i":941,"t":"阈值分割法","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#阈值分割法","p":896},{"i":943,"t":"边缘检测的基本原理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测的基本原理","p":896},{"i":945,"t":"边缘检测算子","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测算子","p":896},{"i":947,"t":"课后习题中的问答题","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#课后习题中的问答题","p":896},{"i":951,"t":"支持我！","u":"/en/docs/Curriculum/intro","h":"#支持我","p":949},{"i":954,"t":"回顾文字生成的两种方法","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#回顾文字生成的两种方法","p":953},{"i":956,"t":"自回归方法（AR）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#自回归方法ar","p":953},{"i":958,"t":"非自回归方法（NAR）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#非自回归方法nar","p":953},{"i":960,"t":"目前图像生成模型的共同点","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#目前图像生成模型的共同点","p":953},{"i":962,"t":"生成模型的共同结构","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#生成模型的共同结构","p":953},{"i":964,"t":"通用框架概览","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#通用框架概览","p":953},{"i":966,"t":"Benchmark","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#benchmark","p":953},{"i":968,"t":"通用框架解析","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#通用框架解析","p":953},{"i":970,"t":"常见图像生成模型速览","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#常见图像生成模型速览","p":953},{"i":972,"t":"变分自编码器（VAE）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#变分自编码器vae","p":953},{"i":974,"t":"基于流的生成模型（Flow-Based Generative Model）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#基于流的生成模型flow-based-generative-model","p":953},{"i":976,"t":"生成对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#生成对抗网络gan","p":953},{"i":978,"t":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#扩散模型diffusion-model","p":953},{"i":982,"t":"整体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#整体结构","p":980},{"i":984,"t":"Encoder","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#encoder","p":980},{"i":985,"t":"整体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#整体结构-1","p":980},{"i":987,"t":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":980},{"i":989,"t":"具体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#具体结构","p":980},{"i":991,"t":"Decoder","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#decoder","p":980},{"i":993,"t":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":980},{"i":995,"t":"Non-Autoregressive Decoder（NAT）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#non-autoregressive-decodernat","p":980},{"i":996,"t":"训练（Training）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#训练training","p":980},{"i":997,"t":"损失函数","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#损失函数","p":980},{"i":999,"t":"Teacher Forcing","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#teacher-forcing","p":980},{"i":1001,"t":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":980},{"i":1005,"t":"基本概念","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#基本概念","p":1003},{"i":1007,"t":"训练过程","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#训练过程","p":1003},{"i":1009,"t":"推理过程","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#推理过程","p":1003},{"i":1013,"t":"依赖","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#依赖","p":1011},{"i":1014,"t":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1011},{"i":1016,"t":"安装依赖","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#安装依赖","p":1011},{"i":1018,"t":"下载预训练生成器","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1011},{"i":1020,"t":"概述","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#概述","p":1011},{"i":1021,"t":"技术细节","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#技术细节","p":1011},{"i":1022,"t":"prompts 的初始化","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1011},{"i":1024,"t":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1011},{"i":1026,"t":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1011},{"i":1028,"t":"训练 stage 1","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-1","p":1011},{"i":1030,"t":"训练 stage 2","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-2","p":1011},{"i":1032,"t":"定量分析指标","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#定量分析指标","p":1011},{"i":1034,"t":"新增功能","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#新增功能","p":1011},{"i":1035,"t":"自定义图像风格迁移","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#自定义图像风格迁移","p":1011},{"i":1037,"t":"问题提出与改进","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#问题提出与改进","p":1011},{"i":1038,"t":"训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练阶段人工-prompts-的作用是什么","p":1011},{"i":1040,"t":"Mapper 结构的设计","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#mapper-结构的设计","p":1011},{"i":1044,"t":"认识CNN的局限性","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#认识cnn的局限性","p":1042},{"i":1045,"t":"输入与输出的局限性","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#输入与输出的局限性","p":1042},{"i":1047,"t":"关联上下文信息的局限性","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#关联上下文信息的局限性","p":1042},{"i":1049,"t":"Self-Attention的原理","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention的原理","p":1042},{"i":1050,"t":"什么是Self-Attention","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#什么是self-attention","p":1042},{"i":1052,"t":"Self-Attention的核心思想","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention的核心思想","p":1042},{"i":1054,"t":"Self-Attention的实现","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention的实现","p":1042},{"i":1056,"t":"Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#multi-head-self-attention","p":1042},{"i":1058,"t":"Self-Attention与CNN的对比","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention与cnn的对比","p":1042},{"i":1062,"t":"引言","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#引言","p":1060},{"i":1063,"t":"将随机分布作为输入","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#将随机分布作为输入","p":1060},{"i":1065,"t":"为什么要添加分布","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#为什么要添加分布","p":1060},{"i":1067,"t":"核心思想","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#核心思想","p":1060},{"i":1069,"t":"具体结构与作用","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#具体结构与作用","p":1060},{"i":1071,"t":"生成器（Generator）","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#生成器generator","p":1060},{"i":1073,"t":"判别器（Discriminator）","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#判别器discriminator","p":1060},{"i":1075,"t":"训练算法","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#训练算法","p":1060},{"i":1079,"t":"介绍","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#介绍","p":1077},{"i":1081,"t":"BERT（Bidirectional Encoder Representation from Transformers）","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#bertbidirectional-encoder-representation-from-transformers","p":1077},{"i":1083,"t":"结构","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#结构","p":1077},{"i":1085,"t":"Self-Supervised Pretraining","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#self-supervised-pretraining","p":1077},{"i":1087,"t":"Fine-tuning","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#fine-tuning","p":1077},{"i":1089,"t":"Why does BERT work?","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#why-does-bert-work","p":1077},{"i":1091,"t":"GPT: Generative Pre-trained Transformer","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#gpt-generative-pre-trained-transformer","p":1077},{"i":1095,"t":"一、什么是正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#一什么是正则化","p":1093},{"i":1097,"t":"二、L1正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#二l1正则化","p":1093},{"i":1099,"t":"三、L2正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#三l2正则化与权重衰退","p":1093},{"i":1103,"t":"常规卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#常规卷积","p":1101},{"i":1105,"t":"（1）逐通道卷积-Depthwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#1逐通道卷积-depthwise-convolution","p":1101},{"i":1107,"t":"（2）逐点卷积-Pointwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#2逐点卷积-pointwise-convolution","p":1101},{"i":1110,"t":"背景","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#背景","p":1109},{"i":1112,"t":"新的概念和技术","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#新的概念和技术","p":1109},{"i":1114,"t":"与LeNet比较","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#与lenet比较","p":1109},{"i":1117,"t":"一、激活函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#一激活函数","p":1116},{"i":1118,"t":"1. Sigmoid函数 / Logistic函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#1-sigmoid函数--logistic函数","p":1116},{"i":1120,"t":"2. 线性整流单元（Rectified Linear Unit, ReLU）","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#2-线性整流单元rectified-linear-unit-relu","p":1116},{"i":1122,"t":"二、损失函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#二损失函数","p":1116},{"i":1123,"t":"1. Mean Squared Error 均方误差","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#1-mean-squared-error-均方误差","p":1116},{"i":1125,"t":"2. Cross Entropy Loss 交叉熵损失","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#2-cross-entropy-loss-交叉熵损失","p":1116},{"i":1128,"t":"What is k-fold cross-validation?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#what-is-k-fold-cross-validation","p":1127},{"i":1130,"t":"How does k-fold cross-validation work?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#how-does-k-fold-cross-validation-work","p":1127},{"i":1132,"t":"Summary","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#summary","p":1127},{"i":1135,"t":"一、什么是感知机","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#一什么是感知机","p":1134},{"i":1137,"t":"二、详细原理","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#二详细原理","p":1134},{"i":1139,"t":"三、总结","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#三总结","p":1134},{"i":1142,"t":"一、1x1卷积","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#一1x1卷积","p":1141},{"i":1144,"t":"二、二维卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#二二维卷积层","p":1141},{"i":1147,"t":"背景","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#背景","p":1146},{"i":1149,"t":"代码实现","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#代码实现","p":1146},{"i":1151,"t":"问题","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#问题","p":1146},{"i":1154,"t":"一、卷积的诞生&核心特征","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#一卷积的诞生核心特征","p":1153},{"i":1156,"t":"二、重新考察全连接层","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#二重新考察全连接层","p":1153},{"i":1158,"t":"三、总结","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#三总结","p":1153},{"i":1161,"t":"一、卷积对像素位置信息是敏感的","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#一卷积对像素位置信息是敏感的","p":1160},{"i":1163,"t":"二、池化层的作用","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#二池化层的作用","p":1160},{"i":1165,"t":"三、池化的实现","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#三池化的实现","p":1160},{"i":1168,"t":"一、什么是Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#一什么是logistic-regression","p":1167},{"i":1170,"t":"二、逻辑回归（Logistic Regression）和线性回归（Linear Regression）","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#二逻辑回归logistic-regression和线性回归linear-regression","p":1167},{"i":1172,"t":"三、逻辑回归到底是回归任务（Regression）还是分类任务（Classification）？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#三逻辑回归到底是回归任务regression还是分类任务classification","p":1167},{"i":1174,"t":"四、为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#四为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数","p":1167},{"i":1178,"t":"摘要与主要贡献","u":"/en/docs/Deep-Learning/论文笔记/High-Resolution Image Synthesis with Latent Diffusion Models","h":"#摘要与主要贡献","p":1176},{"i":1180,"t":"一、常用函数部分","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","h":"#一常用函数部分","p":1179},{"i":1184,"t":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#摘要","p":1182},{"i":1186,"t":"相关工作","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#相关工作","p":1182},{"i":1187,"t":"Generative Model Adaption","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#generative-model-adaption","p":1182},{"i":1189,"t":"Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#prompt-learning","p":1182},{"i":1191,"t":"主要方法","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#主要方法","p":1182},{"i":1192,"t":"概述","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#概述","p":1182},{"i":1194,"t":"Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#image-specific-prompt-learning","p":1182},{"i":1197,"t":"数学原理（Mathematical Preliminary）","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#数学原理mathematical-preliminary","p":1195},{"i":1198,"t":"先验概率与后验概率","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#先验概率与后验概率","p":1195},{"i":1200,"t":"条件概率与高斯分布的KL散度","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#条件概率与高斯分布的kl散度","p":1195},{"i":1202,"t":"马尔科夫链条件概率形式","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#马尔科夫链条件概率形式","p":1195},{"i":1204,"t":"参数重整化技巧","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#参数重整化技巧","p":1195},{"i":1208,"t":"Overview","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#overview","p":1206},{"i":1210,"t":"Dataset","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#dataset","p":1206},{"i":1212,"t":"Related","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#related","p":1206},{"i":1216,"t":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#整体结构","p":1214},{"i":1218,"t":"Encoder","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#encoder","p":1214},{"i":1219,"t":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#整体结构-1","p":1214},{"i":1221,"t":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#位置编码positional-encoding","p":1214},{"i":1223,"t":"具体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#具体结构","p":1214},{"i":1225,"t":"Decoder","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#decoder","p":1214},{"i":1227,"t":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#autoregressive-decoderat","p":1214},{"i":1229,"t":"Non-Autoregressive Decoder（NAT）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#non-autoregressive-decodernat","p":1214},{"i":1230,"t":"训练（Training）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#训练training","p":1214},{"i":1231,"t":"损失函数","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#损失函数","p":1214},{"i":1233,"t":"Teacher Forcing","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#teacher-forcing","p":1214},{"i":1235,"t":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1214},{"i":1239,"t":"依赖","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#依赖","p":1237},{"i":1240,"t":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1237},{"i":1242,"t":"安装依赖","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#安装依赖","p":1237},{"i":1244,"t":"下载预训练生成器","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1237},{"i":1246,"t":"概述","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#概述","p":1237},{"i":1247,"t":"技术细节","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#技术细节","p":1237},{"i":1248,"t":"prompts 的初始化","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1237},{"i":1250,"t":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1237},{"i":1252,"t":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1237},{"i":1254,"t":"训练 stage 1","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#训练-stage-1","p":1237},{"i":1256,"t":"训练 stage 2","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#训练-stage-2","p":1237},{"i":1258,"t":"定量分析指标","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#定量分析指标","p":1237},{"i":1260,"t":"新增功能","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#新增功能","p":1237},{"i":1261,"t":"自定义图像风格迁移","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#自定义图像风格迁移","p":1237},{"i":1263,"t":"问题提出与改进","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#问题提出与改进","p":1237},{"i":1264,"t":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1237},{"i":1266,"t":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1237},{"i":1268,"t":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1237},{"i":1272,"t":"安装Visdom","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#安装visdom","p":1270},{"i":1274,"t":"Visdom的使用","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#visdom的使用","p":1270},{"i":1275,"t":"Visdom的启动","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#visdom的启动","p":1270},{"i":1277,"t":"单窗口单曲线的可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#单窗口单曲线的可视化","p":1270},{"i":1279,"t":"单窗口多曲线的可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#单窗口多曲线的可视化","p":1270},{"i":1283,"t":"支持我！","u":"/en/docs/Deep-Learning/intro","h":"#支持我","p":1281},{"i":1287,"t":"支持我！","u":"/en/docs/Others/intro","h":"#支持我","p":1285},{"i":1293,"t":"Python的广播机制","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#python的广播机制","p":1291},{"i":1295,"t":"点积（dot product）与矩阵乘法（matmul product）","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#点积dot-product与矩阵乘法matmul-product","p":1291},{"i":1297,"t":"zip函数与解压操作*","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#zip函数与解压操作","p":1291},{"i":1299,"t":"对batch_first参数的理解","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#对batch_first参数的理解","p":1291},{"i":1302,"t":"一、latte-dock","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#一latte-dock","p":1301},{"i":1304,"t":"二、Kde Plasmoids","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#二kde-plasmoids","p":1301},{"i":1308,"t":"一、编写脚本","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#一编写脚本","p":1306},{"i":1310,"t":"二、关联终端配置文件","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#二关联终端配置文件","p":1306},{"i":1312,"t":"三、使用","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#三使用","p":1306},{"i":1316,"t":"思路","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#思路","p":1314},{"i":1318,"t":"参考代码","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#参考代码","p":1314},{"i":1320,"t":"扩展","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#扩展","p":1314},{"i":1323,"t":"一、发生原因","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#一发生原因","p":1322},{"i":1325,"t":"二、解决方案","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#二解决方案","p":1322},{"i":1328,"t":"面试常考问题","u":"/en/docs/Tui-Mian/数学/概率论","h":"#面试常考问题","p":1327},{"i":1331,"t":"树","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#树","p":1330},{"i":1333,"t":"图","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#图","p":1330},{"i":1336,"t":"一、线性代数","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#一线性代数","p":1335},{"i":1338,"t":"二、概率论","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#二概率论","p":1335},{"i":1341,"t":"一、U-2-Net","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一u-2-net","p":1340},{"i":1342,"t":"（一）SOD任务","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一sod任务","p":1340},{"i":1344,"t":"（二）网络结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二网络结构","p":1340},{"i":1346,"t":"（三）损失函数","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三损失函数","p":1340},{"i":1348,"t":"（四）深度可分离卷积","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四深度可分离卷积","p":1340},{"i":1350,"t":"二、YOLO","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolo","p":1340},{"i":1351,"t":"（一）mAP","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一map","p":1340},{"i":1353,"t":"（二）YOLOv1","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov1","p":1340},{"i":1355,"t":"（二）YOLOv2","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov2","p":1340},{"i":1357,"t":"（三）YOLOv5","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三yolov5","p":1340},{"i":1359,"t":"三、CBAM","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三cbam","p":1340},{"i":1361,"t":"（一）总体结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一总体结构","p":1340},{"i":1363,"t":"（二）通道注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二通道注意力","p":1340},{"i":1365,"t":"（三）空间注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三空间注意力","p":1340},{"i":1367,"t":"（四）其他注意事项","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四其他注意事项","p":1340},{"i":1369,"t":"四、Focal Loss","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四focal-loss","p":1340},{"i":1371,"t":"五、SENet","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#五senet","p":1340},{"i":1373,"t":"六、自注意力机制","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#六自注意力机制","p":1340},{"i":1375,"t":"七、自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#七自我介绍","p":1340},{"i":1376,"t":"（一）英文自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一英文自我介绍","p":1340},{"i":1378,"t":"（二）西电广研院自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二西电广研院自我介绍","p":1340},{"i":1380,"t":"（三）电子科技大学自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三电子科技大学自我介绍","p":1340},{"i":1384,"t":"支持我！","u":"/en/docs/Tui-Mian/intro","h":"#支持我","p":1382},{"i":1387,"t":"前言","u":"/en/docs/Tui-Mian/Summary","h":"#前言","p":1386},{"i":1389,"t":"扫盲","u":"/en/docs/Tui-Mian/Summary","h":"#扫盲","p":1386},{"i":1391,"t":"个人情况","u":"/en/docs/Tui-Mian/Summary","h":"#个人情况","p":1386},{"i":1393,"t":"前期准备","u":"/en/docs/Tui-Mian/Summary","h":"#前期准备","p":1386},{"i":1394,"t":"夏令营","u":"/en/docs/Tui-Mian/Summary","h":"#夏令营","p":1386},{"i":1395,"t":"预推免","u":"/en/docs/Tui-Mian/Summary","h":"#预推免","p":1386},{"i":1396,"t":"后序","u":"/en/docs/Tui-Mian/Summary","h":"#后序","p":1386},{"i":1399,"t":"一、基础知识","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#一基础知识","p":1397},{"i":1401,"t":"二、面试常考问题","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#二面试常考问题","p":1397}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/704",[0,0.499]],["t/706",[0,0.499]],["t/710",[0,0.499]],["t/712",[0,0.499]],["t/716",[0,0.499]],["t/718",[0,0.499]],["t/721",[0,0.499]],["t/723",[1,6.284]],["t/727",[2,5.692]],["t/729",[3,5.692]],["t/731",[4,5.692]],["t/733",[5,6.284]],["t/735",[6,6.284]],["t/737",[7,5.692]],["t/739",[8,6.284]],["t/741",[9,6.284]],["t/743",[10,6.284]],["t/745",[11,6.284]],["t/748",[0,0.499]],["t/749",[0,0.379,12,4.779]],["t/751",[0,0.379,13,4.779]],["t/753",[0,0.379,14,4.779]],["t/755",[0,0.499]],["t/756",[0,0.379,15,4.779]],["t/758",[0,0.379,16,4.779]],["t/760",[0,0.379,17,4.779]],["t/762",[0,0.379,18,4.779]],["t/764",[0,0.499]],["t/765",[0,0.379,19,4.779]],["t/766",[20,4.779,21,4.779]],["t/768",[22,4.779,23,4.779]],["t/769",[24,4.779,25,4.779]],["t/770",[0,0.499]],["t/772",[26,3.063,27,4.779]],["t/773",[28,2.91,29,4.779]],["t/775",[30,3.81,31,4.779]],["t/777",[32,3.81,33,4.329]],["t/778",[33,4.329,34,4.032]],["t/780",[0,0.379,35,4.329]],["t/782",[36,4.329,37,4.779]],["t/784",[0,0.499]],["t/785",[0,0.379,38,4.779]],["t/787",[0,0.379,39,4.779]],["t/789",[0,0.379,40,4.779]],["t/790",[0,0.306,32,3.074,41,3.856]],["t/792",[0,0.379,42,4.779]],["t/794",[0,0.499]],["t/795",[0,0.379,26,3.063]],["t/797",[0,0.379,28,2.91]],["t/799",[0,0.379,30,3.81]],["t/801",[0,0.379,32,3.81]],["t/803",[0,0.379,34,4.032]],["t/807",[0,0.499]],["t/811",[0,0.379,43,4.779]],["t/813",[0,0.499]],["t/814",[44,5.302]],["t/816",[44,4.032,45,4.329]],["t/818",[0,0.499]],["t/820",[0,0.499]],["t/822",[0,0.499]],["t/823",[0,0.499]],["t/825",[0,0.499]],["t/827",[0,0.499]],["t/829",[46,6.284]],["t/830",[0,0.499]],["t/832",[0,0.499]],["t/834",[0,0.499]],["t/836",[45,5.692]],["t/838",[0,0.499]],["t/840",[47,6.284]],["t/842",[2,5.692]],["t/844",[48,6.284]],["t/846",[4,5.692]],["t/848",[3,5.692]],["t/850",[49,5.692]],["t/852",[7,5.692]],["t/854",[50,6.284]],["t/856",[51,6.284]],["t/858",[52,6.284]],["t/860",[53,6.284]],["t/862",[0,0.499]],["t/863",[0,0.499]],["t/865",[0,0.379,54,4.779]],["t/867",[0,0.379,55,4.779]],["t/869",[0,0.499]],["t/870",[0,0.499]],["t/872",[56,4.329,57,4.779]],["t/874",[56,5.278,58,3.856]],["t/878",[26,3.063,44,4.032]],["t/880",[28,2.91,59,4.779]],["t/883",[0,0.499]],["t/884",[26,3.063,60,4.779]],["t/886",[28,2.91,61,4.779]],["t/888",[0,0.379,30,3.81]],["t/890",[0,0.499]],["t/892",[0,0.379,26,3.063]],["t/894",[0,0.379,28,2.91]],["t/898",[0,0.379,28,2.91]],["t/899",[0,0.499]],["t/901",[0,0.499]],["t/903",[0,0.499]],["t/905",[0,0.499]],["t/906",[0,0.379,30,3.81]],["t/907",[0,0.499]],["t/909",[0,0.379,32,3.81]],["t/910",[0,0.499]],["t/912",[0,0.499]],["t/914",[0,0.499]],["t/916",[0,0.379,34,4.032]],["t/917",[0,0.499]],["t/919",[0,0.499]],["t/921",[0,0.499]],["t/923",[0,0.379,35,4.329]],["t/925",[0,0.499]],["t/927",[0,0.499]],["t/929",[0,0.499]],["t/931",[0,0.379,36,4.329]],["t/932",[0,0.499]],["t/934",[0,0.499]],["t/935",[0,0.379,62,4.779]],["t/936",[0,0.499]],["t/938",[0,0.499]],["t/940",[0,0.379,63,4.779]],["t/941",[0,0.499]],["t/943",[0,0.499]],["t/945",[0,0.499]],["t/947",[0,0.499]],["t/951",[0,0.499]],["t/954",[0,0.499]],["t/956",[64,6.284]],["t/958",[65,6.284]],["t/960",[0,0.499]],["t/962",[0,0.499]],["t/964",[0,0.499]],["t/966",[66,6.284]],["t/968",[0,0.499]],["t/970",[0,0.499]],["t/972",[67,6.284]],["t/974",[68,3.231,69,3.231,70,2.576,71,2.726]],["t/976",[72,6.284]],["t/978",[71,4.032,73,4.779]],["t/982",[0,0.499]],["t/984",[74,4.778]],["t/985",[0,0.499]],["t/987",[74,3.634,75,4.329]],["t/989",[0,0.499]],["t/991",[76,5.692]],["t/993",[77,3.81,78,4.329]],["t/995",[77,3.074,79,3.492,80,3.492]],["t/996",[81,5.302]],["t/997",[0,0.499]],["t/999",[82,3.81,83,4.329]],["t/1001",[82,1.946,84,2.211,85,2.059,86,2.059,87,1.61,88,1.716]],["t/1005",[0,0.499]],["t/1007",[0,0.499]],["t/1009",[0,0.499]],["t/1013",[0,0.499]],["t/1014",[0,0.462,89,3.492]],["t/1016",[0,0.499]],["t/1018",[0,0.499]],["t/1020",[0,0.499]],["t/1021",[0,0.499]],["t/1022",[0,0.379,90,3.152]],["t/1024",[0,0.358,90,1.834,91,2.519,92,2.519]],["t/1026",[0,0.379,93,4.329]],["t/1028",[0,0.306,26,2.472,94,3.074]],["t/1030",[0,0.306,28,2.347,94,3.074]],["t/1032",[0,0.499]],["t/1034",[0,0.499]],["t/1035",[0,0.499]],["t/1037",[0,0.499]],["t/1038",[0,0.462,90,2.543]],["t/1040",[0,0.379,95,4.329]],["t/1044",[96,6.284]],["t/1045",[0,0.499]],["t/1047",[0,0.499]],["t/1049",[87,3.152,88,3.36]],["t/1050",[87,3.152,88,3.36]],["t/1052",[87,3.152,88,3.36]],["t/1054",[87,3.152,88,3.36]],["t/1056",[85,2.726,86,2.726,87,2.131,88,2.272]],["t/1058",[87,3.152,97,4.779]],["t/1062",[0,0.499]],["t/1063",[0,0.499]],["t/1065",[0,0.499]],["t/1067",[0,0.499]],["t/1069",[0,0.499]],["t/1071",[70,5.011]],["t/1073",[98,6.284]],["t/1075",[0,0.499]],["t/1079",[0,0.499]],["t/1081",[74,2.457,99,3.231,100,3.231,101,2.927]],["t/1083",[0,0.499]],["t/1085",[87,2.543,102,3.856,103,3.856]],["t/1087",[104,4.779,105,4.779]],["t/1089",[106,4.779,107,4.329]],["t/1091",[70,2.217,81,2.346,101,2.519,108,2.781,109,2.781]],["t/1095",[0,0.499]],["t/1097",[110,6.284]],["t/1099",[111,6.284]],["t/1103",[0,0.499]],["t/1105",[26,2.472,112,3.856,113,3.492]],["t/1107",[28,2.347,113,3.492,114,3.856]],["t/1110",[0,0.499]],["t/1112",[0,0.499]],["t/1114",[115,6.284]],["t/1117",[0,0.499]],["t/1118",[0,0.256,26,2.071,116,3.231,117,2.726]],["t/1120",[28,1.693,118,2.781,119,2.781,120,2.781,121,2.781]],["t/1122",[0,0.499]],["t/1123",[0,0.221,26,1.783,122,2.781,123,2.781,124,2.781]],["t/1125",[0,0.221,28,1.693,125,2.346,126,2.781,127,2.519]],["t/1128",[125,2.726,128,2.927,129,2.927,130,2.927]],["t/1130",[107,2.519,125,2.346,128,2.519,129,2.519,130,2.519]],["t/1132",[131,6.284]],["t/1135",[0,0.499]],["t/1137",[0,0.499]],["t/1139",[0,0.499]],["t/1142",[132,6.284]],["t/1144",[0,0.499]],["t/1147",[0,0.499]],["t/1149",[0,0.499]],["t/1151",[0,0.499]],["t/1154",[0,0.499]],["t/1156",[0,0.499]],["t/1158",[0,0.499]],["t/1161",[0,0.499]],["t/1163",[0,0.499]],["t/1165",[0,0.499]],["t/1168",[117,4.032,133,4.329]],["t/1170",[117,3.253,133,3.492,134,3.856]],["t/1172",[135,6.284]],["t/1174",[0,0.499]],["t/1178",[0,0.499]],["t/1180",[0,0.499]],["t/1184",[0,0.499]],["t/1186",[0,0.499]],["t/1187",[70,3.074,71,3.253,136,3.856]],["t/1189",[90,3.152,137,4.329]],["t/1191",[0,0.499]],["t/1192",[0,0.499]],["t/1194",[90,2.131,137,2.927,138,3.231,139,3.231]],["t/1197",[140,4.779,141,4.779]],["t/1198",[0,0.499]],["t/1200",[142,6.284]],["t/1202",[0,0.499]],["t/1204",[0,0.499]],["t/1208",[143,6.284]],["t/1210",[144,6.284]],["t/1212",[145,6.284]],["t/1216",[0,0.499]],["t/1218",[74,4.778]],["t/1219",[0,0.499]],["t/1221",[74,3.634,75,4.329]],["t/1223",[0,0.499]],["t/1225",[76,5.692]],["t/1227",[77,3.81,78,4.329]],["t/1229",[77,3.074,79,3.492,80,3.492]],["t/1230",[81,5.302]],["t/1231",[0,0.499]],["t/1233",[82,3.81,83,4.329]],["t/1235",[82,1.946,84,2.211,85,2.059,86,2.059,87,1.61,88,1.716]],["t/1239",[0,0.499]],["t/1240",[0,0.462,89,3.492]],["t/1242",[0,0.499]],["t/1244",[0,0.499]],["t/1246",[0,0.499]],["t/1247",[0,0.499]],["t/1248",[0,0.379,90,3.152]],["t/1250",[0,0.358,90,1.834,91,2.519,92,2.519]],["t/1252",[0,0.379,93,4.329]],["t/1254",[0,0.306,26,2.472,94,3.074]],["t/1256",[0,0.306,28,2.347,94,3.074]],["t/1258",[0,0.499]],["t/1260",[0,0.499]],["t/1261",[0,0.499]],["t/1263",[0,0.499]],["t/1264",[0,0.379,95,4.329]],["t/1266",[0,0.462,90,2.543]],["t/1268",[0,0.451,90,2.974]],["t/1272",[146,5.302]],["t/1274",[146,5.302]],["t/1275",[146,5.302]],["t/1277",[0,0.499]],["t/1279",[0,0.499]],["t/1283",[0,0.499]],["t/1287",[0,0.499]],["t/1293",[147,6.284]],["t/1295",[148,3.856,149,3.856,150,3.856]],["t/1297",[151,6.284]],["t/1299",[152,6.284]],["t/1302",[153,4.779,154,4.779]],["t/1304",[155,4.779,156,4.779]],["t/1308",[0,0.499]],["t/1310",[0,0.499]],["t/1312",[0,0.499]],["t/1316",[0,0.499]],["t/1318",[0,0.499]],["t/1320",[0,0.499]],["t/1323",[0,0.499]],["t/1325",[0,0.499]],["t/1328",[0,0.499]],["t/1331",[0,0.499]],["t/1333",[0,0.499]],["t/1336",[0,0.499]],["t/1338",[0,0.499]],["t/1341",[28,2.347,157,3.856,158,3.856]],["t/1342",[159,6.284]],["t/1344",[0,0.499]],["t/1346",[0,0.499]],["t/1348",[0,0.499]],["t/1350",[160,6.284]],["t/1351",[49,5.692]],["t/1353",[161,6.284]],["t/1355",[162,6.284]],["t/1357",[163,6.284]],["t/1359",[164,6.284]],["t/1361",[0,0.499]],["t/1363",[0,0.499]],["t/1365",[0,0.499]],["t/1367",[0,0.499]],["t/1369",[127,4.329,165,4.779]],["t/1371",[166,6.284]],["t/1373",[0,0.499]],["t/1375",[0,0.499]],["t/1376",[0,0.499]],["t/1378",[0,0.499]],["t/1380",[0,0.499]],["t/1384",[0,0.499]],["t/1387",[0,0.499]],["t/1389",[0,0.499]],["t/1391",[0,0.499]],["t/1393",[0,0.499]],["t/1394",[0,0.499]],["t/1395",[0,0.499]],["t/1396",[0,0.499]],["t/1399",[0,0.499]],["t/1401",[0,0.499]]],"invertedIndex":[["",{"_index":0,"t":{"704":{"position":[[0,4]]},"706":{"position":[[0,2]]},"710":{"position":[[0,4]]},"712":{"position":[[0,2]]},"716":{"position":[[0,4]]},"718":{"position":[[0,2]]},"721":{"position":[[0,4]]},"748":{"position":[[0,6]]},"749":{"position":[[4,9]]},"751":{"position":[[4,5]]},"753":{"position":[[4,4]]},"755":{"position":[[0,9]]},"756":{"position":[[4,2]]},"758":{"position":[[4,3]]},"760":{"position":[[4,6]]},"762":{"position":[[4,7]]},"764":{"position":[[0,8]]},"765":{"position":[[4,10]]},"770":{"position":[[0,14]]},"780":{"position":[[3,5]]},"784":{"position":[[0,14]]},"785":{"position":[[4,2]]},"787":{"position":[[4,2]]},"789":{"position":[[4,4]]},"790":{"position":[[4,2]]},"792":{"position":[[4,4]]},"794":{"position":[[0,4]]},"795":{"position":[[2,9]]},"797":{"position":[[2,9]]},"799":{"position":[[2,4]]},"801":{"position":[[2,4]]},"803":{"position":[[2,3]]},"807":{"position":[[0,4]]},"811":{"position":[[7,3]]},"813":{"position":[[0,3]]},"818":{"position":[[0,3]]},"820":{"position":[[0,5]]},"822":{"position":[[0,3]]},"823":{"position":[[0,2]]},"825":{"position":[[0,3]]},"827":{"position":[[0,5]]},"830":{"position":[[0,2]]},"832":{"position":[[0,14]]},"834":{"position":[[0,14]]},"838":{"position":[[0,2]]},"862":{"position":[[0,3]]},"863":{"position":[[0,10]]},"865":{"position":[[0,5]]},"867":{"position":[[15,3]]},"869":{"position":[[0,3]]},"870":{"position":[[0,3]]},"883":{"position":[[0,10]]},"888":{"position":[[3,7]]},"890":{"position":[[0,7]]},"892":{"position":[[3,2]]},"894":{"position":[[3,2]]},"898":{"position":[[4,8]]},"899":{"position":[[0,8]]},"901":{"position":[[0,4]]},"903":{"position":[[0,6]]},"905":{"position":[[0,5]]},"906":{"position":[[4,4]]},"907":{"position":[[0,5]]},"909":{"position":[[4,9]]},"910":{"position":[[0,3]]},"912":{"position":[[0,4]]},"914":{"position":[[0,5]]},"916":{"position":[[4,6]]},"917":{"position":[[0,6]]},"919":{"position":[[0,7]]},"921":{"position":[[0,6]]},"923":{"position":[[4,6]]},"925":{"position":[[0,4]]},"927":{"position":[[0,4]]},"929":{"position":[[0,7]]},"931":{"position":[[4,6]]},"932":{"position":[[0,8]]},"934":{"position":[[0,8]]},"935":{"position":[[4,4]]},"936":{"position":[[0,6]]},"938":{"position":[[0,6]]},"940":{"position":[[5,4]]},"941":{"position":[[0,5]]},"943":{"position":[[0,9]]},"945":{"position":[[0,6]]},"947":{"position":[[0,9]]},"951":{"position":[[0,4]]},"954":{"position":[[0,11]]},"960":{"position":[[0,12]]},"962":{"position":[[0,9]]},"964":{"position":[[0,6]]},"968":{"position":[[0,6]]},"970":{"position":[[0,10]]},"982":{"position":[[0,4]]},"985":{"position":[[0,4]]},"989":{"position":[[0,4]]},"997":{"position":[[0,4]]},"1005":{"position":[[0,4]]},"1007":{"position":[[0,4]]},"1009":{"position":[[0,4]]},"1013":{"position":[[0,2]]},"1014":{"position":[[0,2],[12,4]]},"1016":{"position":[[0,4]]},"1018":{"position":[[0,8]]},"1020":{"position":[[0,2]]},"1021":{"position":[[0,4]]},"1022":{"position":[[8,4]]},"1024":{"position":[[8,1],[19,1]]},"1026":{"position":[[22,5]]},"1028":{"position":[[0,2]]},"1030":{"position":[[0,2]]},"1032":{"position":[[0,6]]},"1034":{"position":[[0,4]]},"1035":{"position":[[0,9]]},"1037":{"position":[[0,7]]},"1038":{"position":[[0,6],[15,7]]},"1040":{"position":[[7,5]]},"1045":{"position":[[0,9]]},"1047":{"position":[[0,11]]},"1062":{"position":[[0,2]]},"1063":{"position":[[0,9]]},"1065":{"position":[[0,8]]},"1067":{"position":[[0,4]]},"1069":{"position":[[0,7]]},"1075":{"position":[[0,4]]},"1079":{"position":[[0,2]]},"1083":{"position":[[0,2]]},"1095":{"position":[[0,8]]},"1103":{"position":[[0,4]]},"1110":{"position":[[0,2]]},"1112":{"position":[[0,7]]},"1117":{"position":[[0,6]]},"1118":{"position":[[13,1]]},"1122":{"position":[[0,6]]},"1123":{"position":[[22,4]]},"1125":{"position":[[22,5]]},"1135":{"position":[[0,8]]},"1137":{"position":[[0,6]]},"1139":{"position":[[0,4]]},"1144":{"position":[[0,7]]},"1147":{"position":[[0,2]]},"1149":{"position":[[0,4]]},"1151":{"position":[[0,2]]},"1154":{"position":[[0,12]]},"1156":{"position":[[0,10]]},"1158":{"position":[[0,4]]},"1161":{"position":[[0,15]]},"1163":{"position":[[0,8]]},"1165":{"position":[[0,7]]},"1174":{"position":[[0,31]]},"1178":{"position":[[0,7]]},"1180":{"position":[[0,8]]},"1184":{"position":[[0,2]]},"1186":{"position":[[0,4]]},"1191":{"position":[[0,4]]},"1192":{"position":[[0,2]]},"1198":{"position":[[0,9]]},"1202":{"position":[[0,11]]},"1204":{"position":[[0,7]]},"1216":{"position":[[0,4]]},"1219":{"position":[[0,4]]},"1223":{"position":[[0,4]]},"1231":{"position":[[0,4]]},"1239":{"position":[[0,2]]},"1240":{"position":[[0,2],[12,4]]},"1242":{"position":[[0,4]]},"1244":{"position":[[0,8]]},"1246":{"position":[[0,2]]},"1247":{"position":[[0,4]]},"1248":{"position":[[8,4]]},"1250":{"position":[[8,1],[19,1]]},"1252":{"position":[[22,5]]},"1254":{"position":[[0,2]]},"1256":{"position":[[0,2]]},"1258":{"position":[[0,6]]},"1260":{"position":[[0,4]]},"1261":{"position":[[0,9]]},"1263":{"position":[[0,7]]},"1264":{"position":[[10,5]]},"1266":{"position":[[0,9],[18,7]]},"1268":{"position":[[0,8],[17,8],[34,4]]},"1277":{"position":[[0,10]]},"1279":{"position":[[0,10]]},"1283":{"position":[[0,4]]},"1287":{"position":[[0,4]]},"1308":{"position":[[0,6]]},"1310":{"position":[[0,10]]},"1312":{"position":[[0,4]]},"1316":{"position":[[0,2]]},"1318":{"position":[[0,4]]},"1320":{"position":[[0,2]]},"1323":{"position":[[0,6]]},"1325":{"position":[[0,6]]},"1328":{"position":[[0,6]]},"1331":{"position":[[0,1]]},"1333":{"position":[[0,1]]},"1336":{"position":[[0,6]]},"1338":{"position":[[0,5]]},"1344":{"position":[[0,7]]},"1346":{"position":[[0,7]]},"1348":{"position":[[0,10]]},"1361":{"position":[[0,7]]},"1363":{"position":[[0,8]]},"1365":{"position":[[0,8]]},"1367":{"position":[[0,9]]},"1373":{"position":[[0,8]]},"1375":{"position":[[0,6]]},"1376":{"position":[[0,9]]},"1378":{"position":[[0,12]]},"1380":{"position":[[0,13]]},"1384":{"position":[[0,4]]},"1387":{"position":[[0,2]]},"1389":{"position":[[0,2]]},"1391":{"position":[[0,4]]},"1393":{"position":[[0,4]]},"1394":{"position":[[0,3]]},"1395":{"position":[[0,3]]},"1396":{"position":[[0,2]]},"1399":{"position":[[0,6]]},"1401":{"position":[[0,8]]}}}],["1",{"_index":26,"t":{"772":{"position":[[0,2]]},"795":{"position":[[0,1]]},"878":{"position":[[0,2]]},"884":{"position":[[0,2]]},"892":{"position":[[0,2]]},"1028":{"position":[[9,1]]},"1105":{"position":[[0,8]]},"1118":{"position":[[0,2]]},"1123":{"position":[[0,2]]},"1254":{"position":[[9,1]]}}}],["1.1",{"_index":12,"t":{"749":{"position":[[0,3]]}}}],["1.2",{"_index":13,"t":{"751":{"position":[[0,3]]}}}],["1.3",{"_index":14,"t":{"753":{"position":[[0,3]]}}}],["11",{"_index":63,"t":{"940":{"position":[[0,4]]}}}],["1x1",{"_index":132,"t":{"1142":{"position":[[0,7]]}}}],["2",{"_index":28,"t":{"773":{"position":[[0,2]]},"797":{"position":[[0,1]]},"880":{"position":[[0,2]]},"886":{"position":[[0,2]]},"894":{"position":[[0,2]]},"898":{"position":[[0,3]]},"1030":{"position":[[9,1]]},"1107":{"position":[[0,7]]},"1120":{"position":[[0,2]]},"1125":{"position":[[0,2]]},"1256":{"position":[[9,1]]},"1341":{"position":[[4,1]]}}}],["2.1",{"_index":15,"t":{"756":{"position":[[0,3]]}}}],["2.2",{"_index":16,"t":{"758":{"position":[[0,3]]}}}],["2.3",{"_index":17,"t":{"760":{"position":[[0,3]]}}}],["2.4",{"_index":18,"t":{"762":{"position":[[0,3]]}}}],["2019",{"_index":54,"t":{"865":{"position":[[6,10]]}}}],["3",{"_index":30,"t":{"775":{"position":[[0,2]]},"799":{"position":[[0,1]]},"888":{"position":[[0,2]]},"906":{"position":[[0,3]]}}}],["3.1",{"_index":19,"t":{"765":{"position":[[0,3]]}}}],["3.2",{"_index":20,"t":{"766":{"position":[[0,3]]}}}],["3.3",{"_index":22,"t":{"768":{"position":[[0,3]]}}}],["3.4",{"_index":24,"t":{"769":{"position":[[0,3]]}}}],["4",{"_index":32,"t":{"777":{"position":[[0,2]]},"790":{"position":[[7,10]]},"801":{"position":[[0,1]]},"909":{"position":[[0,3]]}}}],["5",{"_index":34,"t":{"778":{"position":[[0,2]]},"803":{"position":[[0,1]]},"916":{"position":[[0,3]]}}}],["5.1",{"_index":38,"t":{"785":{"position":[[0,3]]}}}],["5.2",{"_index":39,"t":{"787":{"position":[[0,3]]}}}],["5.3",{"_index":40,"t":{"789":{"position":[[0,3]]}}}],["5.4",{"_index":41,"t":{"790":{"position":[[0,3]]}}}],["5.5",{"_index":42,"t":{"792":{"position":[[0,3]]}}}],["6",{"_index":35,"t":{"780":{"position":[[0,2]]},"923":{"position":[[0,3]]}}}],["7",{"_index":36,"t":{"782":{"position":[[0,2]]},"931":{"position":[[0,3]]}}}],["8",{"_index":62,"t":{"935":{"position":[[0,3]]}}}],["adapt",{"_index":136,"t":{"1187":{"position":[[17,8]]}}}],["algorithm",{"_index":47,"t":{"840":{"position":[[0,9]]}}}],["anaconda",{"_index":89,"t":{"1014":{"position":[[3,8]]},"1240":{"position":[[3,8]]}}}],["ar",{"_index":64,"t":{"956":{"position":[[0,9]]}}}],["attent",{"_index":88,"t":{"1001":{"position":[[39,9]]},"1049":{"position":[[5,12]]},"1050":{"position":[[8,9]]},"1052":{"position":[[5,14]]},"1054":{"position":[[5,12]]},"1056":{"position":[[16,9]]},"1235":{"position":[[39,9]]}}}],["attention与cnn",{"_index":97,"t":{"1058":{"position":[[5,16]]}}}],["autoregress",{"_index":77,"t":{"993":{"position":[[0,14]]},"995":{"position":[[4,14]]},"1227":{"position":[[0,14]]},"1229":{"position":[[4,14]]}}}],["base",{"_index":69,"t":{"974":{"position":[[14,5]]}}}],["batch_first",{"_index":152,"t":{"1299":{"position":[[0,17]]}}}],["benchmark",{"_index":66,"t":{"966":{"position":[[0,9]]}}}],["bert",{"_index":106,"t":{"1089":{"position":[[9,4]]}}}],["bert（bidirect",{"_index":99,"t":{"1081":{"position":[[0,18]]}}}],["biset",{"_index":11,"t":{"745":{"position":[[0,5]]}}}],["bitset",{"_index":53,"t":{"860":{"position":[[0,6]]}}}],["boch",{"_index":61,"t":{"886":{"position":[[3,6]]}}}],["c",{"_index":44,"t":{"814":{"position":[[0,4]]},"816":{"position":[[0,3]]},"878":{"position":[[3,7]]}}}],["c++new",{"_index":46,"t":{"829":{"position":[[0,9]]}}}],["cbam",{"_index":164,"t":{"1359":{"position":[[0,6]]}}}],["cnn",{"_index":96,"t":{"1044":{"position":[[0,9]]}}}],["compute_text_featur",{"_index":93,"t":{"1026":{"position":[[0,21]]},"1252":{"position":[[0,21]]}}}],["convolut",{"_index":113,"t":{"1105":{"position":[[19,11]]},"1107":{"position":[[18,11]]}}}],["cross",{"_index":125,"t":{"1125":{"position":[[3,5]]},"1128":{"position":[[15,5]]},"1130":{"position":[[16,5]]}}}],["dataset",{"_index":144,"t":{"1210":{"position":[[0,7]]}}}],["decod",{"_index":76,"t":{"991":{"position":[[0,7]]},"1225":{"position":[[0,7]]}}}],["decoder（at",{"_index":78,"t":{"993":{"position":[[15,11]]},"1227":{"position":[[15,11]]}}}],["decoder（nat",{"_index":80,"t":{"995":{"position":[[19,12]]},"1229":{"position":[[19,12]]}}}],["depthwis",{"_index":112,"t":{"1105":{"position":[[9,9]]}}}],["dequ",{"_index":8,"t":{"739":{"position":[[0,5]]}}}],["diffus",{"_index":73,"t":{"978":{"position":[[0,14]]}}}],["disclaim",{"_index":1,"t":{"723":{"position":[[0,10]]}}}],["discrimin",{"_index":98,"t":{"1073":{"position":[[0,18]]}}}],["dock",{"_index":154,"t":{"1302":{"position":[[8,4]]}}}],["dot",{"_index":148,"t":{"1295":{"position":[[0,6]]}}}],["embed",{"_index":92,"t":{"1024":{"position":[[21,9]]},"1250":{"position":[[21,9]]}}}],["encod",{"_index":74,"t":{"984":{"position":[[0,7]]},"987":{"position":[[16,9]]},"1081":{"position":[[19,7]]},"1218":{"position":[[0,7]]},"1221":{"position":[[16,9]]}}}],["entropi",{"_index":126,"t":{"1125":{"position":[[9,7]]}}}],["error",{"_index":124,"t":{"1123":{"position":[[16,5]]}}}],["fa",{"_index":21,"t":{"766":{"position":[[4,9]]}}}],["fine",{"_index":104,"t":{"1087":{"position":[[0,4]]}}}],["first",{"_index":27,"t":{"772":{"position":[[3,9]]}}}],["flow",{"_index":68,"t":{"974":{"position":[[0,13]]}}}],["focal",{"_index":165,"t":{"1369":{"position":[[0,7]]}}}],["fold",{"_index":129,"t":{"1128":{"position":[[10,4]]},"1130":{"position":[[11,4]]}}}],["follow",{"_index":29,"t":{"773":{"position":[[3,10]]}}}],["forc",{"_index":83,"t":{"999":{"position":[[8,7]]},"1233":{"position":[[8,7]]}}}],["forcing与mask",{"_index":84,"t":{"1001":{"position":[[8,14]]},"1235":{"position":[[8,14]]}}}],["gan",{"_index":72,"t":{"976":{"position":[[0,11]]}}}],["geeko",{"_index":60,"t":{"884":{"position":[[3,7]]}}}],["gener",{"_index":70,"t":{"974":{"position":[[20,10]]},"1071":{"position":[[0,14]]},"1091":{"position":[[5,10]]},"1187":{"position":[[0,10]]}}}],["gpt",{"_index":108,"t":{"1091":{"position":[[0,4]]}}}],["head",{"_index":86,"t":{"1001":{"position":[[29,4]]},"1056":{"position":[[6,4]]},"1235":{"position":[[29,4]]}}}],["imag",{"_index":138,"t":{"1194":{"position":[[0,5]]}}}],["index",{"_index":58,"t":{"874":{"position":[[15,12]]}}}],["index，若数据不在1~n",{"_index":57,"t":{"872":{"position":[[11,22]]}}}],["k",{"_index":128,"t":{"1128":{"position":[[8,1]]},"1130":{"position":[[9,1]]}}}],["kde",{"_index":155,"t":{"1304":{"position":[[0,5]]}}}],["kl",{"_index":142,"t":{"1200":{"position":[[0,14]]}}}],["l1",{"_index":110,"t":{"1097":{"position":[[0,7]]}}}],["l2",{"_index":111,"t":{"1099":{"position":[[0,12]]}}}],["latt",{"_index":153,"t":{"1302":{"position":[[0,7]]}}}],["learn",{"_index":137,"t":{"1189":{"position":[[7,8]]},"1194":{"position":[[22,8]]}}}],["lenet",{"_index":115,"t":{"1114":{"position":[[0,8]]}}}],["linear",{"_index":119,"t":{"1120":{"position":[[20,6]]}}}],["linux的编译系统对c",{"_index":59,"t":{"880":{"position":[[3,22]]}}}],["list",{"_index":48,"t":{"844":{"position":[[0,4]]}}}],["ll(1",{"_index":33,"t":{"777":{"position":[[3,10]]},"778":{"position":[[3,10]]}}}],["ll(1)文法到ll(1",{"_index":37,"t":{"782":{"position":[[3,21]]}}}],["logist",{"_index":117,"t":{"1118":{"position":[[15,10]]},"1168":{"position":[[0,13]]},"1170":{"position":[[0,15]]}}}],["loss",{"_index":127,"t":{"1125":{"position":[[17,4]]},"1369":{"position":[[8,4]]}}}],["map",{"_index":49,"t":{"850":{"position":[[0,3]]},"1351":{"position":[[0,6]]}}}],["map/multimap",{"_index":10,"t":{"743":{"position":[[0,12]]}}}],["mapper",{"_index":95,"t":{"1040":{"position":[[0,6]]},"1264":{"position":[[0,9]]}}}],["mathemat",{"_index":140,"t":{"1197":{"position":[[0,17]]}}}],["mean",{"_index":122,"t":{"1123":{"position":[[3,4]]}}}],["model",{"_index":71,"t":{"974":{"position":[[31,6]]},"978":{"position":[[15,6]]},"1187":{"position":[[11,5]]}}}],["multi",{"_index":85,"t":{"1001":{"position":[[23,5]]},"1056":{"position":[[0,5]]},"1235":{"position":[[23,5]]}}}],["multiset",{"_index":52,"t":{"858":{"position":[[0,8]]}}}],["nar",{"_index":65,"t":{"958":{"position":[[0,11]]}}}],["net",{"_index":158,"t":{"1341":{"position":[[6,3]]}}}],["non",{"_index":79,"t":{"995":{"position":[[0,3]]},"1229":{"position":[[0,3]]}}}],["overview",{"_index":143,"t":{"1208":{"position":[[0,8]]}}}],["pair",{"_index":3,"t":{"729":{"position":[[0,4]]},"848":{"position":[[0,4]]}}}],["plasmoid",{"_index":156,"t":{"1304":{"position":[[6,9]]}}}],["pointwis",{"_index":114,"t":{"1107":{"position":[[8,9]]}}}],["posit",{"_index":75,"t":{"987":{"position":[[0,15]]},"1221":{"position":[[0,15]]}}}],["pre",{"_index":109,"t":{"1091":{"position":[[16,3]]}}}],["preliminari",{"_index":141,"t":{"1197":{"position":[[18,12]]}}}],["pretrain",{"_index":103,"t":{"1085":{"position":[[16,11]]}}}],["priority_queu",{"_index":6,"t":{"735":{"position":[[0,14]]}}}],["product",{"_index":150,"t":{"1295":{"position":[[28,8]]}}}],["product）与矩阵乘法（matmul",{"_index":149,"t":{"1295":{"position":[[7,20]]}}}],["prompt",{"_index":90,"t":{"1022":{"position":[[0,7]]},"1024":{"position":[[0,7]]},"1038":{"position":[[7,7]]},"1189":{"position":[[0,6]]},"1194":{"position":[[15,6]]},"1248":{"position":[[0,7]]},"1250":{"position":[[0,7]]},"1266":{"position":[[10,7]]},"1268":{"position":[[9,7],[26,7]]}}}],["python",{"_index":147,"t":{"1293":{"position":[[0,11]]}}}],["queri",{"_index":5,"t":{"733":{"position":[[0,5]]}}}],["queue",{"_index":50,"t":{"854":{"position":[[0,5]]}}}],["rectifi",{"_index":118,"t":{"1120":{"position":[[3,16]]}}}],["regress",{"_index":133,"t":{"1168":{"position":[[14,10]]},"1170":{"position":[[40,11]]}}}],["regression）和线性回归（linear",{"_index":134,"t":{"1170":{"position":[[16,23]]}}}],["regression）还是分类任务（classif",{"_index":135,"t":{"1172":{"position":[[0,48]]}}}],["relat",{"_index":145,"t":{"1212":{"position":[[0,7]]}}}],["relu",{"_index":121,"t":{"1120":{"position":[[33,5]]}}}],["represent",{"_index":100,"t":{"1081":{"position":[[27,14]]}}}],["re与有穷自动机fa",{"_index":23,"t":{"768":{"position":[[4,18]]}}}],["rm与有穷自动机fa",{"_index":25,"t":{"769":{"position":[[4,19]]}}}],["select",{"_index":31,"t":{"775":{"position":[[3,10]]}}}],["self",{"_index":87,"t":{"1001":{"position":[[34,4]]},"1049":{"position":[[0,4]]},"1050":{"position":[[0,7]]},"1052":{"position":[[0,4]]},"1054":{"position":[[0,4]]},"1056":{"position":[[11,4]]},"1058":{"position":[[0,4]]},"1085":{"position":[[0,4]]},"1235":{"position":[[34,4]]}}}],["senet",{"_index":166,"t":{"1371":{"position":[[0,7]]}}}],["set",{"_index":51,"t":{"856":{"position":[[0,3]]}}}],["set/multiset",{"_index":9,"t":{"741":{"position":[[0,12]]}}}],["sigmoid",{"_index":116,"t":{"1118":{"position":[[3,9]]}}}],["sod",{"_index":159,"t":{"1342":{"position":[[0,8]]}}}],["specif",{"_index":139,"t":{"1194":{"position":[[6,8]]}}}],["squar",{"_index":123,"t":{"1123":{"position":[[8,7]]}}}],["stack",{"_index":7,"t":{"737":{"position":[[0,5]]},"852":{"position":[[0,5]]}}}],["stage",{"_index":94,"t":{"1028":{"position":[[3,5]]},"1030":{"position":[[3,5]]},"1254":{"position":[[3,5]]},"1256":{"position":[[3,5]]}}}],["stl",{"_index":45,"t":{"816":{"position":[[4,3]]},"836":{"position":[[0,5]]}}}],["string",{"_index":4,"t":{"731":{"position":[[0,6]]},"846":{"position":[[0,6]]}}}],["summari",{"_index":131,"t":{"1132":{"position":[[0,7]]}}}],["supervis",{"_index":102,"t":{"1085":{"position":[[5,10]]}}}],["teacher",{"_index":82,"t":{"999":{"position":[[0,7]]},"1001":{"position":[[0,7]]},"1233":{"position":[[0,7]]},"1235":{"position":[[0,7]]}}}],["token",{"_index":91,"t":{"1024":{"position":[[10,8]]},"1250":{"position":[[10,8]]}}}],["train",{"_index":81,"t":{"996":{"position":[[0,12]]},"1091":{"position":[[20,7]]},"1230":{"position":[[0,12]]}}}],["transform",{"_index":101,"t":{"1081":{"position":[[47,13]]},"1091":{"position":[[28,11]]}}}],["tune",{"_index":105,"t":{"1087":{"position":[[5,6]]}}}],["u",{"_index":157,"t":{"1341":{"position":[[0,3]]}}}],["unit",{"_index":120,"t":{"1120":{"position":[[27,5]]}}}],["u到v",{"_index":55,"t":{"867":{"position":[[0,14]]}}}],["vae",{"_index":67,"t":{"972":{"position":[[0,11]]}}}],["val",{"_index":56,"t":{"872":{"position":[[0,7]]},"874":{"position":[[0,7],[28,4]]}}}],["valid",{"_index":130,"t":{"1128":{"position":[[21,11]]},"1130":{"position":[[22,10]]}}}],["vector",{"_index":2,"t":{"727":{"position":[[0,6]]},"842":{"position":[[0,6]]}}}],["visdom",{"_index":146,"t":{"1272":{"position":[[0,8]]},"1274":{"position":[[0,9]]},"1275":{"position":[[0,9]]}}}],["vs2018",{"_index":43,"t":{"811":{"position":[[0,6]]}}}],["work",{"_index":107,"t":{"1089":{"position":[[14,5]]},"1130":{"position":[[33,5]]}}}],["yolo",{"_index":160,"t":{"1350":{"position":[[0,6]]}}}],["yolov1",{"_index":161,"t":{"1353":{"position":[[0,9]]}}}],["yolov2",{"_index":162,"t":{"1355":{"position":[[0,9]]}}}],["yolov5",{"_index":163,"t":{"1357":{"position":[[0,9]]}}}],["zip",{"_index":151,"t":{"1297":{"position":[[0,11]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":703,"t":"tip 输入一个数，比如201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30的倍数，就输出最大的倍数，不能就输出-1 例如输入201可以随意组合成 201，210，012，021，102，120等数字 其中120，210都是30的倍数，由于要找最大的，所以答案是210 输入样例：201 输出样例：210","s":"排列组合（求30的倍数）","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"","p":702},{"i":705,"t":"#include <bits/stdc++.h> using namespace std; int main() { string s; cin >> s; int maxx = 0, flag = 0; sort(s.begin(), s.end()); do { int now = 0; for (int i = 0; i < s.size(); i++) { now = now * 10 + s[i] - '0'; } if (now % 30 == 0) { flag = 1; maxx = max(maxx, now); } } while (next_permutation(s.begin(), s.end())); if (flag == 1) { cout << maxx << endl; return 0; } else { cout << -1 << endl; } }","s":"参考代码","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#参考代码","p":702},{"i":707,"t":"使用C++ STL提供的排列组合模版 首先将代排列组合的字符串或数组进行排序 sort(list.begin(), list.end()); 使用排列组合模版 do { something(); } while (next_permutation(list.begin(), list.end())); 此时，在每一个do循环中，list按从小到大的顺序进行排列组合遍历","s":"题解","u":"/en/docs/Algorithms/题解/排列组合（求30的倍数）","h":"#题解","p":702},{"i":709,"t":"tip 设N是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求N的值","s":"反序输出","u":"/en/docs/Algorithms/题解/反序输出","h":"","p":708},{"i":711,"t":"#include <bits/stdc++.h> using namespace std; int main() { for (int i = 1000; i <= 9999; i++) { int x = i * 9, y = 0; while (x > 0) { y = y * 10 + x % 10; x /= 10; } if (i == y) { cout << i << endl; } } return 0; }","s":"参考代码","u":"/en/docs/Algorithms/题解/反序输出","h":"#参考代码","p":708},{"i":713,"t":"反序输出可以分为两部分：拆分以及反序拼接 拆分：n位整数求余10可以得到最后一位，再除以10可以得到除去上述最后一位之后的n-1位整数，循环得到每一个最后一位，完成拆分 while (x > 0) { y = y * 10 + x % 10; // 拼接与拆分 x /= 10; } 拼接：将s中的数字拼接成整数 int sum = 0; for (int i = 0; i < s.size(); i++) { sum = sum * 10 + s[i]; }","s":"题解","u":"/en/docs/Algorithms/题解/反序输出","h":"#题解","p":708},{"i":715,"t":"tip 在一面很长的墙壁上，工人们用不同的油漆去刷墙，然而可能有些地方刷过以后觉得不好看，他们会重新刷一下。有些部分因为重复刷了很多次覆盖了很多层油漆，小诺很好奇那些地方被刷过多少种颜色的油漆。 输入描述： 若干行输入，每行两个数字B[i],E[i](0<=B[i]<=E[i]<=200000)表示这次刷的墙壁是哪一段 （假设每次刷的时候油漆颜色都和之前的不同），以0 0结束 又若干行输入，每行两个数字begin[i],end[i]（0<=begin[i]<=end[i]<=200000）表示小诺询问的段， 以0 0结束 输出描述: 对于每个小诺的询问输出(end[i]-begin[i]+1)行,表示对应询问段的每个点被多少种颜色的油漆覆盖过。","s":"一维前缀和（刷出一道墙）","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"","p":714},{"i":717,"t":"#include <bits/stdc++.h> using namespace std; int main() { vector<int> colors(200001, 0); int B, E; while (scanf(\"%d %d\", &B, &E)) { if (B == 0 && E == 0) { break; } colors[B]++; // 刷墙起点标记 colors[E + 1]--; // 刷墙终点标记 } // 计算前缀和 for (int i = 1; i < colors.size(); i++) { colors[i] += colors[i - 1]; } int begin, end; while (scanf(\"%d %d\", &begin, &end)) { if (begin == 0 && end == 0) { break; } for (int i = begin; i <= end; i++) { printf(\"%d\\n\", colors[i]); } } return 0; }","s":"参考代码","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#参考代码","p":714},{"i":719,"t":"使用前缀和思想简化时间复杂度，设计前缀和数组，使输出的数组中元素的值代表其对应节点被刷的次数。 首先初始化前缀和数组，使每一个元素等于为0。 该题的巧妙之处就在于：对于每一个输入的索引B与E，B作为开始刷的节点索引令前缀和数组中对应元素的值+1+1+1，E+1作为刷墙结束的下一个节点的索引令对应的值−1-1−1。这样在所有输入结束后的计算前缀和阶段，在每一个值为[1,−1)[1, -1)[1,−1)的索引区间中的元素值都会加1，而对于某次刷漆终点E的下一个索引为E+1的元素值由于−1-1−1而抵消影响（自身值为−1-1−1加上之前元素所累积的1而归零），此时数组中元素的值才代表其对应节点被刷的次数。 关于超时，可以在函数中加入以下代码消除流操作的缓冲区，并使用\"\\n\"代替endl。 ios::sync_with_stdio(false);","s":"题解","u":"/en/docs/Algorithms/题解/一维前缀和（刷出一道墙）","h":"#题解","p":714},{"i":722,"t":"该网站的搭建离不开Docusaurus的支持以及对Sonder的宝藏笔记本的参考。","s":"饮水思源","u":"/en/docs/Acknowledgement/intro","h":"#饮水思源","p":720},{"i":724,"t":"本网站展示的所有标识和链接仅属于个人喜好，不代表国家的立场或企业、组织的行为。 本网站的所有信息仅供参考，不构成法律或商业建议。","s":"Disclaimer","u":"/en/docs/Acknowledgement/intro","h":"#disclaimer","p":720},{"i":726,"t":"info 转载自Sonder的笔记本 vector：变长数组，倍增的思想 pair：存储一对数 string：字符串，substr(), c_str() queue：push(), front(), pop() priority_queue：优先队列，push(), top(), pop() stack：栈，push(), top(), pop() deque：双端队列 set, map, multiset, multimap：基于红黑树来实现，本质上是动态维护一个有序序列 unordered_set, unordered_map, unordered_multiset, unordered_multimap：哈希表 bitset：压位","s":"STL模板","u":"/en/docs/Algorithms/STL模板","h":"","p":725},{"i":728,"t":"vector<int> a(10,3); // 定义一个长度为10的vector，初始化为3； a.size(); // vector的size，所有容器都有 a.empty(); // 范围vector是否为空，所有容器都有 a.clear(); // 清空 a.front(); // 第一个数 a.back(); // 最后一个数 a.push_back(); // 在最后插入一个数 a.pop_back(); // 删除最后一个数 // vector支持比较运算 vector<int> a(4,3),b(3,4); if(a > b) cout << \"Yes\"; else cout << \"No\"","s":"vector","u":"/en/docs/Algorithms/STL模板","h":"#vector","p":725},{"i":730,"t":"pair<int,int> a; a = {20,\"abc\"}; a.first(); // 获取第一个元素 a.second(); // 获取第二个元素 // pair也能进行sort","s":"pair","u":"/en/docs/Algorithms/STL模板","h":"#pair","p":725},{"i":732,"t":"string a = \"Acwing\"; a.size(); // 获取string的大小 a.empty(); // 判断是否为空 a.clear(); // 清空 a += \"def\"; cout << a. substr(1,2) << endl; // 第一个参数起始位置，第二个参数是字符串长度","s":"string","u":"/en/docs/Algorithms/STL模板","h":"#string","p":725},{"i":734,"t":"query<int> a; a.size(); a.empty(); a.push(1); // 队尾插入元素 a.front(); // 返回队头元素 a.back(); // 返回队尾元素 a.pop(); // 删除队头元素","s":"query","u":"/en/docs/Algorithms/STL模板","h":"#query","p":725},{"i":736,"t":"// 默认是大根堆 priority_queue<int> heap; heap.clear(); heap.size(); heap.empty(); // 如何定义一个小根堆： 1. 插入负数 2. 直接定义 heap.push(-x); // 黑科技方法 priority_queue<int,vector<int>,greater<int>> q;","s":"priority_queue","u":"/en/docs/Algorithms/STL模板","h":"#priority_queue","p":725},{"i":738,"t":"stack<int> s; s.size(); s.empty(); s.push(); s.top(); s.pop();","s":"stack","u":"/en/docs/Algorithms/STL模板","h":"#stack","p":725},{"i":740,"t":"deque<int> a; a.size(); a.empty(); a.clear(); a.front(); a.back(); a.push_back(); a.pop_back();","s":"deque","u":"/en/docs/Algorithms/STL模板","h":"#deque","p":725},{"i":742,"t":"set<int> s; // 不能有重复元素 // s.begin()/end() multiset<int> MS; // 可以有重复元素 s.insert(1); 插入一个数 s.size(); s.empty(); s.clear(); s.find(1); // 查找一个元素，如果不存在的话返回end迭代器 s.erase(1); // 输入是一个数x，输出所有x （2）输入一个迭代器，删除这个迭代器 // set 最核心的操作 s.lower_bound(); // 范围大于等于x的最小的数 s.upper_bound(); // 返回大于x的最小的数","s":"set/multiset","u":"/en/docs/Algorithms/STL模板","h":"#setmultiset","p":725},{"i":744,"t":"#include <map> // 和python里面的字典非常的相似 map<string,int> a; a[\"2\"] = 3; a.insert({\"1\",1}); a.erase({\"1\",1}); a.find({\"1\",1}); unordered_set, unordered_map, unordered_multiset, unordered_multimap的操作和set或者map等的操作基本一致，唯一的区别就是不支持类似lower_bound()这样的操作 （哈希表的内部是无序的）","s":"map/multimap","u":"/en/docs/Algorithms/STL模板","h":"#mapmultimap","p":725},{"i":746,"t":"可以省下来8位的空间 bitset<10000> s; // 支持所有的基本操作： // 移位操作：<< >> // == != // count() 返回有多少个1 // any() 判断是否至少有一个1 // none() 判断是否全为0 // set()，把所有为置为1 // set(k,v), 将第k个变为v // reset(), 把所有位变成0 // flip(), 把所有位取反","s":"biset","u":"/en/docs/Algorithms/STL模板","h":"#biset","p":725},{"i":750,"t":"词法分析：分析输入串如何构成句子，得到单词序列 语法分析：分析单词序列如何构成程序，构造语法分析树 语义分析：审查语义错误，为代码生成收集类型信息 中间代码生成 代码优化 目标代码生成 表管理、错误检查和处理贯穿整个过程","s":"1.1 编译程序的逻辑结构","u":"/en/docs/Curriculum/编译原理/Note","h":"#11-编译程序的逻辑结构","p":747},{"i":752,"t":"前端是指与源语言有关、与目标机无关的部分 如词法分析、语法分析、语义分析、中间代码生成、代码优化中与机器无关的部分 后端是指与目标机有关的部分 如代码优化中与机器有关的部分、目标代码的生成","s":"1.2 前端和后端","u":"/en/docs/Curriculum/编译原理/Note","h":"#12-前端和后端","p":747},{"i":754,"t":"遍是指从头到尾扫描一遍源程序","s":"1.3 遍的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#13-遍的概念","p":747},{"i":757,"t":"若从文法的开始符号开始存在以下推导，则称α\\alphaα为该文法的一个句型，句型中既可以包含终结符，也可以包含非终结符，也可以是空串 S⇒∗α, α∈(VT∪VN)∗(1)S \\Rightarrow^* \\alpha,\\space \\alpha \\in (V_T \\cup V_N)^* \\tag{1}S⇒∗α, α∈(VT​∪VN​)∗(1)","s":"2.1 句型","u":"/en/docs/Curriculum/编译原理/Note","h":"#21-句型","p":747},{"i":759,"t":"S⇒∗β, β∈VT∗(2)S \\Rightarrow^* \\beta,\\space \\beta \\in V_T^* \\tag{2}S⇒∗β, β∈VT∗​(2) 则称β\\betaβ是该文法的句子","s":"2.2 句子：","u":"/en/docs/Curriculum/编译原理/Note","h":"#22-句子","p":747},{"i":761,"t":"0型文法，又称无限制文法、短语文法 1型文法，又称文有关文法 2型文法，又称上下文无关文法（Context-Free Grammar，CFG） 可用来构建语法树，语法树是上下文无关文法推导和规约的图形化表示 A→β, A∈VN, β∈(VT∪VN)∗(3)\\Alpha \\rightarrow \\beta,\\space \\Alpha \\in V_N, \\space \\beta \\in (V_T \\cup V_N)^* \\tag{3}A→β, A∈VN​, β∈(VT​∪VN​)∗(3) 3型文法，又称正规文法（Regular Grammar，RG） 左线性文法 右线性文法","s":"2.3 文法的分类：","u":"/en/docs/Curriculum/编译原理/Note","h":"#23-文法的分类","p":747},{"i":763,"t":"如果在推导的任何一步都是对产生式左部中的最左/右非终结符进行替换，则称为最左/右推导，其中最右推导也被成为规范推导","s":"2.4 最左/右推导：","u":"/en/docs/Curriculum/编译原理/Note","h":"#24-最左右推导","p":747},{"i":767,"t":"确定的有穷自动机（DFA） DFA的定义及组成 确定的含义：在状态转换的每一步，FA根据当前的状态及扫描的输入字符，便能唯一地知道FA的下一状态。 tip 在状态转换图中的直观体现就是，在确定行表示的当前状态以及列确定的路径后，得到的目的状态不会是元素个数大于1的集合。 DFA的可接受以及接受集的定义：从开始状态开始，经过该符号串表示的路径，若能到达终态则称该符号串可被改DFA接受。 不确定的有穷自动机（NFA） NFA的确定化，即将NFA转换为DFA（子集法） 步骤： 画出DFA转换表 tip 转换表中在状态一列中，状态包含原NFA终态的集合要标*，代表其为等价DFA的终态 计算move(T,a)move(T, a)move(T,a) 计算ϵ−closure(T)\\epsilon -closure(T)ϵ−closure(T) 为转换表中的状态重命名 确定初态和终态 DFA的最小化（分割法） 步骤如下： tip 考试时注意过程怎么写，下面使用需要三轮分割的列子演示步骤 在分割完成后，对可以化简的集合选出一个状态作为代表，删除其他多余状态，重新画图","s":"3.2 有穷自动机（FA）","u":"/en/docs/Curriculum/编译原理/Note","h":"#32-有穷自动机fa","p":747},{"i":771,"t":"描述程序语法结构的规则可以使用2型文法（上下文无关语法，CFG） 语法分析方法包含确定的和不确定的分析方法，确定的语法分析方法根据输入符号，唯一选择产生式 确定的自顶向下分析方法：根据当前的输入符号唯一地确定选用哪个产生式替换相应的非终结符以往下推导","s":"第四章：自顶向下语法分析方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#第四章自顶向下语法分析方法","p":747},{"i":774,"t":"tip FOLLOW集的求法可以按照下图技巧进行 若要求的非终结符是开始符号，则直接将#插入FOLLOW集中 在所有产生式的右部中找到要求的非终结符 看非终结符的右侧是什么元素 若无元素，则直接将该产生式左部的FOLLOW集加入到该非终结符的FOLLOW集中 若为终结符，直接将该终结符加入到FOLLOW集中 若为非终结符，将FIRST(该非终结符)减去ϵ\\epsilonϵ的所有终结符元素都加入至FOLLOW集中","s":"2. Follow集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-follow集的定义","p":747},{"i":776,"t":"tip 需要注意的是FIRST集、FOLLOW集是针对于符号串而言的，而SELECT集是针对于产生式而言的","s":"3. SELECT集的定义","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-select集的定义","p":747},{"i":779,"t":"tip 考试时注意书写过程，需要画出以下两张表","s":"5. LL(1)文法的判别","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-ll1文法的判别","p":747},{"i":781,"t":"预测分析表通过计算SELECT集得到，形如下表 行标为各非终结符，列标为输入符号，若从某一非终结符开始的产生式的SELECT集包含某一输入符号，则对应产生式就是行列确定的元素值。","s":"6. 预测分析表","u":"/en/docs/Curriculum/编译原理/Note","h":"#6-预测分析表","p":747},{"i":783,"t":"消除左公因子（回溯） caution 同一非终结符的多个产生式存在共同前缀，会导致回溯现象，需要消除 消除左递归 caution 左递归文法会使递归下降分析器陷入无限循环 消除直接左递归 消除间接左递归 通过代入法变成直接左递归再消除","s":"7. 非LL(1)文法到LL(1)文法的等价变换","u":"/en/docs/Curriculum/编译原理/Note","h":"#7-非ll1文法到ll1文法的等价变换","p":747},{"i":786,"t":"从的底部向顶部的方向构造语法分析树，采用最左归约的方式，即最右推导的逆过程 tip 注意辨别：自顶向下的语法分析采用最左推导的方式 最右推导是规范推导，最左归约是最右推导的逆过程，又称规范归约","s":"5.1 概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#51-概念","p":747},{"i":788,"t":"算符优先分析法 按照算符的优先关系和结合性质进行语法分析 LR分析法（重点） 规范规约：句柄作为可归约串","s":"5.2 方法","u":"/en/docs/Curriculum/编译原理/Note","h":"#52-方法","p":747},{"i":791,"t":"移入：将下一个输入符号移到栈顶 归约：被归约的符号串的右端处于栈顶，语法分析器在栈中确定这个串的左端非终结符来替换该串 接受：宣布语法分析过程成功完成 报错：发现一个语法错误，并调用错误恢复子程序","s":"5.4 移入-归约分析器的4种动作","u":"/en/docs/Curriculum/编译原理/Note","h":"#54-移入-归约分析器的4种动作","p":747},{"i":793,"t":"前导知识：4种项目状态 归约项目：·在最后 接受项目：拓广文法的开始符号的产生式，且·在最后 移进项目：·后面是终结符VTV_TVT​ 待约项目：·后面是非终结符VNV_NVN​ 移入-归约分析 LR(0)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV1pL4y1E7RE/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在写预测分析表的reduce项时，action的每一列都要写 SLR(1)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV12u411S7Us/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在写预测分析表的reduce项时，只写产生式左部的FOLLOW集对应的action列 LR(1)分析表 / 构造其识别活前缀DFA https://www.bilibili.com/video/BV1Vm4y1Q7XB/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533 在构造项目集时，要加入前向搜索符；并且，在写预测分析表的reduce项时只写前向搜索符对应的action列 LALR(1)分析表 / 构造其识别活前缀DFA 在构造项目集时，要加入前向搜索符，但是要合并同心集，把相同表达式但是不同前向搜索符的前向搜索符合并，并且在写预测分析表的reduce项时只写前向搜索符集对应的action列 https://www.bilibili.com/video/BV13r4y1m7sQ/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533","s":"5.5 重要题型","u":"/en/docs/Curriculum/编译原理/Note","h":"#55-重要题型","p":747},{"i":796,"t":"词法分析：从左到右扫描源程序，识别出各个单词，确定单词类型并形成单词序列，进行词法错误检查，对标识符进行登记，即符号表管理 语法分析：从词法分析输出的单词序列识别出各类短语，构造语法分析树，并进行语法错误检查 语义分析：审查程序是否具有语义错误，为代码生成阶段收集类型信息，不符合规范时报错（符号表是语义正确性检查的依据） 中间代码生成：生成中间代码，如三地址指令、四元式、波兰式、逆波兰式、树形结构等 代码优化：对代码进行等价变换以求提高执行效率，提高速度或节省空间 目标代码生成：将中间代码转化成目标机上的机器指令代码或汇编代码（符号表是对符号分配地址的依据）","s":"1 编译程序各阶段功能","u":"/en/docs/Curriculum/编译原理/Note","h":"#1-编译程序各阶段功能","p":747},{"i":798,"t":"就产生语法树的方向而言，可大致分为自顶向下的语法分析和自底向上的语法分析两大类。 自顶向下的语法分析方法：主流方法为递归下降分析法。根据当前的输入符号唯一地确定选用哪个产生式替换相应的非终结符以往下推导。 自底向上的语法分析方法：将输入串w归约为文法开始符号S的过程。 tip LR(0), SLR(1), LR(1) LR(0)文法可能存在移进-归约冲突、归约-归约冲突 SLR(1)文法在构造的过程中不存在归约-归约冲突，但有可能出现移进-归约冲突，可以由FOLLOW集解决的话则是SLR(1)文法","s":"2 语法分析方法的概念","u":"/en/docs/Curriculum/编译原理/Note","h":"#2-语法分析方法的概念","p":747},{"i":800,"t":"翻译模式是适合语法制导语义计算的另一种描述形式，可以体现一种合理调用语义动作的算法。 S-翻译模式： 仅涉及综合属性的翻译模式，通常将语义动作集合置于产生式右端末尾。 L-翻译模式： 既可以包含综合属性，也可以包含继承属性。","s":"3 翻译模式","u":"/en/docs/Curriculum/编译原理/Note","h":"#3-翻译模式","p":747},{"i":802,"t":"在文法基础上，为文法符号关联有特定意义的属性，并为产生式关联相应的语义动作，称之为属性文法。 S-属性文法： 只包含综合属性的属性文法成为S-属性文法 L-属性文法： 可以包含综合属性，也可以包含继承属性，但要求产生式右部的文法符号的继承属性的计算只取决于该符号左边符号的属性","s":"4 属性文法","u":"/en/docs/Curriculum/编译原理/Note","h":"#4-属性文法","p":747},{"i":804,"t":"符号表是编译程序中用于收集标识符的属性信息的数据结构。 各阶段作用： 语义分析阶段：语义合法性检查的依据 目标代码生成阶段：对符号名进行地址分配的依据","s":"5 符号表","u":"/en/docs/Curriculum/编译原理/Note","h":"#5-符号表","p":747},{"i":806,"t":"tip 欢迎来到笔记本的算法部分","s":"Welcome","u":"/en/docs/Algorithms/intro","h":"","p":805},{"i":808,"t":"如果可以帮到你的话就给个免费的Star吧！","s":"支持我！","u":"/en/docs/Algorithms/intro","h":"#支持我","p":805},{"i":810,"t":"info 转载自Sonder的笔记本 [TOC]","s":"机试技巧与STL","u":"/en/docs/Algorithms/机试技巧与STL","h":"","p":809},{"i":812,"t":"CTRL + J 列出成员 Ctrl+E,D 格式化全部代码 Ctrl+K,F 格式化选中的代码 CTRL + SHIFT + E 显示资源视图 F12 转到定义 CTRL + F12 转到声明 CTRL + ALT + J 对象浏览 CTRL + ALT + F1 帮助目录 CTRL + F1 动态帮助 CTRL + K, CTRL + C 注释选择的代码 CTRL + K, CTRL + U 取消对选择代码的注释 CTRL + U 转小写 CTRL + SHIFT + U 转大写 F5 运行调试 CTRL + F5 运行不调试 F10 跨过程序执行 F11 单步逐句执行","s":"vs2018 快捷键","u":"/en/docs/Algorithms/机试技巧与STL","h":"#vs2018-快捷键","p":809},{"i":815,"t":"头文件 说明 头文件 说明 头文件 说明 assert.h 断言相关 ctype.h 字符类型判断 errno.h 标准错误机制 float.h 浮点限制 limits.h 整形限制 locale.h 本地化接口 math.h 数学函数 setjmp.h 非本地跳转 signal.h 信号相关 stdarg.h 可变参数处理 stddef.h 宏和类型定义 stdio.h 标准I/O stdlib.h 标准工具库 string.h 字符串和内存处理 time.h 时间相关","s":"标准c库","u":"/en/docs/Algorithms/机试技巧与STL","h":"#标准c库","p":809},{"i":817,"t":"using namespace std; 头文件 说明 头文件 说明 头文件 说明 algorithm 通用算法 deque 双端队列 vector 向量 iterator 迭代器 stack 栈 map 图（键值对） list 列表 string 字符串 set 集合 queue 队列 bitset bit类 numeric 数值算法","s":"c++ STL","u":"/en/docs/Algorithms/机试技巧与STL","h":"#c-stl","p":809},{"i":819,"t":"#include<cstdio> #include<cstring> #include<algorithm> #include<iostream> #include<string> #include<vector> #include<stack> #include<bitset> #include<cstdlib> #include<cmath> #include<set> #include<list> #include<deque> #include<map> #include<queue> using namespace std;","s":"常用头","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用头","p":809},{"i":821,"t":"//求最大值和最小值 #define MAX(x,y) (((x)>(y)) ? (x) : (y)) #define MIN(x,y) (((x) < (y)) ? (x) : (y)) //取余 #define mod(x) ((x)%MOD) //for循环 #define FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) //返回数组元素的个数 #define ARR_SIZE(a) (sizeof((a))/sizeof((a[0]))) //初始化数组 #define MT(x,i) memset(x,i,sizeof(x)) #define MEM(a,b) memset((a),(b),sizeof(a)) //符号重定义 #define LL long long #define ull unsigned long long #define pii pair<int,int> //常见常数 #define PI acos(-1.0) #define eps 1e-12 #define INF 0x3f3f3f3f //int最大值 const int INF_INT = 2147483647; const ll INF_LL = 9223372036854775807LL; const ull INF_ULL = 18446744073709551615Ull; const ll P = 92540646808111039LL; const ll maxn = 1e5 + 10, MOD = 1e9 + 7; const int Move[4][2] = {-1,0,1,0,0,1,0,-1}; const int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1};","s":"常用宏定义","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用宏定义","p":809},{"i":824,"t":"struct InitMember { int first； double second； char* third； float four; };","s":"定义","u":"/en/docs/Algorithms/机试技巧与STL","h":"#定义","p":809},{"i":826,"t":"方法一：定义时赋值​ struct InitMember test = {-10,3.141590，\"method one\"，0.25}； 方法二：定义后逐个赋值​ struct InitMember test； test.first = -10; test.second = 3.141590; test.third = \"method two\"; test.four = 0.25; 方法三：定义时乱序赋值（C++风格）​ struct InitMember test = { second：3.141590, third：\"method three\", first：-10, four：0.25 }; 方法四：构造函数​ //定义图的定点 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //存储节点的后续连接顶点编号 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //定义Graph的邻接表表示 typedef struct Graph { vector<Vertex> vertexs; //存储定点信息 int nVertexs; //计数：邻接数 bool isDAG; //标志：是有向图吗 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //向图中添加边 bool addEdge(int id1, int id2) { ... ... ... return true; } } Graph; Graph g(8, false);","s":"初始化","u":"/en/docs/Algorithms/机试技巧与STL","h":"#初始化","p":809},{"i":828,"t":"typedef struct{int id;int h;} node; bool operator <(const node& a,const node & b){return (a.h)<(b.h);}","s":"运算符重载","u":"/en/docs/Algorithms/机试技巧与STL","h":"#运算符重载","p":809},{"i":831,"t":"int *x = new int; //开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针) int *a = new int(100); //开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址 char *b = new char[10]; //开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址 float *p=new float (3.14159);//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p","s":"常规","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常规","p":809},{"i":833,"t":"//列值固定 const int MAXCOL = 3; cin>>row; //申请一维数据并将其转成二维数组指针 int *pp_arr = new int[nRow * MAXCOL]; int (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr; //此时p[i][j]就可正常使用","s":"动态申请列大小固定的二维数组","u":"/en/docs/Algorithms/机试技巧与STL","h":"#动态申请列大小固定的二维数组","p":809},{"i":835,"t":"cin>>row>>col; int **p = new int*[row]; for (int i = 0; i < row; i ++) { p[i] = new int[col]; }","s":"动态申请大小不固定的二维数组","u":"/en/docs/Algorithms/机试技巧与STL","h":"#动态申请大小不固定的二维数组","p":809},{"i":837,"t":"参考： https://blog.csdn.net/f_zyj/article/details/51594851 https://download.csdn.net/download/f_zyj/9988653","s":"常用STL","u":"/en/docs/Algorithms/机试技巧与STL","h":"#常用stl","p":809},{"i":839,"t":"STL底层说明​ C++ STL 的实现： 1.vector 底层数据结构为数组 ，支持快速随机访问 2.list 底层数据结构为双向链表，支持快速增删 3.deque 底层数据结构为一个中央控制器和多个缓冲区，详细见STL源码剖析P146，支持首尾（中间不能）快速增删，也支持随机访问 deque是一个双端队列(double-ended queue)，也是在堆中保存内容的.它的保存形式如下: [堆1] --> [堆2] -->[堆3] --> ... 每个堆保存好几个元素,然后堆和堆之间有指针指向,看起来像是list和vector的结合品. 4.stack 底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时 5.queue 底层一般用list或deque实现，封闭头部即可，不用vector的原因应该是容量大小有限制，扩容耗时 （stack和queue其实是适配器,而不叫容器，因为是对容器的再封装） 6.priority_queue 的底层数据结构一般为vector为底层容器，堆heap为处理规则来管理底层容器实现 7.set 底层数据结构为红黑树，有序，不重复 8.multiset 底层数据结构为红黑树，有序，可重复 9.map 底层数据结构为红黑树，有序，不重复 10.multimap 底层数据结构为红黑树，有序，可重复 11.hash_set 底层数据结构为hash表，无序，不重复 12.hash_multiset 底层数据结构为hash表，无序，可重复 13.hash_map 底层数据结构为hash表，无序，不重复 14.hash_multimap 底层数据结构为hash表，无序，可重复 CCF 编译出错原因： 不允许C++STL容器嵌套（需要满足相应的格式）​ 就是要在后面的“>”之间，必须得有一个空格，如果有多层，那每层都得有一个空格。 map<string,list<string> > user;","s":"简述","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简述","p":809},{"i":841,"t":"头文件：lgorithm 函数参数，返回值以及具体的使用方法请自行去头文件找定义！！！ 不修改内容的序列操作​ 函数 说明 adjacent_find 查找两个相邻（Adjacent）的等价（Identical）元素 all_ofC++11 检测在给定范围中是否所有元素都满足给定的条件 any_ofC++11 检测在给定范围中是否存在元素满足给定条件 count 返回值等价于给定值的元素的个数 count_if 返回值满足给定条件的元素的个数 equal 返回两个范围是否相等 find 返回第一个值等价于给定值的元素 find_end 查找范围A中与范围B等价的子范围最后出现的位置 find_first_of 查找范围A中第一个与范围B中任一元素等价的元素的位置 find_if 返回第一个值满足给定条件的元素 find_if_notC++11 返回第一个值不满足给定条件的元素 for_each 对范围中的每个元素调用指定函数 mismatch 返回两个范围中第一个元素不等价的位置 none_ofC++11 检测在给定范围中是否不存在元素满足给定的条件 search 在范围A中查找第一个与范围B等价的子范围的位置 search_n 在给定范围中查找第一个连续n个元素都等价于给定值的子范围的位置 修改内容的序列操作​ 函数 说明 copy 将一个范围中的元素拷贝到新的位置处 copy_backward 将一个范围中的元素按逆序拷贝到新的位置处 copy_ifC++11 将一个范围中满足给定条件的元素拷贝到新的位置处 copy_nC++11 拷贝 n 个元素到新的位置处 fill 将一个范围的元素赋值为给定值 fill_n 将某个位置开始的 n 个元素赋值为给定值 generate 将一个函数的执行结果保存到指定范围的元素中，用于批量赋值范围中的元素 generate_n 将一个函数的执行结果保存到指定位置开始的 n 个元素中 iter_swap 交换两个迭代器（Iterator）指向的元素 moveC++11 将一个范围中的元素移动到新的位置处 move_backwardC++11 将一个范围中的元素按逆序移动到新的位置处 random_shuffle 随机打乱指定范围中的元素的位置 remove 将一个范围中值等价于给定值的元素删除 remove_if 将一个范围中值满足给定条件的元素删除 remove_copy 拷贝一个范围的元素，将其中值等价于给定值的元素删除 remove_copy_if 拷贝一个范围的元素，将其中值满足给定条件的元素删除 replace 将一个范围中值等价于给定值的元素赋值为新的值 replace_copy 拷贝一个范围的元素，将其中值等价于给定值的元素赋值为新的值 replace_copy_if 拷贝一个范围的元素，将其中值满足给定条件的元素赋值为新的值 replace_if 将一个范围中值满足给定条件的元素赋值为新的值 reverse 反转排序指定范围中的元素 reverse_copy 拷贝指定范围的反转排序结果 rotate 循环移动指定范围中的元素 rotate_copy 拷贝指定范围的循环移动结果 shuffleC++11 用指定的随机数引擎随机打乱指定范围中的元素的位置 swap 交换两个对象的值 swap_ranges 交换两个范围的元素 transform 对指定范围中的每个元素调用某个函数以改变元素的值 unique 删除指定范围中的所有连续重复元素，仅仅留下每组等值元素中的第一个元素。 unique_copy 拷贝指定范围的唯一化（参考上述的 unique）结果 划分操作​ 函数 说明 is_partitionedC++11 检测某个范围是否按指定谓词（Predicate）划分过 partition 将某个范围划分为两组 partition_copyC++11 拷贝指定范围的划分结果 partition_pointC++11 返回被划分范围的划分点 stable_partition 稳定划分，两组元素各维持相对顺序 排序操作​ 函数 说明 is_sortedC++11 检测指定范围是否已排序 is_sorted_untilC++11 返回最大已排序子范围 nth_element 部份排序指定范围中的元素，使得范围按给定位置处的元素划分 partial_sort 部份排序 partial_sort_copy 拷贝部分排序的结果 sort 排序 stable_sort 稳定排序 二分法查找操作​ 函数 说明 binary_search 判断范围中是否存在值等价于给定值的元素 equal_range 返回范围中值等于给定值的元素组成的子范围 lower_bound 返回指向范围中第一个值大于或等于给定值的元素的迭代器 upper_bound 返回指向范围中第一个值大于给定值的元素的迭代器 集合操作​ 函数 说明 includes 判断一个集合是否是另一个集合的子集 inplace_merge 就绪合并 merge 合并 set_difference 获得两个集合的差集 set_intersection 获得两个集合的交集 set_symmetric_difference 获得两个集合的对称差 set_union 获得两个集合的并集 堆操作​ 函数 说明 is_heap 检测给定范围是否满足堆结构 is_heap_untilC++11 检测给定范围中满足堆结构的最大子范围 make_heap 用给定范围构造出一个堆 pop_heap 从一个堆中删除最大的元素 push_heap 向堆中增加一个元素 sort_heap 将满足堆结构的范围排序 最大/最小操作​ 函数 说明 is_permutationC++11 判断一个序列是否是另一个序列的一种排序 lexicographical_compare 比较两个序列的字典序 max 返回两个元素中值最大的元素 max_element 返回给定范围中值最大的元素 min 返回两个元素中值最小的元素 min_element 返回给定范围中值最小的元素 minmaxC++11 返回两个元素中值最大及最小的元素 minmax_elementC++11 返回给定范围中值最大及最小的元素 next_permutation 返回给定范围中的元素组成的下一个按字典序的排列 prev_permutation 返回给定范围中的元素组成的上一个按字典序的排列","s":"algorithm","u":"/en/docs/Algorithms/机试技巧与STL","h":"#algorithm","p":809},{"i":843,"t":"头文件：vector 在STL的vector头文件中定义了vector（向量容器模版类），vector容器以连续数组的方式存储元素序列，可以将vector看作是以顺序结构实现的线性表。当我们在程序中需要使用动态数组时，vector将会是理想的选择，vector可以在使用过程中动态地增长存储空间。 vector模版类需要两个模版参数，第一个参数是存储元素的数据类型，第二个参数是存储分配器的类型，其中第二个参数是可选的，如果不给出第二个参数，将使用默认的分配器 下面给出几个常用的定义vector向量对象的方法示例： vector<int> s; // 定义一个空的vector对象，存储的是int类型的元素 vector<int> s(n); // 定义一个含有n个int元素的vector对象 vector<int> s(first, last); // 定义一个vector对象，并从由迭代器first和last定义的序列[first, last)中复制初值 vector的基本操作： s[i] // 直接以下标方式访问容器中的元素 s.front() // 返回首元素 s.back() // 返回尾元素 s.push_back(x) // 向表尾插入元素x s.size() // 返回表长 s.empty() // 表为空时，返回真，否则返回假 s.pop_back() // 删除表尾元素 s.begin() // 返回指向首元素的随机存取迭代器 s.end() // 返回指向尾元素的下一个位置的随机存取迭代器 s.insert(it, val) // 向迭代器it指向的元素前插入新元素val s.insert(it, n, val)// 向迭代器it指向的元素前插入n个新元素val s.insert(it, first, last) // 将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面 s.erase(it) // 删除由迭代器it所指向的元素 s.erase(first, last)// 删除由迭代器first和last所指定的序列[first, last) s.reserve(n) // 预分配缓冲空间，使存储空间至少可容纳n个元素 s.resize(n) // 改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间 s.resize(n, val) // 改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间 s.clear() // 删除容器中的所有元素 s.swap(v) // 将s与另一个vector对象进行交换 s.assign(first, last) // 将序列替换成由迭代器first和last所指定的序列[first, last)，[first, last)不能是原序列中的一部分 // 要注意的是，resize操作和clear操作都是对表的有效元素进行的操作，但并不一定会改变缓冲空间的大小 // 另外，vector还有其他的一些操作，如反转、取反等，不再一一列举 // vector上还定义了序列之间的比较操作运算符（>、<、>=、<=、==、!=），可以按照字典序比较两个序列。 // 还是来看一些示例代码吧…… /* * 输入个数不定的一组整数，再将这组整数按倒序输出 */ #include <iostream> #include <vector> using namespace std; int main() { vector<int> L; int x; while(cin >> x) { L.push_back(x); } for (int i = L.size() - 1; i >= 0; i--) { cout << L[i] << \" \"; } cout << endl; return 0; }","s":"vector","u":"/en/docs/Algorithms/机试技巧与STL","h":"#vector","p":809},{"i":845,"t":"头文件：list 下面给出几个常用的定义list对象的方法示例： list<int>a{1,2,3} list<int>a(n) //声明一个n个元素的列表，每个元素都是0 list<int>a(n, m) //声明一个n个元素的列表，每个元素都是m list<int>a(first, last) //声明一个列表，其元素的初始值来源于由区间所指定的序列中的元素，first和last是迭代器 list的基本操作： a.begin() // 返回指向首元素的随机存取迭代器 a.end() // 返回指向尾元素的下一个位置的随机存取迭代器 a.push_front(x) // 向表头插入元素x a.push_back(x) // 向表尾插入元素x a.pop_back() // 删除表尾元素 a.pop_front() // 删除表头元素 a.size() // 返回表长 a.empty() // 表为空时，返回真，否则返回假 a.resize(n) // 改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），元素默认值将填满扩展出的空间 a.resize(n, val) // 改变序列长度，超出的元素将会全部被删除，如果序列需要扩展（原空间小于n），val将填满扩展出的空间 a.clear() // 删除容器中的所有元素 a.front() // 返回首元素 a.back() // 返回尾元素 a.swap(v) // 将a与另一个list对象进行交换 a.merge(b) // 调用结束后b变为空，a中元素包含原来a和b的元素 a.insert(it, val) // 向迭代器it指向的元素前插入新元素val a.insert(it, n, val)// 向迭代器it指向的元素前插入n个新元素val a.insert(it, first, last) // 将由迭代器first和last所指定的序列[first, last)插入到迭代器it指向的元素前面 a.erase(it) // 删除由迭代器it所指向的元素 a.erase(first, last)// 删除由迭代器first和last所指定的序列[first, last) a.remove(x) // 删除了a中所有值为x的元素 a.assign(n, val) // 将a中的所有元素替换成n个val元素 a.assign(b.begin(), b.end()) //将a变成b","s":"list","u":"/en/docs/Algorithms/机试技巧与STL","h":"#list","p":809},{"i":847,"t":"头文件：string string是STL的字符串类型，通常用来表示字符串。而在使用string之前，字符串通常是用char*表示的。 string和char*的区别 string是一个类, char*是一个指向字符的指针。 string封装了char*，管理这个字符串，是一个char*型的容器。也就是说string是一个容器，里面元素的数据类型是char*。 string不用考虑内存释放和越界。 string管理char*所分配的内存。每一次string的复制，取值都由string类负责维护，不用担心复制越界和取值越界等。 string提供了一系列的字符串操作函数 查找find，拷贝copy，删除erase，替换replace，插入insert. 构造和析构函数: 表达式 效果 string s 生成一个空字符串 string s(str) copy构造函数，生成一个str的复制品 string s(str,idx) 将string内始于位置idx的部分当作字符串s的初值 string s(str,idx,len) 将string内始于位置idx且长度最多为len的部分当作字符串s的初值 string s(cstr) 以C-string字符串cstr作为字符串s的初值 string s(cstr，len) 以C-string字符串cstr的前len个字符作为字符串s的初值 string s(num，c) 生成一个字符串，包含num个字符c string s(beg，end) 以区间[beg,end]内所有字符作为字符串s的初值 操作函数: 操作函数 效果 =，assign() 赋以新值 swap() 交换两个字符串的内容 +=, append(),push_back() 添加字符 insert() 插入字符 erase() 删除字符 clear() 移除全部字符 resize() 改变字符数量 replace() 替换字符 + 串联字符串 ==，!=，<，<=，>，>=，compare() 比较字符串内容 size(),length() 返回字符数量,等效函数 max_size() 返回字符的最大可能个数 empty() 判断字符串是否为空 capacity() 返回重新分配之前的字符容量 reserve() 保留一定量内存以容纳一定数量的字符 [ ]，at() 存取单一字符 >>，getline() 从stream中读取某值 << 将某值写入stream copy() 将内容复制为一个C-string c_str() 将内容以C-string形式返回 data() 将内容以字符数组形式返回 substr() 返回某个子字符串 begin()，end() 提供正常的迭代器支持 rbegin()，rend() 提供逆向迭代器支持","s":"string","u":"/en/docs/Algorithms/机试技巧与STL","h":"#string","p":809},{"i":849,"t":"头文件：utility STL的utility头文件中描述了一个看上去非常简单的模版类pair，用来表示一个二元组或元素对，并提供了按照字典序对元素对进行大小比较运算符模版函数。 Example，想要定义一个对象表示一个平面坐标点，则可以： pair<double, double> p; cin >> p.first >> p.second; pair模版类需要两个参数：首元素的数据类型和尾元素的数据类型。pair模版类对象有两个成员：first和second，分别表示首元素和尾元素。 在其中已经定义了pair上的六个比较运算符：<、>、<=、>=、==、!=，其规则是先比较first，first相等时再比较second，这符合大多数应用的逻辑。当然，也可以通过重载这几个运算符来重新指定自己的比较逻辑。 除了直接定义一个pair对象外，如果需要即时生成一个pair对象，也可以调用在其中定义的一个模版函数：make_pair。make_pair需要两个参数，分别为元素对的首元素和尾元素。","s":"pair","u":"/en/docs/Algorithms/机试技巧与STL","h":"#pair","p":809},{"i":851,"t":"头文件：map 在STL的头文件中map中定义了模版类map和multimap，用有序二叉树表存储类型为pair<const Key, T>的元素对序列。序列中的元素以const Key部分作为标识，map中所有元素的Key值必须是唯一的，multimap则允许有重复的Key值。 可以将map看作是由Key标识元素的元素集合，这类容器也被称为“关联容器”，可以通过一个Key值来快速决定一个元素，因此非常适合于需要按照Key值查找元素的容器。 map模版类需要四个模版参数，第一个是键值类型，第二个是元素类型，第三个是比较算子，第四个是分配器类型。其中键值类型和元素类型是必要的。 定义map对象的代码示例： map<string, int> m; map的基本操作： /* 向map中插入元素 */ m[key] = value; // [key]操作是map很有特色的操作,如果在map中存在键值为key的元素对, 则返回该元素对的值域部分,否则将会创建一个键值为key的元素对,值域为默认值。所以可以用该操作向map中插入元素对或修改已经存在的元素对的值域部分。 m.insert(make_pair(key, value)); // 也可以直接调用insert方法插入元素对,insert操作会返回一个pair,当map中没有与key相匹配的键值时,其first是指向插入元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为false。 /* 查找元素 */ int i = m[key]; // 要注意的是,当与该键值相匹配的元素对不存在时,会创建键值为key（当另一个元素是整形时，m[key]=0）的元素对。 map<string, int>::iterator it = m.find(key); // 如果map中存在与key相匹配的键值时,find操作将返回指向该元素对的迭代器,否则,返回的迭代器等于map的end()(参见vector中提到的begin()和end()操作)。 /* 删除元素 */ m.erase(key); // 删除与指定key键值相匹配的元素对,并返回被删除的元素的个数。 m.erase(it); // 删除由迭代器it所指定的元素对,并返回指向下一个元素对的迭代器。 /* 其他操作 */ m.size(); // 返回元素个数 m.empty(); // 判断是否为空 m.clear(); // 清空所有元素","s":"map","u":"/en/docs/Algorithms/机试技巧与STL","h":"#map","p":809},{"i":853,"t":"头文件：stack stack模版类的定义在stack头文件中。 stack模版类需要两个模版参数，一个是元素类型，另一个是容器类型，但是只有元素类型是必要的，在不指定容器类型时，默认容器的类型为deque。 定义stack对象的示例代码如下: stack<int> s; stack<string> ss; stack的基本操作有： s.push(x); // 入栈 s.pop(); // 出栈 s.top(); // 访问栈顶 s.empty(); // 当栈空时，返回true s.size(); // 访问栈中元素个数","s":"stack","u":"/en/docs/Algorithms/机试技巧与STL","h":"#stack","p":809},{"i":855,"t":"头文件：queue queue模版类的定义在queue头文件中。 queue与stack相似，queue模版类也需要两个模版参数，一个元素类型，一个容器类型，元素类型时必须的，容器类型时可选的，默认为deque类型。 定义queue对象的示例代码必须如下： queue<int> q; queue<double> qq; queue的基本操作： q.push(x); // 入队列 q.pop(); // 出队列 q.front(); // 访问队首元素 q.back(); // 访问队尾元素 q.empty(); // 判断队列是否为空 q.size(); // 访问队列中的元素个数","s":"queue","u":"/en/docs/Algorithms/机试技巧与STL","h":"#queue","p":809},{"i":857,"t":"头文件：set set是与集合相关的容器，STL为我们提供了set的实现，在编程题中遇见集合问题直接调用是十分方便的。 定义set对象的示例代码如下： set<int> s; set<double> ss; set的基本操作： s.begin() // 返回指向第一个元素的迭代器 s.clear() // 清除所有元素 s.count() // 返回某个值元素的个数 s.empty() // 如果集合为空，返回true(真） s.end() // 返回指向最后一个元素之后的迭代器，不是最后一个元素 s.equal_range() // 返回集合中与给定值相等的上下限的两个迭代器 s.erase() // 删除集合中的元素 s.find() // 返回一个指向被查找到元素的迭代器 s.get_allocator() // 返回集合的分配器 s.insert() // 在集合中插入元素 s.lower_bound() // 返回指向大于（或等于）某值的第一个元素的迭代器 s.key_comp() // 返回一个用于元素间值比较的函数 s.max_size() // 返回集合能容纳的元素的最大限值 s.rbegin() // 返回指向集合中最后一个元素的反向迭代器 s.rend() // 返回指向集合中第一个元素的反向迭代器 s.size() // 集合中元素的数目 s.swap() // 交换两个集合变量 s.upper_bound() // 返回大于某个值元素的迭代器 s.value_comp() // 返回一个用于比较元素间的值的函数","s":"set","u":"/en/docs/Algorithms/机试技巧与STL","h":"#set","p":809},{"i":859,"t":"头文件：set 在set头文件中，还定义了另一个非常实用的模版类multiset（多重集合）。多重集合与集合的区别在于集合中不能存在相同元素，而多重集合中可以存在。 定义multiset对象的示例代码如下： multiset<int> s; multiset<double> ss; multiset和set的基本操作相似，需要注意的是，集合的count()能返回0（无）或者1（有），而多重集合是有多少个返回多少个。","s":"multiset","u":"/en/docs/Algorithms/机试技巧与STL","h":"#multiset","p":809},{"i":861,"t":"头文件：bitset 在 STLSTL 的头文件中 bitset中定义了模版类 bitsetbitset，用来方便地管理一系列的 bitbit 位的类。bitsetbitset 除了可以访问指定下标的 bitbit 位以外，还可以把它们作为一个整数来进行某些统计。 bitsetbitset 模板类需要一个模版参数，用来明确指定含有多少位。 定义 bitsetbitset 对象的示例代码： const int MAXN = 32; bitset<MAXN> bt; // bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0 bitset<MAXN> bt1(0xf); // 0xf 表示十六进制数 f，对应二进制 1111，将 bt1 低 4 位初始化为 1 bitset<MAXN> bt2(012); // 012 表示八进制数 12，对应二进制 1010，即将 bt2 低 4 位初始化为 1010 bitset<MAXN> bt3(\"1010\"); // 将 bt3 低 4 位初始化为 1010 bitset<MAXN> bt4(s, pos, n);// 将 01 字符串 s 的 pos 位开始的 n 位初始化 bt4 bitsetbitset 基本操作： bt.any() // bt 中是否存在置为 1 的二进制位？ bt.none() // bt 中不存在置为 1 的二进制位吗？ bt.count() // bt 中置为 1 的二进制位的个数 bt.size() // bt 中二进制位的个数 bt[pos] // 访问 bt 中在 pos 处的二进制位 bt.test(pos) // bt 中在 pos 处的二进制位是否为 1 bt.set() // 把 bt 中所有二进制位都置为 1 bt.set(pos) // 把 bt 中在 pos 处的二进制位置为 1 bt.reset() // 把 bt 中所有二进制位都置为 0 bt.reset(pos) // 把 bt 中在pos处的二进制位置为0 bt.flip() // 把 bt 中所有二进制位逐位取反 bt.flip(pos) // 把 bt 中在 pos 处的二进制位取反 bt[pos].flip() // 同上 bt.to_ulong() // 用 bt 中同样的二进制位返回一个 unsigned long 值 os << bt // 把 bt 中的位集输出到 os 流","s":"bitset","u":"/en/docs/Algorithms/机试技巧与STL","h":"#bitset","p":809},{"i":864,"t":"#include <iostream> #include <vector> #include <set> using namespace std; #define MAX(a, b) ((a) > (b) ? (a) : (b) ) //定义图的定点 typedef struct Vertex { int id; vector<int> connectors; //存储节点的后续连接顶点编号 Vertex() : id(-1) {} Vertex(int nid) : id(nid) {} } Vertex; //定义Graph的邻接表表示 typedef struct Graph { vector<Vertex> vertexs; //存储定点信息 int nVertexs; //计数：邻接数 bool isDAG; //标志：是有向图吗 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } //向图中添加边 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); } return true; } //广度优先搜索 vector<int> BFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); visited.insert(start); while(g.size() > 0) { int id = g[0]; g.erase(g.begin()); rst.push_back(id); for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); visited.insert(id1); } } } return rst; } //深度优先搜索 vector<int> DFS(int start) { set<int> visited; vector<int> g, rst; g.push_back(start); //cout << \"push \" << start << \" \"; visited.insert(start); rst.push_back(start); bool found; while(g.size() > 0) { int id = g[g.size()-1]; found = false; for(int i = 0; i < vertexs[id].connectors.size(); i++) { int id1 = vertexs[id].connectors[i]; if (visited.count(id1) == 0) { g.push_back(id1); rst.push_back(id1); visited.insert(id1); //cout << \"push \" << id1 << \" \"; found = true; break; } } if (!found) { int id2 = g[g.size()-1]; rst.push_back(-1 * id2); //cout << \"pop \" << id2 << \" \"; g.pop_back(); } } //cout << endl; return rst; } } Graph; int main() { Graph g(8, false); g.addEdge(0, 1); g.addEdge(0, 3); g.addEdge(1, 2); g.addEdge(3, 4); g.addEdge(3, 5); g.addEdge(4, 5); g.addEdge(4, 6); g.addEdge(5, 6); g.addEdge(5, 7); g.addEdge(6, 7); vector<int> bv = g.BFS(0); cout << \"宽度优先搜索节点顺序：\"; for(int j = 0; j < bv.size(); j++) cout << bv[j] << \" \"; cout << endl; cout << \"深度优先搜索节点顺序：\"; Graph g1(6, false); g1.addEdge(0, 1); g1.addEdge(0, 4); g1.addEdge(0, 5); g1.addEdge(1, 5); g1.addEdge(4, 5); g1.addEdge(5, 2); g1.addEdge(5, 3); g1.addEdge(2, 3); vector<int> route = g1.DFS(0); for(int i = 0; i < route.size(); i++) cout << route[i] << \" \"; cout << endl; char ch; cin >> ch; return 0; }","s":"不带出入度的最简模板","u":"/en/docs/Algorithms/机试技巧与STL","h":"#不带出入度的最简模板","p":809},{"i":866,"t":"#include <algorithm> #include <iostream> #include <vector> #include <queue> #define MAX(a, b) ((a) > (b) ? (a) : (b) ) using namespace std; int n,m; vector<int> inDegreelist,outDegreelist; //定义图的定点 typedef struct Vertex { int id,inDegree,outDegree; vector<int> connectors; //存储节点的后续连接顶点编号 Vertex() : id(-1),inDegree(0),outDegree(0) {} Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {} } Vertex; //定义Graph的邻接表表示 typedef struct Graph { vector<Vertex> vertexs; //存储定点信息 int nVertexs; //计数：邻接数 bool isDAG; //标志：是有向图吗 Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); } Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); } //向图中添加边 bool addEdge(int id1, int id2) { if (!(MAX(id1, id2) < vertexs.size())) return false; if (isDAG) { vertexs[id1].connectors.push_back(id2); vertexs[id1].outDegree++; vertexs[id2].inDegree++; } else { vertexs[id1].connectors.push_back(id2); vertexs[id2].connectors.push_back(id1); vertexs[id1].outDegree++; vertexs[id1].inDegree++; vertexs[id2].outDegree++; vertexs[id2].inDegree++; } return true; } } Graph; Graph g; void init(){ cin>>n>>m; g=Graph(n, true); int src,dst; while(m--){ cin>>src>>dst; g.addEdge(src,dst); } vector<Vertex>::iterator it = g.vertexs.begin(); while(it!=g.vertexs.end()){ inDegreelist.push_back(it->inDegree); outDegreelist.push_back(it->outDegree); it++; } } int countin(int n){ return count(inDegreelist.begin(),inDegreelist.end(),n); } int countout(int n){ return count(outDegreelist.begin(),outDegreelist.end(),n); } bool Is_List(){ //有一个inDegree为0的头和一个outDegree为0的尾，且其余节点入度与出度都为1; return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1); } bool Is_Tree(){ //有一个inDegree为0的头且其余节点inDegree均为1，且不是链表; return (countin(0)==1)&&(countin(1)==n-1); } bool topologicalSort(){//拓扑排序判断有环无环 int num=0;//记录加入拓扑排序的顶点数 queue<int> q; for(int i=0;i<n;i++){ if(inDegreelist[i]==0){ q.push(i);//将所有入度为0的顶点入队 } } while(!q.empty()){ int u=q.front();//取队首顶点u q.pop(); for(int i=0;i<g.vertexs[u].connectors.size();i++){ int v=g.vertexs[u].connectors[i];//u的后继节点v inDegreelist[v]--;//v的入度减1 if(inDegreelist[v]==0){//顶点v的入度减为0则入队 q.push(v); } } g.vertexs[u].connectors.clear();//清空u的所有出边 num++;//加入拓扑排序的顶点数加1 } if(num==n) return true;//加入拓扑排序的顶点为n，则拓扑排序成功，图无环 else return false;//否则拓扑排序失败，图有环 } int main(){ init(); if(n==0||m==0){ cout<<\"error\"<<endl; } if(Is_List()){ cout<<\"list\"<<endl; } else if(Is_Tree()){ cout<<\"tree\"<<endl; } else if(topologicalSort()){ cout<<\"no ring\"<<endl; } else{ cout<<\"have ring\"<<endl; } return 0; }","s":"带出入度的 (2019推免试题)","u":"/en/docs/Algorithms/机试技巧与STL","h":"#带出入度的-2019推免试题","p":809},{"i":868,"t":"#include<stdio.h> #include<stdlib.h> #ifndef BASE #define BASE #define TRUE 1 #define FALSE 0 #define OK 1 #define ERROR 0 #define INFEASIBLE -1 #define OVERFLOW -2 typedef int Status; typedef int bool; #endif #define VertexType char //点类型 #define VRType int //边类型 #define maxSize 100 void Visit(VertexType e) { printf(\"%c\", e); } #define MAX_VERTEX_NUM 20 typedef enum{DG, UDG} GraphKind; typedef struct ArcNode{ int adjV; //边指向的顶点 VRType weight; //权重 struct ArcNode *next; }ArcNode; //边 typedef struct VNode{ VertexType data; ArcNode *firstarc; }VNode, AdjList[MAX_VERTEX_NUM]; //顶点 typedef struct{ GraphKind kind; int vernum,arcnum; AdjList vers; }ALGraph; /*------------------------ |7.14 创建有向图的邻接表| ------------------------*/ Status InitGraph_AL(ALGraph *pG) { //初始化 int i; pG->arcnum = 0; pG->vernum = 0; for (i=0; i<MAX_VERTEX_NUM; ++i) pG->vers[i].firstarc = NULL; //VC++6.0中指针初始化为0xcccccccc return OK; } int LocateVex_AL(ALGraph G, VertexType e) { //定位值为e的元素下标 int i; for (i=0; i<G.vernum; ++i) { if (G.vers[i].data == e) { return i; } } return -1; } Status CreateDG_AL(ALGraph *pG) { //创建有向图的邻接表 //输入规则：顶点数目->弧的数目->各顶点的信息->各条弧的信息 int i,a,b; char tmp[MAX_VERTEX_NUM]; char h,t; ArcNode *p, *q; InitGraph_AL(pG); //VC++6.0中指针初始化为0xcccccccc，如果不将指针初始化为NULL，会出错 //图的类型 pG->kind = DG; //顶点数目 scanf(\"%d\", &i); if (i<0) return ERROR; pG->vernum = i; //弧的数目 scanf(\"%d\", &i); if (i<0) return ERROR; pG->arcnum = i; //各顶点信息 scanf(\"%s\", tmp); for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i]; //弧的信息 for (i=0; i<pG->arcnum; ++i) { scanf(\"%s\", tmp); h = tmp[0]; t = tmp[2]; a = LocateVex_AL(*pG, h); b = LocateVex_AL(*pG, t); if (a<0 || b<0) return ERROR; p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW); p->adjV=b;p->next=NULL; if (pG->vers[a].firstarc) { //已经有边了 for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //找到最后一条 q->next = p; } else { //第一条边 pG->vers[a].firstarc = p; } } return OK; } /*---------------------------------------------------------------- |7.28 有向图-从u-v的所有简单路径 | ----------------------------------------------------------------*/ int visit[MAX_VERTEX_NUM]; //前面定义了 VertexType paths[maxSize][MAX_VERTEX_NUM]; //存放路径 int path[MAX_VERTEX_NUM]; //路径 int pathnum=0; //当前是第几条路径 void FindAllPath(ALGraph G, int u,int v,int k) { //u->v当前是第k个位置 int i; ArcNode *p; visit[u]=1; //走到了u path[k]=u; //添加到路径->下标位置为k的结点是u（第k+1个是u） if (u==v) { //找到了 for (i=0; i<=k; i++) {//复制到paths paths[pathnum][i] = G.vers[path[i]].data; } paths[pathnum][i]='\\0'; //结束符 pathnum++; //找下一条路径 } else { //u的邻边开始找 for (p=G.vers[u].firstarc; p; p=p->next) { if (visit[p->adjV]==0) FindAllPath(G, p->adjV, v, k+1); //去这个邻接点找 } } // 回溯到上一个结点 // 注意：回溯应该写在外面-->也就是不管有没有找到都要回溯 visit[u]=0; path[k]=0; } int main() { /*7.28 6 11 ABCDEF B,A B,D C,B C,F D,C D,E D,F E,A F,A F,B F,E B->A A->B D->A */ int i,j; int cnt; ALGraph G; char tmp[20]; CreateDG_AL(&G); while (1) { scanf(\"%s\", tmp); //A->B i = LocateVex_AL(G, tmp[0]); j = LocateVex_AL(G, tmp[3]); for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0; pathnum=0; printf(\"7.28 输出所有 %c 到 %c 的路径\\n\", tmp[0], tmp[3]); FindAllPath(G, i, j, 0); if (pathnum==0) { printf(\"\\t- 走不通\\n\"); } for (i=0; i<pathnum; i++) { printf(\"\\t%d %s\\n\", i+1, paths[i]); } } return 0; }","s":"图算法：找出u到v的所有路径-邻接表","u":"/en/docs/Algorithms/机试技巧与STL","h":"#图算法找出u到v的所有路径-邻接表","p":809},{"i":871,"t":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; // 中序+先序=>二叉树 int mid_pr_build(int la,int ra,int lb,int rb) // la,ra：表示中序遍历 lb,rb：表示先序遍历 { // 这里不能等于，因为假设：len==1，则la==ra，直接返回，但是实际上是有一个 rt 的，却没被建立 if(la>ra) return 0; int rt=pr[lb]; // 因为先序遍历第一个是根节点 int p1=la,p2; while(mid[p1]!=rt) p1++; // 在中序遍历中找到根节点 p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // 左子树（锁定左子树范围的下标） T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // 右子树（锁定右子树范围的下标） return rt; } // 中序+后序=>二叉树 int mid_po_build(int la,int ra,int lb,int rb) // la,ra：表示中序遍历 lb,rb：表示后序遍历 { if(la>ra) return 0; int rt=po[rb]; // 因为后序遍历最后一个是根节点 int p1=la,p2; while(mid[p1]!=rt) p1++; // 在中序遍历中找到根节点 p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // 左子树（锁定左子树范围的下标） T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // 右子树（锁定右子树范围的下标） return rt; } // 求树高 int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } // 层序遍历 void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); // 推荐这种写法，简洁 } // 先序遍历 void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } // 中序遍历 void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } // 后序遍历 void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // 后序结点 // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); // 先序结点 for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); // 中序结点 int rt=mid_po_build(0,n-1,0,n-1); // 中+后，返回根节点 // int rt=mid_pr_build(0,n-1,0,n-1); // 中+先，返回根节点 bfs(rt); // 层序遍历 // preT(rt); // 先序遍历 // puts(\"\"); // postT(rt); // 后序遍历 // puts(\"\"); // midT(rt); // 中序遍历 // puts(\"\"); } return 0; }","s":"注释版","u":"/en/docs/Algorithms/机试技巧与STL","h":"#注释版","p":809},{"i":873,"t":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a); using namespace std; typedef long long ll; const int maxn=50; int mid[maxn],po[maxn],pr[maxn]; int first; struct node { int l,r; }T[maxn]; int mid_pr_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=pr[lb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); return rt; } int mid_po_build(int la,int ra,int lb,int rb) { if(la>ra) return 0; int rt=po[rb]; int p1=la,p2; while(mid[p1]!=rt) p1++; p2=p1-la; T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); return rt; } int getHeight(int rt) { if(rt==0) return 0; return 1+max(getHeight(T[rt].l),getHeight(T[rt].r)); } void bfs(int rt) { queue<int> q; vector<int> v; q.push(rt); while(!q.empty()) { int w=q.front(); q.pop(); v.push_back(w); if(T[w].l!=0) q.push(T[w].l); if(T[w].r!=0) q.push(T[w].r); } int len=v.size(); for(int i=0;i<len;i++) printf(\"%d%c\",v[i],i==len-1?'\\n':' '); } void preT(int rt) { if(rt==0) return; printf(first?first=0,\"%d\":\" %d\",rt); preT(T[rt].l); preT(T[rt].r); } void midT(int rt) { if(rt==0) return; midT(T[rt].l); printf(first?first=0,\"%d\":\" %d\",rt); midT(T[rt].r); } void postT(int rt) { if(rt==0) return; postT(T[rt].l); postT(T[rt].r); printf(first?first=0,\"%d\":\" %d\",rt); } int main() { int n; while(~scanf(\"%d\",&n)) { first=1; for(int i=0;i<n;i++) scanf(\"%d\",&po[i]); // for(int i=0;i<n;i++) scanf(\"%d\",&pr[i]); for(int i=0;i<n;i++) scanf(\"%d\",&mid[i]); int rt=mid_po_build(0,n-1,0,n-1); // int rt=mid_pr_build(0,n-1,0,n-1); bfs(rt); // preT(rt); // postT(rt); // midT(rt); } return 0; }","s":"简化版（Val As Index，若数据不在1~N内，则可能越界）","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简化版val-as-index若数据不在1n内则可能越界","p":809},{"i":875,"t":"#include<bits/stdc++.h> #include<cmath> #define mem(a,b) memset(a,b,sizeof a) #define ssclr(ss) ss.clear(), ss.str(\"\") #define INF 0x3f3f3f3f #define MOD 1000000007 using namespace std; typedef long long ll; const int maxn=5e4+1000; int f; int pre[maxn], in[maxn]; struct node { int l,r,d; }T[maxn]; int create(int l1,int r1,int l2,int r2) // in pre { if(l2>r2) return -1; int rt=l2; int p1=l1,p2; while(in[p1]!=pre[rt]) p1++; p2=p1-l1; T[rt].d=pre[rt]; T[rt].l=create(l1,p1-1,l2+1,l2+p2); T[rt].r=create(p1+1,r1,l2+p2+1,r2); return rt; } void postT(int rt) { if(rt==-1 || !f) return; postT(T[rt].l); postT(T[rt].r); if(f) f=0, printf(\"%d\\n\",T[rt].d); } int main() { int n; scanf(\"%d\",&n); for(int i=0;i<n;i++) scanf(\"%d\",&pre[i]); for(int i=0;i<n;i++) scanf(\"%d\",&in[i]); int rt=create(0,n-1,0,n-1); f=1, postT(rt); return 0; }","s":"简化版（Val Not As Index，可以存任意的 Val）","u":"/en/docs/Algorithms/机试技巧与STL","h":"#简化版val-not-as-index可以存任意的-val","p":809},{"i":877,"t":"在上一篇博客中我们完成了GeekOS环境的配置，下面我们来验证环境配置的成功与否以及project 0的实现。","s":"GeekOS project 0的实现","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"","p":876},{"i":879,"t":"编写geekos-version/src/projecti/src/geekos/main.c文件 编写函数project0实现检测键盘输入Ctrl+d结束线程。 void project0(){ Print(\"To Exit hit Ctrl + d.\\n\"); Keycode keycode; while(1) { if(Read_Key(&keycode)) { if(!((keycode & KEY_SPECIAL_FLAG) || (keycode & KEY_RELEASE_FLAG)))// 不是特殊键或者弹起 { int asciiCode = keycode & 0xff;//d if((keycode & KEY_CTRL_FLAG)==KEY_CTRL_FLAG && asciiCode=='d')//ctrl+d { Print(\"\\n---------Adios!---------\\n\"); # 这里需要注意素质 Exit(1); }else { Print(\"%c\",(asciiCode=='\\r') ? '\\n' : asciiCode); } } } } } 在main函数中添加以下代码，实现自定义函数的调用，创建线程。 struct Kernel_Thread *thread; thread = Start_Kernel_Thread(&project0,0,PRIORITY_NORMAL,false); 总体代码 /* * GeekOS C code entry point * Copyright (c) 2001,2003,2004 David H. Hovemeyer <daveho@cs.umd.edu> * Copyright (c) 2003, Jeffrey K. Hollingsworth <hollings@cs.umd.edu> * Copyright (c) 2004, Iulian Neamtiu <neamtiu@cs.umd.edu> * $Revision: 1.51 $ * * This is free software. You are permitted to use, * redistribute, and modify it as specified in the file \"COPYING\". */ #include <geekos/bootinfo.h> #include <geekos/string.h> #include <geekos/screen.h> #include <geekos/mem.h> #include <geekos/crc32.h> #include <geekos/tss.h> #include <geekos/int.h> #include <geekos/kthread.h> #include <geekos/trap.h> #include <geekos/timer.h> #include <geekos/keyboard.h> void project0(){ Print(\"To Exit hit Ctrl + d.\\n\"); Keycode keycode; while(1) { if(Read_Key(&keycode)) { if(!((keycode & KEY_SPECIAL_FLAG) || (keycode & KEY_RELEASE_FLAG)))// 不是特殊键或者弹起 { int asciiCode = keycode & 0xff;//d if((keycode & KEY_CTRL_FLAG)==KEY_CTRL_FLAG && asciiCode=='d')//ctrl+d { Print(\"\\n---------Adios! Motherfucker!---------\\n\"); Exit(1); }else { Print(\"%c\",(asciiCode=='\\r') ? '\\n' : asciiCode); } } } } } /* * Kernel C code entry point. * Initializes kernel subsystems, mounts filesystems, * and spawns init process. */ void Main(struct Boot_Info* bootInfo) { Init_BSS(); Init_Screen(); Init_Mem(bootInfo); Init_CRC32(); Init_TSS(); Init_Interrupts(); Init_Scheduler(); Init_Traps(); Init_Timer(); Init_Keyboard(); Set_Current_Attr(ATTRIB(BLACK, GREEN|BRIGHT)); Print(\"Welcome to GeekOS!\\n\"); Set_Current_Attr(ATTRIB(BLACK, GRAY)); // TODO(\"Start a kernel thread to echo pressed keys and print counts\"); struct Kernel_Thread *thread; thread = Start_Kernel_Thread(&project0,0,PRIORITY_NORMAL,false); /* Now this thread is done. */ Exit(0); }","s":"1. 编写C语言代码","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#1-编写c语言代码","p":876},{"i":881,"t":"每一个项目的编译都在geekos-version/src/projecti/build文件夹下进行，即要在终端中通过cd进入该目录。 执行 make depend make 此时，该目录下会生成bochs.out、depend.mak以及fd.img文件，bochs.out文件是日志输出文件，depend.mak是编译中间生成的文件，最终生成的fd.img是最重要的GeekOS映像文件，有了它才能使用bochs运行GeekOS操作系统。感恩它！ 目录下的文件应该是这样的结构： 下面就可以使用bochs运行GeekOS系统了，可以说bochs的运行依赖两个文件，一个是配置文件.bochsrc，一个是映像文件fd.img，映像文件的加载路径需要在.bochsrc文件中定义，在环境配置的博客中已经介绍过了。这里再贴一下内容。 # An example .bochsrc file. # You will need to edit these lines to reflect your system. vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # 请根据自己的实际安装路径更改 romimage: file=/usr/local/share/bochs/BIOS-bochs-latest # 请根据自己的实际安装路径更改 megs: 8 boot: a floppya: 1_44=fd.img, status=inserted #floppya: 1_44=fd_aug.img, status=inserted log: ./bochs.out # keyboard_serial_delay: 200 # vga_update_interval: 300000 mouse: enabled=0 private_colormap: enabled=0 # i440fxsupport: enabled=0 # Uncomment this to write all bochs debugging messages to # bochs.out. This produces a lot of output, but can be very # useful for debugging the kernel. #debug: action=report 在这个目录下打开终端，执行 bochs 选择6，按下回车 可能会出现黑屏情况，这是因为进入了调试模式，终端正在等待命令，在终端输入 c 即可完成bochs的正式启动，最终的效果","s":"2. 使用Linux的编译系统对C语言代码进行编译","u":"/en/docs/Curriculum/操作系统课设/GeekOS-project-0","h":"#2-使用linux的编译系统对c语言代码进行编译","p":876},{"i":885,"t":"GeekOS是一个基于x86体系结构的微操作系统内核. 由美国马理兰大学的教师开发, 主要用于操作系统课程设计的教育. 出于教学目的, 这个系统内核设计简单, 却又兼备实用性, 它可以运行在真正的X86 PC硬件平台. 在下载好GeekOS后, 在geekos-version/src/目录下会存在project0-project6这7个文件夹, 分别代表GeekOS设计的7个学习任务. 在环境搭建完成之后, 我们进行的每一个项目的代码编写几乎都在geekos-version/src/projecti/src/geekos/文件夹下, 每一个项目的编译都在geekos-version/src/projecti/build文件夹下进行, 即要在终端中通过cd进入该目录, 再执行make depend和make命令.","s":"1. GeekOS:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#1-geekos","p":882},{"i":887,"t":"bochs是一个x86硬件平台的模拟器. GeekOS运行依托于bochs. 在安装好Linux操作系统后需要安装bochs以及nasm, 以完成GeekOS环境的搭建.","s":"2. bochs:","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#2-bochs","p":882},{"i":889,"t":"GeekOS的开发环境可分为两部分, 一部分是编译环境, 一部分是运行环境. 在编译过程中, 使用Linux自带的编译环境以及编译命令对特定的GeekOS project进行编译即可. 首先在终端中通过cd命令进入geekos-version/src/projecti/build目录, 再执行make depend和make命令. 编译后生成bochs的镜像文件fd.img, 这是bochs运行所必须的文件,也是GeekOS运行环境的前置配置.","s":"3. 二者之间的关系","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#3-二者之间的关系","p":882},{"i":891,"t":"安装其实非常简单, 这里主要花篇幅介绍安装后解决报错的配置.","s":"二、安装与配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#二安装与配置","p":882},{"i":893,"t":"需要下载GeekOS Files, 安装bochs, nasm等. GeekOS直接下载压缩包, 解压即可. arch系用户通过以下命令即可完成bochs和nasm的安装. yay -S bochs nasm 其他发行版的安装方法这里不再赘述, 可选择从群文件里下载源文件并编译安装, 师兄师姐也在群文件里给了一些教程指导.","s":"1. 安装","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#1-安装","p":882},{"i":895,"t":"完成安装后, 我们就可以开始对project0中的代码进行完善了, 并在geekos-version/src/project0/build目录下执行make depend以及make命令, 目的是编译project0的代码, 生成bochs的镜像文件fd.img以构建GeekOS的运行环境. 但很多报错就是在make这一步产生的, 因此在安装完成后还需要进行配置. 配置分为两部分, 一个是对GeekOS中makefile的修改, 另一部分是对bochs的配置文件的修改. GeekOS中makefile的配置​ 综合网上很多师兄师姐的博客，这三个错误应该是每个人都会遇到的，所以当你不确定自己能不能运行时，请全部完成这三个步骤. 问题: warnings being treated as errors 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件(由于每个project下都存在一个对应的makefile文件, 所以在每个项目编译前都要修改一次) // 修改第149行： CC_GENERAL_OPTS := $(GENERAL_OPTS) -Werror // 修改后： CC_GENERAL_OPTS := $(GENERAL_OPTS) 问题: X86_64与i386输出不兼容 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件 # Target C compiler. gcc 2.95.2 or later should work. 100行 TARGET_CC := $(TARGET_CC_PREFIX)gcc -m32 # Host C compiler. This is used to compile programs to execute on # the host platform, not the target (x86) platform. On x86/ELF # systems, such as Linux and FreeBSD, it can generally be the same # as the target C compiler. 106行 HOST_CC := gcc -m32 # Target linker. GNU ld is probably to only one that will work.109行 TARGET_LD := $(TARGET_CC_PREFIX)ld -m elf_i386 问题: undefined reference to '__stack_chk_fail' 解决方案: 修改geekos-version/src/projecti/build目录下的makefie文件 # Flags used for all C source files // 修改前：148行 GENERAL_OPTS := -O -Wall $(EXTRA_C_OPTS) // 修改后： GENERAL_OPTS := -O -Wall -fno-stack-protector $(EXTRA_C_OPTS) bochs配置文件的修改​ 在geekos-version/src/projecti/build目录下创建.bochsrc文件 # An example .bochsrc file. # You will need to edit these lines to reflect your system. vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest # 请根据自己的实际安装路径更改 romimage: file=/usr/local/share/bochs/BIOS-bochs-latest # 请根据自己的实际安装路径更改 megs: 8 boot: a floppya: 1_44=fd.img, status=inserted #floppya: 1_44=fd_aug.img, status=inserted log: ./bochs.out # keyboard_serial_delay: 200 # vga_update_interval: 300000 mouse: enabled=0 private_colormap: enabled=0 # i440fxsupport: enabled=0 # Uncomment this to write all bochs debugging messages to # bochs.out. This produces a lot of output, but can be very # useful for debugging the kernel. #debug: action=report 到此为止, 所有的配置工作已经完成, 可以正常的进行下一步的代码完善. 如果需要验证自己是否配置成功, 可以参照下一篇博客GeekOS project 0的实现, 在本篇博客中会有完整的C语言代码编写以及编译、使用bochs执行的过程.","s":"2. 配置","u":"/en/docs/Curriculum/操作系统课设/Environment-Configuration","h":"#2-配置","p":882},{"i":897,"t":"tip 本笔记使用的教材是陈天华所著、清华大学出版社的《数字图像处理及应用：使用MATLAB分析与实现》。 Take me to church, I'll worship like a dog at the shrine of your lies. I'll tell you my sins, and you can sharpen your knife. Offer me that deathless death, good god, let me give you my life.","s":"数字图像处理复习笔记","u":"/en/docs/Curriculum/数字图像处理/Note","h":"","p":896},{"i":900,"t":"为了从模拟图像产生数字图像，需要进行采样与量化，即对模拟图像在空间(x,y)(x, y)(x,y)方向上以及亮度函数f(x,y)f(x, y)f(x,y)进行离散化处理。 采样： 模拟图像在空间(x,y)(x, y)(x,y)上的离散化称为采样。 若在x和y方向上均进行等间距的采样，则称为均匀采样。 采样点的多少以及采样的间隔直接影响着图像的质量。 量化： 模拟图像经过采样后，在时间和空间上被离散化为像素，但采样所得的像素点的像素值依然是连续量。量化过程就是以离散的灰度值信息代替连续的模拟量灰度信息的过程，是一对多的过程。 量化可以分为线性量化以及非线性量化。 灰度级一般以2的整数次幂表示，如大多图像为彩色RGB图像，256个灰度级，位深度为8（28=2562^8=25628=256），则对于分辨率为256×256的图像来说，需要256×256×3×8位表示，即每一个像素实际上使用24位表示。","s":"图像的采样与量化","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像的采样与量化","p":896},{"i":902,"t":"4邻域N4(p)N_4(p)N4​(p)即该像素上下左右的四个点，8邻域N8(p)N_8(p)N8​(p)，对角邻域ND(p)N_D(p)ND​(p)。 像素之间的距离度量必须满足三种关系： 非负性 对称性 三角不等式 三种距离度量： 已知，点ppp的坐标为(x,y)(x, y)(x,y)，点qqq的坐标为(s,t)(s,t)(s,t)。 欧氏距离： De(p,q)=(x−s)2+(y−t)2(1)D_e(p,q)=\\sqrt{(x-s)^2+(y-t)^2}\\tag{1}De​(p,q)=(x−s)2+(y−t)2​(1) 城市距离 D4(p,q)=∣x−s∣+∣y−t∣(2)D_4(p,q)=\\vert x-s\\vert+\\vert y-t\\vert \\tag{2}D4​(p,q)=∣x−s∣+∣y−t∣(2) 棋盘距离 D8(p,q)=max(∣x−s∣,∣y−t∣)(3)D_8(p,q)=max(\\vert x-s\\vert,\\vert y-t\\vert)\\tag{3}D8​(p,q)=max(∣x−s∣,∣y−t∣)(3)","s":"距离度量","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#距离度量","p":896},{"i":904,"t":"MSE越小代表待测图像与参考图像越接近，均方误差公式如下： MSE=1MN∑x=1M∑y=1N[f(x,y)−g(x,y)]2(4)MSE=\\frac{1}{MN}\\sum_{x=1}^{M}\\sum_{y=1}^{N}[f(x,y)-g(x,y)]^2\\tag{4}MSE=MN1​x=1∑M​y=1∑N​[f(x,y)−g(x,y)]2(4) SNR：参考图像像素值的平方均值与均方误差的比值的对数的10倍。越大代表图像质量越好 PSNR：峰值信噪比，图像所允许的最大像素值的平方与均方误差的比值的对数的10倍，这是信噪比的改良版本，消除了图像自身像素值对评价指标的影响。越大代表图像质量越好 SSIM为结构相似系数，越大代表图像质量越好","s":"图像质量评价","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像质量评价","p":896},{"i":908,"t":"可以使用傅里叶变换的函数需要满足狄利克莱条件（Dirichlet Condition）： 具有有限个间断点 具有有限个极值点 绝对可积 傅里叶变换的特性： info 傅里叶频谱图的特征： 频率分布：傅里叶频谱图展示了图像在不同频率下的强度分布。高频部分对应图像中的边缘和细节，低频部分对应图像中的整体结构和大致轮廓。 能量分布：图像中不同频率的能量在频谱图中以不同强度的幅度呈现。高幅度的频率分量通常标示着图像中强烈的变化或边缘。 平移不变性：傅里叶变换具有平移不变性，这意味着在频域中图像的平移对应于幅度谱中相位的改变而不影响幅度谱本身。 连续傅里叶变换​ 一维连续傅里叶变换 F(u)=∫−∞+∞f(x)e−j2πuxdx(5)F(u)=\\int_{-\\infty}^{+\\infty}f(x)e^{-j2\\pi ux}dx\\tag{5}F(u)=∫−∞+∞​f(x)e−j2πuxdx(5) 一维连续傅里叶逆变换 f(x)=∫−∞∞F(u)ej2πuxdu(6)f(x)=\\int_{-\\infty}^{\\infty}F(u)e^{j2\\pi ux}du\\tag{6}f(x)=∫−∞∞​F(u)ej2πuxdu(6) 二维连续傅里叶变换 F(u,v)=∫−∞∞∫−∞∞f(x,y)e−j2π(ux+vy)dxdy(7)F(u,v)=\\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}f(x,y)e^{-j2\\pi (ux+vy)}dxdy\\tag{7}F(u,v)=∫−∞∞​∫−∞∞​f(x,y)e−j2π(ux+vy)dxdy(7) 二维连续傅里叶逆变换 f(x,y)=∫−∞∞∫−∞∞F(u,v)ej2π(ux+vy)dudv(8)f(x,y)=\\int_{-\\infty}^{\\infty}\\int_{-\\infty}^{\\infty}F(u,v)e^{j2\\pi (ux+vy)}dudv\\tag{8}f(x,y)=∫−∞∞​∫−∞∞​F(u,v)ej2π(ux+vy)dudv(8) 离散傅里叶变换​ 一维离散傅里叶变换 F(u)=∑x=0N−1f(x)e−j2πuxN(9)F(u)=\\sum_{x=0}^{N-1}f(x)e^{-j\\frac{2\\pi ux}{N}}\\tag{9}F(u)=x=0∑N−1​f(x)e−jN2πux​(9) 一维离散傅里叶逆变换 f(x)=1N∑u=0N−1F(u)ej2πuxN(10)f(x)=\\frac{1}{N}\\sum_{u=0}^{N-1}F(u)e^{j\\frac{2\\pi ux}{N}}\\tag{10}f(x)=N1​u=0∑N−1​F(u)ejN2πux​(10) 二维离散傅里叶变换 F(u,v)=∑x=0M−1∑y=0N−1f(x,y)e−j2π(uxM+vyN)(11)F(u,v)=\\sum_{x=0}^{M-1}\\sum_{y=0}^{N-1}f(x,y)e^{-j2\\pi (\\frac{ux}{M}+\\frac{vy}{N})}\\tag{11}F(u,v)=x=0∑M−1​y=0∑N−1​f(x,y)e−j2π(Mux​+Nvy​)(11) 二维离散傅里叶逆变换 f(x,y)=1MN∑u=0M−1∑v=0N−1F(u,v)ej2π(uxM+vyN)(12)f(x,y)=\\frac{1}{MN}\\sum_{u=0}^{M-1}\\sum_{v=0}^{N-1}F(u,v)e^{j2\\pi (\\frac{ux}{M}+\\frac{vy}{N})}\\tag{12}f(x,y)=MN1​u=0∑M−1​v=0∑N−1​F(u,v)ej2π(Mux​+Nvy​)(12)","s":"傅里叶变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#傅里叶变换","p":896},{"i":911,"t":"下图展示了点运算的主要应用：对比度拉伸 主要应用： 对比度拉伸 光度学标定 显示标定 轮廓线 裁剪","s":"点运算","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#点运算","p":896},{"i":913,"t":"使用齐次坐标对图像进行比例缩放。 全比例缩放是指x方向和y方向使用相同的比例系数。 当对图像进行放大时，会产生之前没有的像素，此时需要使用插值来解决。","s":"比例缩放","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#比例缩放","p":896},{"i":915,"t":"最近邻法插值​ 双线性插值（Bilinear）​ 例题：","s":"灰度级插值","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#灰度级插值","p":896},{"i":918,"t":"线性变换​ 是指将输入图像的灰度值的动态范围按线性关系变换至指定范围或灰度的整个动态范围。 按比例线性变换 均匀线性变换 限幅线性变换 分段线性拉伸 非线性变换​ 对数拉伸可以拉伸低亮度区域，压缩高亮度区域。 指数拉伸可以拉伸高亮度区域，压缩低亮度区域。 注意，上述的拉伸是指新的图像在该灰度范围内分布的更均匀，即出现的灰度级更多；压缩的意义是指新的图像在该灰度范围内分布的更狭窄，即出现的灰度级更少。 例题： 答：该图像存在较亮的问题，灰度直方图分布在较高的区域。从直接灰度变换增强法的角度，我们可以采用指数函数变换，对高灰度区进行扩展。 tip 分析：该图像中没有低灰度的像素，全部集中在高灰度部分，因此使用指数函数变换将原来的集中的高灰度区域进行拉伸，扩展其灰度分布的范围，从而起到增强效果。","s":"直接灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直接灰度变换","p":896},{"i":920,"t":"直方图均衡化​ 目的： 将一非均匀灰度概率密度分布的图像，通过某种灰度变换，将其变成一幅具有均匀灰度概率密度分布的目的图像。 步骤： 根据原始图像计算原始灰度密度分布函数rkr_krk​ 计算变换函数，即累积密度分布函数sks_ksk​ 计算均衡化后的灰度级s(k)s(k)s(k)，即使用以下公式进行均衡化映射： s(k)=ceil(sk×L−1)(13)s(k)=\\mathbf{ceil}(s_k\\times L-1)\\tag{13}s(k)=ceil(sk​×L−1)(13) 其中，LLL是原直方图中灰度级数。 画出最终均衡化后的直方图 例题： 直方图规定化​ 目的： 调整原始图像的直方图使其符合某一规定的直方图的要求。 思想： 将原始图像和规定图像进行均衡化后，二者的灰度概率密度分布相同，进行对应映射即可。 步骤： 对原始图像进行均衡化，得到映射后的s(k)s(k)s(k) 对规定的图像直方图进行均衡化，得到映射后的z(k)z(k)z(k) 由于s(k)s(k)s(k)和z(k)z(k)z(k)都是归一化后的均匀分布，使用二者之间的就近原则将s(k)s(k)s(k)对应到给出的规定直方图的灰度级 画出规定化后的直方图 例题： 此时已经获得了原始图像均衡化后的灰度级与目标规定化输出的图像的灰度级之间的映射关系，最后一步按照rkr_krk​画出目标规定化输出的图像直方图即可。","s":"直方图灰度变换","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#直方图灰度变换","p":896},{"i":922,"t":"空域滤波可以根据作用分为平滑滤波以及锐化滤波。 平滑滤波​ info 噪声的特点： 随机性 叠加性 噪声与图像之间具有相关性 线性平滑滤波​ 邻域平均滤波 加权平均滤波 高斯滤波 非线性平滑滤波​ 中值滤波 最大值滤波 最小值滤波 锐化滤波​ 锐化滤波消除或减弱图像的低频分量从而增强图像中物体的边缘轮廓信息，使得除边缘以外的像素点的灰度值趋向于零。 梯度法 拉普拉斯算子，非线性滤波 定向滤波：检测特定方向边缘的滤波，通常在模板上表现为在该特定方向上模板值较大。 下面的表格展示了水平方向的定向锐化模板 -1 -1 -1 2 2 2 -1 -1 -1 下面的表格展示了对角方向的定向锐化模板 -1 2 -1 -1 2 -1 -1 2 -1","s":"空域滤波增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#空域滤波增强","p":896},{"i":924,"t":"图像从空域变换到频域后，低频分量对应图像中灰度值变化缓慢的区域，可能是图像的背景；高频分量表示图像中灰度值变化迅速的区域，可能是图像的噪声或物体的边缘。 在图像频谱（经过中心偏移的）中，中心代表低频信息，四周代表高频信息。","s":"第6章 图像频域增强","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#第6章-图像频域增强","p":896},{"i":926,"t":"抑制、衰减高频分量，保留低频分量。 理想低通滤波器（ILPF）​ tip ILPF means Ideal Low Pass Filter. H(u,v)={1D(u,v)≤D00D(u,v)>D0(14)H(u,v)=\\begin{cases}1&D(u,v)\\leq D_0\\\\ 0&D(u,v)>D_0\\end{cases}\\tag{14}H(u,v)={10​D(u,v)≤D0​D(u,v)>D0​​(14) D(u,v)=u2+v2(15)D(u,v)=\\sqrt{u^2+v^2}\\tag{15}D(u,v)=u2+v2​(15) 在截止频率D0D_0D0​处垂直截止，通过频率和截止频率在D0D_0D0​处具有不连续性，通带和阻带之间没有过渡，会产生无限的振铃效应。 巴特沃斯低通滤波器（BLPF）​ 通带与阻带之间过度平坦，通过频率和截止频率之间没有明显的不连续性，不会出现振铃效应。 H(u,v)=11+(2−1)[D(u,v)D0]2n(16)H(u,v)=\\frac{1}{1+(\\sqrt{2}-1)[\\frac{D(u,v)}{D_0}]^{2n}}\\tag{16}H(u,v)=1+(2​−1)[D0​D(u,v)​]2n1​(16) 其中，取H(u,v)H(u,v)H(u,v)下降到最大值的0.707时的D(u,v)D(u,v)D(u,v)作为截止频率D0D_0D0​。 即当D(u,v)D(u,v)D(u,v)达到截止频率时，D(u,v)D0=1\\frac{D(u,v)}{D_0}=1D0​D(u,v)​=1，此时H(u,v)=0.707H(u,v)=0.707H(u,v)=0.707。 指数低通滤波器（ELPF）​ 一般情况下，取H(u,v)H(u,v)H(u,v)下降到最大值的1/2时的D(u,v)D(u,v)D(u,v)作为截止频率。 H(u,v)=e−[D(u,v)D0]n(17)H(u,v)=e^{-[\\frac{D(u,v)}{D_0}]^n}\\tag{17}H(u,v)=e−[D0​D(u,v)​]n(17) 截止频率和通过频率之间具有更光滑的过渡，没有振铃现象。且指数低通滤波器比巴特沃斯低通滤波器衰减更快，处理后的图像更模糊。 梯形低通滤波器（TLPF）​ 由于在D0D_0D0​尾部包含高频分量D1D_1D1​，处理后图像的清晰度较理想低通滤波器有所改善，但会出现振铃效应， H(u,v)={1D(u,v)<D0D(u,v)−D1D0−D1D0≤D(u,v)≤D10D(u,v)>D1(18)H(u,v)=\\begin{cases}1&D(u,v)<D_0\\\\ \\\\ \\frac{D(u,v)-D_1}{D_0-D_1}&D_0\\leq D(u,v)\\leq D_1\\\\ \\\\ 0&D(u,v)>D_1\\end{cases}\\tag{18}H(u,v)=⎩⎨⎧​1D0​−D1​D(u,v)−D1​​0​D(u,v)<D0​D0​≤D(u,v)≤D1​D(u,v)>D1​​(18)","s":"低通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#低通滤波","p":896},{"i":928,"t":"抑制低频分量，保留高频分量。 理想高通滤波器（IHPF）​ H(u,v)={1D(u,v)>D00D(u,v)≤D0(19)H(u,v)=\\begin{cases}1&D(u,v)>D_0\\\\ 0&D(u,v)\\leq D_0\\end{cases}\\tag{19}H(u,v)={10​D(u,v)>D0​D(u,v)≤D0​​(19) 性质与理想低通滤波器一样，垂直截断，具有无限振铃效应。 巴特沃斯高通滤波器（BHPF）​ H(u,v)=11+(2−1)[D0D(u,v)]2n(20)H(u,v)=\\frac{1}{1+(\\sqrt{2}-1)[\\frac{D_0}{D(u,v)}]^{2n}}\\tag{20}H(u,v)=1+(2​−1)[D(u,v)D0​​]2n1​(20) 通常采取H(u,v)H(u,v)H(u,v)下降到最大值的0.707时的D(u,v)D(u,v)D(u,v)作为截止频率，没有振铃效应。 指数高通滤波器（EHPF）​ H(u,v)=e−[D0D(u,v)]n(21)H(u,v)=e^{-[\\frac{D_0}{D(u,v)}]^n}\\tag{21}H(u,v)=e−[D(u,v)D0​​]n(21) 梯形高通滤波器（THPF）​ H(u,v)={1D(u,v)>D0D(u,v)−D1D0−D1D1≤D(u,v)≤D00D(u,v)<D1(22)H(u,v)=\\begin{cases}1&D(u,v)>D_0\\\\ \\\\ \\frac{D(u,v)-D_1}{D_0-D_1}&D_1\\leq D(u,v)\\leq D_0\\\\ \\\\ 0&D(u,v)<D_1\\end{cases}\\tag{22}H(u,v)=⎩⎨⎧​1D0​−D1​D(u,v)−D1​​0​D(u,v)>D0​D1​≤D(u,v)≤D0​D(u,v)<D1​​(22)","s":"高通滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#高通滤波","p":896},{"i":930,"t":"带通滤波​ 顾名思义，带通滤波就是允许某一特定频率的信号通过，而衰减频率范围之外的信号。 理想带通滤波的传递函数为： H(u,v)={0D(u,v)<D0−w21D0−w2≤D(u,v)≤D0+w20D(u,v)≥D0+w2(23)H(u,v)=\\begin{cases}0&D(u,v)<D_0-\\frac{w}{2}\\\\1&D_0-\\frac{w}{2}\\leq D(u,v)\\leq D_0+\\frac{w}{2}\\\\0&D(u,v)\\geq D_0+\\frac{w}{2}\\end{cases}\\tag{23}H(u,v)=⎩⎨⎧​010​D(u,v)<D0​−2w​D0​−2w​≤D(u,v)≤D0​+2w​D(u,v)≥D0​+2w​​(23) 其中，D0D_0D0​是通带中心频率，www是通带宽度。 带阻滤波​ 顾名思义，带阻滤波就是衰减某一特定频率范围的信号，而允许频率范围之外的信号通过。 理想带阻滤波的传递函数为： H(u,v)={1D(u,v)<w10w1⩽D(u,v)≤w21D(u,v)>w2(24)H(u,v)=\\begin{cases}1&D(u,v)<w_1\\\\0&w_1\\leqslant D(u,v)\\leq w_2\\\\1&D(u,v)> w_2\\end{cases}\\tag{24}H(u,v)=⎩⎨⎧​101​D(u,v)<w1​w1​⩽D(u,v)≤w2​D(u,v)>w2​​(24)","s":"带通和带阻滤波","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#带通和带阻滤波","p":896},{"i":933,"t":"伪彩色图像的增强一般用于B超、石油开采以及安检方面。","s":"伪彩色图像的处理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#伪彩色图像的处理","p":896},{"i":937,"t":"退化原因​ 成像系统镜头聚焦不准产生的散焦 相机与景物之间的相对运动 成像系统存在的各种非线性因素以及系统本身的性能 模拟图像在数字化过程中，因数字化的精度和误差而损失图像细节 成像系统中存在的各种随机噪声 复原机理​ 图像复原的过程一般是沿着图像退化的逆向过程进行的。首先根据先验知识分析退化原因，了解图像变质的原理，在此基础上建立图像的退化模型，然后以图像退化的逆过程对图像进行处理。 图像复原与图像增强的区别和联系​ 联系：二者从表面上看都是为了提高图像的质量。 区别：二者在目的和过程上都有明显的区别。 在目的上，图像增强是为了提高图像的视感质量，增强后的图像可能损失一些信息，并与原始图像有一定的差异；而图像复原是为了使待复原的图像与原始图像尽可能的接近。 在过程上。图像增强一般不考虑图像退化的真实过程，而是使用特定技术来突出和强调图像中所关注的特征；而图像复原是直接针对图像产生退化的原因建立相应的数学模型，并沿着退化的逆向进行复原。","s":"图像退化机理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化机理","p":896},{"i":939,"t":"图像f(x,y)f(x,y)f(x,y)经过退化系统H(x,y)H(x,y)H(x,y)后再与噪声n(x,y)n(x,y)n(x,y)叠加，得到最后退化的图像g(x,y)g(x,y)g(x,y)。 退化系统的一般特性： 线性特性。 空间位置不变性：经过退化系统后的输出只有输入有关，而与输入在图像中的位置无关。","s":"图像退化模型","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#图像退化模型","p":896},{"i":942,"t":"最佳阈值法​ 假设图像由物体和背景两部分组成，且物体像素的分布和背景像素的分布均符合正态分布，物体像素的正态分布概率密度函数的均值为μ\\muμ，背景像素的正态分布概率密度函数的均值为ν\\nuν，则最佳阈值法确定的阈值为 t=μ+ν2(25)t=\\frac{\\mu +\\nu}{2}\\tag{25}t=2μ+ν​(25) 判别分析法​ 通过计算灰度直方图的0阶矩和1阶矩最大化类间方差从而得到最佳阈值。","s":"阈值分割法","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#阈值分割法","p":896},{"i":944,"t":"什么是图像的边缘？ 图像中结构具有突变的地方，表明一个区域的终结，也是另一个区域的开始，这种不连续性称为边缘。 边缘信号的类型？ 阶跃型，但实际情况中不可能有完全理想的突变。突变处为边缘点。 渐变型，逐渐增大或逐渐减小。渐变的中间位置为边缘点。 台阶型。台阶的中间为边缘点或认为台阶两侧为两个边缘点。","s":"边缘检测的基本原理","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测的基本原理","p":896},{"i":946,"t":"Robert算子​ 一阶导数算子。 利用局部差分方法，采用对角线方向相邻两像素之差近似梯度幅值检测边缘。 对噪声敏感，不能抑制噪声。 Sobel算子​ 一阶导数算子。 先进行加权平均，然后进行微分运算。 对噪声具有一定的抑制能力。 Prewitt算子​ 一阶导数算子。 利用局部差分平均方法寻找边缘。两个模板一个检测水平边缘，一个检测竖直边缘。 对噪声具有一定的抑制能力。 Laplace算子​ 二阶导数算子。 使噪声成分得到加强，对噪声更敏感。 与Marr边缘检测算子一样，一般先进行低通滤波平滑后再进行二阶微分运算。 Canny边缘检测​ 使用高斯滤波平滑图像 计算梯度幅值和方向 NMS非极大值抑制，保留每个像素点上梯度强度的极大值，删掉其他值 使用双阈值方法确定强边界和弱边界 滞后边界跟踪","s":"边缘检测算子","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#边缘检测算子","p":896},{"i":948,"t":"傅里叶频谱图的特征： 频率分布：傅里叶频谱图展示了图像在不同频率下的强度分布。高频部分对应图像中的边缘和细节，低频部分对应图像中的整体结构和大致轮廓。 能量分布：图像中不同频率的能量在频谱图中以不同强度的幅度呈现。高幅度的频率分量通常标示着图像中强烈的变化或边缘。 平移不变性：傅里叶变换具有平移不变性，这意味着在频域中图像的平移对应于幅度谱中相位的改变而不影响幅度谱本身。 如何在频域实现图像平滑 利用傅里叶变换将图像从空域转换为频域； 将频域图像进行中心偏移，使得低频信息在频谱中央； 利用滤波函数生成一个与图像大小相同的二维频域矩阵； 将图像的频域与滤波器的频域相应相乘； 将相乘后的频域再次逆平移到频域的原始位置； 将得到的频域进行逆傅里叶变换，得到滤波后的空域图像。 一阶边缘检测算子与Laplace算子的异同。 相同点：都可以检测边缘并且对噪声敏感 不同点：一阶边缘检测算子检测到的边缘都有明确的方向，而Laplace算子对各种方向的边缘都有较好的响应 已知一幅图像受到加性随机噪声污染，分析并写出三种去除或降低噪声的方法。 空域滤波（均值滤波、中值滤波），频域滤波（巴特沃斯低通滤波），图像恢复技术。 分析采样和量化的过程，以及它们对数字化图像质量的影响。 采样是把空间上连续的图像转换为离散的抽样点，即像素。量化将抽样后所得的连续的像素值离散化为整数值。 对数字化图像质量的影响： 采样间隔越大，所得图像像素数越少，图像空间分辨率越低，质量越差。反之图像质量好，但数据量大。 量化等级越多（灰度级数越多），所得图像层次越丰富，灰度分辨率越高，质量越好，但数据量大。反之，图像质量差，会出现假轮廓现象，但数据量小。 图像噪声的特点。 随机性 叠加性 噪声与图像之间具有相关性 什么是线性灰度拉伸？线性灰度拉伸可以分为几种情况？ 线性灰度拉伸是将输入图像的灰度值的动态范围按线性关系拉伸扩展至指定范围或灰度的整个动态范围。 线性拉伸可分为按比例线性拉伸和分段线性拉伸两种方法。同时，按比例线性拉伸又可以分为均匀线性拉伸以及限幅线性拉伸。 伪彩色图像处理可以应用在哪些方面？ B超 石油开采 安检","s":"课后习题中的问答题","u":"/en/docs/Curriculum/数字图像处理/Note","h":"#课后习题中的问答题","p":896},{"i":950,"t":"tip 欢迎来到笔记本的课程学习部分","s":"Welcome","u":"/en/docs/Curriculum/intro","h":"","p":949},{"i":952,"t":"如果可以帮到你的话就给个免费的Star吧！","s":"支持我！","u":"/en/docs/Curriculum/intro","h":"#支持我","p":949},{"i":955,"t":"在文字生成模型中根据模型的输入是否与前一时刻的输出有关可以分为自回归AR模型与非自回归NAR模型两种，这两种生成方式的利与弊在图像生成中仍然存在。","s":"回顾文字生成的两种方法","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#回顾文字生成的两种方法","p":953},{"i":957,"t":"Transformer-based的文字生成模型有很多，如GPT模型，大多使用自回归（Autoregressive, abbr. AR）的方法逐token生成。 什么是ARM ARM（Autoregressive Model，自回归模型）是一类用于建模时间序列数据的统计模型，其中当前时刻的观测值被认为是过去时刻观测值的线性组合，加上一个随机误差项。这类模型的核心思想是，当前时刻的数据依赖于先前时刻的数据。 若把文字生成的AR方法对应到图像生成中的使用，即一个一个像素生成图像。由于当前对高清图像像素的需求越来越高，自回归的生成方式导致速度非常缓慢，但优点是后面生成的每一个像素都考虑了之前的所有像素，从而使生成的图像更清晰、更细腻、更加符合预期。","s":"自回归方法（AR）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#自回归方法ar","p":953},{"i":959,"t":"若使用NAR非自回归的方法一次生成所有像素，各像素在生成时无法考虑之间的语义信息，生成的图像质量普遍低于自回归方法生成的图像。","s":"非自回归方法（NAR）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#非自回归方法nar","p":953},{"i":961,"t":"VAE、GAN以及Diffusion Model等生成模型，都不只是单独使用文字作为输入来生成图像，而是使用了从已知的随机分布（e.g. Normal Distribution）中sample出向量作为模型额外输入的方法。 大致的思想如下图所示，由于期待生成的图像并不是固定的，可以将预期输出看作是一个分布，即P(x∣y)P(x|y)P(x∣y)，而图像生成模型需要完成的任务就是将输入的从某一随机分布中sample出的向量对应到图像预期输出分布中的某一个图像。 info 总结：由于根据文字prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（Target Domain）符合某种分布。因此目前的SOTA模型除了将文字Prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（Source Domain）输入的随机向量映射到目标域的分布，生成对应的图片。","s":"目前图像生成模型的共同点","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#目前图像生成模型的共同点","p":953},{"i":963,"t":"Stable Diffusion是目前图像生成的SOTA模型之一，在本章中我们快速的了解一下Stable Diffusion的大致框架以及原理。","s":"生成模型的共同结构","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#生成模型的共同结构","p":953},{"i":965,"t":"目前，如Stable Diffusion等SOTA图像生成模型都具备以下所示的三个模块，通常情况下这三个模块分开训练，最终通过特殊的逻辑和规则组合在一起。 Text Encoder：根据输入的text prompt进行嵌入表示 Generation Model：接受Text Encoder输出的prompt表示以及从随机分布sample出的图像大小的向量，得到“中间产物”，中间产物有以下两种情况： 具有视觉意义但经过压缩比较模糊的图像 不具备视觉特征的矩阵（Latent Representation） Decoder：以上述的“中间产物”作为输入，生成出高清图像 通用框架的三个组成部分如下图所示： 再附上Stable Diffusion、DALL-E系列以及Google的Imagen的结构说明。 其中Imagen将压缩版本的图片作为Generation Model的中间产物，Stable Diffusion以及DALL-E将Latent Representation作为中间产物。 根据Imagen的实验结果，相对于Decoder即Diffusion Model的模型大小，Text Encoder的模型大小对图像生成模型的影响是非常大的。Text Encoder可以帮助模型理解prompt中在训练资料的文字-图像对中没有出现的新的词汇，从而提高图像生成的表现。 Scaling text encoder size is more important than U-Net size. While scaling the size of the diffusion model U-Net improves sample quality, we found scaling the text encoder size to be significantly more impactful than the U-Net size. Photorealistic Text-to-Image Diffusion Models with Deep Language Understanding","s":"通用框架概览","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#通用框架概览","p":953},{"i":967,"t":"下面介绍两种用于评估图像生成模型的常用Benchmark：FID与CLIP Score。 FID（Fréchet Inception Distance）​ FID提供一个Pre-trained的CNN，该CNN通常使用预训练的Inception v3模型。在计算FID时，生成图像和真实图像分别输入到预训练的CNN中，提取出各自的特征表示向量（Representation）。这两个Representation越接近，代表输出的图像越像预期的“真实”图片。 在FID中，做出了如下重要的假设：将生成的图像真实的图像经过CNN输出的Representation看作是sample自两个高斯分布的随机变量。然后，通过计算两个特征向量的均值和协方差矩阵来得到两个高斯分布的参数。最后，利用两个高斯分布之间的Fréchet距离来衡量生成图像与真实图像之间的差异。 FID=∥μ1−μ2∥22+tr(Σ1+Σ2−2(Σ1Σ2)12)(1)\\mathrm{FID}=\\left\\|\\mu_1-\\mu_2\\right\\|_2^2+\\mathrm{tr}\\left(\\Sigma_1+\\Sigma_2-2\\left(\\Sigma_1\\Sigma_2\\right)^{\\frac12}\\right)\\tag{1}FID=∥μ1​−μ2​∥22​+tr(Σ1​+Σ2​−2(Σ1​Σ2​)21​)(1) 其中，μ1\\mu_1μ1​和μ2\\mu_2μ2​分别是第一个和第二个高斯分布的均值向量；Σ1\\Sigma_1Σ1​和Σ2\\Sigma_2Σ2​则是它们的协方差矩阵；tr(⋅)\\mathrm{tr}(\\cdot)tr(⋅)表示矩阵的迹运算。 高斯分布的均值向量从观测到的数据中计算出来的。对于一个nnn-维高斯分布，其均值向量可以表示为一个长度为nnn的列向量，其中的每一个元素都是一个特定维度的平均数，这可以通过在每个维度上进行简单的算术平均来完成。 值得注意的是，FID指标需要一定数量的生成图像和真实图像来进行统计估计。这是因为FID的计算是基于两个高斯分布之间的距离计算的，因此需要足够多的样本数量才能够获得较为准确的概率分布估计。 CLIP Score​ CLIP Score中的CLIP指的就是OpenAI的CLIP（Contrastive Language-Image Pre-Training）模型。 具体来说，CLIP Score的计算方式是将用于生成图像的文字prompt输入至CLIP的Text Encoder中得到一个Representation，再将对应prompt生成的图像输入至CLIP的Image Encoder中得到对应的Representation，计算二者之间的距离，即得到CLIP Score。分数越小，代表文字和图像更align。","s":"Benchmark","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#benchmark","p":953},{"i":969,"t":"Generation Model​ Generation Model的生成过程其实就是Denoise的过程。具体来讲，输入文字Prompt以及从随机分布中sample出的与预期生成图像具有相同大小的噪声矩阵，预测出输入图片中的噪声分布，在输入图像中减去噪声，输出去噪后的图像。Generation Model的最终输出是中间产物，这个中间产物可以是图像的压缩版本，也可以是一个Latent Representation。因此，训练Generation Model其实就是训练一个Noise Predictor。 中间产物是压缩图像​ 当Generation Model的中间产物是压缩图像时，如Diffusion模型，在训练Generation Model时的训练资料可以通过对数据集中的原始图片添加与图像大小一致地从已知随机分布中sample出的噪声来获得。此时加入噪声后的图像可以作为压缩图像输入至Noise Predictor中，而需要预测出的噪声分布的Ground Truth就是sample出的噪声。 中间产物是Latent Representation​ 中间产物是Latent Representation时，同样采取从已知随机分布中sample出噪声再添加到网络的输入作为生成Ground Truth的策略，但是还额外需要一个Encoder来产生Latent Representation。 这里的Encoder使用数据集中的图片（即期待模型最终输出的图片）作为输入，输出该图片的某种Latent Representation，经过从随机分布中sample出的噪声的加入，输入至Noise Predictor中。从随机分布中sample出的噪声就是Noise Predictor的Ground Truth。 Decoder​ Generation Model的训练需要大量成对的（Pair）文字-图像资料。而对于Decoder来说，它的输入是中间产物（即Generation Model生成的压缩的图片或Latent Representation），输出的是还原出的高分辨率的图像，它的训练是不需要额外pair的文字-图像资料。 中间产物是压缩图像​ 当Generation Model的输出是压缩版本的图像时，Decoder的训练资料可以将从互联网上fetch到的图像作为label，并对这些图像做Down Sampling来获得压缩版本的图像作为Decoder训练时的输出。 中间产物是Latent Representation​ 当中间产物是Latent Representation时，需要训练一个Auto-Encoder，使用Encoder-Decoder的结构训练生成模型的Decoder。 具体来讲，向Encoder中输入数据集中的高清预期图片，Encoder将其转换为某种Latent Representation，Decoder再吃Encoder的输出，最终输出还原出的高清label图片，训练的方向是让输出的图片与输入的图片越接近越好。在这个过程中，不需要额外的标注，Auto-Encoder和生成模型的Decoder一起更新参数。","s":"通用框架解析","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#通用框架解析","p":953},{"i":971,"t":"在这个模块大致介绍目前常见的几种图像生成模型，其中Diffusion Model以及GAN将在以后的文章中详细讲解。","s":"常见图像生成模型速览","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#常见图像生成模型速览","p":953},{"i":973,"t":"变分自编码器（Variational Auto-Encoder, abbr. VAE）的训练策略是使用Encoder将输入图像对应（嵌入）到一个符合某随机分布的向量，再将该向量作为Decoder的输入，加上文字prompt后，期待模型产生合适的图像。 tip VAE在训练过程中，期待Ecoder输入多张图片后，输出的向量在一起符合某个随机分布（e.g. Normal Distribution），并不是Encoder直接输出一个Distrubution。","s":"变分自编码器（VAE）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#变分自编码器vae","p":953},{"i":975,"t":"基于流的生成模型采用特殊的网络结构的设计，将Encoder设计为可逆的（invertible），在训练阶段喂入多张图片，期待模型的向量符合某个随机分布。而在预测阶段，由于Encoder是可逆的，输入从该随机分布中sample出来的向量，期待输出对应的图像。 注意，由于Encoder是可逆的，在训练阶段其输入的图片矩阵的形状应该等于输出的随机分布向量的形状，在推理阶段亦然。","s":"基于流的生成模型（Flow-Based Generative Model）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#基于流的生成模型flow-based-generative-model","p":953},{"i":977,"t":"GAN模型的结构分为Generator和Discriminator，其中Generator接受来自随机分布的向量，产生预期图像；Discriminator接受生成器输出的图像或真实图像，输出输入的图像是真实图像的概率。在训练过程中，通过固定生成器参数来更新辨别器参数、固定辨别器参数更新生成器参数的往复交替训练来形成“两个网络对抗”的效果，从而使得生成器生成的图像更逼真（与输入的真实图像更近似）、辨别器识别是否是输入的真实图像的精确度更高。","s":"生成对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#生成对抗网络gan","p":953},{"i":979,"t":"扩散模型的核心思想是对输入的图片加入噪声使其成为从某一随机分布sample出的向量，并在这个过程中训练出Noise Predictor；在生成图片时，输入从该随机分布中sample出的向量，使用训练出的Noise Predictor对噪声denoise从而获得生成的图片。 以DDPM（Denoising Diffusion Probabilistic Models）模型为例，模型在denoise时为每个denoise步骤赋予一个编号，越早进行denoise的步骤编号越大，因此，这个编号也代表着图像中噪声的严重程度。在Denoise模块中，模型根据输入的带有噪声的图片、文字prompt以及噪声的严重程度（即denoise的步骤）预测出该图片中噪声的分布，然后将输入的图片中减去预测出的噪声得到denoise后的图片。 Denoise模块的目标是预测出输入的噪声图片中的噪声，其资料可以通过对数据集中的图片不断加入从Gaussian Distribution中sample出的噪声的方法来获得，这个加噪声的过程我们称为Forward Process or Diffusion Process。此时将加入噪声后的图片、文字prompt以及denoise的步骤序号作为输入，sample出的噪声作为Ground Truth对noise predictor进行训练。","s":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型/Image-Generation-Models","h":"#扩散模型diffusion-model","p":953},{"i":981,"t":"相关链接 论文：arXiv 参考资料： Transformer模型详解（图解最完整版） 【機器學習2021】Transformer (下) Transformer是Sequence-to-Sequence (Seq2Seq) 模型，模型的输入是向量序列，输出同样是向量序列，且输出的长度由模型经过学习决定。","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"","p":980},{"i":983,"t":"Transformer由Encoder和Decoder组成，编码器和解码器都包含6个Block，整体结构如下图所示。","s":"整体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#整体结构","p":980},{"i":986,"t":"Transformer Encoder结构如下图所示。其中，Add指的是残差连接Residual Connection，Norm指的是Layer Normalization。","s":"整体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#整体结构-1","p":980},{"i":988,"t":"对于输入的句子，对一个词汇的嵌入向量的奇数维度使用sine函数进行编码，对偶数维度使用cosine函数计算编码。 公式如下所示，其中pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel​次位置编码。 PE(pos,2i)=sin(pos100002i/dmodel)(1)PE_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{1}PE(pos,2i)​=sin(100002i/dmodel​pos​)(1) PE(pos,2i+1)=cos(pos100002i/dmodel)(2)PE_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{2}PE(pos,2i+1)​=cos(100002i/dmodel​pos​)(2) 根据三角函数的性质，对于pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1维度的线性组合，使得位置向量中蕴含了相对位置的信息。 PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)(3)\\begin{array}{l}PE(pos+k,2i)=PE(pos,2i)\\times PE(k,2i+1)+PE(pos,2i+1)\\times PE(k,2i)\\\\PE(pos+k,2i+1)=PE(pos,2i+1)\\times PE(k,2i+1)-PE(pos,2i)\\times PE(k,2i)\\end{array} \\tag{3}PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)​(3) 最终，位置编码向量的维度与词汇的嵌入维度相同，进行element-wise的相加操作。 InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i) \\tag{4}InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)","s":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#位置编码positional-encoding","p":980},{"i":990,"t":"输入向量由Word Embedding和Positional Embedding相加得到。输入序列经过Mutil-Head Self-Attention之后，通过Residual Connection加上自身的输入向量，再经过Layer Normalization，之后送入FCN并进行Residual Connection加上送入FCN的输入自身，最终再进行Layer Normalization，以上构成了一个Encoder Block。每一个Block输出的向量序列长度等于输入的向量序列长度。","s":"具体结构","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#具体结构","p":980},{"i":992,"t":"Decoder的任务是生成输出，可以根据是否一次性生成输出分为Autoregressive（自回归，abbr. AT）以及Non-Autoregressive（非自回归，abbr. NAT）两种模式。 自回归类型的Decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token作为下一次的输入，通常每次生成一个词或一个符号。这种方式的缺点是需要保存和更新词表中的所有可能选项，因此在大词汇表上可能会变得非常慢。然而，它的优点是能够利用上下文信息来生成输出，这有助于提高翻译的质量。 非自回归类型的Decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。NAT的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于AT。","s":"Decoder","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#decoder","p":980},{"i":994,"t":"整体结构​ 词汇表（Vocabulary）​ 词汇表（Vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（NLP）中，词汇表是训练模型时所使用的唯一单词的集合，由具体的生成任务而确定。 Decoder每一步的输出是一个经过Softmax的Probability Distribution（概率分布），代表着词汇表中每一个词汇当前生成的概率，取最大概率值的词汇便是模型当前时间步输出的词汇。 Begin符号​ 解码器（Decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（Encoder）的输出。特别地，首个时间步的输入是Begin符号以及编码器（Encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（Encoder）的输出，直到生成序列的结束。 特殊符号 Begin符号是在Lexicon中添加的特殊符号，用来表示Decoder生成的开始。Begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（Embedding Layer）学习得到的，在嵌入层中，离散的符号被映射到一个实数向量。 Begin符号又叫Start符号或SOS符号（Start Of Sentence），都是表示生成的开始。End符号又叫EOS符号（End Of Sentence）。 End符号​ 在Decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过Softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向Decoder的输出中加入End符号的生成，即每一次输出除了词汇表的所有词汇外还有End符号的概率，当End符号是在所有词汇中概率最大的词汇时，生成停止。 掩码多头自注意力机制（Masked Multi-Head Self-Attention）​ 为什么使用掩码多头自注意力 掩码多头自注意力与Transformer训练时采取的Teacher Forcing策略有很大的关系，具体分析见下文《Teacher Forcing与Masked Multi-Head Self-Attention》的讨论环节：Teacher Forcing与Masked Multi-Head Self-Attention 观察Decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的Decoder当前时间步之前的所有输出单词经过嵌入后的向量表示。 掩码多头自注意力机制用于确保在生成序列的过程中，每个位置只能关注到该位置及其之前的位置。这是通过在Self-Attention的计算中应用一个掩码（mask）来实现的。这确保了在生成序列时，每个位置只能查看到它之前的信息，而不能查看到未来的信息，从而实现了自回归性质。 具体来说，添加掩码后的自注意力机制在生成注意力分数时不再考虑输入序列的所有向量。如在输入向量aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot product，而不考虑aia^iai之后的输入的key。 tip 对于第sss个时间步，Masked Mutil-Head Self-Attention的输入是时间步sss之前Decoder生成的所有输出单词的嵌入表示。 交叉注意力（Cross-Attention）​ 交叉注意力是连接Encoder和Decoder的桥梁，也是Decoder输入的重要组成部分。 交叉注意力接收两个输入序列，一个来自编码器（Encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（Decoder），是经过掩码多头自注意力机制的输出序列（通常是正在生成的序列的中间表示）。 在交叉注意力中，每次计算注意力得分的query来自解码器，key和value来自编码器。解码器每个向量的查询（Query）与编码器位置的键（Key）进行点积得到了注意力分数，通过Softmax操作后转换为注意力权重，再与编码器位置的值（Value）weighted sum得到加权注意力分数，最终将加权注意力分数求和得到每个输入向量的输出。","s":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#autoregressive-decoderat","p":980},{"i":998,"t":"在 Transformer 中，Encoder 不像 Decoder 需要生成序列，因此它通常不涉及标签的预测。Encoder 的训练通常是在整个模型中的联合训练中进行的，通过优化整个模型的损失函数来进行。 Transformer 的整体训练过程一般分为以下几个步骤： 编码器（Encoder）的正向传播： 输入序列经过编码器的正向传播，产生一组上下文表示。 解码器（Decoder）的正向传播： 解码器接收上下文表示，并生成目标序列。 计算损失： 通过比较生成的目标序列与实际目标序列，计算损失。在 Decoder 中，通常使用交叉熵损失函数。 反向传播： 根据损失，进行反向传播，更新模型参数。这个过程中，梯度通过整个模型传播，包括 Encoder 和 Decoder。 整个模型的参数（包括 Encoder 和 Decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，Encoder 的表示对于 Decoder 的性能至关重要。在训练过程中，梯度从损失函数传播回整个模型，包括 Encoder 和 Decoder，从而更新它们的参数。 需要注意的是，Transformer 模型通常使用的是端到端的训练方式，整个模型的参数是一次性更新的。在某些场景下，你可能会看到对 Encoder 或 Decoder 进行微调（fine-tuning）的情况，但这是在特定应用场景下的调整，不是 Transformer 模型的标准训练方式。","s":"损失函数","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#损失函数","p":980},{"i":1000,"t":"在Transformer的推理阶段，自回归类型的Decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入Decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（Error Propagation）。 因此使用Teacher Forcing策略，将Ground Truth一次性喂到Decoder中，使模型更快收敛并且避免误差积累的问题。 但是，自回归Decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用Teacher Forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（Autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入masked掉，防止模型学习到不该学习的注意力。","s":"Teacher Forcing","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#teacher-forcing","p":980},{"i":1002,"t":"参考文献：MultiHead-Attention和Masked-Attention的机制和原理 与Encoder的多头自注意力不同，在Decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入Teacher Forcing出现的问题，避免了训练与推理阶段的Mismatch，维护了自回归的特性。 具体来说，模拟推理过程中第一个词汇时的场景。当模型只有voc1voc_1voc1​词汇向量输入时，在Decoder中，voc1voc_1voc1​与自身计算注意力分数，于是有 [o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5) 我们再模拟训练过程中使用Teacher Forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2​的情况，于是有 [o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6) 然而，为了使训练过程中符合推理时自回归的特性，理想的输出应该是 [o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7) 继续扩展，当有nnn个输入词汇时，应该有 [o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}⎣⎡​o1​o2​⋮on​​⎦⎤​=⎣⎡​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​⎦⎤​⎣⎡​v1​v2​⋮vn​​⎦⎤​(8) 因此，我们需要将当前时间步计算的词汇的时间顺序右侧的输入词汇全部掩码，置为0。 在源码中，有如下片段实现掩码： if mask is not None: scores = scores.masked_fill(mask == 0, -1e9) p_attn = scores.softmax(dim=-1) 在源码中，将mask置为负无穷是因为这是在经过Softmax之前进行的掩码，在经过Softmax之后负无穷小就变成了0。","s":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型/Attention-Is-All-You-Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":980},{"i":1004,"t":"tip 在以前的文章图像生成模型中已经大概介绍了目前SOTA的图像生成模型的共同点，并初步了解了Diffusion Model，在这篇文章中将详细讲解扩散模型的数学原理等。","s":"扩散模型（Diffusion Model）","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"","p":1003},{"i":1006,"t":"首先回顾一下扩散模型的基本概念和生成过程，可以大概分为两步： Forward Process：对训练集中的图片不断加入与图片shape相同的、从某随机分布中sample出的噪声，直至图片可以被认为是从该随机分布中sample出的矩阵。 Forward Process又叫做Diffusion Process，在这一步中产生的噪声-加入噪声的图像对可以用来训练Noise Predictor，即从有噪声的图像中预测出其中的噪声，再从输入中减去噪声得到降噪后的图片。 图像生成的原理 这一步的目的也同样在之前的文章图像生成模型中提到过：由于根据文字prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（Target Domain）符合某种分布。因此目前的SOTA模型除了将文字prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（Source Domain）输入的随机向量映射到目标域的分布，生成对应的图片。 Reverse Process：使用Diffusion Process训练的Noise Predictor，根据文字Prompt对从随机分布中sample出的图片大小的噪声图片进行降噪，得到原图。 值得注意的是，变分自编码器（Variational Auto-Encoder, abbr. VAE）与Diffusion Model非常相似：VAE对训练集中的原始图像使用Encoder将其变换为某种Latent Representation，这种Latent Representation的分布也是符合某种随机分布的，VAE再通过Decoder将期待生成的目标域图像还原出来。 在下面的文章中我们也会学习一下VAE的数学原理，从VAE到Diffusion Model的具体数学推导，可以参考胡老师推荐的论文Understanding Diffusion Models: A Unified Perspective。 下面我们以DDPM论文中的原图来分析DDPM的训练与推理过程。","s":"基本概念","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#基本概念","p":1003},{"i":1008,"t":"循环开始，重复以下步骤； 首先从数据集中sample出原始图像x0\\mathbf{x}_0x0​； ttt是从1,…,T1,\\ldots,T1,…,T范围中sample出的一个integer； ϵ\\epsilonϵ是从Normal Distribution中sample出的与x0\\mathbf{x}_0x0​相同大小的噪声； 根据如下规则进行梯度下降，训练Noise Predictor： ∇θ∥ϵ−ϵθ(αˉtx0+1−αˉtϵ,t)∥2(1)\\nabla_{\\theta}\\left\\|\\boldsymbol{\\epsilon}-\\boldsymbol{\\epsilon}_{\\theta}(\\sqrt{\\bar{\\alpha}_{t}}\\mathbf{x}_{0}+\\sqrt{1-\\bar{\\alpha}_{t}}\\boldsymbol{\\epsilon},t)\\right\\|^{2}\\tag{1}∇θ​∥∥​ϵ−ϵθ​(αˉt​​x0​+1−αˉt​​ϵ,t)∥∥​2(1) 首先对x0\\mathbf{x}_0x0​和ϵ\\epsilonϵ根据权重αˉ1,αˉ2,...αˉT\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_Tαˉ1​,αˉ2​,...αˉT​做weighted sum产生加入噪声后的图像。通常来说，αˉ1\\bar{\\alpha}_1αˉ1​至αˉT\\bar{\\alpha}_TαˉT​是递减的，当在第2步中sample到的ttt越大，则原始图像x0\\mathbf{x}_0x0​对新图像的贡献越大。 ϵθ\\epsilon_{\\theta}ϵθ​是Noise Predictor，其输入是加入噪声的图像以及sample出的ttt，而ϵθ\\epsilon_\\thetaϵθ​训练的Ground Truth就是第3步中sample出的噪声ϵ\\epsilonϵ； 直至噪声预测模型ϵθ\\epsilon_\\thetaϵθ​训练至收敛。","s":"训练过程","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#训练过程","p":1003},{"i":1010,"t":"从Normal Distribution中sample出图片大小的噪声xT\\mathbf{x}_TxT​； ttt从T,…,1T,\\ldots,1T,…,1范围循环TTT次； 对与每一次以ttt计数的循环，若t>1t>1t>1，则从Normal Distribution中sample出z\\mathbf{z}z，否则z=0\\mathbf{z}=\\mathbf{0}z=0； 根据如下公式得到降噪后的图像： xt−1=1αt(xt−1−αt1−αˉtϵθ(xt,t))+σtz(2)\\mathbf{x}_{t-1}=\\frac{1}{\\sqrt{\\alpha_{t}}}\\left(\\mathbf{x}_{t}-\\frac{1-\\alpha_{t}}{\\sqrt{1-\\bar{\\alpha}_{t}}}\\boldsymbol{\\epsilon}_{\\theta}(\\mathbf{x}_{t},t)\\right)+\\sigma_{t}\\mathbf{z}\\tag{2}xt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​,t))+σt​z(2) 其中，xt\\mathbf{x}_txt​代表上一步骤中输出的降噪后的图像，xt−1\\mathbf{x}_{t-1}xt−1​代表当前步骤即将输出的降噪后的图像，ϵθ\\epsilon_\\thetaϵθ​代表Noise Predictor预测出的噪声，αˉ1,αˉ2,...αˉT\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_Tαˉ1​,αˉ2​,...αˉT​以及α1,α2,...αT\\alpha_1,\\alpha_2,...\\alpha_Tα1​,α2​,...αT​是两组权重序列； 结束本次for循环； 当t=1t=1t=1时，得到x0\\mathbf{x}_0x0​，即最终降噪后的图像。","s":"推理过程","u":"/en/docs/Deep-Learning/大模型/Diffusion-Model","h":"#推理过程","p":1003},{"i":1012,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"","p":1011},{"i":1015,"t":"conda create -n ipl python=3.8 conda activate ipl","s":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1011},{"i":1017,"t":"请确保 NVIDIA 驱动、CUDA 以及 PyTorch 之间版本互相匹配。 conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia pip install ftfy regex tqdm ninja pip install git+https://github.com/openai/CLIP.git","s":"安装依赖","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#安装依赖","p":1011},{"i":1019,"t":"预训练的源域生成器可以通过 Google Drive 或者 Tsinghua Cloud 下载，并将其置于 ./pre_stylegan 文件夹中。","s":"下载预训练生成器","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1011},{"i":1023,"t":"ctx_init 参数用于初始化 prompts，官方提供的演示 context 是a photo of a。 source_prompts = [prompt_prefix + \" \" + args.source_class] target_prompts = [prompt_prefix + \" \" + args.target_class] 源域的初始提示词 source_prompts 是 ctx_init 与源域标签的组合。若源域标签为 photo，则源域的初始提示词是 a photo of a photo。目标域的初始提示词同理。","s":"prompts 的初始化","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1011},{"i":1025,"t":"源域以及目标域的初始提示词接下来会进行 tokenize： source_tokenized_prompts = torch.cat([clip.tokenize(p) for p in source_prompts]).to(device) # (1, 77) 'sot a photo of a photo eot' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 1125, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 target_tokenized_prompts = torch.cat([clip.tokenize(p) for p in target_prompts]).to(device) # (1, 77) 'sot a photo of a disney' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 4696, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 tokenize 是 CLIP 对送入的 prompt 字符串进行标记化处理，在头部和尾部添加 startoftext 以及 endoftext 标记，最终为两个首尾标记和全部单词生成 int 标记。其中 CLIP 模型缺省的 context_length 是77，若 prompt 大于 77 会进行截断（truncate），若小于 77 会进行补零，因此 source_tokenized_prompts 与 target_tokenized_prompts 的形状均为 (1, 77)。 在提示词标记化之后，将进行嵌入表示 embedding： source_embedding = clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度 target_embedding = clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度","s":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1011},{"i":1027,"t":"在 Mapper 生成 prompts 后进行 prompts 的特征提取时，需要传入 tokenize 之后的人工初始化 prompt（‘a photo of a photo.’或‘a photo of a disney.’），用于选择 eot 符号对应的维度来进行特征投影（因为 eot 作为整个句子的结尾，被认为该维度包含更多的信息。具体做法：由于在 tokenize 之后，eot 符号对应的维度的值最大，因此可使用 argmax 来定位），以保证最后得到的特征形状与图像特征提取的输出形状相同，使得后续可以进行对比学习的损失计算。","s":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1011},{"i":1029,"t":"Z空间与W空间​ # Z空间到W空间的变换 sample_z = mixing_noise(args.batch_mapper, 512, args.mixing, device) # (batch_size, 512) sample_w = net.generator_frozen.style(sample_z) # (batch_size, 512) Z 空间和 W 空间是 StyleGAN 模型中两种不同的隐变量空间，分别用于控制生成图像的随机特征和样式信息。W 空间通过对 Z 空间的映射得到。 Z 空间（Latent Space Z）： Z 空间是随机噪声空间，通常由随机噪声向量组成，表示了图像的随机特征。 在 StyleGAN 中，Z 空间的维度通常为 512 维。这意味着一个 Z 向量由 512 个数字组成，每个数字表示了图像的一个随机特征的强度或者方向。 W 空间（Style Space W）： W 空间经过特征解耦的隐空间，与 Z 空间相比更加解耦合。 在 StyleGAN 中，W 空间的维度也通常为 512 维，是通过mapping network进行映射得到的，mapping network由PixelNorm层与EqualLinear层构成。以下代码节选自sg2_model.py '''mapping network''' layers = [PixelNorm()] for i in range(n_mlp): layers.append( EqualLinear( style_dim, style_dim, lr_mul=lr_mlp, activation=\"fused_lrelu\" ) ) self.style = nn.Sequential(*layers) Z 空间与 W 空间的关系： 在 StyleGAN 中，通常会先将一个 Z 向量映射到 W 空间，然后再将 W 向量输入到生成器网络中生成图像。 Z 空间提供了初始随机噪声，而 W 空间则通过特征解耦提供更多控制图像风格的灵活性。通过对 Z 和 W 之间的映射以及 W 在生成器中的应用，StyleGan 实现了高度可控且具有良好生成效果的图像合成。 损失函数​ 在代码中，stage 1 的损失函数是 global_clip_loss，该损失由三部分组成： 对比学习损失：Mapper 生成的源域 prompts 的特征（注意，这里的 prompts 特征是与人工初始化的 prompts 的特征做过 element-wise 相加后的特征）与源域图像特征的余弦相似度组成的对比学习损失； 目标域正则化损失：Mapper 生成的目标域 prompts 的特征与目标域文本标签特征的余弦相似度，这里生成的目标域 prompts 特征同样也是与人工初始化的 prompts 做过加法的。注意该损失有权重 lambda_l。 源域正则化：计算生成的源域prompts与源域标签之间的余弦相似度，由 lambda_src 控制，默认是 0。","s":"训练 stage 1","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-1","p":1011},{"i":1031,"t":"确定目标域生成域需要更新的层​ 在训练的第二阶段进行前向传播时，需要先对目标域生成器（generator_trainable）的所有层进行 unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.ZSSGAN.ZSSGAN.determine_opt_layers，最后 freeze 所有层后再 unfreeze 选择的网络层。 if self.training and self.auto_layer_iters > 0: self.generator_trainable.unfreeze_layers() # unfreeze train_layers = self.determine_opt_layers() # layer to train if not isinstance(train_layers, list): train_layers = [train_layers] self.generator_trainable.freeze_layers() self.generator_trainable.unfreeze_layers(train_layers) # unfreeze 具体选择带更新网络层的策略： 将 W 空间的隐向量送入目标域生成器（SG2Generator）中，并进行反向传播，此时可以通过反向传播后 W 空间隐向量不同维度的更新幅度来衡量不同网络层的影响力，因此选出更新幅度最大的维度就可以确定在 Model Adaption 中需要更新的网络层。 之所以 W 空间编码在 n_latent 维度上的序号就代表着对应的网络层数的序号，是因为 StyleGAN 生成器的结构决定了这一点：StyleGAN 生成器中，W 空间编码的不同维度会被送入生成器网络的不同层，控制这些层的特征映射 (feature mapping)。具体来说，W 空间编码的每个维度会被重复 n_latent 次，作为该层的风格向量 (style vector)，通过 AdaIN (Adaptive Instance Normalization) 层控制该层的特征映射。因此，W 空间编码的第 i 个维度会影响生成器网络中第 i 层的特征映射。当某个维度的 W 值被更新的程度较大时，就意味着该维度对应的层在生成目标图像时起到了重要作用，需要被优化。 损失函数​ stage 2 的损失函数是 CLIP Loss 类中的 clip_directional_loss，该损失函数由两部分组成： edit_direciton：源域生成器与目标域生成器生成的图片在经过 image encdoer 后做 element-wise 的相减，最后除以自身的 L2 Norm 方便后续与 target_direction 计算余弦相似度 target_direction：Mapper 产生的源域和目标域 prompts 的 text_features 做element-wise相减后，最后初一自身的 L2 Norm 以便后续与 edit_direction 计算余弦相似度","s":"训练 stage 2","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练-stage-2","p":1011},{"i":1033,"t":"参考文献：GAN 的几种评价指标 Inception Score（IS） 评估图像的质量和多样性 质量：把生成的图片 xxx 输入 Inception V3 中，得到输出 1000 维的向量 yyy，向量的每个维度的值对应图片属于某类的概率。对于一个清晰的图片，它属于某一类的概率应该非常大，而属于其它类的概率应该很小。用专业术语说， p(y∣x)p(y|x)p(y∣x)​ 的熵应该很小（熵代表混乱度，均匀分布的混乱度最大，熵最大）。 多样性： 如果一个模型能生成足够多样的图片，那么它生成的图片在各个类别中的分布应该是平均的，假设生成了 10000 张图片，那么最理想的情况是，1000 类中每类生成了 10 张。转换成术语，就是生成图片在所有类别概率的边缘分布 p(y)p(y)p(y)​ 熵很大（均匀分布）。 因此，对于 IS 我们需要求的两个量就是 p(y∣x)p(y|x)p(y∣x) 和 p(y)p(y)p(y)。实际中，选取大量生成样本，用经验分布模拟 p(y)p(y)p(y)： p^(y)=1N∑i=1Np(y∣x(i))\\hat{p}(y)=\\frac{1}{N}\\sum_{i=1}^{N}p(y|\\mathbf{x}^{(i)})p^​(y)=N1​i=1∑N​p(y∣x(i)) Inception Score 的完整公式如下： IS(G)=exp⁡(Ex∼pgDKL(p(y∣x)∣∣p(y)))\\mathbf{IS}(G)=\\exp\\left(\\mathbb{E}_{\\mathbf{x}\\sim p_g}D_{KL}\\left(p(y|\\mathbf{x})||p(y)\\right)\\right)IS(G)=exp(Ex∼pg​​DKL​(p(y∣x)∣∣p(y))) 通常计算 Inception Score 时，会生成 50000 个图片，然后把它分成 10 份，每份 5000 个，分别代入公式计算 10 次 Inception Score，再计算均值和方差，作为最终的衡量指标（均值±方差）。但是 5000 个样本往往不足以得到准确的边缘分布 p(y)p(y)p(y)​，尤其是像 ImageNet 这种包含 1000 个类的数据集。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 IS 分别为 (2.2960, 0.2042) 以及 (2.6420, 0.1959)。 Fréchet Inception Distance（FID） 评估目标域的风格 计算 IS 时只考虑了生成样本，没有考虑真实数据，即 IS 无法反映真实数据和样本之间的距离，IS 判断数据真实性的依据，源于 Inception V3 的训练集 ImageNet，在 Inception V3 的“世界观”下，凡是不像 ImageNet 的数据，都是不真实的，都不能保证输出一个 sharp 的 predition distribution。因此，要想更好地评价生成网络，就要使用更加有效的方法计算真实分布与生成样本之间的距离。 FID 距离计算真实样本，生成样本在特征空间之间的距离。首先利用 Inception 网络来提取特征，然后使用高斯模型对特征空间进行建模，再去求解两个特征之间的距离，较低的 FID 意味着较高图片的质量和多样性。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 FID 分别为 84 以及 58。 Single Image Fréchet Inception Score（SIFID） FID 测量生成的图像的深层特征分布与真实图像的分布之间的偏差。在 ICCV 2019 Best Paper 中提出了 SIFID，只使用一张真实目标域的图像。与 FID 不同，SFID 不使用 Inception Network 中最后一个池化层之后的激活矢量（每个图像一个向量），而是在第二个池层之前的卷积层输出处使用深层特征的内部分布（feature map 中每个位置一个向量）。最终 SIFID 是真实图像和生成的样本中这些特征的统计数据之间的 FID。 Structural Consistency Score（SCS） 评估图像的结构保存能力 Identity Similarity（ID） 评估图像的特征保存能力","s":"定量分析指标","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#定量分析指标","p":1011},{"i":1036,"t":"新增了自定义图像风格迁移功能。 HyperStyle 中的 e4e encoder 将自定义的真实图像编码至 StyleGAN2 中的 W 空间生成 latent codes，再将其分别输入至源域生成器以及目标域生成器以代替原始的从正态分布中 sample 出的随机向量生成的 w_codes，从而得到相应的图片。其中 e4e encoder 来源于 HyperStyle 提供的预训练 checkpoint。 使用方法：运行 inference.py，设置对应的参数，如生成器以及 e4e encoder 的路径、图像路径等，最后运行即可。 修改日志​ 第一次尝试只加载了 w_encoder 类及其对应 checkpoint 参数，导致并未将真实图片编码到 StyleGAN 的 W 空间中，没有 inversion 出合理的结果 第二次尝试使用了 restyle_e4e_encoder，但是没有使用 dlib 进行 alignment，也没有使用 restyle 模型在反演时使用的多次进行前向传播来修正 latent code 的策略。此次尝试虽然反演出了合理的人像，但是人像的特征保存能力非常弱 第三次尝试解决了上一次发现的问题，加入 dlib 提供的 landmark 检测以实现 alignment，并且使用 run_loop 函数在 restyle_e4e_encoder 中进行多次前向传播以修正得到的 W 空间的 latent code，效果较好 对比 pSp 和 e4e encoder，pSp 对人脸图像的还原能力较强，但是会导致目标域图像具有随机的彩色光晕","s":"自定义图像风格迁移","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#自定义图像风格迁移","p":1011},{"i":1039,"t":"作用​ 人工设计的 prompts 在计算 text_features 时用于定位 eot 层符号所表示的维度来进行投影，但不参与 text_features 的实际计算 在训练 Mapper 的 stage 1 的损失函数中，在计算对比损失函数时，Mapper 学习到的 prompts 的文字特征特征会与人工设计的 prompts 的文字特征进行 element-wise 的相加，最后再与 源域生成器得到的图片的图像特征进行对比损失计算 思考​ IPL 方法对 Mapper 学习到的 prompts 除了（1）使用对比学习使 prompts 学习到源域图片的特征以及（2）使用域正则化使得 prompts 向目标域标签对齐之外，并没有使用其他与人工设计的 prompts 有关的正则化方式来约束 prompts 的学习，因此人工设计的 prompts 可能并没有起到太大的约束作用。 如果对比学习损失是为了让 Mapper 自监督学习到图片的特征外，那么是否可以对域正则化损失进行改进，约束学习到的 prompts 向人工设计的初始化 prompts 对齐，以实现类似于 Stable Diffusion 类似的 prompts 控制图像生成的效果。","s":"训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#训练阶段人工-prompts-的作用是什么","p":1011},{"i":1041,"t":"Mapper 的作用是从 W 空间的隐式代码中学习出符合源域图片特征以及符合目标域文字特征的 prompts。 原始","s":"Mapper 结构的设计","u":"/en/docs/Deep-Learning/大模型/Prompt Learning/Undergraduate-Dissertation","h":"#mapper-结构的设计","p":1011},{"i":1043,"t":"info 参考链接: Illustrated: Self-Attention 动图轻松理解Self-Attention(自注意力机制)","s":"自注意力（Self-Attention）","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"","p":1042},{"i":1046,"t":"CNN模型的输入向量的形状是固定的，其输出向量的形状也是固定的或可以根据不同的下游任务而唯一确定，即输入形状与下游任务共同确定了一个CNN模型的架构，具有较强的固定性。 info 在视觉中，输入大多为数字图像，其形状可以大致分为由尺寸和通道数来决定。 从输入图像的尺寸看，当CNN中没有全连接层时，本质上可以接受任意尺寸的输入，但这是狭隘的。若考虑其下游任务以及输出，如FCN（Fully Convolution Network），FCN通过最后通过反卷积将tensor还原到原始图像尺寸，即在CNN中，输入与输出（下游任务的要求）都影响着CNN网络的结构。 从通道数看，CNN本质上可以接受任意通道数的图像输入，但是其模型效果将会受到极大的影响。以一个使用通道数为3的数据集进行训练的CNN模型，但在测试阶段分别使用通道数为 1 和 6 的数据进行推理的情形为例，进行分析： 通道数为1的测试集： 情况： 如果使用通道数为 1 的数据进行推理，即灰度图像，而模型在训练时是使用 RGB 数据集训练的，模型可能会受到一些影响。 解释： 模型可能在训练时学到了关于颜色的特定信息，而在测试时，如果输入是灰度图像，那些颜色信息将不可用。 建议： 在这种情况下，模型可能会失去对颜色信息的敏感性，可能需要进行进一步的调整或微调，以适应灰度图像的特性。 通道数为6的测试集： 情况： 如果使用通道数为 6 的数据进行推理，模型可能会面临额外的挑战，因为它在训练时只见过 3 个通道的数据。 解释： 模型在训练时学到的权重是基于 3 个通道的数据的，对于额外的通道，模型可能无法有效利用这些信息。 建议： 对于通道数不匹配的情况，可以考虑进行通道的适当组合或调整。这可能包括降低通道数（例如，只使用前 3 个通道），或者通过某种方式将 6 个通道映射到 3 个通道，例如通过某种特定的数据预处理。 当模型的输入更复杂（sophisticated），是长度不定的向量序列（sequence）时，CNN不能很好地处理，且不能解决输出由输入和模型自行决定的下游任务，如生成类任务。","s":"输入与输出的局限性","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#输入与输出的局限性","p":1042},{"i":1048,"t":"CNN中存在局部连接和权值共享的归纳偏置： 局部连接：CNN使用卷积层通过滑动卷积核在输入上进行局部感受野的操作。每个神经元只与输入的一小部分区域相连，这意味着每个神经元只能接触到局部的上下文信息。 权值共享： 权值共享的主要思想是，对于输入图像的不同位置使用相同的权重参数进行卷积操作。这意味着，无论卷积操作发生在图像的左上角、右下角，或者其他任何位置，都使用相同的卷积核进行权值计算。CNN的权值共享使得模型能够学习到图像中的局部特征，这也是一种对于上下文的假设。相邻位置上的权重共享使得模型能够对局部结构进行建模，这种权重共享使得CNN具有更强的归纳偏置。 tip 在多通道卷积中，卷积核不同通道之间的权重参数是独立的。这使得网络能够学习不同通道之间的特征组合。这种设计有效地捕捉了输入数据中的多通道信息，提高了网络的表达能力。 CNN的设计理念认为：在图像任务中，局部结构通常更为重要，局部连接和权值共享使得CNN更适用于图像处理等任务。但也正是这种设计理念，使得CNN在面临长输入序列时不能很好地综合上下文信息、提取位置信息，因此Self-Attention应运而生，允许每个位置关注到序列中地所有其他位置。这种全局关联性质使得Transformer能够捕捉序列中的长距离依赖关系。","s":"关联上下文信息的局限性","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#关联上下文信息的局限性","p":1042},{"i":1051,"t":"A self-attention module takes in nnn inputs and returns nnn outputs. What happens in this module? In layman’s terms, the self-attention mechanism allows the inputs to interact with each other (“self”) and find out who they should pay more attention to (“attention”). The outputs are aggregates of these interactions and attention scores. Self-Attention接受任意向量数量的向量序列的输入，输出每一个向量所有向量（包括自身）的注意力分数。这使得Self-Attention在捕捉长距离依赖和处理序列中的全局关系时非常有效。","s":"什么是Self-Attention","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#什么是self-attention","p":1042},{"i":1053,"t":"自注意力机制的核心思想是为序列中的每个向量分配一个权重（即注意力分数），该权重表示该元素与其他元素的关联强度。这个权重是通过计算输入序列中所有元素与当前元素之间的关系来确定的。通常，这个计算过程使用一个可学习的权重矩阵来完成，即用来生成Key，Query以及Value的权重矩阵。","s":"Self-Attention的核心思想","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention的核心思想","p":1042},{"i":1055,"t":"定义输入​ Self-Attention的输入是向量序列，其向量数量是任意的，计算每个输入向量之间的注意力分数。在本例中输入向量个数为3，同时为了统一性分析，计输入向量个数为batchbatchbatch个。 # define the input, which has a shape of (3, 4) inputs = [[1, 0, 1, 0], [0, 2, 0, 2], [1, 1, 1, 1]] inputs = torch.tensor(inputs, dtype=torch.float32) 初始化权重矩阵​ 每个输入向量都会与3个权重向量做乘法得到3个新的向量，分别为key，query以及value。在本例中将新的向量维度设为3，由于输出的k、q、v矩阵大小均为(3,3)(3, 3)(3,3)，因此每个权重矩阵的形状应该是(4,3)(4, 3)(4,3)。为了统一性分析，计key，query以及value各向量维度为numnumnum。 In a neural network setting, these weights are usually small numbers, initialised randomly using an appropriate random distribution like Gaussian, Xavier and Kaiming distributions. This initialisation is done once before training. 在实际应用中，权重通常是较小的数字，通过适当的随机分布（比如高斯、Xavier和Kaiming分布）进行随机初始化。 # define the weights for keys, queries and values w_key = torch.tensor([[0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 0]], dtype=torch.float32) w_query = torch.tensor([[1, 0, 1], [1, 0, 0], [0, 0, 1], [0, 1, 1]], dtype=torch.float32) w_value = torch.tensor([[0, 2, 0], [0, 3, 0], [1, 0, 3], [1, 1, 0]], dtype=torch.float32) 计算key，query以及value​ # compute keys, queries and values keys = inputs @ w_key queries = inputs @ w_query values = inputs @ w_value print(\"keys:\\n\", keys) # (3, 3) print(\"queries:\\n\", queries) # (3, 3) print(\"values:\\n\", values) # (3, 3) 计算原始的注意力分数​ 我们要为每一个输入向量计算它对所有向量的注意力分数，包括对自身的。 原始注意力分数的计算方式为，使用自身的query分别与所有向量的key做内积（dot product），得到的scalar数量与输入向量个数相同，都为batchbatchbatch，即scores矩阵的形状应为(batch,batch)(batch, batch)(batch,batch)。 # compute raw self-attention scores scores = queries @ keys.T print(\"attention scores:\\n\", scores) 注意，代码中提供的是计算所有向量的注意力分数，而图中演示的只是计算input #1的注意力分数。 对每一个向量计算出的注意力分数做softmax​ # normalize the attention score score_softmax = F.softmax(scores, dim=-1) # select the highest dimension print(\"attention scores after normalization:\\n\", score_softmax) 将注意力分数与对应的value相乘​ 每一个输入向量对所有batchbatchbatch个向量计算得到的注意力分数，都要与其对应的value向量相乘，计算加权的注意力分数。最终的注意力分数矩阵的形状应为(batch,num)(batch, num)(batch,num)。 # compute the weighted values by doting score_softmax with values # please be advised, this is dot product weighted_values = values[:, None] * score_softmax.T[:, :, None] print(\"weighted scores: \\n\", weighted_values) 加权注意力分数求和​ 最后一步，对于每个向量得到的加权注意力分数进行求和，得到维度为numnumnum的注意力分数向量，考虑到有batchbatchbatch个输入向量，因此最终的注意力分数矩阵的形状为(batch,num)(batch, num)(batch,num)。 根据推导，显然，最终Self-Attention的输出向量维度与value向量的维度相同，输出向量的数量与输入向量的数量相同。 # compute outputs outputs = weighted_values.sum(dim=0) 总结​ As mentioned in the above paragraph, we don’t only use dot product to find relevance. But we scale it as well by a factor of the square root of key dimension dk. This helps in making sure that the dot-products between query and key don’t grow too large for dk. If the dot product becomes too large then the softmax output will be very small. To avoid this, we scale the dot product. 在计算dot product后，为了避免点积运算经过softmax后的输出太小，在点积后除以key向量维度的平方根来进行缩放。 Attention(Q,K,V)=softmax(QKTdk)V(1)Attention(Q,K,V)=\\textit{softmax}(\\frac{QK^T}{\\sqrt{d_k}})V \\tag{1}Attention(Q,K,V)=softmax(dk​​QKT​)V(1) 完整代码​ # simple code for Self-Attention import torch import torch.nn.functional as F import numpy as np import matplotlib.pyplot as plot # define the input, which has the shape of (3, 4) inputs = [[1, 0, 1, 0], [0, 2, 0, 2], [1, 1, 1, 1]] inputs = torch.tensor(inputs, dtype=torch.float32) # initialize the weights for keys, queries and values w_key = torch.tensor([[0, 0, 1], [1, 1, 0], [0, 1, 0], [1, 1, 0]], dtype=torch.float32) w_query = torch.tensor([[1, 0, 1], [1, 0, 0], [0, 0, 1], [0, 1, 1]], dtype=torch.float32) w_value = torch.tensor([[0, 2, 0], [0, 3, 0], [1, 0, 3], [1, 1, 0]], dtype=torch.float32) # compute keys, queries and values keys = inputs @ w_key queries = inputs @ w_query values = inputs @ w_value print(\"keys:\\n\", keys) # (3, 3) print(\"queries:\\n\", queries) # (3, 3) print(\"values:\\n\", values) # (3, 3) # compute raw self-attention score scores = queries @ keys.T print(\"attention scores:\\n\", scores) # normalize the attention score score_softmax = F.softmax(scores, dim=-1) # select the highest dimension print(\"attention scores after normalization:\\n\", score_softmax) # compute the weighted values by doting score_softmax with values # please be advised, this is dot product weighted_values = values[:, None] * score_softmax.T[:, :, None] print(\"weighted scores: \\n\", weighted_values) # compute outputs outputs = weighted_values.sum(dim=0)","s":"Self-Attention的实现","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention的实现","p":1042},{"i":1057,"t":"多头自注意力机制是对自注意力机制的扩展，假设扩展成为nnn -head self-attention，则对每个输入向量生成对应的key，query和value后，再次使用nnn个可学习的权重矩阵生成nnn个不同的key0,...,keyn−1key^{0}, ..., key^{n-1}key0,...,keyn−1,query0,...,queryn−1query^{0}, ..., query^{n-1}query0,...,queryn−1以及value0,...,valuen−1value^{0}, ..., value^{n-1}value0,...,valuen−1。 在计算attention score时，使用每一个query查询对应的key，即query0query^{0}query0只与其他每一个输入向量的key0key^{0}key0做dot product。","s":"Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#multi-head-self-attention","p":1042},{"i":1059,"t":"Self-Attention可以看作是复杂化的CNN，CNN只能在感受野范围内考虑上下文信息，而Self-Attention可以自己学习感受野。","s":"Self-Attention与CNN的对比","u":"/en/docs/Deep-Learning/大模型/Self-Attention","h":"#self-attention与cnn的对比","p":1042},{"i":1061,"t":"正确发音 How to pronounce Adversarial? /ˌædvərˈseriəl/","s":"生成式对抗网络（GAN）","u":"/en/docs/Deep-Learning/大模型/GAN","h":"","p":1060},{"i":1064,"t":"生成器（Generator）通常接收一个来自潜在空间（latent space）的随机向量作为输入。这个潜在空间通常是一个随机分布，比如均匀分布或正态分布。生成器的任务是将这个随机向量映射成与训练数据相似的样本。","s":"将随机分布作为输入","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#将随机分布作为输入","p":1060},{"i":1066,"t":"当需要解决的任务需要富有“创造力”时，即根据不同的输入，可以产生多个不一样且正确的输出时。这样的设计使得生成器能够生成多样性的样本，因为每个不同的随机向量都可能导致生成器输出不同的样本。在训练过程中，通过不断调整生成器的参数，使得生成器的输出在数据分布中更难以被判别器区分。","s":"为什么要添加分布","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#为什么要添加分布","p":1060},{"i":1068,"t":"GAN的工作原理： 生成器生成数据： 生成器从潜在空间中采样并生成一些数据。 真实数据与生成数据进入判别器： 真实数据和生成器生成的数据一起输入判别器。 判别器训练： 判别器被训练来正确分类真实数据和生成数据。 生成器训练： 生成器被训练来生成能够欺骗判别器的数据。生成器的目标是生成足够逼真的数据，以至于判别器无法准确区分真假。 迭代： 生成器和判别器交替训练，迭代进行，直到生成器生成的数据足够逼真。 训练的目标： 生成器目标： 生成更逼真的数据，以欺骗判别器。 判别器目标： 区分真实数据和生成数据，提高对真实数据的分类准确性。 GAN的训练是一个博弈过程，生成器和判别器相互竞争，最终达到平衡，生成器生成的数据足够逼真，判别器也无法准确判别真伪。这种模型在图像生成、风格转换等任务中取得了显著的成功。","s":"核心思想","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#核心思想","p":1060},{"i":1070,"t":"GAN（Generative Adversarial Network，生成对抗网络）包括两个主要的组件：生成器（Generator）和判别器（Discriminator）。这两个组件通过对抗训练的方式一起学习。 生成器（Generator）： 它负责生成与训练数据相似的新样本。生成器接收来自潜在空间（latent space）的随机向量作为输入，并输出一个与训练数据类似的样本。生成器的目标是欺骗判别器，使其无法区分生成的样本和真实的训练数据。 判别器（Discriminator）： 它负责判别输入的样本是真实的训练数据还是生成器生成的假样本。判别器的目标是尽可能准确地分类输入的样本。 GAN的核心思想是通过对抗过程训练生成器和判别器，不断提高它们的性能。生成器试图生成逼真的样本，而判别器试图正确地区分真实样本和生成样本。这个对抗的训练过程可以被视为在两个分布之间进行的最优控制。","s":"具体结构与作用","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#具体结构与作用","p":1060},{"i":1072,"t":"结构： 生成器是一个神经网络，通常是一个反卷积神经网络（Generator Network），其输入通常是一个随机噪声（潜在空间中的点），输出是与训练数据相似的图像或数据。 作用： 生成器的目标是学习生成与真实数据相似的数据。通过迭代训练，生成器的参数被调整，使其生成的数据能够愈发逼真。 Unconditional Generation​ Unconditional generation（无条件生成）指的是在生成模型中生成样本时，不受任何条件的约束。在这种情况下，生成器仅根据其学到的分布生成数据，而无需关注特定的输入条件或上下文。 对于生成对抗网络（GAN）或变分自动编码器（VAE）等生成模型，unconditional generation通常表现为从潜在空间中采样，然后将这些样本输入生成器，以生成新的、与训练数据相似的样本。这种生成方式是随机的，因为每次从潜在空间中采样都会导致生成不同的样本。 Conditional Generation​","s":"生成器（Generator）","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#生成器generator","p":1060},{"i":1074,"t":"结构： 判别器是一个二元分类器，通常是一个卷积神经网络（Discriminator Network）。它的输入可以是真实数据或生成器生成的数据，输出是一个概率，表示输入数据是真实数据的概率。 作用： 判别器的目标是学习区分真实数据和生成器生成的数据。它被训练成对真实数据给出高概率，对生成的数据给出低概率。","s":"判别器（Discriminator）","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#判别器discriminator","p":1060},{"i":1076,"t":"首先随机初始化生成器和判别器，接下来在每一轮训练中重复以下策略。 第一步，在生成器通过随机噪声神生成样本后，固定生成器的参数，将生成器产生的输出与训练资料中的标签作为判别器的输入，判别器为每个输入样本打分，代表其为真实样本的概率。 为了最小化损失函数使得判别器为真实样本赋分更高，为生成样本赋分更低，设计以下损失函数： Lossreal=−Ex∼pdata(x)[log⁡D(x)](1)Loss_{real}=-E_{x\\sim p_\\text{data}{(x)}}[\\log D(x)]\\tag{1}Lossreal​=−Ex∼pdata​(x)​[logD(x)](1) 其中，D(x)D(x)D(x)是判别器的输出，xxx是真实样本，EEE是数学期望。 Lossfake=−Ez∼pz(z)[log(1−D(G(z)))](2)Loss_{fake}=-E_{z\\sim p_z(z)}[log(1-D(G(z)))]\\tag{2}Lossfake​=−Ez∼pz​(z)​[log(1−D(G(z)))](2) 其中，G(z)G(z)G(z)是生成器的输出，zzz是随机噪声，EEE是数学期望。 将真实样本和生成样本的损失相加，形成判别器的总体损失。 Lossdiscriminator=Lossreal+Lossfake(3)Loss_{discriminator}=Loss_{real}+Loss_{fake}\\tag{3}Lossdiscriminator​=Lossreal​+Lossfake​(3) 最小化损失函数，更新判别器的参数。 第二步，在判别器参数更新后，固定判别器的参数，随机分布的向量再次输入至生成器中，得到生成样本，此时生成样本被送入参数固定的判别器中得到生成样本属于真实样本的概率。在生成器的训练过程中，我们的目的是让生成器生成的样本尽可能的接近真实样本。 LG=−Ez∼pz(z)[log⁡D(G(z))](4)L_G=-E_{z\\sim p_z(z)}[\\log D(G(z))]\\tag{4}LG​=−Ez∼pz​(z)​[logD(G(z))](4) 其中，G(z)G(z)G(z)是生成器的输出，D(G(z))D(G(z))D(G(z))是生成样本输入到判别器后的输出，zzz是随机噪声，EEE是数学期望。","s":"训练算法","u":"/en/docs/Deep-Learning/大模型/GAN","h":"#训练算法","p":1060},{"i":1078,"t":"tip 在自监督学习的模型中，出现了很多以芝麻街任务命名的经典模型和论文。","s":"自监督学习（Self-Supervised Learning）","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"","p":1077},{"i":1080,"t":"自监督学习是无监督学习的一种方法，利用未标记的数据来训练模型。与传统的监督学习不同，自监督学习不需要依赖人工标注的标签数据，而是通过自动构建任务来生成伪标签，从而指导模型的学习。 自监督学习的基本原理是，通过对输入数据进行某种变换或操作，使得模型能够从中提取有用的特征和语义信息。例如，在自然语言处理领域，一种常见的自监督学习任务是预测下一个单词；在计算机视觉领域，一种常见的自监督学习任务是预测图像中的缺失部分。这些任务可以帮助模型学习到输入数据中的潜在结构和规律，从而提高其泛化能力和性能。","s":"介绍","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#介绍","p":1077},{"i":1082,"t":"下面以BERT为例，介绍自监督模型。","s":"BERT（Bidirectional Encoder Representation from Transformers）","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#bertbidirectional-encoder-representation-from-transformers","p":1077},{"i":1084,"t":"BERT的结构其实是Transformer的Encoder部分，仅使用Encoder做特征抽取器。 BERT（Bidirectional Encoder Representations from Transformers）本身是一种预训练的模型架构，通常是在大规模无标签数据上进行预训练，然后在特定任务上进行微调。BERT并不是一个用于特定任务的模型，而是一个通用的语言表示模型。 使用 BERT 的一般步骤包括： 预训练（Pretraining）：在大规模无标签数据上对 BERT 进行预训练，学习通用的语言表示。 微调（Fine-tuning）：将预训练的 BERT 模型应用于特定任务，并在有标签的数据上进行微调，以适应该任务。 应用于下游任务（Downstream Tasks）：微调后的 BERT 模型可以被用于执行特定的下游任务，如文本分类、命名实体识别等。","s":"结构","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#结构","p":1077},{"i":1086,"t":"Masking Input​ BERT模型的自监督性质主要体现在其训练数据并不需要人为标注label，而是通过对输入句子中的部分词汇做mask，将输入数据的部分内容使用special token或random token进行遮挡后，喂入Encoder中。对于每个被mask掉的词汇，BERT输出一个概率分布向量，表示这个词汇属于词汇表中的哪一个。 BERT的损失函数主要是Masked Language Model（MLM）任务的交叉熵损失，通过最小化Encoder输出的概率分布与Ground Truth之间的交叉熵损失函数来训练模型。 L=−1N∑i=1Nyilog⁡(pi)(1)L=-\\frac1N\\sum_{i=1}^Ny_i\\log(p_i)\\tag{1}L=−N1​i=1∑N​yi​log(pi​)(1) 其中： NNN是输出的概率分布向量的维度。 yiy_{i}yi​是概率分布向量标签。 pip_{i}pi​是模型预测的概率分布向量。 Next Sentence Prediction​","s":"Self-Supervised Pretraining","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#self-supervised-pretraining","p":1077},{"i":1088,"t":"在预训练之后，BERT 的模型参数可以被用于多个下游任务，如文本分类、命名实体识别、问答等。 首先，我们先来了解一下NLP任务中很重要的一个Benchmark：GLUE。 Benchmark: GLUE​ GLUE（General Language Understanding Evaluation）是一个评估自然语言处理模型在多个任务上综合性能的基准（benchmark）。它旨在测试模型对各种语言任务的通用理解能力。GLUE benchmark 包含了多个任务，每个任务都有一个对应的数据集和评估标准。 MNLI（MultiNLI）：自然语言推理任务，要求模型判断给定的两个句子之间的关系是蕴含、矛盾还是中立。 QQP（Quora Question Pairs）：问题匹配任务，要求模型判断两个问题是否语义上等价。 QNLI（Question-answering Natural Language Inference）：句子分类任务，要求模型判断给定问题和句子之间的关系。 RTE（Recognizing Textual Entailment）：文本蕴涵任务，要求模型判断给定的两个文本之间是否存在蕴涵关系。 STS-B（Semantic Textual Similarity Benchmark）：语义文本相似度任务，要求模型度量两个文本之间的语义相似度。 CoLA（Corpus of Linguistic Acceptability）：语言可接受性判断任务，要求模型判断一个句子是否语法上正确。 MRPC（Microsoft Research Paraphrase Corpus）：短语匹配任务，要求模型判断两个句子是否语义上等价。 SST-2（Stanford Sentiment Treebank）：情感分类任务，要求模型判断给定句子的情感极性。 WNLI（Winograd NLI）：自然语言推理任务，属于 Winograd 模式的变体，要求模型判断一个给定的句子对是否存在蕴含关系。 GLUE 提供了一个全面的测试平台，有助于评估和比较不同自然语言处理模型在多个任务上的性能。 Downstream Tasks​ Sentiment Analysis​ BERT作为自监督的预训练模型，从大语料库中学习到了一定的语言知识，在做文字情感分析时，只需要在下游连接上对应的分类器网络，即使只有比较少量的训练资料也能得到比较好的效果。 下图将Pre-training&Fine-tuning范式与Scratch范式的训练效果做了对比，其中Scratch范式即使用传统的随机初始化的方式从头训练整个分类网络。可以看到预训练&微调的训练范式可以加速模型的收敛（Convergence）并且效果也更好。 立场分析​ Extraction-based Question Answering​ BERT也可以用来完成截取式问答任务，提供一篇文章以及问题，要求输出两个integer代表答案短语在该文章中的起始位置以及结束位置。 具体的解决方案：选择输入文章的所有token所对应的输出向量，随机初始化两个相同维度的向量，分别与输出向量做Dot Product，在经过Softmax之后选择最大的得分所对应的索引。得到的两个索引分别是答案短语在文章中开始的位置以及结束的位置。 其他应用​ 虽然以上的应用都是NLP领域的，但是BERT是Seq2Seq模型，图片、语音等信号也都可以作为Sequence输入至BERT中，因此BERT也可以通过迁移学习应用至多模态领域。","s":"Fine-tuning","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#fine-tuning","p":1077},{"i":1090,"t":"BERT在大规模语料库（Corpus）上预训练后，输出的向量表示了对应输入token的意思，特别地，是考虑了上下文信息的意思。比如，对于水果的苹果已经苹果公司的苹果，BERT对一样的苹果有不同的输出。即对一个处在不同上下文信息中的相同词汇，BERT有不同的Embedding。类似于Word Embedding中的CBOW，BERT可以看作是Contextualized Word Embedding。 BERT模型的核心就是通过预训练来学习上下文信息，进而对每个输入token生成相应的向量表示。这个向量表示考虑了上下文信息，所以对于处在不同上下文中的相同词汇，BERT会有不同的Embedding。 ——来自讯飞星火大模型 虽然 BERT 的确是一种基于大规模语料库的预训练模型，但它并不是一种简单的词嵌入方法，而是一种深度神经网络模型。 在 BERT 中，每个单词都被嵌入到一个高维空间中，并且这些嵌入向量是通过多层 Transformer 编码器生成的。这些编码器的每一层都包含多个自注意力子层和一个前馈神经网络子层，它们共同作用来捕捉文本中的上下文关系和其他语义特征。 因此，BERT 中的嵌入向量不仅仅是单个单词的词义表征，还包括整个句子或段落中的语境信息。这意味着即使两个单词在不同的上下文中出现，它们的嵌入向量也可能非常相似，因为它们共享相同的语义结构。 总之，BERT 可以被视为一种上下文感知词嵌入技术，但它的实现方式比传统的词嵌入方法要复杂得多。 ——来自腾讯混元大模型","s":"Why does BERT work?","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#why-does-bert-work","p":1077},{"i":1092,"t":"GPT的结构是Transformer的Decoder部分，可以承担生成的任务。 GPT的自监督学习的特征体现在：在训练过程中，GPT根据输入的token预测输入的下一个token应该是什么，对输出的distribution与Ground Truth做Cross Entropy Loss来更新参数。","s":"GPT: Generative Pre-trained Transformer","u":"/en/docs/Deep-Learning/大模型/Self-Supervised-Learning","h":"#gpt-generative-pre-trained-transformer","p":1077},{"i":1094,"t":"tip 正则化与权重衰退","s":"正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"","p":1093},{"i":1096,"t":"正则化(Regularization)是机器学习中用于控制模型过拟合的一种技术。在模型训练过程中，我们通常要最小化一个损失函数来得到最佳的模型参数。但是当模型过于复杂时，容易出现过拟合现象，即在训练数据上表现很好，但在测试数据上表现很差。这是因为模型过于依赖训练数据的噪声和细节，而忽略了真正的规律。 正则化通过在损失函数中增加一个惩罚项(Penalty)来对模型进行约束，防止其过分依赖训练数据。 常见的正则化方法包括L1正则化(硬性限制)、L2正则化(柔性限制)等。 L1正则化会使得一部分参数变为0，从而实现特征选择的效果；L2正则化则会使得模型参数尽量接近0，也就是使得模型更加平滑。在使用正则化时，需要调整正则化强度的超参数，以达到最优的泛化性能。","s":"一、什么是正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#一什么是正则化","p":1093},{"i":1098,"t":"min l(w,b) subject to ∥w∥12≤θ(1)min \\space l(w, b) \\space \\text{subject to} \\space \\Vert w \\Vert^2_1 \\leq \\theta \\tag{1}min l(w,b) subject to ∥w∥12​≤θ(1) L1正则化限制权重参数的L1范数小于某一特定的超参数 通常不限制偏移bbb 更小的超参数θ\\thetaθ意味着更强的正则项","s":"二、L1正则化","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#二l1正则化","p":1093},{"i":1100,"t":"L2正则化是指在模型的损失函数中，加入对模型参数的L2范数进行惩罚的一种方法。公式如下所示： l(w,b)+λ2∥w∥12(2)l(w, b) + \\frac{\\lambda}{2} \\Vert w \\Vert^2_1 \\tag{2}l(w,b)+2λ​∥w∥12​(2) 其中，λ\\lambdaλ是一个正则化系数超参数 此时在更新梯度时，具有如下公式 ∂∂w(l(w,b)+λ2∥w∥12)=∂l(w,b)∂w+λw(3)\\frac{\\partial}{\\partial w} \\big(l(w, b) + \\frac{\\lambda}{2} \\Vert w \\Vert^2_1 \\big) = \\frac{\\partial l(w, b)}{\\partial w} + \\lambda w \\tag{3}∂w∂​(l(w,b)+2λ​∥w∥12​)=∂w∂l(w,b)​+λw(3) wt+1=(1−ηλ)wt+η∂l(wt,bt)∂wt(4)w_{t+1}=(1-\\eta \\lambda)w_t + \\eta \\frac{\\partial l(w_t, b_t)}{\\partial w_t} \\tag{4}wt+1​=(1−ηλ)wt​+η∂wt​∂l(wt​,bt​)​(4) 通常ηλ<1\\eta \\lambda < 1ηλ<1，因此又叫做权重衰退","s":"三、L2正则化与权重衰退","u":"/en/docs/Deep-Learning/基础知识/正则化与权重衰退","h":"#三l2正则化与权重衰退","p":1093},{"i":1102,"t":"tip 输入：shape为[5,5,3][5, 5, 3][5,5,3]的图像 输出要求：shape为[5,5,4][5, 5, 4][5,5,4]的feature map 使用3×33 \\times 33×3卷积核，padding=1,stride=1padding=1, stride=1padding=1,stride=1","s":"深度可分离卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"","p":1101},{"i":1104,"t":"卷积层共4个filter（输出通道为4），每个filter3个kernel（输入通道为3） 其中，每个filter都对输入图像的所有通道完成一次卷积，filter中的kernel分别对输入的通道进行具体卷积运算 不考虑卷积偏置，参数量为 3×3×3×4=108(1)3 \\times 3 \\times 3 \\times 4 = 108 \\tag{1}3×3×3×4=108(1)","s":"常规卷积","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#常规卷积","p":1101},{"i":1106,"t":"使用1个filter，其中包含3个kernel。每个kernel分别对输入图像的3个通道单独进行卷积，参数量为 3×3××3=27(2)3 \\times 3 \\times \\times 3 = 27 \\tag{2}3×3××3=27(2) 代码实现也较为简单，只需令Conv2d的输出通道与输入通道相同即可","s":"（1）逐通道卷积-Depthwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#1逐通道卷积-depthwise-convolution","p":1101},{"i":1108,"t":"使用1×11 \\times 11×1卷积核，每个filter对上一步的feature map在深度方向进行一次加权组合，参数量为 1×1×3×4=12(3)1 \\times 1 \\times 3 \\times 4 = 12 \\tag{3}1×1×3×4=12(3) tip 图片源自知乎","s":"（2）逐点卷积-Pointwise Convolution","u":"/en/docs/Deep-Learning/基础知识/深度可分离卷积","h":"#2逐点卷积-pointwise-convolution","p":1101},{"i":1111,"t":"AlexNet是指2012年由Alex Krizhevsky、Ilya Sutskever和Geoffrey Hinton提出的一种卷积神经网络模型，它主要应用于图像分类任务。在当时，AlexNet的表现远远超过了其他参赛的网络模型，并且在ImageNet比赛中获得了第一名。 标志着新的一轮神经网络热潮的开始","s":"背景","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#背景","p":1109},{"i":1113,"t":"ReLU激活函数 Dropout正则化、丢弃法 最大池化MaxPooling","s":"新的概念和技术","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#新的概念和技术","p":1109},{"i":1115,"t":"由于输入的图片更大，设置了更大的卷积核尺寸和步长 更大的池化窗口，使用最大池化 在卷积层中设置了更大的输出通道，提取更深层的特征、识别更多的模式 激活函数从Sigmoid改成了ReLU，减缓梯度消失 在卷积层和输出层之间仍使用两个全连接隐藏层，但在输出层之前增加了Dropout层做正则化 使用了数据增强data augmentation","s":"与LeNet比较","u":"/en/docs/Deep-Learning/基础知识/AlexNet","h":"#与lenet比较","p":1109},{"i":1119,"t":"σ(x)=11+e−x(1)\\sigma(x) = \\frac{1}{1 + e^{-x}} \\tag{1}σ(x)=1+e−x1​(1) dσdx=σ (1−σ)(2)\\frac{{\\rm d}\\sigma}{{\\rm d}x} = \\sigma \\space (1 - \\sigma) \\tag{2}dxdσ​=σ (1−σ)(2) 优点：可以将数据压缩至[0, 1)区间内，有较大实用意义 致命问题：在输入值较小或较大时，Sigmoid函数的梯度趋近于零，会导致网络参数长时间得不到更新，即梯度弥散问题 from torch.nn import functional as F import torch x = torch.linspace(-100, 100, 10) F.sigmoid(x) # 当x为100时，sigmoid(x)就接近于0了","s":"1. Sigmoid函数 / Logistic函数","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#1-sigmoid函数--logistic函数","p":1116},{"i":1121,"t":"f(x)={0x<0xx≥0(3)f(x) = \\begin{cases} 0 & x < 0\\\\ x & x \\geq 0\\\\ \\end{cases} \\tag{3}f(x)={0x​x<0x≥0​(3) df(x)dx={0x<01x≥0(4)\\frac {{\\text d}f(x)}{{\\text d}x} = \\begin{cases} 0 & x < 0\\\\ 1 & x \\geq 0\\\\ \\end{cases} \\tag{4}dxdf(x)​={01​x<0x≥0​(4) from torch.nn import functional as F import torch x = torch.linspace(-100, 100, 10) F.relu(x)","s":"2. 线性整流单元（Rectified Linear Unit, ReLU）","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#2-线性整流单元rectified-linear-unit-relu","p":1116},{"i":1124,"t":"L2范数是对元素求平方和后再开根号，需要.pow(2)后才可作为损失函数 微小的误差可能对网络性能带来极大的影响 LossMSE=∑[y−f(x)]2(5)Loss_{MSE} = \\sum{[{y - f(x)]^2}} \\tag{5}LossMSE​=∑[y−f(x)]2(5) ∥y−f(x)∥2=∑[y−f(x)]22(6)\\Vert y - f(x) \\Vert_2 = \\sqrt[2]{\\sum{[y - f(x)]^2}} \\tag{6}∥y−f(x)∥2​=2∑[y−f(x)]2​(6)","s":"1. Mean Squared Error 均方误差","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#1-mean-squared-error-均方误差","p":1116},{"i":1126,"t":"信息熵​ Cross Entropy中的Entropy指的是信息熵，可以理解为不确定性。衡量一个概率分布本身的不确定程度。 It's a measure of surprise, higher entrpoy means less information and higher uncertainty. 假设一个离散型随机变量XXX的可能取值为X=x1,x2,...,xnX=x_1,x_2,...,x_nX=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率为PiP_iPi​，则其信息熵的定义为 H(P)=−∑inPi log2(Pi)=∑inPi log2(1Pi)(7)\\begin{align} H(P) &= -\\sum_i^n{P_i}\\space{log_2(P_i)} \\\\ &= \\sum_i^n{P_i}\\space{log_2({\\frac{1}{P_i}}}) \\tag{7} \\end{align}H(P)​=−i∑n​Pi​ log2​(Pi​)=i∑n​Pi​ log2​(Pi​1​)​(7) KL散度​ 在概率论或信息论中，KL散度( Kullback–Leibler Divergence)，又称相对熵（relative entropy)，是描述两个概率分布P和Q差异的一种方法。 存在两个概率分布P和Q，其离散型随机变量XXX的可能取值为X=x1,x2,...,xnX=x_1,x_2,...,x_nX=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率分别为Pi,QiP_i,Q_iPi​,Qi​. KL散度是非对称的，即 DKL(P ∣∣ Q)≠DKL(Q ∣∣ P)(8)D_{KL}(P \\space || \\space Q) \\neq D_{KL}(Q \\space || \\space P)\\tag{8}DKL​(P ∣∣ Q)=DKL​(Q ∣∣ P)(8) DKL(P ∣∣ Q)=∑Pi [log2(Pi)−log2(Qi)](9)D_{KL}(P \\space || \\space Q) = \\sum{P_i\\space [log_2(P_i)-log_2(Q_i)]}\\tag{9}DKL​(P ∣∣ Q)=∑Pi​ [log2​(Pi​)−log2​(Qi​)](9) 特别的，DKL(PLabel ∣ QPred)D_{KL}(P_{Label} \\space | \\space Q_{Pred})DKL​(PLabel​ ∣ QPred​)表示当用概率分布Q来拟合真实分布P时，产生的信息损耗，其中P表示真实分布，Q表示P的拟合分布。 交叉熵​ 衡量两个概率分布P和Q之间的不确定性程度。交叉熵的数学表达为 H(P, Q)=H(P)+DKL(P ∣∣ Q)=−∑Pi log2(Qi)(10)\\begin{align} H(P, \\space Q) &= H(P) + D_{KL}(P\\space || \\space Q) \\\\ &= - \\sum{P_i}\\space{log_2({Q_i})} \\tag{10} \\end{align}H(P, Q)​=H(P)+DKL​(P ∣∣ Q)=−∑Pi​ log2​(Qi​)​(10) PyTorch中的CrossEntropyLoss​ torch.nn.CrossEntropyLoss相当于torch.softmax + torch.log + torch.nn.nllloss. import torch.nn as nn # 使用NLLLoss实现 nllloss = nn.NLLLoss() predict = torch.Tensor([[2, 3, 1], [3, 7, 9]]) predict = torch.log(torch.softmax(predict, dim=-1)) label = torch.tensor([1, 2]) nllloss(predict, label) # output: tensor(0.2684) # 使用CrossEntropyLoss实现 cross_loss = nn.CrossEntropyLoss() predict = torch.Tensor([[2, 3, 1], [3, 7, 9]]) label = torch.tensor([1, 2]) cross_loss(predict, label) # output: tensor(0.2684)","s":"2. Cross Entropy Loss 交叉熵损失","u":"/en/docs/Deep-Learning/基础知识/激活函数与Loss的梯度","h":"#2-cross-entropy-loss-交叉熵损失","p":1116},{"i":1129,"t":"K-fold cross-validation is a technique used in machine learning to evaluate the performance of a model. The basic idea behind k-fold cross-validation is to split the dataset into kkk partitions, or folds, and then train and test the model kkk times, using a different fold for testing each time.","s":"What is k-fold cross-validation?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#what-is-k-fold-cross-validation","p":1127},{"i":1131,"t":"In each iteration of k-fold cross-validation, one of the kkk folds is used as the test set, while the remaining k−1k-1k−1 folds are used as the training set. This process is repeated kkk times, with each fold being used exactly once as the test set. The results from each iteration can then be averaged to produce a more accurate estimate of the model's performance.","s":"How does k-fold cross-validation work?","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#how-does-k-fold-cross-validation-work","p":1127},{"i":1133,"t":"train set: to train the model and do parameter update validation set: to choose hyperparameter test set: the final test, only used once","s":"Summary","u":"/en/docs/Deep-Learning/基础知识/K-foldCross-validation","h":"#summary","p":1127},{"i":1136,"t":"感知机是一种二元线性分类模型，旨在寻找一个超平面（在二维空间中即为一条直线），将不同类别的实例划分到不同的区域。感知机的训练过程包括迭代地对样本进行分类，并根据分类错误的情况调整超平面的参数，使得分类准确率逐步提高。感知机是基础的机器学习算法之一，其思想和方法对神经网络等更复杂的模型也具有启发意义。","s":"一、什么是感知机","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#一什么是感知机","p":1134},{"i":1138,"t":"输入向量：感知机的输入向量是一个n维向量x=(x1,x2,...,xn)x=(x_1,x_2,...,x_n)x=(x1​,x2​,...,xn​)，表示一个样本的各个特征值。 权值向量：感知机的权值向量也是一个n维向量w=(w1,w2,...,wn)w=(w_1,w_2,...,w_n)w=(w1​,w2​,...,wn​)，表示每个特征对应的权重。 偏置项：偏置项bbb是一个常数，可看作是模型的截距，用于调整阈值函数的位置。 内积运算：感知机将输入向量和权值向量进行内积运算，并加上偏置项，得到输入信号z=w∗x+bz=w*x+bz=w∗x+b。 阈值函数：将输入信号zzz带入阈值函数，如符号函数sign(z)sign(z)sign(z)，即可得到分类结果。 损失函数：感知机使用误分类点到超平面的距离来作为损失函数，即 L(y,z)=max(0,−y∗z)(1)L(y,z)=max(0,-y*z) \\tag{1}L(y,z)=max(0,−y∗z)(1) 其中yyy是样本的真实标签，zzz是预测值。 参数更新：根据当前样本误分类情况来对权值向量www和偏置项bbb进行迭代更新。 收敛条件：当全部训练样本被正确分类或达到最大迭代次数时，感知机算法停止迭代。 感知机训练流程伪代码如下所示： initialize w = 0 and b = 0 repeat if yi * zi <= 0 then w = w + yi * xi and b = b + yi end if until all classified correctly","s":"二、详细原理","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#二详细原理","p":1134},{"i":1140,"t":"感知机是一个二分类模型，最早的AI模型之一 求解算法等价于使用批量大小为1的梯度下降 要求数据集线性可分，不能拟合XOR异或等非线性问题，导致第一次AI寒冬","s":"三、总结","u":"/en/docs/Deep-Learning/基础知识/Perceptron","h":"#三总结","p":1134},{"i":1143,"t":"kh=kw=1k_h=k_w=1kh​=kw​=1的卷积不识别空间模式，丢弃了空间信息，只是融合通道 相当于输入形状为HW×ciHW \\times c_iHW×ci​，权重形状为co×cic_o \\times c_ico​×ci​的全连接层","s":"一、1x1卷积","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#一1x1卷积","p":1141},{"i":1145,"t":"输入：ci×H×Wc_i \\times H \\times Wci​×H×W 核：co×ci×kh×kwc_o \\times c_i \\times k_h \\times k_wco​×ci​×kh​×kw​ 偏差：co×cic_o \\times c_ico​×ci​ 输出：co×H′×W′c_o \\times H' \\times W'co​×H′×W′ 输出H′以及W′H'以及W'H′以及W′的计算： shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(1)shape_{output} = \\frac{shape_{input}-size_{kernel}+2*padding}{stride}+1 \\tag{1}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(1) 计算复杂度：O(co×ci×H×W×H′×W′)O(c_o \\times c_i \\times H \\times W \\times H' \\times W')O(co​×ci​×H×W×H′×W′) 总结： 输出的通道数是卷积层的超参数 每个输入通道有独立的二维卷积核，所有通道结果相加得到一个输出结果 每个输出通道有独立的三维卷积核","s":"二、二维卷积层","u":"/en/docs/Deep-Learning/基础知识/ConvolutionalLayer","h":"#二二维卷积层","p":1141},{"i":1148,"t":"LeNet是由Yann LeCun等人于1998年提出的卷积神经网络结构，该结构由卷积层、池化层和全连接层组成，可以高效地处理手写数字图像，并在MNIST数据集上取得了很好的性能。 LeNet-5的成功标志着卷积神经网络在计算机视觉领域中的崛起，并促进了深度学习的快速发展。","s":"背景","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#背景","p":1146},{"i":1150,"t":"import torch import numpy as np from torch import nn as nn from torch.nn import functional as F from d2l import torch as d2l from matplotlib import pyplot as plt import os os.environ['http_proxy'] = 'http://127.0.0.1:7890' os.environ['https_proxy'] = 'https://127.0.0.1:7890' class LeNetReshape(nn.Module): def __init__(self): super(LeNetReshape, self).__init__() def forward(self, x): return x.reshape(-1, 1, 28, 28) class LeNet5(nn.Module): def __init__(self): super(LeNet5, self).__init__() self.net = torch.nn.Sequential( LeNetReshape(), # 激活函数应为Sigmoid nn.Conv2d(1, 6, kernel_size=5, padding=2), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2), nn.Conv2d(6, 16, kernel_size=5), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2), nn.Flatten(), nn.Linear(16 * 5 * 5, 120), nn.LeakyReLU(), nn.Linear(120, 84), nn.Sigmoid(), nn.Linear(84, 10)) def forward(self, x): return self.net(x) def evaluate_accuracy_gpu(net, data_iter, device=None): if isinstance(net, torch.nn.Module): net.eval() if not device: device = next(iter(net.parameters())).device metric = d2l.Accumulator(2) for X, y in data_iter: if isinstance(X, list): X = [x.to(device) for x in X] else: X = X.to(device) y = y.to(device) metric.add(d2l.accuracy(net(X), y), y.numel()) # 此处accuracy是统计 return metric[0] / metric[1] def accuracy(y_hat, y): return torch.sum(y_hat.argmax(dim=1) == y) def train(net, train_iter, test_iter, num_epochs, lr, device): def init_weights(m): if type(m) == nn.Linear or type(m) == nn.Conv2d: nn.init.xavier_uniform_(m.weight) net.apply(init_weights) net.to(device) optimizer = torch.optim.SGD(net.parameters(), lr=lr) loss = torch.nn.CrossEntropyLoss() loss.to(device) animator = d2l.Animator(xlabel='epoch', xlim=[1, num_epochs], legend=['train loss', 'train acc', 'test acc']) timer, num_batches = d2l.Timer(), len(train_iter) metric = d2l.Accumulator(3) net.train() for epoch in range(num_epochs): for batch, (X, y) in enumerate(train_iter): timer.start() optimizer.zero_grad() X, y = X.to(device), y.to(device) y_hat = net(X) l = loss(y_hat, y) l.backward() optimizer.step() metric.add(l * X.shape[0], accuracy(y_hat, y), y.numel()) timer.stop() train_l = metric[0] / metric[2] train_acc = metric[1] / metric[2] if (batch + 1) % (num_batches // 5) == 0 or batch == num_batches - 1: animator.add(epoch + (batch + 1) / num_batches, (train_l, train_acc, None)) test_acc = evaluate_accuracy_gpu(net, test_iter) animator.add(epoch + 1, (None, None, test_acc)) print(f'loss {train_l:.3f}, train acc {train_acc:.3f}, test acc {test_acc:.3f}') print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(device)}') plt.show() batch_size = 256 train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size) lr, num_epochs = 0.9, 10 lenet = LeNet5() train(lenet, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())","s":"代码实现","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#代码实现","p":1146},{"i":1152,"t":"在分类模型中，最后两个全连接层之间不要使用ReLU激活函数。因为ReLU的范围是[0, +∞)，它会将所有负数都变成0。而最后一层全连接层输出了类别信息，倒数第二层的输出值包含着非常重要的类别信息，此时使用激活函数很可能会导致信息丢失。","s":"问题","u":"/en/docs/Deep-Learning/基础知识/LeNet","h":"#问题","p":1146},{"i":1155,"t":"现代图片具有较大的像素，使用全连接层导致参数爆炸 针对图片的特征提取和模式识别，应具备以下原则： 平移不变性 局部性","s":"一、卷积的诞生&核心特征","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#一卷积的诞生核心特征","p":1153},{"i":1157,"t":"将全连接层的一维输入和输出变换为二维的矩阵，公式如下 其中i,ji,ji,j代表输出神经元的二维索引坐标，h,wh,wh,w代表输入神经元的二维索引坐标 yi,j=∑h,wwi,j,h,w∗xh,w(1)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}} \\tag{1}yi,j​=h,w∑​wi,j,h,w​∗xh,w​(1) 进一步将权重以及输入的索引变形，公式如下 其中a,ba,ba,b的取值可负可正，直到遍历所有权重以及输入神经元，实现全连接 yi,j=∑h,wwi,j,h,w∗xh,w=∑a,bvi,j,a,b∗xi+a,j+b(2)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}} \\tag{2}yi,j​=h,w∑​wi,j,h,w​∗xh,w​=a,b∑​vi,j,a,b​∗xi+a,j+b​(2) 在公式(2)中，当i,ji,ji,j发生变化时，即产生平移，权重也发生平移，不满足平移不变性。 为了解决这一问题，将公式(2)变形为如下 此时参数权值共享，满足了平移不变性 yi,j=∑a,bvi,j,a,b∗xi+a,j+b=∑a,bva,b∗xi+a,j+b(3)y_{i,j}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}} \\tag{3}yi,j​=a,b∑​vi,j,a,b​∗xi+a,j+b​=a,b∑​va,b​∗xi+a,j+b​(3) 再考虑局部性，在进行特征提取以及模式识别时，只需关注周围的局部特征，因此公式(3)中的a,ba,ba,b可缩小范围，并不用来实现全连接，此时a,ba,ba,b代表着卷积核的感受野，即kernel size 此时完成了全连接层到卷积层的转换","s":"二、重新考察全连接层","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#二重新考察全连接层","p":1153},{"i":1159,"t":"对全连接层使用平移不变性和局部性得到卷积层，卷积是特殊的全连接 yi,j=∑a,bva,b∗xi+a,j+b=∑a=−ΔΔ∑b=−ΔΔva,b∗xia,j+b(4)y_{i,j}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}}=\\sum_{a=-\\Delta}^{\\Delta}\\sum_{b=-\\Delta}^{\\Delta}{v_{a,b}*x_{i_a,j+b}} \\tag{4}yi,j​=a,b∑​va,b​∗xi+a,j+b​=a=−Δ∑Δ​b=−Δ∑Δ​va,b​∗xia​,j+b​(4) 卷积层输出形状的计算 shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(5)shape_{output} = \\frac{shape_{input}-size_{kernel}+2*padding}{stride}+1 \\tag{5}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(5)","s":"三、总结","u":"/en/docs/Deep-Learning/基础知识/FromFullyConnectedLayerToConvolutionalLayer","h":"#三总结","p":1153},{"i":1162,"t":"卷积层会对输入的局部区域进行卷积操作，因此对于输入图像中的每个位置都会产生一个响应。然而，在某些情况下，我们并不关心输入图像中每个位置的细节，而只是想获取该区域的一些重要特征。 假设我们想分类一张猫的图片，那么我们可能只需要提取出它的眼睛、鼻子、嘴巴和耳朵等特征，而不必考虑这些特征在图像中的精确位置。","s":"一、卷积对像素位置信息是敏感的","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#一卷积对像素位置信息是敏感的","p":1160},{"i":1164,"t":"池化层通过对输入的局部区域进行降采样操作，减少了特征图的大小，从而使得模型对于输入位置的微小变化更加鲁棒。例如，如果我们将一个对象稍微平移一点，它依然可以被正确地识别，因为池化层可以保留输入图像的关键特征，而忽略掉微小的位置变化。 但是需要注意的是，当池化的步幅和池化区域的大小过大时，会导致模型丢失较多的细节信息，从而影响模型性能。因此，在实际应用中，需要根据具体任务来选择适当的池化参数。 缓解卷积层对位置的敏感性，提高鲁棒：池化操作通常用于卷积层之后，使模型对于输入位置的微小变化更加鲁棒，减少图像中的噪声和冗余信息 减小特征图大小：池化操作会通过在特定位置上合并特征值来缩小输入特征图的空间大小，降低计算开销。 减少参数数量：池化操作减小了特征图的空间大小，从而也减小了需要训练的权重参数数量，更容易训练和优化。","s":"二、池化层的作用","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#二池化层的作用","p":1160},{"i":1166,"t":"池化层将输入特征图分割成若干个区域，然后对每个区域进行汇聚操作，将该区域内的特征值合并成一个值。这个操作可以使用不同的方法实现，如最大值池化、平均值池化等。 最常见的是最大值池化，其中每个区域的输出值是该区域内特征值的最大值，这样可以保留图像中最显著的特征，同时减少噪声和冗余信息的影响。","s":"三、池化的实现","u":"/en/docs/Deep-Learning/基础知识/PoolingLayer","h":"#三池化的实现","p":1160},{"i":1169,"t":"Logistic Regression直译为逻辑回归，是一种用来解决二分类问题的机器学习方法，用于估计某种事物的可能性。 逻辑回归经过sigmoid函数输出的结果可将其视为probability，而后根据设定的置信度阈值来判断该特征向量对应的标签是1还是0，用以解决二分类问题。","s":"一、什么是Logistic Regression","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#一什么是logistic-regression","p":1167},{"i":1171,"t":"线性回归要求因变量是连续性数值变量，而逻辑回归要求因变量是离散的变量。 逻辑回归以线性回归为理论支持，通过Sigmoid函数引入了非线性因素。 线性回归常用MSE函数作为损失函数，而逻辑回归作为分类任务的解决方案通常搭配交叉熵损失函数进行训练。","s":"二、逻辑回归（Logistic Regression）和线性回归（Linear Regression）","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#二逻辑回归logistic-regression和线性回归linear-regression","p":1167},{"i":1173,"t":"从历史角度方面看，逻辑回归在诞生时使用MSE作为损失函数，其目标是让输出的概率更接近于1，与回归任务的目标相似。","s":"三、逻辑回归到底是回归任务（Regression）还是分类任务（Classification）？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#三逻辑回归到底是回归任务regression还是分类任务classification","p":1167},{"i":1175,"t":"逻辑回归以及其他分类任务在测试角度上的目标让提高分类准确率acc，但并不会将maximize accuracy作为数学上的训练方法，即在训练过程中不使用与acc有关的损失函数。 逻辑回归中的训练目标（评估函数）与预测目标（评估函数）并不相同，但方向一致。 acc=∑I(predi==yi)len(Y)(1)acc = \\frac{\\sum{I(pred_i==y_i)}}{len(Y)} \\tag{1}acc=len(Y)∑I(predi​==yi​)​(1) 如果在训练过程中以最大化acc为目标，当参数在训练过程中向标签方向更新使得逻辑回归输出的正确类的概率增大时，考虑以下两种情况： gradient = 0 if accuracy unchanged but weights changed: 由于阈值的存在，下一轮迭代输出的概率可能仍小于阈值，从而导致分类结果与上一次迭代相同，此时acc并无变化，出现梯度为0的情况。 gradient not continuous since the number of correct is not continunous: 当上一轮迭代的输出概率很接近阈值时，下一次迭代的概率提升了很少一点但是仍超过了阈值，且一个batch中有大量样本均存在这种情况，此时acc有显著提升而网络的权重的更新极小，此时，与acc有关的Loss函数对权重求导得到的梯度会出现梯度爆炸或者说不连续的情况。","s":"四、为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数？","u":"/en/docs/Deep-Learning/基础知识/LogisticRegression","h":"#四为什么逻辑回归或其他分类任务不使用分类准确率作为损失函数","p":1167},{"i":1177,"t":"相关链接 论文：arXiv 代码：GitHub 参考文献： Latent Diffusion Models论文解读 Stable Diffusion就是在这篇文章的基础上，使用LDM进行开发的。","s":"CVPR 2022: High-Resolution Image Synthesis with Latent Diffusion Models","u":"/en/docs/Deep-Learning/论文笔记/High-Resolution Image Synthesis with Latent Diffusion Models","h":"","p":1176},{"i":1181,"t":"concat与stack函数 stack函数对输入的两个张量在指定的维度进行堆叠，是创建了新的维度 concat函数对输入的张量在指定维度进行拼接，没有创建新的维度 # stack和concat函数 a = torch.rand(4, 3) # A班4位同学，每位同学3科成绩 b = torch.rand(4, 3) # B班4位同学，每位同学3科成绩 c = torch.stack((a, b), dim=0) # 理解：年级所有同学的3科成绩（假设年级只有A班和B班两个班，每个班只有四名同学） print(c.shape) # torch.Size([2, 4, 3]) d = torch.concat((a, b), dim=1) # 理解：a是A班4位同学3科成绩，b是这4名同学其他3门课的成绩，拼接后代表这4名同学的6科成绩 print(d.shape) # torch.Size([4, 6]) list和tensor乘法不同之处 list的*乘法是复制元素，改变list的shape tensor的*乘法是对tensor中的元素进行点乘计算 a = torch.tensor([[3, 3, 3, 3]]) b = [3] # list的*乘是复制元素进行扩展 print(a * 3) # tensor([[9, 9, 9, 9]]) print(b * 3) # [3, 3, 3] 最大值 / 最小值索引：argmax / argmin 需要通过参数dim指定操作的维度，dim的理解 官方解释：The dimension to reduce 以二维张量举例，dim=1即在每一行中选出一个最大值 / 最小值元素的索引，索引的shape应为[dim0, 1]，即reduce了dim=1的维度 # 最大值最小值索引 a = torch.tensor([[0.1, 0.9, 0.3], [0.9, 0.8, 0.99], [0.1, 0.7, 0.8], [0.88, 0.1, 0.2]]) # [4, 3] print(\"argmax output: \", a.argmax(dim=0), a.argmax(dim=1)) # argmax output: tensor([1, 0, 1]) tensor([1, 2, 2, 0]) Python zip函数 zip函数可以理解为压缩，将输入的两个迭代器的最外层对应元素压缩为一个新的元素 a = torch.tensor([1, 2, 3]) b = torch.tensor([4, 5, 6]) c = zip(a, b) for i in c: print(i) ''' (tensor(1), tensor(4)) (tensor(2), tensor(5)) (tensor(3), tensor(6)) ''' a = torch.tensor([[1, 2, 3], [3, 2, 1]]) b = torch.tensor([[4, 5, 6], [6, 5, 4]]) c = zip(a, b) for i in c: print(i) ''' (tensor([1, 2, 3]), tensor([4, 5, 6])) (tensor([3, 2, 1]), tensor([6, 5, 4])) '''","s":"一、常用函数部分","u":"/en/docs/Deep-Learning/基础知识/PytorchBasics","h":"#一常用函数部分","p":1179},{"i":1183,"t":"相关链接 论文：CVPR 2023 open access 代码：Piscart-AI-Research 文章的命名风格借鉴了CVPR 2022的文章Few Shot Generative Model Adaption via Relaxed Spatial Structural Alignment","s":"CVPR 2023: Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"","p":1182},{"i":1185,"t":"本文提出了Image-specific Prompt Learning（IPL）方法来解决风格迁移任务中生成模型从源域到目标域的适应问题。一个Latent Mapper来从源域图像中学习出包含图像特征且适应目标域的prompt，从而指导目标域生成器的训练。 This produces a more precise adaptation direction for every cross-domain image pair, endowing the target-domain generator with greatly enhanced flexibility. 训练资料是源域和目标域的文字标签以及源域的图像，并不需要目标域的图像。此外，IPL独立于生成模型，可以自由选择Diffusion Model或GAN等。","s":"摘要","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#摘要","p":1182},{"i":1188,"t":"Generative Model Adaption的任务是使在大规模源域图片上训练的生成模型适应到数据有限的目标域中，根据目标域训练资料的大小可以分为few-shot和zero-shot。 few-shot​ 对于few-shot任务，一般是通过有限的目标域训练集资料fine-tune预训练模型。 然而，fine-tune通常会导致过拟合。为了解决过拟合问题，通常使用的方法是施加强正则化、使用扰动法、跨域对齐或数据增强。 相关文献方法 强正则化：Han Zhang, Zizhao Zhang, Augustus Odena, and Honglak Lee. Consistency regularization for generative adversarial networks. In ICLR, 2019. 扰动法：Sangwoo Mo, Minsu Cho, and Jinwoo Shin. Freeze the discriminator: a simple baseline for fine-tuning GANs. In CVPR Workshops, 2020. 跨域对齐：Utkarsh Ojha, Yijun Li, Jingwan Lu, Alexei A Efros, Yong Jae Lee, Eli Shechtman, and Richard Zhang. Fewshot image generation via cross-domain correspondence. In CVPR, 2021. 数据增强：Ngoc-Trung Tran, Viet-Hung Tran, Ngoc-Bao Nguyen, Trung-Kien Nguyen, and Ngai-Man Cheung. On data augmentation for GAN training. TIP, 2021. zero-shot​ 对于零样本的图像生成模型的适应任务，NADA率先引入了CLIP模型来获取必须的先验知识，通过预训练大模型的语言理解能力实现在目标域只需要文字标签而不需要图片，将源域和目标域之间的差距编码为在CLIP空间上文字引导的适应方向。 此后，CVPR 2022发表的DiffusionCLIP使用了Diffusion模型代替NADA中的StyleGANs，获得了更好的特征保存能力。 然而这些方法都是采用了固定的适应方向，只包含基础的域知识，而不是图片特定的特征。在本文中，作者发现这种共享的、固定的适应方向会导致Mode Collapse（模式坍塌），因此提出了从每个源域图像中学习出多样且准确的prompt，为生成模型向目标域的适应提供更精确的方向。","s":"Generative Model Adaption","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#generative-model-adaption","p":1182},{"i":1190,"t":"Prompt工程最初是一种Knowledge Probing（知识探测）方法，给定完形填空（cloze-style）类的prompt，引导模型产生相对应的答案。 然而人工设计的prompt通常不是最优的，可能提供不准确的适应方向。为了解决这个问题，在NLP领域的Prompt Learning发展迅速，并随着视觉-语言大模型的发展，应用在了视觉任务中。 Kaiyang Zhou等人首先在图像分类任务中采用上下文优化，在词嵌入空间中对具有连续向量的上下文词进行建模。随后Prompt Learning在计算机视觉中的许多下游任务都得到了探索，例如目标检测、视频理解和迁移学习等。","s":"Prompt Learning","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#prompt-learning","p":1182},{"i":1193,"t":"IPL方法分两个阶段。 第一阶段：训练Latent Mapper​ 第一阶段的主要任务是训练Lantent Mapper来为每一个训练集的源域图片生成一组prompt。Latent Mapper接收源域图像的latent representation，生成一组prompt向量。第一阶段需要解决两个问题，即在zero-shot的背景下，如何实现prompt与源域图像特征的对齐以及prompt与目标域空间的对齐，因此第一阶段的训练分两部分进行。 第一部分是Latent Mapper输出的prompt与目标域标签concat后送入来自CLIP的Text Encoder得到目标域图片prompt在CLIP空间的编码表示，并与目标域标签经过Text Encoder后的编码共同作为Domain Loss的输入来约束从源域中学习到的prompt与目标域空间对齐。 第二部分是Latent Mapper输出的prompt与源域标签concat后送入来自CLIP的Text Encoder得到源域图片prompt描述在CLIP空间的编码表示，同时源域图像再经过来自CLIP的Image Encoder后得到其在CLIP空间的编码表示。将源域的prompt文字和图像编码表示作为contrastive learning loss的输入，约束学习到的prompt与源域图像的特征对齐。 第二阶段：将Latent Mapper插入目标域生成器的训练过程​ 第二阶段利用Directional CLIP Loss来训练目标域生成器，使源于生成器向目标域迁移学习。需要输入源域以及目标域图像、源域以及目标域的prompt描述。源域图像的latent representation分别输入至源域生成器和目标域生成器中得到对应的图像，同时指导风格迁移方向的源域以及目标域的prompt描述由Latent Mapper接收源域图像的隐式表示后输出再分别与源域和目标域标签concat而得到。分别将源域图像、生成的目标域图像以及源域、目标域的图片prompt描述一起输入至Directional CLIP Loss，从而约束由源域图像生成器初始化的目标域图像生成器向目标域的迁移学习。","s":"概述","u":"/en/docs/Deep-Learning/论文笔记/Zero-shot Generative Model Adaptation via Image-specific Prompt Learning","h":"#概述","p":1182},{"i":1196,"t":"相关链接 论文：arXiv 代码：GitHub 参考资料： 54、Probabilistic Diffusion Model概率扩散模型理论与完整PyTorch代码详细解读 【论文精读】Diffusion Model 开山之作DDPM","s":"NeurIPS 2020: Denoising Diffusion Probabilistic Models","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"","p":1195},{"i":1199,"t":"条件概率的定义​ 条件概率是指在给定另一个事件发生的条件下，某一事件发生的概率。条件概率通常用符号P(A∣B)P(A\\mid B)P(A∣B)表示，读作“在 B 发生的条件下 A 发生的概率”。 条件概率的计算公式为： P(A∣B)=P(A,B)P(B)P(A\\mid B)=\\frac{P(A,B)}{P(B)}P(A∣B)=P(B)P(A,B)​ 其中： P(A,B)P(A,B)P(A,B)是事件AAA、BBB同时发生的概率，也叫联合概率 P(B)P(B)P(B)是事件BBB独立发生的概率 全概率公式​ 对于事件AAA而言，假设有一组互斥且穷尽的条件事件B1,B2,…BnB_{1},B_{2},\\ldots B_{n}B1​,B2​,…Bn​构成一个完备事件组，则事件AAA的概率等于事件AAA在每个条件事件BiB_iBi​下发生的概率与该条件事件发生概率的乘积和。 P(A)=∑i=1nP(A∣Bi)⋅P(Bi)P(A)=\\sum_{i=1}^nP(A\\mid B_i)\\cdot P(B_i)P(A)=i=1∑n​P(A∣Bi​)⋅P(Bi​) 可以看出，全概率公式是由“因”（条件事件BiB_iBi​）推“果”（结果事件AAA）的过程，即当知道某结果事件的原因后，推断由该原因导致这件事发生的概率是多少。 贝叶斯公式​ 贝叶斯公式在观测到结果事件AAA发生后，计算其条件事件BiB_iBi​在事件AAA已经发生的条件下而发生的后验概率。 继续沿用上述全概率公式的符号定义，则有： P(Bi∣A)=P(A∣Bi)⋅P(Bi)P(A)P(B_i\\mid A)=\\frac{P(A\\mid B_i)\\cdot P(B_i)}{P(A)}P(Bi​∣A)=P(A)P(A∣Bi​)⋅P(Bi​)​ 其中： P(Bi)P(B_i)P(Bi​)以及P(A)P(A)P(A)称为先验概率 P(Bi∣A)P(B_i\\mid A)P(Bi​∣A)称为后验概率 P(A∣Bi)P(A\\mid B_i)P(A∣Bi​)称为似然","s":"先验概率与后验概率","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#先验概率与后验概率","p":1195},{"i":1201,"t":"条件概率的一般形式​ P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣A,B)⋅P(B∣A)⋅P(A)P(A,B,C)=P(C\\mid A,B)\\cdot P(A,B)=P(C\\mid A,B)\\cdot P(B\\mid A)\\cdot P(A)P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣A,B)⋅P(B∣A)⋅P(A) P(B,C∣A)=P(B∣A)⋅P(C∣A,B)P(B,C\\mid A)=P(B\\mid A)\\cdot P(C\\mid A,B)P(B,C∣A)=P(B∣A)⋅P(C∣A,B) 其中，第二行公式的推导如下： P(B,C∣A)=P(A,B,C)P(A)=P(A,B,C)P(A,B,C)P(C∣A,B)⋅P(B∣A)=P(B∣A)⋅P(C∣A,B)\\begin{align*} P(B,C \\mid A) &= \\frac{P(A,B,C)}{P(A)} \\\\ &= \\frac{P(A,B,C)}{\\frac{P(A,B,C)}{P(C \\mid A,B) \\cdot P(B \\mid A)}} \\\\ &= P(B \\mid A) \\cdot P(C \\mid A,B) \\end{align*}P(B,C∣A)​=P(A)P(A,B,C)​=P(C∣A,B)⋅P(B∣A)P(A,B,C)​P(A,B,C)​=P(B∣A)⋅P(C∣A,B)​ 高斯分布的KL散度​ 对于两个单一变量的高斯分布p∼N(μ1,σ12)p\\sim \\mathcal{N}(\\mu_1,\\sigma_1^2)p∼N(μ1​,σ12​)和q∼N(μ2,σ22)q\\sim \\mathcal{N}(\\mu_2,\\sigma_2^2)q∼N(μ2​,σ22​)而言，它们的KL散度定义为： DKL(p,q)=log⁡σ2σ1+σ12+(μ1−μ2)22σ22−12D_{KL}(p,q)=\\log\\frac{\\sigma_2}{\\sigma_1}+\\frac{\\sigma_1^2+(\\mu_1-\\mu_2)^2}{2\\sigma_2^2}-\\frac12DKL​(p,q)=logσ1​σ2​​+2σ22​σ12​+(μ1​−μ2​)2​−21​","s":"条件概率与高斯分布的KL散度","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#条件概率与高斯分布的kl散度","p":1195},{"i":1203,"t":"马尔科夫链指当前状态的概率只与上一时刻有关，例如若满足马尔科夫关系A→B→CA\\to B\\to CA→B→C，则有： P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣B)⋅P(B∣A)⋅P(A)P(A,B,C) =P(C\\mid A,B)\\cdot P(A,B)=P(C\\mid B)\\cdot P(B\\mid A)\\cdot P(A)P(A,B,C)=P(C∣A,B)⋅P(A,B)=P(C∣B)⋅P(B∣A)⋅P(A) P(B,C∣A)=P(B∣A)⋅P(C∣B)P(B,C\\mid A)=P(B\\mid A)\\cdot P(C\\mid B)P(B,C∣A)=P(B∣A)⋅P(C∣B)","s":"马尔科夫链条件概率形式","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#马尔科夫链条件概率形式","p":1195},{"i":1205,"t":"从任意高斯分布N(μ,σ2)\\mathcal{N}(\\mu,\\sigma^2)N(μ,σ2)采样xxx时，可以先从标准高斯分布N(0,1)\\mathcal{N}(0,1)N(0,1)中sample出zzz，再令 x=σ∗z+μx=\\sigma * z + \\mux=σ∗z+μ 优势： 由于线性变化，采样过程中对其他参数都有明确的导数，可以进行反向传播 可以通过线性变换来控制参数化的采样 标准正态分布具有易采样的性质","s":"参数重整化技巧","u":"/en/docs/Deep-Learning/论文笔记/Denoising Diffusion Probabilistic Models","h":"#参数重整化技巧","p":1195},{"i":1207,"t":"实战练习 Transformer实战练习，代码见Github仓库。 This is a practice of Transformer, follow the guide of Github Repo.","s":"Speaker Classification","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"","p":1206},{"i":1209,"t":"Classify the speaker of given features, learn how to use Transformer and how to adjust parameters of transformer.","s":"Overview","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#overview","p":1206},{"i":1211,"t":"The original dataset is VoxCeleb1. We randomly select 600 speakers from VoxCeleb1, then preprocess the raw waveforms into mel-spectrograms. You can download the preprocessed dataset from Google Drive. Arguments: data_dir: The path to the data directory. metadata_path: The path to the metadata. segment_len: The length of audio segment for training. The architecture of dataset directory is shown below, where uttr-{random string}.pt represents PyTorch data file containing valid mel-spectrogram data. data directory/ ├── mapping.json ├── metadata.json ├── testdata.json └── uttr-{random string}.pt","s":"Dataset","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#dataset","p":1206},{"i":1213,"t":"This is also the assignment solution of ML2021Spring HW4.","s":"Related","u":"/en/docs/Deep-Learning/实战练习/Speaker Classification","h":"#related","p":1206},{"i":1215,"t":"相关链接 论文：arXiv 参考资料： Transformer模型详解（图解最完整版） 【機器學習2021】Transformer (下) Transformer是Sequence-to-Sequence (Seq2Seq) 模型，模型的输入是向量序列，输出同样是向量序列，且输出的长度由模型经过学习决定。","s":"NeurIPS 2017: Attention Is All You Need","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"","p":1214},{"i":1217,"t":"Transformer由Encoder和Decoder组成，编码器和解码器都包含6个Block，整体结构如下图所示。","s":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#整体结构","p":1214},{"i":1220,"t":"Transformer Encoder结构如下图所示。其中，Add指的是残差连接Residual Connection，Norm指的是Layer Normalization。","s":"整体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#整体结构-1","p":1214},{"i":1222,"t":"对于输入的句子，对一个词汇的嵌入向量的奇数维度使用sine函数进行编码，对偶数维度使用cosine函数计算编码。 公式如下所示，其中pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel​次位置编码。 PE(pos,2i)=sin(pos100002i/dmodel)(1)PE_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{1}PE(pos,2i)​=sin(100002i/dmodel​pos​)(1) PE(pos,2i+1)=cos(pos100002i/dmodel)(2)PE_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model}}}}) \\tag{2}PE(pos,2i+1)​=cos(100002i/dmodel​pos​)(2) 根据三角函数的性质，对于pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1维度的线性组合，使得位置向量中蕴含了相对位置的信息。 PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)(3)\\begin{array}{l}PE(pos+k,2i)=PE(pos,2i)\\times PE(k,2i+1)+PE(pos,2i+1)\\times PE(k,2i)\\\\PE(pos+k,2i+1)=PE(pos,2i+1)\\times PE(k,2i+1)-PE(pos,2i)\\times PE(k,2i)\\end{array} \\tag{3}PE(pos+k,2i)=PE(pos,2i)×PE(k,2i+1)+PE(pos,2i+1)×PE(k,2i)PE(pos+k,2i+1)=PE(pos,2i+1)×PE(k,2i+1)−PE(pos,2i)×PE(k,2i)​(3) 最终，位置编码向量的维度与词汇的嵌入维度相同，进行element-wise的相加操作。 InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i) \\tag{4}InputEmbedding(pos,i)=WordEmbedding(pos,i)+PositionEncoding(pos,i)(4)","s":"位置编码（Positional Encoding）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#位置编码positional-encoding","p":1214},{"i":1224,"t":"输入向量由Word Embedding和Positional Embedding相加得到。输入序列经过Mutil-Head Self-Attention之后，通过Residual Connection加上自身的输入向量，再经过Layer Normalization，之后送入FCN并进行Residual Connection加上送入FCN的输入自身，最终再进行Layer Normalization，以上构成了一个Encoder Block。每一个Block输出的向量序列长度等于输入的向量序列长度。","s":"具体结构","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#具体结构","p":1214},{"i":1226,"t":"Decoder的任务是生成输出，可以根据是否一次性生成输出分为Autoregressive（自回归，abbr. AT）以及Non-Autoregressive（非自回归，abbr. NAT）两种模式。 自回归类型的Decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token作为下一次的输入，通常每次生成一个词或一个符号。这种方式的缺点是需要保存和更新词表中的所有可能选项，因此在大词汇表上可能会变得非常慢。然而，它的优点是能够利用上下文信息来生成输出，这有助于提高翻译的质量。 非自回归类型的Decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。NAT的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于AT。","s":"Decoder","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#decoder","p":1214},{"i":1228,"t":"整体结构​ 词汇表（Vocabulary）​ 词汇表（Vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（NLP）中，词汇表是训练模型时所使用的唯一单词的集合，由具体的生成任务而确定。 Decoder每一步的输出是一个经过Softmax的Probability Distribution（概率分布），代表着词汇表中每一个词汇当前生成的概率，取最大概率值的词汇便是模型当前时间步输出的词汇。 Begin符号​ 解码器（Decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（Encoder）的输出。特别地，首个时间步的输入是Begin符号以及编码器（Encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（Encoder）的输出，直到生成序列的结束。 特殊符号 Begin符号是在Lexicon中添加的特殊符号，用来表示Decoder生成的开始。Begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（Embedding Layer）学习得到的，在嵌入层中，离散的符号被映射到一个实数向量。 Begin符号又叫Start符号或SOS符号（Start Of Sentence），都是表示生成的开始。End符号又叫EOS符号（End Of Sentence）。 End符号​ 在Decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过Softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向Decoder的输出中加入End符号的生成，即每一次输出除了词汇表的所有词汇外还有End符号的概率，当End符号是在所有词汇中概率最大的词汇时，生成停止。 掩码多头自注意力机制（Masked Multi-Head Self-Attention）​ 为什么使用掩码多头自注意力 掩码多头自注意力与Transformer训练时采取的Teacher Forcing策略有很大的关系，具体分析见下文《Teacher Forcing与Masked Multi-Head Self-Attention》的讨论环节：Teacher Forcing与Masked Multi-Head Self-Attention 观察Decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的Decoder当前时间步之前的所有输出单词经过嵌入后的向量表示。 掩码多头自注意力机制用于确保在生成序列的过程中，每个位置只能关注到该位置及其之前的位置。这是通过在Self-Attention的计算中应用一个掩码（mask）来实现的。这确保了在生成序列时，每个位置只能查看到它之前的信息，而不能查看到未来的信息，从而实现了自回归性质。 具体来说，添加掩码后的自注意力机制在生成注意力分数时不再考虑输入序列的所有向量。如在输入向量aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot product，而不考虑aia^iai之后的输入的key。 tip 对于第sss个时间步，Masked Mutil-Head Self-Attention的输入是时间步sss之前Decoder生成的所有输出单词的嵌入表示。 交叉注意力（Cross-Attention）​ 交叉注意力是连接Encoder和Decoder的桥梁，也是Decoder输入的重要组成部分。 交叉注意力接收两个输入序列，一个来自编码器（Encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（Decoder），是经过掩码多头自注意力机制的输出序列（通常是正在生成的序列的中间表示）。 在交叉注意力中，每次计算注意力得分的query来自解码器，key和value来自编码器。解码器每个向量的查询（Query）与编码器位置的键（Key）进行点积得到了注意力分数，通过Softmax操作后转换为注意力权重，再与编码器位置的值（Value）weighted sum得到加权注意力分数，最终将加权注意力分数求和得到每个输入向量的输出。","s":"Autoregressive Decoder（AT）","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#autoregressive-decoderat","p":1214},{"i":1232,"t":"在 Transformer 中，Encoder 不像 Decoder 需要生成序列，因此它通常不涉及标签的预测。Encoder 的训练通常是在整个模型中的联合训练中进行的，通过优化整个模型的损失函数来进行。 Transformer 的整体训练过程一般分为以下几个步骤： 编码器（Encoder）的正向传播： 输入序列经过编码器的正向传播，产生一组上下文表示。 解码器（Decoder）的正向传播： 解码器接收上下文表示，并生成目标序列。 计算损失： 通过比较生成的目标序列与实际目标序列，计算损失。在 Decoder 中，通常使用交叉熵损失函数。 反向传播： 根据损失，进行反向传播，更新模型参数。这个过程中，梯度通过整个模型传播，包括 Encoder 和 Decoder。 整个模型的参数（包括 Encoder 和 Decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，Encoder 的表示对于 Decoder 的性能至关重要。在训练过程中，梯度从损失函数传播回整个模型，包括 Encoder 和 Decoder，从而更新它们的参数。 需要注意的是，Transformer 模型通常使用的是端到端的训练方式，整个模型的参数是一次性更新的。在某些场景下，你可能会看到对 Encoder 或 Decoder 进行微调（fine-tuning）的情况，但这是在特定应用场景下的调整，不是 Transformer 模型的标准训练方式。","s":"损失函数","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#损失函数","p":1214},{"i":1234,"t":"在Transformer的推理阶段，自回归类型的Decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入Decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（Error Propagation）。 因此使用Teacher Forcing策略，将Ground Truth一次性喂到Decoder中，使模型更快收敛并且避免误差积累的问题。 但是，自回归Decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用Teacher Forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（Autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入masked掉，防止模型学习到不该学习的注意力。","s":"Teacher Forcing","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#teacher-forcing","p":1214},{"i":1236,"t":"参考文献：MultiHead-Attention和Masked-Attention的机制和原理 与Encoder的多头自注意力不同，在Decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入Teacher Forcing出现的问题，避免了训练与推理阶段的Mismatch，维护了自回归的特性。 具体来说，模拟推理过程中第一个词汇时的场景。当模型只有voc1voc_1voc1​词汇向量输入时，在Decoder中，voc1voc_1voc1​与自身计算注意力分数，于是有 [o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5) 我们再模拟训练过程中使用Teacher Forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2​的情况，于是有 [o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6) 然而，为了使训练过程中符合推理时自回归的特性，理想的输出应该是 [o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix} \\tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7) 继续扩展，当有nnn个输入词汇时，应该有 [o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}⎣⎡​o1​o2​⋮on​​⎦⎤​=⎣⎡​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​⎦⎤​⎣⎡​v1​v2​⋮vn​​⎦⎤​(8) 因此，我们需要将当前时间步计算的词汇的时间顺序右侧的输入词汇全部掩码，置为0。 在源码中，有如下片段实现掩码： if mask is not None: scores = scores.masked_fill(mask == 0, -1e9) p_attn = scores.softmax(dim=-1) 在源码中，将mask置为负无穷是因为这是在经过Softmax之前进行的掩码，在经过Softmax之后负无穷小就变成了0。","s":"Teacher Forcing与Masked Multi-Head Self-Attention","u":"/en/docs/Deep-Learning/论文笔记/Attention Is All You Need","h":"#teacher-forcing与masked-multi-head-self-attention","p":1214},{"i":1238,"t":"本篇论文主要基于 IPL 的思想实现。本仓库大部分从 IPL-Zero-Shot-Generative-Model-Adaptation fork 而来并做出了一定修改。","s":"本科毕业论文：基于 Prompt Learning 的视觉-语言大模型在图像生成中的应用与研究","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"","p":1237},{"i":1241,"t":"conda create -n ipl python=3.8 conda activate ipl","s":"创建 Anaconda 虚拟环境","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#创建-anaconda-虚拟环境","p":1237},{"i":1243,"t":"请确保 NVIDIA 驱动、CUDA 以及 PyTorch 之间版本互相匹配。 conda install pytorch torchvision torchaudio pytorch-cuda=11.8 -c pytorch -c nvidia pip install ftfy regex tqdm ninja pip install git+https://github.com/openai/CLIP.git","s":"安装依赖","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#安装依赖","p":1237},{"i":1245,"t":"预训练的源域生成器可以通过 Google Drive 或者 Tsinghua Cloud 下载，并将其置于 ./pre_stylegan 文件夹中。","s":"下载预训练生成器","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#下载预训练生成器","p":1237},{"i":1249,"t":"ctx_init 参数用于初始化 prompts，官方提供的演示 context 是a photo of a。 source_prompts = [prompt_prefix + \" \" + args.source_class] target_prompts = [prompt_prefix + \" \" + args.target_class] 源域的初始提示词 source_prompts 是 ctx_init 与源域标签的组合。若源域标签为 photo，则源域的初始提示词是 a photo of a photo。目标域的初始提示词同理。","s":"prompts 的初始化","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#prompts-的初始化","p":1237},{"i":1251,"t":"源域以及目标域的初始提示词接下来会进行 tokenize： source_tokenized_prompts = torch.cat([clip.tokenize(p) for p in source_prompts]).to(device) # (1, 77) 'sot a photo of a photo eot' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 1125, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 target_tokenized_prompts = torch.cat([clip.tokenize(p) for p in target_prompts]).to(device) # (1, 77) 'sot a photo of a disney' 在经过tokenize后为tensor [[49406, 320, 1125, 539, 320, 4696, 49407, etc]] # 77是CLIP在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0补齐 tokenize 是 CLIP 对送入的 prompt 字符串进行标记化处理，在头部和尾部添加 startoftext 以及 endoftext 标记，最终为两个首尾标记和全部单词生成 int 标记。其中 CLIP 模型缺省的 context_length 是77，若 prompt 大于 77 会进行截断（truncate），若小于 77 会进行补零，因此 source_tokenized_prompts 与 target_tokenized_prompts 的形状均为 (1, 77)。 在提示词标记化之后，将进行嵌入表示 embedding： source_embedding = clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度 target_embedding = clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtype) # (1, 77, 512) 其中512是CLIP中的n_dim，token_embedding层的词嵌入的维度","s":"prompts 的 tokenize 与 embedding","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#prompts-的-tokenize-与-embedding","p":1237},{"i":1253,"t":"在 Mapper 生成 prompts 后进行 prompts 的特征提取时，需要传入 tokenize 之后的人工初始化 prompt（‘a photo of a photo.’或‘a photo of a disney.’），用于选择 eot 符号对应的维度来进行特征投影（因为 eot 作为整个句子的结尾，被认为该维度包含更多的信息。具体做法：由于在 tokenize 之后，eot 符号对应的维度的值最大，因此可使用 argmax 来定位），以保证最后得到的特征形状与图像特征提取的输出形状相同，使得后续可以进行对比学习的损失计算。","s":"compute_text_features 的实现细节","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#compute_text_features-的实现细节","p":1237},{"i":1255,"t":"Z空间与W空间​ # Z空间到W空间的变换 sample_z = mixing_noise(args.batch_mapper, 512, args.mixing, device) # (batch_size, 512) sample_w = net.generator_frozen.style(sample_z) # (batch_size, 512) Z 空间和 W 空间是 StyleGAN 模型中两种不同的隐变量空间，分别用于控制生成图像的随机特征和样式信息。W 空间通过对 Z 空间的映射得到。 Z 空间（Latent Space Z）： Z 空间是随机噪声空间，通常由随机噪声向量组成，表示了图像的随机特征。 在 StyleGAN 中，Z 空间的维度通常为 512 维。这意味着一个 Z 向量由 512 个数字组成，每个数字表示了图像的一个随机特征的强度或者方向。 W 空间（Style Space W）： W 空间经过特征解耦的隐空间，与 Z 空间相比更加解耦合。 在 StyleGAN 中，W 空间的维度也通常为 512 维，是通过mapping network进行映射得到的，mapping network由PixelNorm层与EqualLinear层构成。以下代码节选自sg2_model.py： '''mapping network''' layers = [PixelNorm()] for i in range(n_mlp): layers.append( EqualLinear( style_dim, style_dim, lr_mul=lr_mlp, activation=\"fused_lrelu\" ) ) self.style = nn.Sequential(*layers) Z 空间与 W 空间的关系： 在 StyleGAN 中，通常会先将一个 Z 向量映射到 W 空间，然后再将 W 向量输入到生成器网络中生成图像。 Z 空间提供了初始随机噪声，而 W 空间则通过特征解耦提供更多控制图像风格的灵活性。通过对 Z 和 W 之间的映射以及 W 在生成器中的应用，StyleGan 实现了高度可控且具有良好生成效果的图像合成。 损失函数​ 在代码中，stage 1 的损失函数是 global_clip_loss，该损失由三部分组成： 对比学习损失：Mapper 生成的源域 prompts 的特征（注意，这里的 prompts 特征是与人工初始化的 prompts 的特征做过 element-wise 相加后的特征）与源域图像特征的余弦相似度组成的对比学习损失； 目标域正则化损失：Mapper 生成的目标域 prompts 的特征与目标域文本标签特征的余弦相似度，这里生成的目标域 prompts 特征同样也是与人工初始化的 prompts 做过加法的。注意该损失有权重 lambda_l。 源域正则化：计算生成的源域prompts与源域标签之间的余弦相似度，由 lambda_src 控制，默认是 0。","s":"训练 stage 1","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#训练-stage-1","p":1237},{"i":1257,"t":"确定目标域生成域需要更新的层​ 在训练的第二阶段进行前向传播时，需要先对目标域生成器（generator_trainable）的所有层进行 unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.ZSSGAN.ZSSGAN.determine_opt_layers，最后 freeze 所有层后再 unfreeze 选择的网络层。 if self.training and self.auto_layer_iters > 0: self.generator_trainable.unfreeze_layers() # unfreeze train_layers = self.determine_opt_layers() # layer to train if not isinstance(train_layers, list): train_layers = [train_layers] self.generator_trainable.freeze_layers() self.generator_trainable.unfreeze_layers(train_layers) # unfreeze 具体选择带更新网络层的策略： 将 W 空间的隐向量送入目标域生成器（SG2Generator）中，并进行反向传播，此时可以通过反向传播后 W 空间隐向量不同维度的更新幅度来衡量不同网络层的影响力，因此选出更新幅度最大的维度就可以确定在 Model Adaption 中需要更新的网络层。 之所以 W 空间编码在 n_latent 维度上的序号就代表着对应的网络层数的序号，是因为 StyleGAN 生成器的结构决定了这一点：StyleGAN 生成器中，W 空间编码的不同维度会被送入生成器网络的不同层，控制这些层的特征映射 (feature mapping)。具体来说，W 空间编码的每个维度会被重复 n_latent 次，作为该层的风格向量 (style vector)，通过 AdaIN (Adaptive Instance Normalization) 层控制该层的特征映射。因此，W 空间编码的第 i 个维度会影响生成器网络中第 i 层的特征映射。当某个维度的 W 值被更新的程度较大时，就意味着该维度对应的层在生成目标图像时起到了重要作用，需要被优化。 损失函数​ stage 2 的损失函数是 CLIP Loss 类中的 clip_directional_loss，该损失函数由两部分组成： edit_direciton：源域生成器与目标域生成器生成的图片在经过 image encdoer 后做 element-wise 的相减，最后除以自身的 L2 Norm 方便后续与 target_direction 计算余弦相似度。 target_direction：Mapper 产生的源域和目标域 prompts 的 text_features 做element-wise相减后，最后初一自身的 L2 Norm 以便后续与 edit_direction 计算余弦相似度。","s":"训练 stage 2","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#训练-stage-2","p":1237},{"i":1259,"t":"参考文献：GAN 的几种评价指标 Inception Score（IS） 评估图像的质量和多样性 质量：把生成的图片 xxx 输入 Inception V3 中，得到输出 1000 维的向量 yyy，向量的每个维度的值对应图片属于某类的概率。对于一个清晰的图片，它属于某一类的概率应该非常大，而属于其它类的概率应该很小。用专业术语说， p(y∣x)p(y|x)p(y∣x) 的熵应该很小（熵代表混乱度，均匀分布的混乱度最大，熵最大）。 多样性： 如果一个模型能生成足够多样的图片，那么它生成的图片在各个类别中的分布应该是平均的，假设生成了 10000 张图片，那么最理想的情况是，1000 类中每类生成了 10 张。转换成术语，就是生成图片在所有类别概率的边缘分布 p(y)p(y)p(y) 熵很大（均匀分布）。 因此，对于 IS 我们需要求的两个量就是 p(y∣x)p(y|x)p(y∣x) 和 p(y)p(y)p(y)。实际中，选取大量生成样本，用经验分布模拟 p(y)p(y)p(y)： p^(y)=1N∑i=1Np(y∣x(i))\\hat{p}(y)=\\frac{1}{N}\\sum_{i=1}^{N}p(y|\\mathbf{x}^{(i)})p^​(y)=N1​i=1∑N​p(y∣x(i)) Inception Score 的完整公式如下： IS(G)=exp⁡(Ex∼pgDKL(p(y∣x)∣∣p(y)))\\mathbf{IS}(G)=\\exp\\left(\\mathbb{E}_{\\mathbf{x}\\sim p_g}D_{KL}\\left(p(y|\\mathbf{x})||p(y)\\right)\\right)IS(G)=exp(Ex∼pg​​DKL​(p(y∣x)∣∣p(y))) 通常计算 Inception Score 时，会生成 50000 个图片，然后把它分成 10 份，每份 5000 个，分别代入公式计算 10 次 Inception Score，再计算均值和方差，作为最终的衡量指标（均值±方差）。但是 5000 个样本往往不足以得到准确的边缘分布 p(y)p(y)p(y)，尤其是像 ImageNet 这种包含 1000 个类的数据集。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 IS 分别为 (2.2960, 0.2042) 以及 (2.6420, 0.1959)。 Fréchet Inception Distance（FID） 评估目标域的风格 计算 IS 时只考虑了生成样本，没有考虑真实数据，即 IS 无法反映真实数据和样本之间的距离，IS 判断数据真实性的依据，源于 Inception V3 的训练集 ImageNet，在 Inception V3 的“世界观”下，凡是不像 ImageNet 的数据，都是不真实的，都不能保证输出一个 sharp 的 predition distribution。因此，要想更好地评价生成网络，就要使用更加有效的方法计算真实分布与生成样本之间的距离。 FID 距离计算真实样本，生成样本在特征空间之间的距离。首先利用 Inception 网络来提取特征，然后使用高斯模型对特征空间进行建模，再去求解两个特征之间的距离，较低的 FID 意味着较高图片的质量和多样性。 StyleGAN-nada 以及 IPL 在经过 batch_size 为 2，iteration 为 300 的训练后（其中 IPL 的 Mapper 是以 batch_size 为 32，iteration 为 300 进行训练的），二者的 FID 分别为 84 以及 58。 Single Image Fréchet Inception Score（SIFID） FID 测量生成的图像的深层特征分布与真实图像的分布之间的偏差。在 ICCV 2019 Best Paper 中提出了 SIFID，只使用一张真实目标域的图像。与 FID 不同，SFID 不使用 Inception Network 中最后一个池化层之后的激活矢量（每个图像一个向量），而是在第二个池层之前的卷积层输出处使用深层特征的内部分布（feature map 中每个位置一个向量）。最终 SIFID 是真实图像和生成的样本中这些特征的统计数据之间的 FID。 Structural Consistency Score（SCS） 评估图像的结构保存能力 Identity Similarity（ID） 评估图像的特征保存能力","s":"定量分析指标","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#定量分析指标","p":1237},{"i":1262,"t":"新增了自定义图像风格迁移功能。 HyperStyle 中的 e4e encoder 将自定义的真实图像编码至 StyleGAN2 中的 W 空间生成 latent codes，再将其分别输入至源域生成器以及目标域生成器以代替原始的从正态分布中 sample 出的随机向量生成的 w_codes，从而得到相应的图片。其中 e4e encoder 来源于 HyperStyle 提供的预训练 checkpoint。 使用方法：运行 inference.py，设置对应的参数，如生成器以及 e4e encoder 的路径、图像路径等，最后运行即可。 修改日志​ 第一次尝试只加载了 w_encoder 类及其对应 checkpoint 参数，导致并未将真实图片编码到 StyleGAN 的 W 空间中，没有 inversion 出合理的结果 第二次尝试使用了 restyle_e4e_encoder，但是没有使用 dlib 进行 alignment，也没有使用 restyle 模型在反演时使用的多次进行前向传播来修正 latent code 的策略。此次尝试虽然反演出了合理的人像，但是人像的特征保存能力非常弱 第三次尝试解决了上一次发现的问题，加入 dlib 提供的 landmark 检测以实现 alignment，并且使用 run_loop 函数在 restyle_e4e_encoder 中进行多次前向传播以修正得到的 W 空间的 latent code，效果较好 对比 pSp 和 e4e encoder，pSp 对人脸图像的还原能力较强，但是会导致目标域图像具有随机的彩色光晕","s":"自定义图像风格迁移","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#自定义图像风格迁移","p":1237},{"i":1265,"t":"Mapper 的作用是从 W 空间的隐式代码中学习出符合源域图片特征以及符合目标域文字特征的 prompts。","s":"改进：Mapper 结构的设计","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#改进mapper-结构的设计","p":1237},{"i":1267,"t":"在 IPL 的官方代码实现中，人工设计的 prompts 有两处，一是 ctx_init，由命令行参数赋值，即 \"a photo of a\"，另一处是 utils/text_templates.py 中的 templates， ctx_init 的作用（与域标签拼接后的 ctx_init）​ ctx_init 在 compute_text_features 函数中用于定位 eot 层符号所表示的维度来进行投影，使得文字特征与图像特征维度相同，并不参与 text_features 的实际计算。但是在该函数中，Mapper 输出的 image-specific prompts 已经与域标签的嵌入表示进行了 concat。 在 stage 1 训练 Mapper 损失函数中，Mapper 学习到的 image-specfic prompts 在与源域标签进行 concat 并得到文字编码后，会与 ctx_init 的文字编码进行 element-wise 的相加，最后再与源域生成器输出的图片的图像编码进行对比损失计算； 同理，在 stage 2 训练目标域生成器时，Mapper 输出的 image-specific prompts 在分别与源域、目标域标签 concat 后送入文字编码器得到文字特征，再与 ctx_init 的文字特征进行 element-wise 相加，最后二者相减得到 text_direction。 templates 的作用​ 注意，这里的 compute_text_features 函数中向其参数 templates 传入的值是 ctx_init，所以才能使用 ctx_init 来定位 eot 符号所对应的层进行维度投影。参数 templates 缺省的值是在 utils/text_templates.py 中写好的模板。 思考​ IPL 方法对 Mapper 学习到的 prompts 除了（1）使用对比学习使 prompts 学习到源域图片的特征以及（2）使用域正则化使得 prompts 向目标域标签对齐之外，并没有使用其他与人工设计的 prompts 有关的正则化方式来约束 prompts 的学习，因此人工设计的 prompts 可能并没有起到太大的约束作用。 如果对比学习损失是为了让 Mapper 自监督学习到图片的特征外，那么是否可以对域正则化损失进行改进，约束学习到的 prompts 向人工设计的初始化 prompts 对齐，以实现类似于 Stable Diffusion 类似的 prompts 控制图像生成的效果。","s":"问题：训练阶段人工 prompts 的作用是什么？","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#问题训练阶段人工-prompts-的作用是什么","p":1237},{"i":1269,"t":"对第一阶段的损失函数做出修改，更新domain loss，使目标域的image-specific prompts与自定义模板对齐。 对 global_clip_loss 的改进​ IPL 训练第一阶段的损失函数除了源域 prompts 与源域图像之间的对比学习损失函数外，还有将目标域 prompts 与目标域标签计算余弦相似度的 domain regularization。 对 domain regularization 进行改进，引入开发者自定义的 prompts，约束 Mapper 学习到的目标域 prompts 向开发者自定义的 prompts 对齐，以此来进行 prompt tuning，发挥 prompt learning 的更大优势，并增强自定义性。 对 clip_directional_loss 的改进​ IPL 训练第二阶段的损失函数","s":"改进：使学习到的 prompts 向用户自主设计的 prompts 模板对齐","u":"/en/docs/Deep-Learning/实战练习/Undergraduate-Dissertation","h":"#改进使学习到的-prompts-向用户自主设计的-prompts-模板对齐","p":1237},{"i":1271,"t":"tip 对于TensorFlow框架，可以使用TensorBoard实现可视化。 对于PyTorch框架，可以使用Visdom或TensorBoardX实现可视化，本篇主要讲述Visdom。","s":"Visdom可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"","p":1270},{"i":1273,"t":"pip install visdom","s":"安装Visdom","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#安装visdom","p":1270},{"i":1276,"t":"首先要通过终端启动Visdom，使用本机端口运行服务器。 以下二者均可。 visdom python -m visdom.server","s":"Visdom的启动","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#visdom的启动","p":1270},{"i":1278,"t":"from visdom import Visdom vis = Visdom() # 实例化 # 创建一条曲线，前两个参数分别为y轴数据、x轴数据，win参数是窗口的唯一标识，opt可选字典中可以给出窗口的title和legend vis.line([0.], [0.], win='win_id', opts=dict(title=\"win_title\")) # 在训练过程中的合适位置向初始化的曲线中喂数据 # viz.line([real_y_data], [global_step], win='win_id', update='append') # 查看训练loss vis.line([loss.item()], [epoch], win='win_id', update='append') # 对于非image数据，在传入visdom时仍需要先转化为numpy类型","s":"单窗口单曲线的可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#单窗口单曲线的可视化","p":1270},{"i":1280,"t":"from visdom import Visdom vis = Visdom() vis.line([[0., 0.]], [0.], win='win_id', opts=dic(title=\"win_title\", legend=[\"curve_name_1\", \"curve_name_2\"])) # 在训练过程中的合适位置向初始化的曲线中喂数据 viz.line([[y1, y2]], [global_step], win='win_id', update='append')","s":"单窗口多曲线的可视化","u":"/en/docs/Deep-Learning/实战练习/Visdom Visualization","h":"#单窗口多曲线的可视化","p":1270},{"i":1282,"t":"介绍 欢迎来到笔记本的深度学习部分 若更新不及时，欢迎通过GitHub联系交流 有关论文笔记的说明 为了节省写作时间，论文笔记部分的文章通常只讲述文章的方法论，Introduction以及Related Work详情可以参考论文原文","s":"Welcome","u":"/en/docs/Deep-Learning/intro","h":"","p":1281},{"i":1284,"t":"如果可以帮到你的话就给个免费的Star吧！","s":"支持我！","u":"/en/docs/Deep-Learning/intro","h":"#支持我","p":1281},{"i":1286,"t":"tip 欢迎来到笔记本的其他部分","s":"Welcome","u":"/en/docs/Others/intro","h":"","p":1285},{"i":1288,"t":"如果可以帮到你的话就给个免费的Star吧！","s":"支持我！","u":"/en/docs/Others/intro","h":"#支持我","p":1285},{"i":1290,"t":"告示栏的启用 在docusaurus.config.js的themeConfig中加入以下代码 announcementBar: { id: 'announcementBar-3', content: 'Welcome to my notebook!', isCloseable: false, }, 告示栏的背景个性化 在custom.css中加入以下代码 div[class^='announcementBar_'] { background: repeating-linear-gradient( -35deg, var(--ifm-color-primary-lighter), var(--ifm-color-primary-lighter) 20px, var(--ifm-color-primary-lightest) 10px, var(--ifm-color-primary-lightest) 40px ); font-weight: 700; }","s":"告示栏","u":"/en/docs/Others/博客搭建/告示栏","h":"","p":1289},{"i":1292,"t":"info 这里记录着在学习过程中发现的理解或操作方面出现的错误，温故知新。","s":"查漏补缺","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"","p":1291},{"i":1294,"t":"进行广播的条件：两个矩阵的后缘维度相同或其中一方的维度为1。 后缘维度相同：A为（3，4，5）的三维数据，B为（4，5）的二维数组。由于A和B的后缘维度都为（4，5），所以可以进行广播。同理，当A为（3，4）的二维数组，B为（4，）的数组，他们的后缘维度都是4，所以可以进行广播。 后缘维度中有一方维度为1：A为（4，5）的二维数组，B为（4，1）的二维数组，其中一方维度为1，可以进行广播。 广播的原理：在运算过程中，Python逐步对数组进行广播，并不进行实际的复制操作，节省内存。 以下是举出具体例子进行分析： import numpy as np import torch x = torch.tensor(np.arange(9), dtype=torch.float32) x = torch.reshape(x, (3, 3)) print(x) x1 = x[:, :, None] # (3, 3, 1) print(x1) \"\"\" tensor([[[0.], [1.], [2.]], [[3.], [4.], [5.]], [[6.], [7.], [8.]]]) \"\"\" x2 = x[:, None] # (3, 1, 3) print(x2) \"\"\" tensor([[[0., 1., 2.]], [[3., 4., 5.]], [[6., 7., 8.]]]) \"\"\" output = x1 + x2 print(output) \"\"\" tensor([[[ 0., 1., 2.], [ 1., 2., 3.], [ 2., 3., 4.]], [[ 6., 7., 8.], [ 7., 8., 9.], [ 8., 9., 10.]], [[12., 13., 14.], [13., 14., 15.], [14., 15., 16.]]]) \"\"\" 由于x1与x2在第0维度上维度相同，所以Python可以直接进行逐元素相加，即依次进行如下运算 x1[0,:,:]+x2[0,:,:](1)x1[0, :, :] + x2[0, :, :] \\tag{1}x1[0,:,:]+x2[0,:,:](1) x1[1,:,:]+x2[1,:,:](2)x1[1, :, :] + x2[1, :, :] \\tag{2}x1[1,:,:]+x2[1,:,:](2) x1[2,:,:]+x2[2,:,:](3)x1[2, :, :] + x2[2, :, :] \\tag{3}x1[2,:,:]+x2[2,:,:](3) 但在第0维度的相加过程中出现了shape为(3, 1)的矩阵与shape为(1, 3)的矩阵相加的情况，此时进行广播，将(3, 1)的每一列复制三次为(3, 3)，将(1, 3)的每一行复制三次为(3, 3)，再进行逐元素相加。 其实，上述的过程还可以再细分为，x1[0, 0, :]与x2[0, 0, :]相加时出现了第一次广播，将x1[0, 0, :]复制了三次与x2[0,0, :]完成相加，这里不再赘述，最终想表达的原理是广播机制是在运算过程当中进行的，并非一次性将二者全部复制为对应的最小公倍数形状后再进行运算。","s":"Python的广播机制","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#python的广播机制","p":1291},{"i":1296,"t":"点积在Python中对应的运算符为*，进行矩阵之间的逐元素乘法。在点积运算中，运算矩阵二者形状不一样时可能涉及到广播机制； 矩阵乘法在Python中对应的运算符为@，进行常规矩阵乘法。遵守左矩阵的列数必须等于右矩阵的行数，且输出矩阵的行数等于左矩阵的行数、输出矩阵的列数等于右矩阵的列数的规则。","s":"点积（dot product）与矩阵乘法（matmul product）","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#点积dot-product与矩阵乘法matmul-product","p":1291},{"i":1298,"t":"当你有多个列表（或其他可迭代对象）时，zip函数可以将它们逐个配对成元组。而*操作符用于解压元组，将元组中的元素分别作为参数传递给函数。 以下是一个简单的例子： # zip函数的例子 list1 = [1, 2, 3] list2 = ['a', 'b', 'c'] list3 = ['x', 'y', 'z'] # 使用zip将多个列表配对成元组 zipped_lists = zip(list1, list2, list3) # 打印配对后的元组 for item in zipped_lists: print(item) 输出： (1, 'a', 'x') (2, 'b', 'y') (3, 'c', 'z') 在这个例子中，zip将list1、list2和list3中相同位置的元素组合成元组。 接下来，我们可以使用 * 操作符解压这些元组： # *解压操作的例子 unzipped_lists = zip(*zipped_lists) # 打印解压后的列表 for item in unzipped_lists: print(item) 输出： (1, 2, 3) ('a', 'b', 'c') ('x', 'y', 'z') 在这个例子中，*操作符将先前由zip组合的元组解压，分别放回原始的列表。","s":"zip函数与解压操作*","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#zip函数与解压操作","p":1291},{"i":1300,"t":"参考资料 https://www.jianshu.com/p/41c15d301542 对于不同的网络层，输入的维度虽然不同，但是通常输入的第一个维度都是batch_size，比如torch.nn.Linear的输入(batch_size,in_features)，torch.nn.Conv2d的输入(batch_size, C, H, W)。 而RNN的输入是(seq_len, batch_size, input_size)，batch_size位于第二维度！虽然可以将batch_size和序列长度seq_len对换位置，此时只需令batch_first=True。 但是为什么RNN输入默认不是batch first=True？这是为了便于并行计算。 因为cuDNN中RNN的API就是batch_size在第二维度。进一步讲，batch first意味着模型的输入（一个Tensor）在内存中存储时，先存储第一个sequence，再存储第二个，而如果是seq_len first，模型的输入在内存中，先存储每一个sequence的第一个元素，然后是第二个元素，两种区别如下图所示： seq_len first意味着不同序列中同一个时刻对应的输入单元在内存中是毗邻的，这样才能做到真正的batch计算。","s":"对batch_first参数的理解","u":"/en/docs/Deep-Learning/Fill-The-Gaps","h":"#对batch_first参数的理解","p":1291},{"i":1303,"t":"dock显示的图标是全局图标，程序启动器的desktop文件位于/usr/share/applications中，全局主题中图标主题的程序logo位于~/.local/share/icons/Mkos-Big-Sur-Night/128x128/apps(deppending on specific situation)中。在logo文件夹中挑选想要的logo，在desktop中的icon位置修改即可 应用更新的时候会同时更新.desktop文件，因此在更换图标是最好直接更换在主题文件中替换icon，而不是更改desktop的icon路径 Finder小组件中application title文字不能垂直居中，可以更换为Window title插件","s":"一、latte-dock","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#一latte-dock","p":1301},{"i":1305,"t":"Finder栏中Plasmoids左半部分从左至右依次为： kpple menu application title/window titile(if the text of application title can't be centered vertically) global menu 右半部分从左至右依次为： resources monitor (fork) mcOS BS Inline Battery 网络 Control Center(replace the icon with search icon) Control Center(replace the icom with menu icon) Better Inline Clock 安装方法： plasmpkg2 -u xxx.plasmoid","s":"二、Kde Plasmoids","u":"/en/docs/Others/Linux/客制化/如何让你的KDE看起来更像macOS","h":"#二kde-plasmoids","p":1301},{"i":1307,"t":"通过编写脚本函数的方式，手动开启代理","s":"终端代理","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"","p":1306},{"i":1309,"t":"新建脚本文件terminal_proxy.sh # 开启代理 function proxy_on(){ export ALL_PROXY=socks5://127.0.0.1:7890 export http_proxy=http://127.0.0.1:7890 export https_proxy=https://127.0.0.1:7890 echo -e \"已开启代理\" } # 关闭代理 function proxy_off(){ unset ALL_PROXY unset http_proxy unset https_proxy echo -e \"已关闭代理\" }","s":"一、编写脚本","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#一编写脚本","p":1306},{"i":1311,"t":"fish的配置文件：~/.config/fish/config.fish zsh的配置文件：~/.zshrc bash的配置文件：~/.bashrc 在配置文件末尾添加以下代码 source /path/terminal_proxy.sh","s":"二、关联终端配置文件","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#二关联终端配置文件","p":1306},{"i":1313,"t":"在终端中输入以下命令即可开启代理 proxy_on 在终端中输入以下命令即可关闭代理 proxy_off","s":"三、使用","u":"/en/docs/Others/Linux/实用工具/终端代理","h":"#三使用","p":1306},{"i":1315,"t":"tip 大数除法是指被除数大小超出long long范围，而导致必须使用字符串存储的除法，属于简单模拟的范畴","s":"大数除法","u":"/en/docs/Tui-Mian/机试/大数除法","h":"","p":1314},{"i":1317,"t":"通过模拟列竖式手动计算除法，实现使用字符串存储被除数的大数除法","s":"思路","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#思路","p":1314},{"i":1319,"t":"string division(string s, int divisor) { /* * 通过模拟列竖式手算除法完成字符串存储的大数除法 */ string quotient; // 商 int idx = 0; // 当前处理的数字在原始字符串中的位置 int remainder = 0; // 余数 int temp = 0; while (idx < s.size()) { // 一直循环处理到索引等于长度 temp = remainder * 10 + (s[idx] - '0'); // 当前进行除法运算的temp if (temp >= divisor) { // 如果能除的动，则将当前的商插入quotient，并更新余数 quotient.push_back(temp / divisor + '0'); remainder = temp % divisor; } else { // 除不动时分两种情况 if (!quotient.empty()) { // 商目前不为空，此时按照竖式方法，需要向商中加入0，再接着下一次循环 quotient.push_back('0'); } remainder = temp; // 商目前为空，按照竖式计算方法，只更新余数，商保持为空 } idx++; // 更新索引位置 } if (quotient.empty()) { // 如果一直除不动，循环结束商还为空，则赋值为0字符串 quotient.assign(\"0\"); } return quotient; // 返回商字符串 }","s":"参考代码","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#参考代码","p":1314},{"i":1321,"t":"将大数除法与进制转换相结合。 tip 北京大学机试真题，N诺链接 完整代码如下： #include <bits/stdc++.h> using namespace std; string division(string s, int divisor) { /* * 通过模拟列竖式手算除法完成字符串存储的大数除法 */ string quotient; // 商 int idx = 0; // 当前处理的数字在原始字符串中的位置 int remainder = 0; // 余数 int temp = 0; while (idx < s.size()) { // 一直循环处理到索引等于长度 temp = remainder * 10 + (s[idx] - '0'); // 当前进行除法运算的temp if (temp >= divisor) { // 如果能除的动，则将当前的商插入quotient，并更新余数 quotient.push_back(temp / divisor + '0'); remainder = temp % divisor; } else { // 除不动时分两种情况 if (!quotient.empty()) { // 商目前不为空，此时按照竖式方法，需要向商中加入0，再接着下一次循环 quotient.push_back('0'); } remainder = temp; // 商目前为空，按照竖式计算方法，只更新余数，商保持为空 } idx++; // 更新索引位置 } if (quotient.empty()) { // 如果一直除不动，循环结束商还为空，则赋值为0字符串 quotient.assign(\"0\"); } return quotient; // 返回商字符串 } int main() { string s; while (cin >> s) { vector<int> vec; int len = s.size(); while (s != \"0\") { int remainder = (s[len - 1] - '0') % 2; vec.push_back(remainder); s = division(s, 2); len = s.size(); } if (vec.empty()) { cout << \"0\"; } else { for (auto it = vec.rbegin(); it != vec.rend(); it++) { cout << *it; } } cout << endl; } return 0; }","s":"扩展","u":"/en/docs/Tui-Mian/机试/大数除法","h":"#扩展","p":1314},{"i":1324,"t":"未知，可能是由Windows休眠模式导致","s":"一、发生原因","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#一发生原因","p":1322},{"i":1326,"t":"使用ntfsfix修复ntfs磁盘 安装ntfsfix yay -S ntfsfix 查看问题分区 df -h 修复 sudo ntfsfix /dev/your_partition 重启 reboot","s":"二、解决方案","u":"/en/docs/Others/Linux/问题解决/双系统挂载Windows磁盘为只读文件","h":"#二解决方案","p":1322},{"i":1329,"t":"简述大数定理。 大数定理描述了大样本情况下随机变量的均值与其期望值之间的关系。对于独立同分布的随机变量序列，随着样本数量的增加，样本均值会以较高的概率接近其期望值。 简述中心极限定理。 当独立随机变量的数量足够大时，它们的和（或平均值）的分布会逐渐接近一个正态分布。即使原始随机变量不服从正态分布，但当样本容量足够大时，和（或平均值）的分布仍然呈现出正态分布的特征。 什么是全概率公式。 对于事件A而言，假设有一组互斥且穷尽的条件事件B，则事件A的概率等于事件A在每个条件事件下发生的概率与该条件事件发生概率的乘积和。 什么是最大似然估计。 基本思想是在已知观测数据的情况下，通过调整参数的取值，找到使得观测数据出现概率最大的参数值。 大致过程： 构建参数化的概率模型，即构建似然函数，表示在给定参数下观测数据出现的概率 取似然函数的对数，方便计算与优化 最大化似然函数，求解参数的最优值 简述贝叶斯定理。 贝叶斯定理描述了在给定观测数据的条件下，计算事件的后验概率的方法。 P(A∣B)=P(B∣A)∗P(A)P(B)P(A|B) = \\frac{P(B|A) * P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)∗P(A)​ 其中： P(A∣B)P(A|B)P(A∣B)表示在观测到事件 B 发生的条件下，事件 A 发生的概率，称为后验概率 P(B∣A)P(B|A)P(B∣A)表示在事件 A 发生的条件下，事件 B 发生的概率，称为似然； P(A)P(A)P(A)和P(B)P(B)P(B)分别是事件 A 和事件 B 独立发生的先验概率。 优点：它能够将主观先验知识与观测数据相结合，通过不断更新后验概率来进行推断和决策。 P问题、NP问题以及NP完全问题 tip P stands for Polynomial 意为多项式 P问题是可以在多项式时间内解决的问题 NP问题是可以在多项式时间内验证解的正确性的问题 NP完全问题是一类特殊的NP问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的NP问题","s":"面试常考问题","u":"/en/docs/Tui-Mian/数学/概率论","h":"#面试常考问题","p":1327},{"i":1332,"t":"树的性质： 一棵 N 个结点的树有 N-1 条边 树的总度数+1=树的结点数 树的度=树中度最大结点的度数 二叉树的性质： 叶子结点数等于度为 2 的结点数加 1，即n0 = n2 + 1 树转化为二叉树： 参考资料：知乎 加线。在所有的兄弟结点之间加一条线。 去线。树中的每个结点，只保留它与第一个孩子结点的连线，删除其他孩子结点之间的连线。 调整。每个结点的原来的孩子是结点的左孩子，由原来的兄弟结点转过来的孩子是结点的右孩子。 二叉排序树：每个结点的左子树上的所有结点值都更小，每个结点的右子树上的所有结点的值都更大。 平衡二叉排序树：要么是空树，要么左子树的高度与右子树的高度之差小于等于1。","s":"树","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#树","p":1330},{"i":1334,"t":"图的表示： 邻接矩阵 邻接表：每一行表示的是一个顶点所连接的顶点，链表不具有指向性 邻接表的搜索 最小生成树：在连通网的所有生成树中，所有边的代价和最小的生成树，称为最小生成树。 Kruskal算法 Prim算法 最短路径 ​ ​","s":"图","u":"/en/docs/Tui-Mian/计算机基础综合/数据结构","h":"#图","p":1330},{"i":1337,"t":"线性相关与线性无关：向量组中的任一向量都不能被其它向量线性表示，就说向量组线性无关；否则就是线性相关。 矩阵转置：将矩阵的行和列互相交换 矩阵求逆：对于方阵A，若存在方阵B使得AB=BA=单位方阵I，则方阵B为方阵A的逆矩阵，记为A−1A^{-1}A−1 线性代数中的初等行变换。 交换两行 用非零常数乘以某一行 用一行的倍数加到另一行上 如何理解矩阵的秩。 矩阵的秩是指矩阵的列空间（或行空间）的维数，简而言之是矩阵中所有非零行（或列）向量构成的集合所组成的最大线性无关组的向量个数。 tip 宋浩八字：非零子式的最高阶数 任意矩阵的行秩都等于列秩。 矩阵的秩与线性方程组解的关系。 对于n元线性方程组而言： 当系数矩阵的秩等于增广矩阵的秩且秩等于n时，有唯一解 当系数矩阵的秩等于增广矩阵的秩且秩大于n时，有无穷多解 当系数矩阵的秩不等于增广矩阵的秩时，无解 tip 当系数矩阵的秩小于增广矩阵的秩时，说明系数矩阵中的某一列向量（或行向量）可以被其他列向量（或行向量）线性表示，此时该行不能提供额外的线性独立信息 简述向量组线性无关的含义。 含义：若一个向量组是线性无关的，则该向量组中的每个向量都不能表示成其他向量的线性组合。 意义：如果一个向量组线性无关，那么该向量组所张成的空间就是一个最小维度的向量空间，并且该向量空间中的任何向量都可由这些向量线性组合表示。 判定方法：如果一个向量组中的所有向量都不可以由其他向量线性组合得到，则称该向量组为线性无关的。否则，如果存在某个向量可以表示成其他向量的线性组合，则该向量组就不是线性无关的。 解释正定矩阵以及半正定矩阵。 简述特征值的含义。 特征值描述了矩阵在特定方向（特征向量方向）上的缩放因子，特征向量表示矩阵在这个特定方向上的不变性。 简述矩阵分解的物理意义。 矩阵分解是将一个矩阵表示为一些特定形式的矩阵乘积的过程。 矩阵分解的种类以及物理意义： LU分解：将矩阵分解为一个下三角矩阵和一个上三角矩阵的乘积。物理意义包括解线性方程组、计算矩阵的行列式和逆矩阵等。 QR分解：将矩阵分解为一个正交矩阵和一个上三角矩阵的乘积。物理意义包括最小二乘问题、矩阵的特征值计算等。 特征值分解：将矩阵分解为一个特征向量矩阵和一个对角矩阵的乘积。物理意义包括矩阵的幂、指数和对称矩阵的对角化等。 奇异值分解（SVD）：将矩阵分解为一个正交矩阵、一个对角矩阵和一个正交矩阵的乘积。物理意义包括降维、矩阵逼近和图像压缩等。","s":"一、线性代数","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#一线性代数","p":1335},{"i":1339,"t":"简述大数定理。 大数定理描述了大样本情况下随机变量的均值与其期望值之间的关系。对于独立同分布的随机变量序列，随着样本数量的增加，样本均值会以较高的概率接近其期望值。 简述中心极限定理。 当独立随机变量的数量足够大时，它们的和（或平均值）的分布会逐渐接近一个正态分布。即使原始随机变量不服从正态分布，但当样本容量足够大时，和（或平均值）的分布仍然呈现出正态分布的特征。 什么是全概率公式。 对于事件A而言，假设有一组互斥且穷尽的条件事件B，则事件A的概率等于事件A在每个条件事件下发生的概率与该条件事件发生概率的乘积和。 什么是最大似然估计。 基本思想是在已知观测数据的情况下，通过调整参数的取值，找到使得观测数据出现概率最大的参数值。 大致过程： 构建参数化的概率模型，即构建似然函数，表示在给定参数下观测数据出现的概率 取似然函数的对数，方便计算与优化 最大化似然函数，求解参数的最优值 简述贝叶斯定理。 贝叶斯定理描述了在给定观测数据的条件下，计算事件的后验概率的方法。 P(A∣B)=P(B∣A)∗P(A)P(B)P(A|B) = \\frac{P(B|A) * P(A)}{P(B)}P(A∣B)=P(B)P(B∣A)∗P(A)​ 其中： P(A∣B)P(A|B)P(A∣B)表示在观测到事件 B 发生的条件下，事件 A 发生的概率，称为后验概率 P(B∣A)P(B|A)P(B∣A)表示在事件 A 发生的条件下，事件 B 发生的概率，称为似然； P(A)P(A)P(A)和P(B)P(B)P(B)分别是事件 A 和事件 B 独立发生的先验概率。 优点：它能够将主观先验知识与观测数据相结合，通过不断更新后验概率来进行推断和决策。 P问题、NP问题以及NP完全问题 tip P stands for Polynomial 意为多项式 P问题是可以在多项式时间内解决的问题 NP问题是可以在多项式时间内验证解的正确性的问题 NP完全问题是一类特殊的NP问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的NP问题","s":"二、概率论","u":"/en/docs/Tui-Mian/数学/夏令营面试数学部分复习","h":"#二概率论","p":1335},{"i":1343,"t":"显著性目标检测Salient Object Detection，相当于语义分割中的二分类任务，只有前景和背景","s":"（一）SOD任务","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一sod任务","p":1340},{"i":1345,"t":"下图为U-2-Net的整体结构 tip residual [rɪˈzɪdjuəl] 在encoder阶段，每个block之后使用maxpooling下采样两倍 在decoder阶段，每个block之后使用双线性插值上采样两倍 下图为Residual U-block的结构 tip 卷积是如何改变输出的通道数的？ 卷积核的通道数等于输入的通道数，卷积核的个数等于输出的通道数 图片来源知乎 在特征融合阶段，每一层的encoder-decoder输出，使用3x3卷积以及双线性插值上采样到原始分辨率得到该层的特征图，且卷积核的个数为1，输出的feature map通道数也为1。将每一层的feature map进行concat拼接，得到6通道的融合feature map，最后使用1x1卷积以及sigmoid激活函数得到最终的融合特征图输出","s":"（二）网络结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二网络结构","p":1340},{"i":1347,"t":"损失函数是7个损失项的加权求和 共有6层encoder-decoder结构，将每一层对应的feature map与ground truth做BCE Loss得到6个损失项 第7个损失项是最终融合得到的feature map与ground truth的BCE Loss 在论文中，每个损失项的权重都为1 canny边缘检测： 使用高斯滤波进行平滑 计算像素梯度 非极大值抑制 双阈值检测强边缘、弱边缘 边缘连接","s":"（三）损失函数","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三损失函数","p":1340},{"i":1349,"t":"深度可分离卷积的优点是可以在大致保持卷积效果的情况下减少参数量 在实现原理上可分为两个步骤：深度卷积（depth wise）以及逐点（point wise）卷积 深度卷积是一种在每个输入通道上分别进行卷积操作的卷积方法，每个输入通道只与对应的卷积核进行卷积。 逐点卷积通过使用1×11 \\times 11×1卷积对深度卷积的结果再次卷积","s":"（四）深度可分离卷积","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四深度可分离卷积","p":1340},{"i":1352,"t":"PR曲线所围成的面积即使该类的AP值","s":"（一）mAP","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一map","p":1340},{"i":1354,"t":"tip 参考资料：【精读AI论文】YOLO V1目标检测，看我就够了 1.预测阶段​ 下图为YOLOv1的算法框架 下图为YOLOv1的网络结构 输入[448, 448, 3]图像，输出[7, 7, 30]的tensor（包含所有预测框的坐标、置信度和类别结果），通过解析输出的tensor得到预测结果 首先将输入图片划分为S×SS \\times SS×S个grid cell。在YOLOv1中S=7S=7S=7 每个grid cell预测出BBB个bounding box预测框（bbox），每个bbox的中心点都落在该grid cell中。在YOLOv1中B=2B=2B=2 每个bbox包含(x, y, h, w, c)五种信息，其中x, y为bbox左上角坐标，h, w为bbox的宽高，c为该bbox是否存在object的概率 同时每个grid cell预测出一组与数据集有关的条件类别概率。在YOLOv1论文使用的数据集Pascal VOC中，类别种类为20类，因此在预测阶段输出的[7, 7, 30]的tensor含义如下图所示 每个grid cell选出条件类别概率最大的类别，因此每个grid cell只能检测一个物体 tip 这也是YOLOv1小目标和密集目标识别能力差的原因 每个bbox的置信度与其父grid cell的类别概率相乘得到全概率，如下图所示 进行NMS后处理： 对某一特定类别，首先根据全概率置信度排序 将此时最大置信度的bbox与其他所有置信度更小的bbox做IoU判断，若IoU大于设置的阈值，则抹除置信度小的bbox 将剩余的次大的置信度重复步骤2，抹除所有置信度更小的其IoU超过阈值的bbox tip 非极大值抑制只在预测阶段进行 在训练阶段，所有bbox都会在Loss Function中起到更新的作用，因此不进行NMS 2. 训练过程的损失函数​","s":"（二）YOLOv1","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov1","p":1340},{"i":1356,"t":"1. BN层​ 2. 高分辨率训练​ 3. Anchor​ YOLOv2引入了anchor机制代替bbox，将图像划分为13×1313 \\times 1313×13个grid cell，每个grid cell生成5个anchor anchor是通过k-means聚类在数据集上生成的不同尺寸的先验框 对数据集进行anchor宽高比的聚类，聚类数越大，覆盖的IoU越大，但同时模型也更复杂","s":"（二）YOLOv2","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二yolov2","p":1340},{"i":1358,"t":"1. 特征融合​ YOLOv5使用CSPNet实现特征融合，CSP模块由主干和分支构成，主干提取低维特征，分支提取高维特征 主干通过卷积和池化提取特征，形成不同尺寸的特征图 分支将主干输出的特征图作为输入，逐步卷积和上采样提取高级别语义特征 主干特征图通过卷积对通道数降维之后与分支在通道维度上concat tip 在特征提取以及融合阶段可以加入Canny边缘检测得到的特征图进行特征融合 2. 前处理​ 对填充黑色像素进行了改善，以填充更少的黑像素，提高了精度 3. 特征金字塔FCN​","s":"（三）YOLOv5","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三yolov5","p":1340},{"i":1360,"t":"tip 有关CSP特征融合可以参考：https://blog.csdn.net/weixin_55073640/article/details/122614176 CBAM是通道+空间注意力机制（SENet是通道注意力机制）","s":"三、CBAM","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三cbam","p":1340},{"i":1362,"t":"通道注意力：原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]经过通道注意力机制算法得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，代表不同通道之间的重要程度，将其与原始特征图相乘 空间注意力：经过通道注意力的特征图[b,c,h,w][b, c, h, w][b,c,h,w]经过空间注意力机制算法得到[b,1,h,w][b, 1, h, w][b,1,h,w]的tensor，代表宽高维度的像素之间的重要程度，将其与原始特征图相乘","s":"（一）总体结构","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一总体结构","p":1340},{"i":1364,"t":"原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]分别经过最大池化和平均池化来压缩空间维度、学习通道之间的特征，得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，再送入共享的多层感知机网络进行降维再升维，最后将二者相加再经过sigmoid函数产生最终的通道注意力特征图","s":"（二）通道注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二通道注意力","p":1340},{"i":1366,"t":"原始特征图[b,c,h,w][b, c, h, w][b,c,h,w]分别经过最大池化和平均池化（通过torch.max和torch.mean函数实现）得到[b,1,h,w][b, 1, h, w][b,1,h,w]的tensor，再将二者concat后通过7×77 \\times 77×7卷积学习特征并降维，最后送入sigmoid函数得到最终的空间注意力特征图","s":"（三）空间注意力","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三空间注意力","p":1340},{"i":1368,"t":"作者分别对通道注意力以及空间注意力使用最大池化还是平均池化做了消融实验，结果反映二者都用最大池化以及平均池化再相加效果最好（且对于7×77 \\times 77×7卷积与3×33 \\times 33×3卷积的消融实验发现，7×77 \\times 77×7卷积效果更好） 作者对先通道注意力还是先空间注意力做了消融实验，结果发现先通道再空间效果更好","s":"（四）其他注意事项","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四其他注意事项","p":1340},{"i":1370,"t":"Focal Loss通过引入修正项和样本关注度超参数，增加困难样本的关注度，来解决类别不均衡问题。 YOLO损失函数分为分类损失以及回归损失，可以在分类损失中引入Focal Loss代替原来的交叉熵损失","s":"四、Focal Loss","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#四focal-loss","p":1340},{"i":1372,"t":"Squeeze and Excitation Squeeze挤压操作就是将[b,c,h,w][b, c, h, w][b,c,h,w]的特征图通过池化挤压宽高维度，得到[b,c,1,1][b, c, 1, 1][b,c,1,1]的tensor，该tensor还要经过所示的全连接层-ReLU-全连接层结构 Excitation激励操作就是通过sigmoid函数得到每个通道之间的重要程度系数","s":"五、SENet","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#五senet","p":1340},{"i":1374,"t":"自注意力机制通过计算元素之间的相似度来确定它们之间的关联性，并对其进行加权处理以获得上下文信息。 自注意力机制通过对输入的元素进行线性变换来得到查询（Query）向量、键（Key）向量和值（Value）向量。 通过点积和缩放点积计算相似程度 通过自注意力机制，每个元素都可以通过与其他元素的相似度计算和加权求和，获取到与它们相关的上下文信息。相似度高的元素将获得更高的权重，因此更受到关注和影响，从而建立起元素之间的关联性。","s":"六、自注意力机制","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#六自注意力机制","p":1340},{"i":1377,"t":"This content has been encrypted.","s":"（一）英文自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#一英文自我介绍","p":1340},{"i":1379,"t":"1. 英文自我介绍​ This content has been encrypted. 2. 中文自我介绍​ This content has been encrypted.","s":"（二）西电广研院自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#二西电广研院自我介绍","p":1340},{"i":1381,"t":"1. 英文自我介绍​ This content has been encrypted. 2. 中文自我介绍​ This content has been encrypted.","s":"（三）电子科技大学自我介绍","u":"/en/docs/Tui-Mian/简历/简历面试准备","h":"#三电子科技大学自我介绍","p":1340},{"i":1383,"t":"tip 欢迎来到笔记本的推免复习部分","s":"Welcome","u":"/en/docs/Tui-Mian/intro","h":"","p":1382},{"i":1385,"t":"如果可以帮到你的话就给个免费的Star吧！","s":"支持我！","u":"/en/docs/Tui-Mian/intro","h":"#支持我","p":1382},{"i":1388,"t":"自己在准备夏令营和预推免期间浏览了很多经验贴，按照科协的传统，也支持一下互联网精神，还是给师弟师妹们留下点文字资料吧。 希望可以帮到大家，也感谢那些曾经帮助过我的经验贴和师兄师姐。 文章均为个人经历与想法，不代表任何单位的官方立场，仅供参考。","s":"前言","u":"/en/docs/Tui-Mian/Summary","h":"#前言","p":1386},{"i":1390,"t":"常见名词 含义解释 928/929 每年的公历9月28日（2023年是9月29日），是研招网全国推免系统开放的日子，也是已经拿到offer的推免生上岸的日子。 没offer的也不用着急，因为每个学生只能上一个学校，928/929当天就算手里一堆offer的学生也是只能选择最想去的学校而释放掉其他offer。稳住心态沉住气，一般10月20日推免系统才关闭，这段时间足够联系导师上岸了。 优营 优营就是夏令营的优秀营员。 不同学校优营的效力不同，有些学校的优营直接等于拟录取，928/929当天填报系统即可上岸；但有些学校的优营只能保证在后期的预推免或九推的初筛中不被刷掉，仍需参加后续考核才能获得拟录取资格。 wl/waiting list wl就是递补名单，有些学校的夏令营优营评选中设置递补名单。如果后期有其他优营学生放鸽子不来的话，就会按顺序补录到递补名单中的学生。","s":"扫盲","u":"/en/docs/Tui-Mian/Summary","h":"#扫盲","p":1386},{"i":1392,"t":"本科学校：理工类普通一本（四非） 专业：计算机科学与技术CS rank：前1%（非rank 1 or 2的top选手） 英语：四级594 & 六级586 竞赛：非ACMer，一个CV类比赛国一，其他都是更不上台面的奖项了 奖学金：国家奖学金（夏令营结束之后才拿的，基本没用到）、省人民政府奖学金、CASC奖学金 科研及论文：无正经科研经历，EI水会一篇 从某种程度上来说，本科出身和rank基本上决定了上限。","s":"个人情况","u":"/en/docs/Tui-Mian/Summary","h":"#个人情况","p":1386},{"i":1398,"t":"tip 参考链接： 线性代数极简入门 《线性代数》高清教学视频 “惊叹号”系列 宋浩老师","s":"线性代数","u":"/en/docs/Tui-Mian/数学/线性代数","h":"","p":1397},{"i":1400,"t":"线性相关与线性无关：向量组中的任一向量都不能被其它向量线性表示，就说向量组线性无关；否则就是线性相关。 矩阵转置：将矩阵的行和列互相交换 矩阵求逆：对于方阵A，若存在方阵B使得AB=BA=单位方阵I，则方阵B为方阵A的逆矩阵，记为A−1A^{-1}A−1","s":"一、基础知识","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#一基础知识","p":1397},{"i":1402,"t":"线性代数中的初等行变换。 交换两行 用非零常数乘以某一行 用一行的倍数加到另一行上 如何理解矩阵的秩。 矩阵的秩是指矩阵的列空间（或行空间）的维数，简而言之是矩阵中所有非零行（或列）向量构成的集合所组成的最大线性无关组的向量个数。 tip 宋浩八字：非零子式的最高阶数 任意矩阵的行秩都等于列秩。 矩阵的秩与线性方程组解的关系。 对于n元线性方程组而言： 当系数矩阵的秩等于增广矩阵的秩且秩等于n时，有唯一解 当系数矩阵的秩等于增广矩阵的秩且秩大于n时，有无穷多解 当系数矩阵的秩不等于增广矩阵的秩时，无解 tip 当系数矩阵的秩小于增广矩阵的秩时，说明系数矩阵中的某一列向量（或行向量）可以被其他列向量（或行向量）线性表示，此时该行不能提供额外的线性独立信息 简述向量组线性无关的含义。 含义：若一个向量组是线性无关的，则该向量组中的每个向量都不能表示成其他向量的线性组合。 意义：如果一个向量组线性无关，那么该向量组所张成的空间就是一个最小维度的向量空间，并且该向量空间中的任何向量都可由这些向量线性组合表示。 判定方法：如果一个向量组中的所有向量都不可以由其他向量线性组合得到，则称该向量组为线性无关的。否则，如果存在某个向量可以表示成其他向量的线性组合，则该向量组就不是线性无关的。 解释正定矩阵以及半正定矩阵。 简述特征值的含义。 特征值描述了矩阵在特定方向（特征向量方向）上的缩放因子，特征向量表示矩阵在这个特定方向上的不变性。 简述矩阵分解的物理意义。 矩阵分解是将一个矩阵表示为一些特定形式的矩阵乘积的过程。 矩阵分解的种类以及物理意义： LU分解：将矩阵分解为一个下三角矩阵和一个上三角矩阵的乘积。物理意义包括解线性方程组、计算矩阵的行列式和逆矩阵等。 QR分解：将矩阵分解为一个正交矩阵和一个上三角矩阵的乘积。物理意义包括最小二乘问题、矩阵的特征值计算等。 特征值分解：将矩阵分解为一个特征向量矩阵和一个对角矩阵的乘积。物理意义包括矩阵的幂、指数和对称矩阵的对角化等。 奇异值分解（SVD）：将矩阵分解为一个正交矩阵、一个对角矩阵和一个正交矩阵的乘积。物理意义包括降维、矩阵逼近和图像压缩等。","s":"二、面试常考问题","u":"/en/docs/Tui-Mian/数学/线性代数","h":"#二面试常考问题","p":1397}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/703",[0,3.021,1,7.715,2,2.601,3,9.31,4,7.715,5,7.715,6,7.715]],["t/705",[2,2.164,7,2.14,8,2.675,9,1.717,10,2.03,11,2.03,12,3.449,13,2.03,14,0.671,15,2.443,16,2.718,17,2.675,18,6.42,19,3.392,20,5.805,21,3.369,22,4.403,23,7.09,24,2.203,25,1.936,26,2.834,27,3.369,28,3.369,29,3.369,30,3.655,31,3.796,32,1.894]],["t/707",[14,0.628,33,3.805,34,6.503,35,7.192,36,8.919,37,7.192,38,7.192,39,7.192]],["t/709",[0,3.391,40,8.659]],["t/711",[7,2.751,8,3.439,9,2.208,10,2.609,11,2.609,12,3.561,13,2.609,14,0.674,19,2.928,25,4.296,30,3.024,31,3.14,32,2.435,41,3.643,42,4.331,43,4.725,44,3.439,45,5.548]],["t/713",[2,1.626,12,3.257,14,0.676,16,2.504,19,3.11,24,3.154,25,4.965,26,4.057,43,4.564,45,4.613,46,4.823,47,6.68]],["t/715",[0,2.817,14,0.6,19,3.969,48,7.192,49,7.192,50,7.192,51,7.192]],["t/717",[2,2.121,7,2.074,8,2.593,9,1.664,10,1.967,11,1.967,12,3.681,13,1.967,14,0.674,19,3.209,32,1.836,52,2.135,53,3.265,54,3.464,55,4.76,56,4.619,57,4.297,58,4.619,59,3.265,60,3.265,61,3.265,62,6.293,63,5.988,64,5.162,65,3.265]],["t/719",[14,0.469,19,2.968,66,7.577,67,7.577,68,7.577,69,7.577,70,7.577,71,7.577,72,7.577]],["t/722",[73,8.839]],["t/724",[14,0.617]],["t/726",[74,3.977,75,5.33,76,3.977,77,4.958,78,5.894,79,5.33,80,5.894,81,5.894,82,7.977,83,5.894,84,7.847,85,5.894,86,5.33,87,3.855,88,3.744,89,5.33,90,5.894,91,5.33,92,5.33,93,5.33,94,5.894,95,4.958]],["t/728",[14,0.674,30,4.932,52,4.619,54,2.781,76,4.767,96,5.052,97,5.052,98,3.822,99,5.052,100,3.822,101,4.012,102,4.012,103,4.012,104,4.569,105,4.25,106,5.052,107,5.052,108,5.052]],["t/730",[14,0.66,109,6.615,110,7.316,111,7.316,112,7.316,113,7.316]],["t/732",[14,0.673,15,5.908,30,4.358,31,4.525,98,4.721,100,4.721,101,4.955,114,6.241,115,5.643,116,6.241]],["t/734",[14,0.667,98,5.177,100,5.177,102,5.435,103,5.435,117,6.844,118,6.844,119,6.844]],["t/736",[2,2.167,14,0.659,43,3.695,120,6.43,121,6.43,122,6.43,123,6.43,124,6.43,125,3.063,126,6.43,127,6.43,128,4.49]],["t/738",[16,4.079,24,5.139,129,7.105,130,5.944,131,7.858,132,7.105,133,7.105]],["t/740",[98,5.836,100,5.836,101,6.126,102,6.126,103,6.126,104,6.976,105,6.49,134,7.715]],["t/742",[14,0.663,16,2.825,24,3.558,43,4.273,64,3.945,87,3.558,125,2.592,130,4.116,135,4.577,136,5.441,137,4.92,138,5.441,139,5.441,140,4.577,141,5.441,142,5.441,143,5.441,144,4.92,145,4.92]],["t/744",[7,4.279,14,0.583,88,4.279,91,6.091,92,6.091,93,6.091,146,5.095,147,6.736,148,6.736,149,3.708,150,6.736,151,6.736,152,6.736,153,6.736]],["t/746",[2,2.528,14,0.679,16,2.861,19,2.937,154,4.376,155,5.511,156,4.636,157,3.996,158,5.511,159,5.511,160,5.511,161,5.511,162,5.511]],["t/750",[14,0.679]],["t/752",[14,0.659]],["t/754",[14,0.547]],["t/757",[16,3.798,163,8.15,164,7.316,165,6.154,166,7.316,167,6.154,168,6.615,169,6.615,170,7.316,171,7.316]],["t/759",[16,3.934,165,6.374,167,6.374,172,7.577,173,6.852,174,8.327,175,7.577,176,7.577]],["t/761",[2,2.015,14,0.55,19,2.341,163,5.405,165,5.028,167,5.028,168,5.405,169,7.162,173,5.405,174,5.405,177,5.977,178,5.405,179,5.977,180,7.92,181,5.977,182,4.033,183,5.977,184,5.977,185,5.977,186,5.977]],["t/763",[14,0.547]],["t/767",[0,3.503,2,2.044,14,0.629,187,8.6,188,6.062,189,6.062,190,6.062,191,6.062,192,6.062,193,6.062,194,6.062,195,6.062,196,6.062]],["t/771",[14,0.61,197,8.486]],["t/774",[0,3.021,14,0.577,198,9.041,199,7.715,200,7.715]],["t/776",[0,3.391,201,8.659]],["t/779",[0,3.391,14,0.536]],["t/781",[202,8.382]],["t/783",[14,0.674,203,9.209]],["t/786",[0,3.258,14,0.639]],["t/788",[14,0.639,204,7.523]],["t/791",[14,0.659]],["t/793",[14,0.643,187,8.411,205,3.87,206,5.735,207,5.735,208,5.186,209,5.735,210,5.735,211,5.186,212,5.735,213,5.735,214,5.186,215,5.735,216,5.735,217,5.735,218,5.735,219,5.735]],["t/796",[14,0.674]],["t/798",[0,2.77,14,0.642,208,7.981,211,7.981,214,6.395,220,7.072,221,7.072]],["t/800",[14,0.662,16,4.079,222,5.944]],["t/802",[14,0.658,16,4.833,222,5.836]],["t/804",[14,0.659]],["t/806",[0,3.391,14,0.536]],["t/808",[223,6.686]],["t/810",[74,5.727,75,7.673,224,8.486]],["t/812",[14,0.682,33,1.919,55,2.744,225,9.055,226,4.662,227,3.628,228,3.628,229,5.542,230,5.542,231,5.542,232,5.542,233,4.192,234,5.087,235,5.542,236,3.628,237,3.628]],["t/815",[14,0.683,238,5.113,239,5.113,240,5.113,241,5.113,242,5.113,243,5.113,244,5.113,245,5.113,246,5.113,247,5.113,248,5.113,249,5.113,250,5.113,251,5.113,252,5.113,253,5.113]],["t/817",[9,2.704,10,3.196,11,3.196,14,0.678,15,3.847,76,3.58,86,4.797,87,3.469,88,3.37,95,4.462,254,4.797,255,4.462,256,4.212,257,3.704,258,4.212,259,5.305,260,5.305]],["t/819",[9,3.328,10,3.934,11,3.934,261,6.529,262,6.529,263,6.529,264,6.529,265,6.529,266,6.529,267,6.529,268,6.529,269,6.529,270,5.184,271,6.529,272,6.529,273,6.529,274,6.529,275,6.529]],["t/821",[2,1.856,12,3.024,14,0.633,25,1.534,43,3.163,45,3.715,109,2.414,276,6.279,277,2.67,278,2.67,279,2.67,280,2.67,281,2.67,282,2.67,283,1.936,284,2.67,285,2.67,286,2.67,287,2.67,288,2.67,289,2.12,290,2.67,291,5.04,292,4.602,293,4.35,294,2.414,295,2.67,296,2.67,297,2.67,298,2.67,299,2.67,300,2.67,301,2.12,302,2.414,303,2.414,304,5.518,305,2.67,306,2.67,307,2.67,308,2.67,309,2.67,310,2.67,311,1.801,312,2.67,313,2.414,314,2.67,315,2.414,316,2.246,317,1.936,318,2.67,319,2.67,320,2.67,321,2.67,322,2.67,323,2.67,324,2.67]],["t/824",[12,3.426,14,0.552,325,4.703,326,6.503,327,5.215,328,6.503,329,7.192,330,5.44,331,7.192,332,6.503,333,7.192]],["t/826",[12,2.645,14,0.667,25,2.526,32,1.52,33,1.43,52,1.768,325,4.601,326,5.021,327,1.96,334,4.2,335,2.704,336,2.704,337,2.704,338,2.704,339,2.704,340,2.704,341,2.704,342,2.704,343,2.704,344,2.704,345,2.704,346,2.704,347,2.704,348,2.704,349,2.966,350,5.379,351,2.445,352,2.274,353,2.147,354,2.445,355,2.274,356,2.274,357,2.445,358,5.918,359,2.274,360,2.274,361,4.2,362,3.697,363,2.274,364,1.404,365,2.274,366,2.274,367,2.274,368,2.445,369,2.445,370,2.445,371,2.274,372,2.274,373,2.274,374,1.96,375,2.445,376,2.045]],["t/828",[14,0.431,304,4.858,349,4.694,361,5.262,377,6.956,378,6.956,379,4.3,380,7.582,381,6.956,382,6.956,383,6.956,384,6.956]],["t/831",[12,4.322,14,0.596,25,3.586,43,3.586,54,3.435,330,4.721,332,7.368,385,7.632,386,6.241,387,4.721,388,6.241,389,6.241,390,6.241]],["t/833",[12,4.353,14,0.636,149,3.487,304,4.423,385,5.328,391,8.227,392,6.334,393,6.334,394,6.334,395,6.334,396,6.334,397,6.334]],["t/835",[12,3.997,14,0.652,19,2.557,311,4.406,385,7.057,398,6.529,399,6.529,400,6.529,401,6.529,402,6.529]],["t/837",[14,0.526,403,8.486,404,8.486]],["t/839",[2,1.46,14,0.648,33,2.291,34,5.721,64,3.14,125,2.063,149,2.384,258,3.439,405,4.331,406,4.331,407,4.331,408,4.331,409,4.331,410,4.331,411,4.331,412,6.327,413,4.331,414,4.331,415,4.331,416,4.331,417,4.331,418,4.331,419,4.331,420,4.331,421,4.331,422,8.221,423,4.331,424,4.331,425,4.331,426,4.331,427,4.331,428,4.331,429,4.331]],["t/841",[7,1.079,14,0.688,156,1.428,255,1.428,364,2.459,430,1.698,431,1.698,432,1.698,433,1.698,434,1.698,435,1.698,436,1.698,437,1.428,438,1.698,439,1.698,440,1.698,441,1.698,442,1.698,443,1.698,444,1.698,445,1.698,446,1.698,447,1.535,448,1.698,449,1.698,450,1.428,451,1.698,452,1.698,453,1.698,454,1.698,455,1.698,456,1.05,457,1.698,458,1.698,459,1.698,460,1.698,461,1.698,462,1.698,463,1.698,464,1.698,465,1.698,466,1.535,467,1.698,468,1.698,469,1.698,470,1.535,471,1.698,472,1.698,473,1.698,474,1.698,475,1.535,476,1.698,477,1.05,478,2.967,479,1.698,480,1.698,481,1.698,482,1.535,483,1.698,484,1.698,485,1.698,486,1.698,487,1.698,488,1.698,489,1.698,490,1.698,491,1.698,492,1.698,493,1.698,494,1.698,495,1.698,496,1.698,497,1.698,498,1.698,499,1.698,500,1.698,501,1.698,502,1.698,503,1.698,504,1.698,505,1.698,506,1.698,507,1.698,508,1.698,509,1.698,510,1.698,511,1.698,512,1.698,513,1.535,514,1.698,515,1.698,516,1.698,517,1.698,518,1.698]],["t/843",[2,0.761,7,2.406,9,1.151,10,1.36,11,1.36,12,2.33,13,1.36,14,0.674,16,1.172,19,1.483,22,1.899,24,1.477,26,1.899,30,2.644,31,1.637,32,1.269,43,2.811,52,3.745,76,4.951,130,1.708,140,1.899,222,1.708,327,1.637,364,2.539,519,2.258,520,2.258,521,2.258,522,2.258,523,2.258,524,6.634,525,2.258,526,2.258,527,2.258,528,2.258,529,2.258,530,2.042,531,4.891,532,4.423,533,2.042,534,2.042,535,4.423,536,2.042,537,2.258,538,2.258,539,2.258,540,3.787,541,2.042,542,2.258,543,2.258,544,2.258,545,2.258,546,2.258,547,1.899,548,2.258,549,2.258,550,2.258,551,2.258]],["t/845",[14,0.664,43,2.85,98,2.378,100,2.378,101,2.497,102,2.497,103,2.497,105,2.645,257,4.289,327,2.28,364,2.575,524,6.305,532,6.305,533,2.843,534,2.843,535,4.485,536,2.843,541,2.843,552,3.144,553,4.959,554,3.144,555,2.497,556,3.144,557,3.144,558,3.144,559,3.144,560,3.144,561,3.144,562,3.144,563,3.144,564,4.959,565,3.144,566,3.144,567,3.144,568,3.144,569,6.141,570,3.144,571,3.144,572,3.144,573,3.144,574,3.144,575,3.144,576,3.144,577,3.144,578,3.144]],["t/847",[14,0.665,15,7.062,16,1.574,33,3.614,79,2.741,330,2.293,450,2.55,466,2.741,475,2.741,579,3.032,580,3.032,581,3.032,582,3.032,583,3.032,584,3.032,585,3.032,586,3.032,587,3.032,588,3.032,589,3.032,590,3.032,591,3.032,592,3.032,593,3.032,594,3.032,595,3.032,596,3.032,597,3.032,598,2.741,599,3.032,600,3.032,601,3.032,602,3.032,603,3.032,604,3.032,605,3.032,606,3.032,607,3.032,608,3.032,609,3.032,610,3.032,611,4.819,612,2.293,613,3.032,614,3.032,615,3.032]],["t/849",[14,0.541,17,5.524,311,4.694,328,6.29,616,6.956,617,6.956,618,5.851,619,6.956,620,6.956,621,6.956,622,6.956,623,6.956,624,6.956]],["t/851",[12,2.844,14,0.677,88,5.378,555,3.179,625,4.004,626,5.022,627,4.004,628,4.004,629,4.004,630,5.971,631,5.971,632,5.399,633,4.004,634,4.004,635,4.004,636,4.004,637,4.004,638,4.004,639,4.004,640,4.004,641,4.004,642,4.004,643,4.004,644,4.004,645,4.004]],["t/853",[14,0.657,16,3.103,24,3.909,129,5.405,130,4.521,132,5.405,133,5.405,256,7.053,374,4.334,646,5.977,647,5.977,648,5.977,649,5.028,650,5.977]],["t/855",[14,0.669,128,4.005,258,6.909,651,5.735,652,5.735,653,4.554,654,5.735,655,5.735,656,5.735,657,4.554,658,5.735,659,5.735,660,5.735,661,5.735]],["t/857",[14,0.688,16,1.967,22,3.188,24,2.478,87,4.517,130,2.867,135,3.188,140,3.188,144,3.427,145,3.427,374,2.748,530,3.427,649,3.188,662,3.79,663,3.79,664,3.79,665,3.79,666,3.79,667,3.79,668,3.79,669,3.79,670,3.79,671,3.79,672,3.79,673,3.79,674,3.79,675,3.79]],["t/859",[16,4.005,87,5.045,89,6.976,137,6.976,649,6.49,676,7.715,677,7.715,678,7.715]],["t/861",[2,2.409,12,0.911,14,0.682,16,0.993,19,1.694,95,2.766,205,2.92,292,1.386,294,1.729,301,1.518,304,1.335,313,3.912,364,1.707,679,1.912,680,5.788,681,3.288,682,1.912,683,5.788,684,9.012,685,1.912,686,1.912,687,1.386,688,1.912,689,1.912,690,1.912,691,1.912,692,4.326,693,1.912,694,1.912,695,1.912,696,1.912,697,6.322,698,1.912,699,1.912,700,1.912,701,1.912,702,1.912,703,1.912,704,1.912,705,1.912,706,1.912,707,1.912,708,1.912,709,1.912,710,1.912,711,1.912,712,1.912,713,1.912,714,1.912,715,2.974]],["t/864",[2,1.542,7,1.804,9,0.576,10,0.68,11,0.68,12,2.735,13,0.68,14,0.668,17,0.896,19,2.249,30,4.225,31,2.06,32,2.292,52,3.277,54,1.564,58,1.021,76,0.762,82,1.021,87,0.738,125,0.981,135,1.733,149,1.564,205,1.39,226,2.389,276,0.762,283,2.541,317,1.494,325,1.347,330,0.854,349,1.39,350,2.948,352,0.95,353,2.783,355,0.95,356,0.95,358,3.429,359,0.95,360,0.95,361,2.651,362,2.389,363,0.95,364,0.586,365,0.95,366,0.95,367,0.95,371,0.95,372,2.948,373,3.429,374,1.494,375,1.021,376,2.651,547,0.95,716,1.021,717,1.129,718,1.021,719,1.021,720,1.863,721,1.021,722,0.95,723,2.84,724,2.06,725,1.733,726,3.505,727,2.06,728,2.06,729,2.06,730,1.129,731,1.129,732,1.129,733,2.06,734,2.06,735,2.06,736,2.06,737,2.06,738,1.129,739,2.06,740,1.129,741,3.169,742,2.06,743,1.129,744,1.129,745,1.129,746,2.06,747,1.129,748,2.06,749,2.956,750,2.06,751,1.438,752,2.06,753,1.129,754,1.129,755,1.129,756,1.129,757,1.129,758,1.129,759,2.84,760,1.129,761,1.129,762,2.06,763,1.129,764,1.129,765,1.129,766,1.129,767,1.129,768,2.06]],["t/866",[2,0.953,7,2.895,9,0.82,10,0.969,11,0.969,12,3.555,13,0.969,14,0.648,19,0.63,32,3.881,52,1.85,54,2.084,76,1.085,128,1.123,254,1.454,258,1.277,276,1.085,283,2.051,325,1.85,349,1.909,350,3.834,351,1.454,352,1.353,353,1.277,354,1.454,355,1.353,356,1.353,357,1.454,358,4.368,359,1.353,360,1.353,361,4.331,362,3.185,363,1.353,364,1.966,365,1.353,366,1.353,367,1.353,368,1.454,369,1.454,370,1.454,371,1.353,372,1.353,373,2.379,374,2.051,376,2.139,547,1.353,653,1.277,657,1.277,716,1.454,718,1.454,719,1.454,720,2.557,721,1.454,725,1.353,769,1.608,770,1.608,771,2.828,772,2.828,773,1.608,774,1.608,775,1.166,776,2.557,777,1.608,778,1.608,779,1.608,780,1.608,781,1.608,782,1.608,783,1.608,784,1.608,785,1.608,786,1.608,787,1.608,788,1.608,789,1.608,790,1.608,791,1.608,792,1.608,793,1.608,794,1.608,795,1.608,796,1.608,797,1.608,798,1.608,799,1.608,800,1.608,801,1.608,802,1.608,803,1.277,804,1.608,805,1.608,806,1.353,807,1.608,808,1.608,809,1.608,810,1.608,811,1.608,812,1.608,813,1.608,814,1.608,815,1.608,816,1.608,817,1.608,818,1.608,819,1.608,820,1.608,821,1.608,822,1.608,823,1.608,824,1.608,825,1.608,826,2.828,827,1.608]],["t/868",[2,1.201,12,3.338,13,0.567,14,0.651,19,1.579,32,2.711,33,0.922,54,1.671,55,2.695,56,1.576,57,0.792,125,0.448,128,2.119,226,1.466,233,0.712,234,2.296,276,3.877,311,3.482,325,1.985,330,2.296,349,2.72,361,0.712,364,0.905,374,0.683,376,0.712,379,1.077,387,0.712,612,0.712,725,2.047,751,0.657,775,1.264,828,0.941,829,0.941,830,0.941,831,1.576,832,2.433,833,2.744,834,0.941,835,0.941,836,2.433,837,0.941,838,3.035,839,1.743,840,0.941,841,0.941,842,0.941,843,0.941,844,0.941,845,0.941,846,0.941,847,1.743,848,4.448,849,1.743,850,0.747,851,3.222,852,1.743,853,0.941,854,0.941,855,1.743,856,0.941,857,0.941,858,0.941,859,1.743,860,0.941,861,0.941,862,6.001,863,2.433,864,2.433,865,4.031,866,0.941,867,0.941,868,0.941,869,0.941,870,0.941,871,0.941,872,0.941,873,0.941,874,0.941,875,0.941,876,0.941,877,0.941,878,0.941,879,0.941,880,1.743,881,2.433,882,2.433,883,1.743,884,0.941,885,2.433,886,1.743,887,0.941,888,1.743,889,0.941,890,0.941,891,0.941,892,0.941,893,0.941,894,0.941,895,2.433,896,0.941,897,1.743,898,1.466,899,0.941,900,0.941,901,0.941,902,1.743,903,0.941,904,0.941,905,0.941,906,0.941,907,0.941,908,0.941,909,0.941,910,0.941,911,0.941,912,0.851,913,0.941,914,0.941,915,0.941,916,0.941,917,0.941,918,0.941,919,0.941,920,0.941,921,1.743,922,0.941,923,0.941,924,0.941,925,0.941,926,0.941,927,0.941,928,0.941,929,0.941,930,0.941,931,0.941,932,0.941,933,0.941,934,0.941,935,0.941,936,0.941,937,0.941,938,0.941,939,1.743,940,0.941,941,0.941,942,1.743,943,1.743,944,0.941,945,0.941,946,0.941,947,0.941,948,0.941,949,0.941,950,0.941,951,0.941,952,0.941,953,0.941,954,0.941]],["t/871",[2,1.412,9,0.729,10,0.861,11,0.861,12,3.925,13,0.861,14,0.669,19,1.64,32,3.833,52,0.935,128,0.998,270,1.135,276,0.965,283,3.036,289,1.135,291,1.135,292,1.848,304,0.998,325,0.935,327,1.036,349,0.965,364,0.742,380,1.135,653,1.135,657,1.135,722,1.202,775,3.036,803,2.738,806,1.202,898,1.202,955,1.202,956,1.202,957,1.292,958,1.292,959,1.292,960,1.202,961,1.292,962,2.304,963,2.304,964,2.304,965,2.304,966,2.548,967,2.548,968,1.429,969,5.192,970,2.304,971,1.292,972,2.304,973,2.304,974,2.143,975,2.143,976,2.304,977,1.292,978,1.292,979,1.292,980,1.292,981,1.292,982,1.292,983,1.292,984,1.292,985,1.292,986,3.786,987,1.292,988,1.292,989,1.292,990,1.292,991,1.292,992,1.292,993,1.292,994,1.292,995,1.292,996,1.292,997,1.292,998,1.292,999,1.292,1000,3.118,1001,3.118,1002,1.292,1003,1.292,1004,1.292,1005,1.292,1006,1.292,1007,1.202,1008,1.202,1009,1.202,1010,1.292,1011,1.292,1012,1.292,1013,1.292,1014,1.292,1015,1.292,1016,2.143,1017,1.292,1018,1.292,1019,1.292,1020,3.448,1021,1.202,1022,1.292]],["t/873",[2,1.686,9,0.937,10,1.107,11,1.107,12,4.245,13,1.107,14,0.606,19,1.959,32,4.288,52,1.202,128,1.283,270,1.459,276,1.24,283,3.626,289,1.459,291,1.459,292,2.304,304,1.283,325,1.202,327,1.332,349,1.24,364,0.954,380,1.459,653,1.459,657,1.459,722,1.546,775,3.626,803,3.333,806,1.546,898,1.546,955,1.546,956,1.546,957,1.662,958,1.662,959,1.662,960,1.546,961,1.662,962,2.873,963,2.873,964,2.873,965,2.873,969,5.579,970,2.873,971,1.662,972,2.873,973,2.873,974,2.673,975,2.673,976,2.873,977,1.662,978,1.662,979,1.662,980,1.662,981,1.662,982,1.662,983,1.662,984,1.662,985,1.662,986,4.522,987,1.662,988,1.662,989,1.662,990,1.662,991,1.662,992,1.662,993,1.662,994,1.662,995,1.662,996,1.662,997,1.662,998,1.662,999,1.662,1000,3.796,1001,3.796,1002,1.662,1003,1.662,1004,1.662,1005,1.662,1006,1.662,1007,1.546,1008,1.546,1009,1.546,1010,1.662,1011,1.662,1012,1.662,1013,1.662,1014,1.662,1015,1.662,1016,2.673,1017,1.662,1018,1.662,1019,1.662,1021,1.546,1022,1.662]],["t/875",[2,1.966,9,1.482,10,1.752,11,1.752,12,4.288,13,1.752,14,0.543,19,1.139,32,3.75,270,2.308,276,4.502,283,3.379,289,2.308,291,2.308,292,3.379,302,2.629,303,2.629,304,2.03,315,2.629,325,1.901,349,1.962,364,1.509,380,2.308,687,3.379,775,2.108,803,3.7,955,2.445,956,2.445,960,2.445,969,3.92,974,2.445,975,2.445,1007,2.445,1008,2.445,1009,2.445,1016,2.445,1021,2.445,1023,2.907,1024,2.907,1025,2.907,1026,2.907,1027,2.907,1028,2.907,1029,2.907,1030,2.907,1031,2.907,1032,2.907,1033,2.907,1034,2.907,1035,2.907,1036,2.445,1037,2.907,1038,2.907,1039,2.907,1040,2.907,1041,2.907,1042,2.907,1043,2.907,1044,2.907,1045,2.907,1046,2.907,1047,2.907,1048,2.907,1049,2.907,1050,2.907,1051,2.907,1052,2.907,1053,2.907,1054,2.907]],["t/877",[19,3.391,1055,8.659]],["t/879",[7,4.544,9,0.744,12,1.236,13,0.879,14,0.659,23,1.319,33,2.577,156,1.227,178,1.319,225,2.346,233,1.103,325,1.697,364,2.207,379,0.902,450,1.227,626,1.227,775,2.541,776,1.319,1056,1.812,1057,1.459,1058,1.459,1059,2.346,1060,2.595,1061,2.595,1062,2.595,1063,2.595,1064,6.24,1065,2.595,1066,2.595,1067,2.595,1068,2.595,1069,2.595,1070,4.25,1071,2.595,1072,2.595,1073,2.595,1074,2.595,1075,2.595,1076,2.595,1077,2.595,1078,2.595,1079,2.595,1080,5.398,1081,2.595,1082,2.061,1083,2.595,1084,2.595,1085,3.505,1086,1.459,1087,1.459,1088,1.459,1089,1.459,1090,1.459,1091,1.459,1092,1.459,1093,1.459,1094,1.459,1095,1.459,1096,1.459,1097,1.459,1098,1.459,1099,1.459,1100,1.459,1101,1.459,1102,1.459,1103,1.459,1104,1.459,1105,1.103,1106,1.459,1107,1.459,1108,1.459,1109,1.459,1110,1.459,1111,1.459,1112,1.459,1113,1.459,1114,1.459,1115,1.459,1116,1.459,1117,1.459,1118,2.948,1119,1.227,1120,1.459,1121,1.459,1122,1.459,1123,1.459,1124,1.158,1125,1.459,1126,1.459,1127,1.459,1128,1.459,1129,1.459,1130,1.459,1131,1.459,1132,1.459,1133,1.459,1134,1.459,1135,1.459,1136,1.459,1137,1.459,1138,2.595,1139,1.459,1140,1.459,1141,1.459,1142,1.459,1143,1.459,1144,1.319,1145,1.459,1146,1.459,1147,1.319,1148,1.459]],["t/881",[9,1.717,14,0.629,33,1.782,154,2.675,618,2.834,751,2.352,1056,2.352,1105,2.548,1118,2.834,1149,3.369,1150,3.96,1151,3.369,1152,3.369,1153,3.369,1154,3.046,1155,3.046,1156,3.046,1157,3.046,1158,3.046,1159,3.046,1160,3.046,1161,3.046,1162,3.046,1163,4.733,1164,3.046,1165,3.046,1166,6.09,1167,3.046,1168,3.046,1169,4.733,1170,3.046,1171,4.733,1172,3.046,1173,3.046,1174,4.733,1175,3.046,1176,3.046,1177,3.046,1178,3.046,1179,3.046,1180,5.805,1181,3.046,1182,3.046,1183,3.046,1184,3.046,1185,5.805,1186,3.046,1187,2.675,1188,3.046,1189,2.352,1190,2.834,1191,3.046]],["t/885",[14,0.634,1056,6.716,1150,4.721,1192,6.241,1193,5.643,1194,6.241,1195,6.241,1196,6.241,1197,6.241,1198,6.241,1199,5.643,1200,6.241,1201,5.643]],["t/887",[1056,5.81,1202,8.32,1203,8.32,1204,8.32]],["t/889",[14,0.6,1056,5.022,1150,5.44,1199,6.503,1201,6.503,1205,7.192,1206,6.503,1207,7.192,1208,7.192,1209,7.192]],["t/891",[14,0.617]],["t/893",[14,0.62,16,3.612,1056,6.1,1105,5.262,1166,7.348,1210,8.735,1211,6.956,1212,6.29]],["t/895",[9,2.027,14,0.646,19,0.67,20,1.548,33,2.52,154,1.359,256,1.359,387,1.295,456,1.058,555,1.359,618,1.44,833,1.548,1056,4.147,1059,2.701,1105,2.26,1118,1.44,1150,1.295,1154,1.548,1155,1.548,1156,1.548,1157,1.548,1158,1.548,1159,2.701,1160,1.548,1161,1.548,1162,1.548,1163,2.701,1164,1.548,1165,1.548,1166,4.006,1167,1.548,1168,1.548,1169,2.701,1170,1.548,1171,2.701,1172,1.548,1173,1.548,1174,2.701,1175,1.548,1176,1.548,1177,1.548,1178,1.548,1179,1.548,1180,3.595,1181,1.548,1182,1.548,1183,1.548,1184,1.548,1185,3.595,1186,1.548,1187,1.359,1188,1.548,1189,1.195,1190,1.44,1191,1.548,1193,1.548,1206,1.548,1213,1.712,1214,1.712,1215,1.712,1216,2.988,1217,1.712,1218,1.548,1219,1.712,1220,1.712,1221,1.712,1222,2.988,1223,4.763,1224,1.712,1225,1.712,1226,2.988,1227,4.307,1228,4.763,1229,2.988,1230,1.712,1231,1.712,1232,1.548,1233,1.712,1234,1.712,1235,2.988,1236,2.988,1237,1.712,1238,1.712,1239,2.988,1240,1.712,1241,1.712,1242,1.712,1243,1.712,1244,1.712,1245,1.712,1246,1.712,1247,1.712,1248,1.712,1249,1.712,1250,1.712,1251,1.548,1252,1.712,1253,1.712,1254,1.712,1255,1.712,1256,1.712,1257,1.712,1258,1.712,1259,1.548,1260,1.712,1261,2.988,1262,2.988,1263,2.988,1264,1.712,1265,1.712,1266,1.712,1267,1.712]],["t/897",[0,2.444,1268,6.241,1269,5.643,1270,6.241,1271,8.148,1272,6.241,1273,6.241,1274,6.241,1275,5.643,1276,6.241,1277,6.241,1278,6.241,1279,6.241,1280,6.241,1281,6.241,1282,6.241,1283,6.241,1284,6.241,1285,6.241,1286,6.241]],["t/900",[14,0.645,1287,8.919,1288,7.192,1289,7.192,1290,7.192,1291,7.192,1292,7.192]],["t/902",[14,0.647,43,4.51,45,5.295,1293,5.894,1294,5.894,1295,5.894,1296,5.894,1297,5.894,1298,5.894,1299,5.894,1300,5.894,1301,5.894,1302,5.894,1303,5.894,1304,5.894,1305,5.894]],["t/904",[1306,7.239,1307,8.006,1308,8.006,1309,8.006,1310,8.006,1311,8.006]],["t/908",[14,0.662,74,2.864,1312,4.244,1313,3.838,1314,4.244,1315,4.244,1316,7.388,1317,4.244,1318,4.244,1319,4.244,1320,4.244,1321,4.244,1322,6.234,1323,4.244,1324,4.244,1325,4.244,1326,4.244,1327,4.244,1328,4.244,1329,4.244,1330,4.244,1331,4.244,1332,4.244,1333,4.244,1334,4.244,1335,4.244,1336,4.244,1337,4.244,1338,4.244,1339,4.244,1340,4.244,1341,4.244,1342,4.244]],["t/911",[14,0.679]],["t/913",[14,0.61,1343,8.486]],["t/915",[14,0.61,1344,8.486]],["t/918",[0,2.724,14,0.69]],["t/920",[14,0.679,222,4.458,1345,7.847,1346,5.894,1347,7.847,1348,5.894,1349,5.894,1350,5.894,1351,5.894,1352,5.894]],["t/922",[2,3.541,14,0.681,74,3.292,125,4.529]],["t/924",[14,0.617]],["t/926",[0,2.003,14,0.577,1353,7.123,1354,4.301,1355,5.113,1356,5.113,1357,5.113,1358,5.113,1359,5.113,1360,4.624,1361,5.113,1362,5.113,1363,5.113,1364,5.113,1365,5.113,1366,5.113,1367,5.113,1368,5.113,1369,5.113,1370,5.113,1371,5.113,1372,5.113,1373,5.113,1374,5.113,1375,5.113,1376,4.624,1377,4.624,1378,5.113,1379,4.301,1380,5.113,1381,5.113]],["t/928",[14,0.589,1360,5.482,1376,5.482,1377,5.482,1379,5.099,1382,6.062,1383,6.062,1384,6.062,1385,6.062,1386,6.062,1387,6.062,1388,6.062,1389,6.062,1390,6.062,1391,6.062,1392,6.062,1393,6.062,1394,6.062,1395,6.062,1396,6.062]],["t/930",[14,0.644,1379,7.128,1397,6.631,1398,6.631,1399,6.631,1400,6.631,1401,6.631,1402,6.631,1403,6.631,1404,6.631,1405,6.631]],["t/933",[54,4.866]],["t/937",[14,0.692]],["t/939",[14,0.639,1406,8.32]],["t/942",[14,0.59,1407,8.006,1408,8.006,1409,8.006,1410,8.006]],["t/944",[14,0.674]],["t/946",[14,0.685,1411,6.15,1412,6.15,1413,6.15,1414,5.561,1415,6.15,1416,5.173,1417,5.561]],["t/948",[14,0.698,54,2.957,1414,6.664]],["t/950",[0,3.391,14,0.536]],["t/952",[223,6.686]],["t/955",[1418,8.839]],["t/957",[477,4.769,1419,7.715,1420,6.49,1421,7.715,1422,7.715,1423,7.715,1424,4.337,1425,7.715]],["t/959",[1426,8.839]],["t/961",[74,5.113,1427,7.577,1428,7.577,1429,5.113,1430,7.577,1431,7.577,1432,6.852,1433,6.852,1434,5.732]],["t/963",[1435,6.419,1436,8.486,1437,5.55]],["t/965",[14,0.433,234,5.282,456,2.385,741,3.489,1424,3.265,1435,4.393,1437,3.798,1438,3.858,1439,6.536,1440,3.858,1441,2.081,1442,3.858,1443,3.858,1444,2.523,1445,4.885,1446,3.064,1447,3.858,1448,3.858,1449,3.858,1450,3.858,1451,3.858,1452,3.858,1453,3.858,1454,3.858,1455,3.858,1456,3.858,1457,6.315,1458,3.689,1459,7.535,1460,4.611,1461,2.523,1462,6.315,1463,3.858,1464,3.246,1465,3.858,1466,3.858,1467,3.858,1468,3.858,1469,2.523,1470,3.858,1471,3.064,1472,3.489]],["t/967",[1036,4.697,1469,3.652,1471,4.434,1473,5.584,1474,5.284,1475,5.584,1476,4.697,1477,5.584,1478,5.584,1479,5.584,1480,5.584,1481,5.584,1482,5.584,1483,5.584,1484,5.584,1485,5.584,1486,5.487,1487,5.584,1488,6.224,1489,5.584,1490,3.547,1491,5.584,1492,5.584,1493,5.584,1494,5.584]],["t/969",[14,0.48,456,5.543,1424,2.594,1444,5.537,1445,6.517,1446,3.663,1495,4.613,1496,4.613,1497,4.613,1498,4.613,1499,3.663,1500,4.613,1501,4.613,1502,4.613,1503,4.613,1504,4.613,1505,4.613,1506,4.613,1507,4.613,1508,4.613,1509,4.613,1510,4.171,1511,4.613,1512,4.613,1513,4.613,1514,4.613,1515,4.613,1516,4.613,1517,4.613,1518,4.613,1519,4.613,1520,4.613,1521,4.613,1522,4.613]],["t/971",[1437,5.663,1523,8.659]],["t/973",[0,2.968,1420,6.374,1429,5.113,1458,4.813,1524,6.852,1525,6.374,1526,7.577,1527,7.577,1528,7.577]],["t/975",[1458,5.5,1529,8.659]],["t/977",[1530,8.839]],["t/979",[1124,5.524,1437,5.712,1499,5.524,1531,6.956,1532,6.956,1533,6.956,1534,6.956,1535,6.956,1536,6.956,1537,6.956,1538,6.956,1539,6.956,1540,6.956]],["t/981",[14,0.635,477,4.602,1541,5.911,1542,6.731,1543,6.731,1544,6.731,1545,6.731]],["t/983",[1546,7.993]],["t/986",[477,5.143,1429,5.614,1547,7.523,1548,7.523]],["t/988",[1549,5.903,1550,5.903,1551,5.903,1552,5.903,1553,5.903,1554,5.903,1555,5.903,1556,5.903,1557,5.903,1558,5.903,1559,5.903,1560,5.903,1561,5.903,1562,5.903,1563,4.406,1564,4.269,1565,5.903,1566,5.903]],["t/990",[1567,6.154,1568,6.615,1569,6.615,1570,5.534,1571,4.785,1572,6.615,1573,6.615,1574,6.615,1575,6.615,1576,6.615,1577,6.615]],["t/992",[1578,7.239,1579,7.239,1580,7.239,1581,7.239,1582,7.239,1583,7.239]],["t/994",[0,1.714,14,0.466,47,3.68,63,3.68,64,3.173,1570,6.249,1571,5.743,1584,3.956,1585,3.956,1586,3.956,1587,3.31,1588,3.956,1589,3.956,1590,3.173,1591,3.956,1592,3.956,1593,3.68,1594,3.956,1595,3.31,1596,6.799,1597,4.917,1598,3.956,1599,3.956,1600,5.764,1601,3.956,1602,3.956,1603,3.956,1604,3.956,1605,3.956,1606,3.956,1607,3.956,1608,3.956,1609,3.055,1610,3.956,1611,3.956,1612,3.956]],["t/998",[14,0.678,477,5.341,1446,7.735,1458,6.188,1613,4.361,1614,3.83,1615,3.648]],["t/1000",[1616,7.105,1617,7.105,1618,6.239,1619,7.105,1620,7.105,1621,7.105,1622,7.105]],["t/1002",[2,1.834,14,0.59,19,2.912,157,3.945,316,4.577,1474,3.799,1486,3.945,1595,4.116,1597,3.558,1618,4.32,1623,4.92,1624,4.92,1625,4.92,1626,4.92,1627,4.92,1628,4.92,1629,4.92,1630,4.92,1631,4.92,1632,4.92,1633,4.92,1634,4.92,1635,4.92,1636,4.92,1637,4.92,1638,4.92]],["t/1004",[0,3.323,1424,4.771,1639,8.486]],["t/1006",[14,0.46,470,4.92,1124,4.32,1420,4.577,1424,3.059,1432,4.92,1433,4.92,1434,4.116,1437,3.558,1458,3.456,1499,4.32,1524,4.92,1525,4.577,1640,7.435,1641,5.441,1642,5.441,1643,4.92,1644,5.441,1645,5.441,1646,5.441,1647,5.441,1648,5.441,1649,5.441,1650,5.441,1651,5.441,1652,5.441,1653,5.441,1654,5.441,1655,5.441]],["t/1008",[14,0.417,1499,5.348,1643,6.091,1656,6.736,1657,6.736,1658,6.736,1659,6.736,1660,6.736,1661,6.736,1662,6.736,1663,6.736,1664,6.736,1665,6.736,1666,6.736,1667,6.736,1668,6.736]],["t/1010",[14,0.424,1429,4.619,1669,6.844,1670,6.844,1671,6.844,1672,6.844,1673,6.844,1674,6.844,1675,6.844,1676,6.844,1677,6.844,1678,6.844,1679,6.844,1680,6.844,1681,6.844]],["t/1012",[14,0.605,456,4.522,1424,4.113,1682,5.725,1683,6.154,1684,5.809,1685,5.305,1686,6.154]],["t/1015",[364,4.005,1682,5.914,1687,7.392,1688,6.976,1689,6.976,1690,6.976]],["t/1017",[14,0.543,33,4.113,1687,4.616,1691,7.031,1692,5.257,1693,7.868,1694,7.369,1695,5.257,1696,5.257,1697,5.257,1698,6.54,1699,5.257,1700,5.257,1701,5.257,1702,5.257,1703,5.257]],["t/1019",[14,0.639,1704,6.374,1705,6.374,1706,6.852,1707,6.852,1708,6.852]],["t/1023",[14,0.674,1441,3.012,1709,6.365,1710,5.049,1711,6.425,1712,6.843,1713,6.843,1714,5.049,1715,5.049,1716,5.049]],["t/1025",[2,2.513,12,1.444,14,0.646,311,3.252,1441,2.599,1488,3.494,1711,4.188,1717,3.826,1718,4.357,1719,4.357,1720,2.741,1721,7.809,1722,4.357,1723,2.198,1724,4.357,1725,4.357,1726,6.178,1727,5.423,1728,4.357,1729,4.357,1730,4.357,1731,4.357,1732,4.357,1733,2.741,1734,2.407,1735,2.741,1736,2.741,1737,2.741,1738,2.741,1739,2.741,1740,2.55,1741,2.741,1742,2.741,1743,3.826,1744,4.357,1745,2.741,1746,2.741]],["t/1027",[14,0.658,1441,4.313,1711,5.583,1717,6.348,1723,6.486,1734,4.814,1747,3.653,1748,5.482,1749,5.482,1750,5.099]],["t/1029",[2,0.813,14,0.672,19,0.945,88,2.542,182,2.7,1441,4.078,1444,1.577,1563,1.628,1564,1.577,1590,1.749,1743,5.667,1747,2.411,1751,2.181,1752,2.181,1753,2.181,1754,2.181,1755,2.181,1756,2.029,1757,2.901,1758,2.181,1759,2.181,1760,7.048,1761,5.101,1762,4.466,1763,1.915,1764,2.181,1765,2.181,1766,1.628,1767,2.181,1768,2.181,1769,2.181,1770,2.181,1771,3.618,1772,2.181,1773,2.181,1774,2.181,1775,2.181,1776,1.749,1777,2.029,1778,2.181,1779,2.181]],["t/1031",[14,0.669,19,1.162,76,2.003,125,1.414,257,2.073,1424,1.669,1429,2.003,1441,1.601,1469,1.941,1488,2.152,1490,1.885,1563,3.197,1564,3.099,1590,2.152,1685,3.436,1761,4.52,1762,3.197,1763,2.357,1776,2.152,1780,2.684,1781,2.684,1782,2.497,1783,5.347,1784,2.684,1785,2.684,1786,2.684,1787,5.347,1788,2.684,1789,2.684,1790,2.684,1791,2.684,1792,2.684,1793,4.284,1794,2.245,1795,2.684,1796,2.684,1797,2.684,1798,2.003,1799,2.497,1800,2.684,1801,2.684,1802,4.284,1803,4.284,1804,2.684,1805,2.684,1806,2.357,1807,2.684]],["t/1033",[14,0.677,25,2.547,41,3.728,88,1.254,1469,1.291,1474,3.095,1476,6.81,1587,1.493,1682,3.334,1747,2.037,1757,3.806,1762,2.281,1766,1.332,1794,1.493,1808,1.493,1809,1.785,1810,1.785,1811,4.007,1812,1.785,1813,3.056,1814,1.785,1815,4.746,1816,1.785,1817,1.785,1818,1.785,1819,1.785,1820,3.056,1821,4.007,1822,3.056,1823,3.056,1824,4.746,1825,3.056,1826,1.785,1827,1.785,1828,1.785,1829,1.785,1830,3.056,1831,1.785,1832,1.785,1833,1.785,1834,5.818,1835,1.661,1836,1.785,1837,1.785,1838,1.785,1839,1.785,1840,1.661,1841,1.785,1842,1.785,1843,3.056,1844,1.785,1845,1.661,1846,1.661,1847,1.785,1848,1.785,1849,1.785]],["t/1036",[14,0.678,1082,5.397,1444,4.445,1458,4.318,1464,3.105,1761,3.906,1762,2.491,1850,5.078,1851,6.869,1852,3.337,1853,3.337,1854,5.078,1855,3.337,1856,3.337,1857,3.337,1858,5.078,1859,5.078,1860,4.724,1861,3.337,1862,3.337,1863,3.337,1864,3.337,1865,3.337]],["t/1039",[2,2.086,14,0.68,125,2.002,1435,3.179,1437,2.748,1441,5.508,1563,2.836,1564,2.748,1682,2.669,1723,3.047,1747,4.883,1776,3.047,1806,4.914]],["t/1041",[14,0.629,1441,4.319,1747,4.824,1761,4.601]],["t/1043",[14,0.487,74,5.303,1571,6.156,1597,6.156,1866,7.858]],["t/1046",[2,2.66,14,0.683,74,3.218,149,4.732,751,6.002,1867,4.769,1868,4.769,1869,4.769,1870,4.769,1871,4.769,1872,4.769,1873,4.769]],["t/1048",[0,3.021,14,0.577,1874,9.31,1875,7.715,1876,7.715,1877,7.715]],["t/1051",[32,2.91,437,4.353,1189,5.016,1269,4.68,1460,4.11,1474,3.614,1486,5.209,1571,5.828,1597,6.336,1878,7.183,1879,6.042,1880,5.176,1881,5.176,1882,5.176,1883,5.176,1884,5.176,1885,7.183,1886,4.353,1887,5.176,1888,5.176,1889,5.176,1890,5.176]],["t/1053",[1891,7.993]],["t/1055",[2,3.049,9,0.809,14,0.612,19,3.482,87,0.556,125,1.785,149,3.776,157,2.027,202,1.334,205,1.071,276,1.504,364,0.824,437,0.716,626,4.331,632,5.727,687,0.617,850,2.618,1082,0.676,1119,0.716,1147,0.769,1150,0.644,1189,2.303,1190,0.716,1429,1.071,1457,1.435,1461,1.828,1474,3.966,1490,0.54,1571,2.156,1587,1.2,1597,2.156,1766,0.574,1879,4.975,1891,0.769,1892,0.851,1893,1.586,1894,1.586,1895,4.082,1896,0.851,1897,0.851,1898,0.851,1899,0.851,1900,0.851,1901,1.586,1902,0.769,1903,1.586,1904,0.769,1905,0.851,1906,0.769,1907,0.851,1908,0.851,1909,0.851,1910,0.716,1911,0.851,1912,0.851,1913,5.425,1914,2.795,1915,2.795,1916,2.795,1917,1.435,1918,2.795,1919,4.515,1920,1.586,1921,1.586,1922,1.586,1923,0.851,1924,0.851,1925,0.851,1926,1.435,1927,1.586,1928,2.795,1929,1.586,1930,1.586,1931,3.746,1932,1.586,1933,1.435,1934,1.586,1935,2.016,1936,1.586,1937,0.851,1938,1.586,1939,1.586,1940,1.586,1941,1.586,1942,4.15,1943,3.388,1944,2.795,1945,1.586,1946,1.586,1947,0.851,1948,0.851,1949,1.586,1950,0.851,1951,0.851,1952,0.851,1953,1.586,1954,0.851,1955,0.851,1956,0.851,1957,0.851,1958,0.851,1959,1.586,1960,0.851,1961,0.851,1962,0.851,1963,0.851,1964,1.586,1965,0.851,1966,0.851,1967,0.851,1968,0.851,1969,0.851,1970,0.769,1971,0.644,1972,0.851,1973,0.716,1974,0.644,1975,0.851,1976,0.851]],["t/1057",[14,0.583,1486,4.884,1570,5.095,1571,4.405,1597,4.405,1943,6.091,1977,6.736,1978,6.736,1979,6.736,1980,6.736,1981,6.736,1982,6.736,1983,6.736,1984,6.736]],["t/1059",[1571,5.55,1597,5.55,1985,8.486]],["t/1061",[14,0.515,1986,8.32,1987,6.998,1988,8.32]],["t/1064",[182,5.843,1989,8.659]],["t/1066",[14,0.547]],["t/1068",[14,0.691,1808,6.41]],["t/1070",[14,0.469,182,5.113,456,4.684,1444,4.955,1808,5.732,1987,6.374,1990,7.577,1991,7.577,1992,6.374]],["t/1072",[14,0.596,456,6.409,1313,6.395,1766,4.773,1993,8.826,1994,7.072]],["t/1074",[14,0.634,1766,5.506,1992,6.864]],["t/1076",[14,0.631,1995,6.15,1996,6.15,1997,6.15,1998,6.15,1999,6.15,2000,6.15,2001,8.071,2002,6.15,2003,6.15,2004,6.15,2005,6.15,2006,6.15,2007,6.15,2008,6.15,2009,6.15]],["t/1078",[0,3.391,14,0.536]],["t/1080",[14,0.617]],["t/1082",[2010,7.019]],["t/1084",[14,0.624,1445,5.408,1458,4.084,1614,5.105,1615,4.864,2010,7.725,2011,6.43,2012,6.43,2013,6.43,2014,6.43,2015,5.814,2016,5.814]],["t/1086",[14,0.404,851,5.903,1471,5.184,1486,4.734,1510,5.903,1593,5.492,1595,4.938,1879,5.492,2017,6.529,2018,6.529,2019,6.529,2020,6.529,2021,6.529,2022,6.529,2023,6.529,2024,6.529,2025,6.529,2026,5.903]],["t/1088",[14,0.542,77,3.246,831,3.489,1036,3.246,1471,4.611,1472,3.489,2010,4.611,2015,3.489,2016,3.489,2027,3.858,2028,6.983,2029,5.808,2030,3.858,2031,3.858,2032,3.858,2033,3.858,2034,5.808,2035,3.858,2036,5.808,2037,3.858,2038,3.858,2039,3.858,2040,5.808,2041,3.858,2042,3.858,2043,3.858,2044,3.858,2045,3.858,2046,3.858,2047,3.858,2048,3.858,2049,3.489,2050,3.858,2051,3.858,2052,3.858,2053,3.858,2054,5.808,2055,3.858,2056,3.858,2057,3.858,2058,3.858,2059,3.858,2060,3.858,2061,3.858,2062,3.858,2063,3.858,2064,3.858,2065,3.858,2066,3.858]],["t/1090",[14,0.666,477,3.975,1567,5.408,1740,5.408,2010,7.725,2067,6.43,2068,6.43,2069,6.43]],["t/1092",[1798,5.506,2070,8.16,2071,8.16,2072,8.16,2073,8.16]],["t/1094",[0,3.391,14,0.536]],["t/1096",[2074,6.998,2075,8.32,2076,8.32,2077,8.32]],["t/1098",[54,3.386,182,6.079,513,5.561,1761,3.535,2078,8.071,2079,8.071,2080,6.15,2081,5.561,2082,6.15,2083,5.561,2084,5.561,2085,6.15,2086,8.071,2087,6.15,2088,6.15,2089,6.15,2090,5.561]],["t/1100",[14,0.597,54,3.674,1761,5.175,2081,4.217,2083,6.036,2084,6.036,2091,4.664,2092,4.664,2093,6.675,2094,4.664,2095,7.795,2096,4.664,2097,4.664,2098,4.217,2099,6.675,2100,4.664,2101,4.664,2102,4.664,2103,6.675,2104,4.664,2105,4.664,2106,4.664,2107,4.664,2108,4.664,2109,4.664,2110,4.664]],["t/1102",[0,2.817,88,4.569,749,6.467,2111,7.192,2112,7.192,2113,7.192,2114,7.192,2115,7.192,2116,4.23,2117,7.192,2118,7.192]],["t/1104",[14,0.547,149,4.858,205,4.773,2116,5.658,2119,7.072,2120,7.072,2121,7.072,2122,7.072,2123,7.072]],["t/1106",[14,0.453,149,4.962,2116,5.745,2124,7.316,2125,7.316,2126,7.316,2127,7.316,2128,7.316]],["t/1108",[0,2.638,2,2.271,14,0.53,88,4.279,149,3.708,205,4.545,301,5.348,2116,5.821,2129,6.091,2130,6.736,2131,6.736,2132,6.736]],["t/1111",[14,0.505,2133,8.16,2134,8.16,2135,8.16,2136,8.16]],["t/1113",[2137,7.673,2138,7.673,2139,8.486]],["t/1115",[14,0.624,612,5.944,2138,7.105,2140,7.858,2141,7.105]],["t/1119",[2,2.401,14,0.577,19,2.003,25,2.939,43,4.094,55,3.868,182,3.451,387,5.388,687,3.708,1461,4.658,1971,3.868,2142,5.113,2143,5.113,2144,5.113,2145,5.113,2146,5.113,2147,5.113,2148,4.624,2149,7.123,2150,5.113,2151,5.113,2152,4.301,2153,4.06,2154,4.06,2155,4.624,2156,5.113,2157,5.113]],["t/1121",[2,1.538,14,0.619,19,3.642,25,2.623,43,5.345,387,4.971,687,3.309,1439,3.839,1461,4.298,1971,3.452,2148,4.127,2153,3.624,2154,3.624,2155,4.127,2158,4.564,2159,6.572,2160,6.572,2161,6.572,2162,4.564,2163,4.564,2164,4.564,2165,4.564,2166,4.564]],["t/1124",[14,0.587,45,4.619,2167,6.844,2168,6.844,2169,6.844,2170,8.646,2171,6.844,2172,6.844,2173,6.844,2174,6.844,2175,6.844,2176,6.844]],["t/1126",[2,1.531,14,0.646,44,2.761,125,1.656,128,3.746,149,2.953,182,5.369,317,2.521,1189,2.428,1354,1.717,1461,1.335,1609,1.425,1933,1.845,2026,4.107,2153,1.62,2177,2.041,2178,2.041,2179,2.041,2180,2.041,2181,3.477,2182,2.041,2183,2.041,2184,2.041,2185,2.041,2186,2.041,2187,2.041,2188,2.041,2189,2.041,2190,5.364,2191,2.041,2192,2.041,2193,2.041,2194,2.041,2195,2.041,2196,2.041,2197,4.107,2198,2.041,2199,2.041,2200,2.041,2201,2.041,2202,3.477,2203,2.041,2204,2.041,2205,2.041,2206,2.041,2207,2.041,2208,2.041,2209,2.041,2210,3.477,2211,2.041,2212,2.041,2213,2.041,2214,2.041,2215,2.041,2216,2.041,2217,2.041,2218,2.041,2219,2.041,2220,2.041,2221,2.041,2222,3.477,2223,2.041,2224,2.041,2225,2.041,2226,2.041,2227,2.041,2228,2.041,2229,2.041,2230,2.041,2231,2.041,2232,2.041,2233,2.041,2234,1.845,2235,3.477,2236,2.041,2237,3.477,2238,2.041,2239,5.364,2240,3.144,2241,2.041,2242,3.477,2243,2.041,2244,2.041,2245,2.041,2246,2.041]],["t/1129",[9,3.693,233,5.48,334,5.48,482,4.738,1424,4.073,1490,3.328,1609,5.059,1886,4.407,2116,4.26,2247,8.101,2248,5.752,2249,5.239,2250,5.239,2251,3.963,2252,5.239,2253,4.738,2254,5.239,2255,5.239,2256,5.239,2257,5.239,2258,4.738,2259,6.551,2260,5.239]],["t/1131",[9,4.048,87,5.193,233,3.648,255,5.75,334,5.171,1124,3.83,1187,3.83,1218,4.361,1251,4.361,1460,3.83,1490,3.063,1609,3.368,1886,6.68,1910,4.057,2116,2.836,2247,7.812,2248,3.83,2253,4.361,2259,6.182,2261,4.823,2262,4.823,2263,4.823,2264,4.057,2265,4.823,2266,4.823,2267,4.823,2268,4.823,2269,4.823,2270,4.823]],["t/1133",[9,3.434,87,6.152,334,6.474,1424,3.787,1490,5.437,1910,5.666,2248,5.348,2271,6.091,2272,6.736,2273,6.736,2274,6.736,2275,6.736]],["t/1136",[14,0.547]],["t/1138",[14,0.648,19,3.091,54,4.344,64,3.458,1119,4.011,1761,4.536,2090,4.312,2264,4.011,2276,4.769,2277,4.769,2278,4.769,2279,4.769,2280,4.769,2281,4.769,2282,4.769,2283,4.769,2284,4.769,2285,7.892,2286,4.769,2287,4.769,2288,4.769,2289,4.312,2290,4.769]],["t/1140",[2,2.861,2291,7.673,2292,8.486]],["t/1143",[2116,5.598,2293,8.006,2294,8.006,2295,8.006,2296,7.239]],["t/1145",[14,0.565,379,5.341,1761,2.772,2116,6.216,2296,4.361,2297,4.823,2298,4.823,2299,4.823,2300,6.836,2301,4.823,2302,4.823,2303,4.823,2304,4.823,2305,4.823,2306,4.823,2307,4.823,2308,4.361,2309,4.361,2310,4.823,2311,4.823,2312,4.823]],["t/1148",[749,6.033,2313,8.32,2314,8.32,2315,7.523]],["t/1150",[2,1.664,14,0.614,19,0.496,25,1.315,32,2.152,43,3.517,45,4.129,115,5.221,157,2.267,204,2.827,222,0.959,257,0.885,334,1.73,687,0.919,715,1.146,749,2.267,751,0.885,1461,3.52,1490,1.453,1756,2.63,1757,0.919,1798,1.544,1835,1.066,1971,2.365,1973,1.066,1974,0.959,2152,1.066,2153,1.006,2154,1.006,2234,2.068,2315,1.146,2316,2.287,2317,1.267,2318,1.267,2319,1.267,2320,1.267,2321,1.267,2322,1.267,2323,1.267,2324,2.287,2325,1.267,2326,2.287,2327,1.267,2328,2.287,2329,2.287,2330,1.267,2331,2.287,2332,1.267,2333,1.267,2334,1.267,2335,1.267,2336,1.267,2337,1.267,2338,2.287,2339,1.267,2340,3.126,2341,2.287,2342,2.287,2343,1.267,2344,1.146,2345,1.267,2346,1.267,2347,1.267,2348,1.267,2349,1.267,2350,1.267,2351,1.267,2352,2.287,2353,2.287,2354,1.267,2355,1.267,2356,1.267,2357,1.267,2358,1.267,2359,2.287,2360,1.267,2361,1.267,2362,3.126,2363,2.287,2364,1.267,2365,2.287,2366,1.146,2367,2.287,2368,2.287,2369,2.287,2370,1.267,2371,1.267,2372,3.126,2373,3.829,2374,4.425,2375,1.267,2376,2.287,2377,1.267,2378,1.267,2379,1.267,2380,1.267,2381,1.267,2382,1.267,2383,1.267,2384,1.267,2385,1.267,2386,1.267,2387,1.267,2388,1.267,2389,1.267,2390,1.267,2391,3.462,2392,1.267,2393,3.829,2394,1.267,2395,1.267,2396,1.267,2397,1.267,2398,1.146,2399,1.267,2400,3.829,2401,1.267,2402,1.267,2403,1.267,2404,1.267,2405,1.267,2406,1.267,2407,1.267,2408,1.267,2409,1.267,2410,1.267,2411,1.267,2412,2.287,2413,2.287,2414,2.287,2415,2.287,2416,2.287,2417,1.267,2418,1.267,2419,1.267,2420,1.267,2421,1.267,2422,1.267,2423,1.267,2424,1.267,2425,1.267,2426,1.267,2427,1.267,2428,1.146,2429,1.267,2430,1.267,2431,1.267]],["t/1152",[19,3.391,2432,8.659]],["t/1155",[14,0.659]],["t/1157",[14,0.613,125,3.209,1459,6.091,2433,6.736,2434,6.736,2435,6.736,2436,6.736,2437,6.736,2438,6.736,2439,6.736,2440,6.736,2441,6.736,2442,6.736]],["t/1159",[14,0.605,2308,6.615,2309,6.615,2443,7.316,2444,7.316,2445,7.316,2446,7.316,2447,7.316,2448,7.316]],["t/1162",[14,0.617]],["t/1164",[14,0.668]],["t/1166",[14,0.617]],["t/1169",[2449,8.486,2450,8.486,2451,8.486]],["t/1171",[14,0.526,1306,7.673,2152,7.138]],["t/1173",[2452,8.839]],["t/1175",[14,0.558,19,2.409,850,4.884,1902,5.561,2366,5.561,2391,5.561,2453,6.15,2454,6.15,2455,6.15,2456,6.15,2457,6.15,2458,7.298,2459,6.15,2460,6.15,2461,6.15,2462,6.15,2463,6.15,2464,6.15,2465,6.15]],["t/1177",[14,0.57,1424,4.26,1435,5.732,1437,4.955,1444,4.955,1541,6.017,2466,6.017,2467,7.577]],["t/1181",[2,1.468,14,0.641,19,1.298,33,3.079,44,3.459,54,3.95,57,1.623,125,3.239,146,1.46,149,4.973,205,3.488,256,1.532,257,1.347,749,4.22,751,4.064,1189,2.314,1750,2.788,1917,1.745,1935,1.745,2240,1.745,2428,2.997,2468,1.929,2469,1.623,2470,1.929,2471,3.314,2472,1.929,2473,1.929,2474,1.929,2475,1.929,2476,1.929,2477,1.929,2478,1.929,2479,1.929,2480,3.314,2481,1.929,2482,1.929,2483,1.929,2484,1.929,2485,1.929,2486,1.929,2487,1.929,2488,1.929,2489,1.929,2490,1.929,2491,1.929,2492,1.929,2493,1.929,2494,1.929,2495,1.929,2496,1.929,2497,1.929,2498,3.314,2499,1.929,2500,3.314,2501,1.929,2502,1.929,2503,1.929,2504,1.929,2505,1.929,2506,1.929,2507,4.356,2508,2.997,2509,1.929,2510,3.314,2511,3.314,2512,1.929,2513,1.929,2514,1.929,2515,1.929,2516,1.929,2517,1.929,2518,1.929,2519,1.929,2520,1.929,2521,1.929]],["t/1183",[14,0.398,456,3.975,1424,3.615,1684,5.105,1685,4.662,1845,5.408,1860,5.408,2049,5.814,2291,5.814,2522,7.512,2523,6.43,2524,6.43,2525,6.43,2526,6.43,2527,6.43,2528,5.814,2529,6.43,2530,6.43]],["t/1185",[77,5.099,456,3.748,1187,4.814,1227,5.482,1434,6.048,1441,3.27,1460,4.814,1469,5.228,1609,4.233,1685,4.396,2531,4.814,2532,6.062,2533,6.062,2534,6.062,2535,5.482,2536,6.062,2537,6.062,2538,6.062,2539,6.062,2540,6.062,2541,6.062]],["t/1188",[0,1.162,14,0.184,456,3.655,612,2.245,1275,2.684,1424,1.669,1434,2.245,1469,1.941,1490,1.885,1609,2.073,1614,3.762,1615,4.473,1683,2.497,1684,4.696,1766,2.003,1782,2.497,1808,3.584,1840,2.497,1846,2.497,1970,2.684,1987,2.497,1992,2.497,2074,2.497,2141,2.684,2522,5.347,2528,2.684,2542,2.968,2543,2.968,2544,4.738,2545,2.968,2546,2.968,2547,5.913,2548,2.968,2549,2.968,2550,2.968,2551,2.968,2552,4.738,2553,2.968,2554,2.968,2555,2.968,2556,2.968,2557,2.968,2558,2.968,2559,2.968,2560,2.968,2561,2.968,2562,2.968,2563,2.968,2564,2.968,2565,2.968,2566,2.968,2567,2.497,2568,2.968,2569,2.968,2570,2.968,2571,2.968,2572,2.968,2573,2.968,2574,2.968,2575,2.968,2576,2.968,2577,4.738,2578,4.738,2579,4.738,2580,4.738,2581,2.968,2582,2.968,2583,2.968,2584,4.738,2585,2.968,2586,2.968,2587,2.968,2588,2.968,2589,2.968,2590,2.968,2591,2.968,2592,2.968]],["t/1190",[14,0.469,2251,6.966,2593,7.577,2594,7.577,2595,7.577,2596,7.577,2597,7.577,2598,7.577]],["t/1193",[1444,6.05,1488,5.536,1682,3.594,1747,4.6,1798,3.818,2251,4.28,2535,5.117,2599,5.658,2600,5.658,2601,5.658,2602,5.658,2603,5.658,2604,5.658,2605,5.658,2606,5.658,2607,5.658,2608,5.658,2609,5.658,2610,5.658,2611,5.658,2612,5.658,2613,5.658,2614,5.658]],["t/1196",[14,0.564,1424,4.185,1437,5.958,1541,5.911,2466,5.911,2615,7.444,2616,7.444,2617,7.444]],["t/1199",[14,0.642,54,2.957,2618,5.372,2619,5.372,2620,5.372,2621,5.372,2622,5.372,2623,5.372,2624,5.372,2625,5.372,2626,5.372,2627,7.37,2628,5.372,2629,5.372,2630,5.372,2631,5.372,2632,5.372,2633,5.372,2634,5.372,2635,5.372,2636,5.372,2637,5.372,2638,5.372]],["t/1201",[14,0.599,2197,4.264,2639,4.716,2640,6.084,2641,4.264,2642,4.264,2643,6.084,2644,4.716,2645,4.716,2646,4.264,2647,4.264,2648,4.716,2649,4.716,2650,4.716,2651,9.043,2652,4.716,2653,4.716,2654,6.728,2655,6.728,2656,6.728,2657,4.716,2658,4.716,2659,4.716,2660,4.716,2661,4.716,2662,4.716,2663,4.716,2664,4.716]],["t/1203",[2640,6.091,2641,6.091,2642,6.091,2643,7.739,2646,6.091,2647,7.739,2665,6.736,2666,6.736,2667,6.736,2668,6.736,2669,6.736,2670,6.736,2671,6.736,2672,6.736]],["t/1205",[14,0.663,1760,5.911,2673,7.444,2674,7.444,2675,7.444]],["t/1207",[14,0.478,198,6.976,477,4.769,2466,6.126,2676,7.715,2677,7.715,2678,7.715,2679,7.715]],["t/1209",[9,3.795,477,5.631,1794,5.631,2251,5.631,2271,6.731,2289,6.731,2680,6.731,2681,7.444,2682,7.444]],["t/1211",[14,0.488,202,3.337,612,5.959,912,5.361,1105,3,1490,2.52,1693,3.337,1704,3.337,1705,3.337,1904,3.587,1906,5.361,1926,3.587,2248,3.15,2258,6.42,2680,3.587,2683,3.967,2684,5.929,2685,3.967,2686,5.929,2687,3.967,2688,5.929,2689,5.929,2690,3.967,2691,3.967,2692,3.967,2693,7.1,2694,3.967,2695,3.967,2696,3.967,2697,3.967,2698,3.967,2699,3.967,2700,3.967,2701,3.967,2702,3.967,2703,5.929,2704,5.929,2705,3.967,2706,3.967,2707,3.967,2708,3.967,2709,3.967]],["t/1213",[598,7.523,2710,8.32,2711,8.32,2712,8.32]],["t/1215",[14,0.635,477,4.602,1541,5.911,1542,6.731,1543,6.731,1544,6.731,1545,6.731]],["t/1217",[1546,7.993]],["t/1220",[477,5.143,1429,5.614,1547,7.523,1548,7.523]],["t/1222",[1549,5.903,1550,5.903,1551,5.903,1552,5.903,1553,5.903,1554,5.903,1555,5.903,1556,5.903,1557,5.903,1558,5.903,1559,5.903,1560,5.903,1561,5.903,1562,5.903,1563,4.406,1564,4.269,1565,5.903,1566,5.903]],["t/1224",[1567,6.154,1568,6.615,1569,6.615,1570,5.534,1571,4.785,1572,6.615,1573,6.615,1574,6.615,1575,6.615,1576,6.615,1577,6.615]],["t/1226",[1578,7.239,1579,7.239,1580,7.239,1581,7.239,1582,7.239,1583,7.239]],["t/1228",[0,1.714,14,0.466,47,3.68,63,3.68,64,3.173,1570,6.249,1571,5.743,1584,3.956,1585,3.956,1586,3.956,1587,3.31,1588,3.956,1589,3.956,1590,3.173,1591,3.956,1592,3.956,1593,3.68,1594,3.956,1595,3.31,1596,6.799,1597,4.917,1598,3.956,1599,3.956,1600,5.764,1601,3.956,1602,3.956,1603,3.956,1604,3.956,1605,3.956,1606,3.956,1607,3.956,1608,3.956,1609,3.055,1610,3.956,1611,3.956,1612,3.956]],["t/1232",[14,0.678,477,5.341,1446,7.735,1458,6.188,1613,4.361,1614,3.83,1615,3.648]],["t/1234",[1616,7.105,1617,7.105,1618,6.239,1619,7.105,1620,7.105,1621,7.105,1622,7.105]],["t/1236",[2,1.834,14,0.59,19,2.912,157,3.945,316,4.577,1474,3.799,1486,3.945,1595,4.116,1597,3.558,1618,4.32,1623,4.92,1624,4.92,1625,4.92,1626,4.92,1627,4.92,1628,4.92,1629,4.92,1630,4.92,1631,4.92,1632,4.92,1633,4.92,1634,4.92,1635,4.92,1636,4.92,1637,4.92,1638,4.92]],["t/1238",[14,0.605,456,4.522,1424,4.113,1682,5.725,1683,6.154,1684,5.809,1685,5.305,1686,6.154]],["t/1241",[364,4.005,1682,5.914,1687,7.392,1688,6.976,1689,6.976,1690,6.976]],["t/1243",[14,0.543,33,4.113,1687,4.616,1691,7.031,1692,5.257,1693,7.868,1694,7.369,1695,5.257,1696,5.257,1697,5.257,1698,6.54,1699,5.257,1700,5.257,1701,5.257,1702,5.257,1703,5.257]],["t/1245",[14,0.639,1704,6.374,1705,6.374,1706,6.852,1707,6.852,1708,6.852]],["t/1249",[14,0.674,1441,3.012,1709,6.365,1710,5.049,1711,6.425,1712,6.843,1713,6.843,1714,5.049,1715,5.049,1716,5.049]],["t/1251",[2,2.513,12,1.444,14,0.646,311,3.252,1441,2.599,1488,3.494,1711,4.188,1717,3.826,1718,4.357,1719,4.357,1720,2.741,1721,7.809,1722,4.357,1723,2.198,1724,4.357,1725,4.357,1726,6.178,1727,5.423,1728,4.357,1729,4.357,1730,4.357,1731,4.357,1732,4.357,1733,2.741,1734,2.407,1735,2.741,1736,2.741,1737,2.741,1738,2.741,1739,2.741,1740,2.55,1741,2.741,1742,2.741,1743,3.826,1744,4.357,1745,2.741,1746,2.741]],["t/1253",[14,0.658,1441,4.313,1711,5.583,1717,6.348,1723,6.486,1734,4.814,1747,3.653,1748,5.482,1749,5.482,1750,5.099]],["t/1255",[2,0.813,14,0.672,19,0.945,88,2.542,182,2.7,1441,4.078,1444,1.577,1563,1.628,1564,1.577,1590,1.749,1743,5.667,1747,2.411,1751,2.181,1752,2.181,1753,2.181,1754,2.181,1755,2.181,1756,2.029,1757,2.901,1758,2.181,1759,2.181,1760,7.048,1761,5.101,1762,4.466,1763,1.915,1764,2.181,1765,2.181,1766,1.628,1767,2.181,1768,2.181,1769,2.181,1770,2.181,1771,3.618,1772,2.181,1773,2.181,1774,2.181,1775,2.181,1776,1.749,1777,2.029,1778,2.181,1779,2.181]],["t/1257",[14,0.669,19,1.162,76,2.003,125,1.414,257,2.073,1424,1.669,1429,2.003,1441,1.601,1469,1.941,1488,2.152,1490,1.885,1563,3.197,1564,3.099,1590,2.152,1685,3.436,1761,4.52,1762,3.197,1763,2.357,1776,2.152,1780,2.684,1781,2.684,1782,2.497,1783,5.347,1784,2.684,1785,2.684,1786,2.684,1787,5.347,1788,2.684,1789,2.684,1790,2.684,1791,2.684,1792,2.684,1793,4.284,1794,2.245,1795,2.684,1796,2.684,1797,2.684,1798,2.003,1799,2.497,1800,2.684,1801,2.684,1802,4.284,1803,4.284,1804,2.684,1805,2.684,1806,2.357,1807,2.684]],["t/1259",[14,0.677,25,2.547,41,3.728,88,1.254,1469,1.291,1474,3.095,1476,6.81,1587,1.493,1682,3.334,1747,2.037,1757,3.806,1762,2.281,1766,1.332,1794,1.493,1808,1.493,1809,1.785,1810,1.785,1811,4.007,1812,1.785,1813,3.056,1814,1.785,1815,4.746,1816,1.785,1817,1.785,1818,1.785,1819,1.785,1820,3.056,1821,4.007,1822,3.056,1823,3.056,1824,4.746,1825,3.056,1826,1.785,1827,1.785,1828,1.785,1829,1.785,1830,3.056,1831,1.785,1832,1.785,1833,1.785,1834,5.818,1835,1.661,1836,1.785,1837,1.785,1838,1.785,1839,1.785,1840,1.661,1841,1.785,1842,1.785,1843,3.056,1844,1.785,1845,1.661,1846,1.661,1847,1.785,1848,1.785,1849,1.785]],["t/1262",[14,0.678,1082,5.397,1444,4.445,1458,4.318,1464,3.105,1761,3.906,1762,2.491,1850,5.078,1851,6.869,1852,3.337,1853,3.337,1854,5.078,1855,3.337,1856,3.337,1857,3.337,1858,5.078,1859,5.078,1860,4.724,1861,3.337,1862,3.337,1863,3.337,1864,3.337,1865,3.337]],["t/1265",[14,0.596,1441,4.402,1747,4.916,1761,4.689]],["t/1267",[2,1.505,14,0.677,125,2.127,1435,2.085,1437,1.803,1441,5.062,1469,3.679,1563,3.012,1564,2.919,1682,2.836,1709,7.015,1711,1.925,1723,3.237,1747,4.583,1776,3.237,1806,2.189,2469,4.732,2531,3.545,2713,4.464,2714,6.468,2715,4.464,2716,2.756,2717,2.756]],["t/1269",[14,0.665,1434,6.2,1441,5.449,1615,3.868,1682,4.525,1747,3.081,1777,4.301,1799,4.301,2074,5.992,2251,3.868,2531,4.06,2718,5.113]],["t/1271",[0,3.323,2719,8.486,2720,8.486]],["t/1273",[1694,7.138,1698,7.138,2721,6.738]],["t/1276",[14,0.496,146,6.056,555,6.357,2721,7.558,2722,8.006]],["t/1278",[14,0.648,19,2.187,1461,3.652,1798,3.768,2398,5.049,2721,6.816,2723,5.049,2724,5.584,2725,5.584,2726,7.762,2727,5.584,2728,5.584,2729,5.049,2730,6.843,2731,5.584,2732,5.584]],["t/1280",[14,0.566,19,3.222,1461,4.142,2721,7.256,2723,5.727,2726,7.439,2729,5.727,2730,5.727,2733,6.334,2734,6.334,2735,6.334,2736,6.334,2737,6.334,2738,6.334]],["t/1282",[14,0.629,1232,7.239,2466,6.357,2739,8.006]],["t/1284",[223,6.686]],["t/1286",[0,3.391,14,0.536]],["t/1288",[223,6.686]],["t/1290",[14,0.586,149,2.409,353,3.474,376,3.31,850,3.474,2264,3.68,2458,3.956,2740,4.375,2741,6.374,2742,3.474,2743,4.375,2744,4.375,2745,4.375,2746,4.375,2747,4.375,2748,4.375,2749,4.375,2750,4.375,2751,8.261,2752,8.261,2753,8.261,2754,8.261,2755,6.374,2756,4.375,2757,6.374,2758,4.375,2759,4.375,2760,4.375,2761,4.375]],["t/1292",[14,0.536,74,5.843]],["t/1294",[2,2.467,14,0.652,19,2.235,25,1.291,43,3.28,44,2.994,125,3.03,146,1.699,149,4.667,154,5.051,157,2.734,205,3.288,301,1.783,317,4.138,749,2.734,751,3.403,1189,1.568,1461,2.466,1895,2.031,1971,1.699,1973,1.889,1974,1.699,2344,2.031,2762,2.246,2763,2.246,2764,2.246,2765,2.246,2766,2.246,2767,3.77,2768,2.246,2769,3.77,2770,3.77,2771,2.246,2772,2.246,2773,2.246,2774,3.77,2775,4.873,2776,3.77,2777,2.246,2778,2.246,2779,3.77,2780,2.246,2781,2.246,2782,2.246,2783,2.246,2784,2.246,2785,2.246,2786,2.246,2787,2.246,2788,2.246,2789,2.246,2790,2.246,2791,2.246,2792,2.246,2793,3.77,2794,2.246]],["t/1296",[146,7.538]],["t/1298",[2,2.354,14,0.656,33,3.694,43,4.013,45,4.713,54,3.844,125,3.327,149,3.844,1760,5.545,2508,7.026,2795,3.858,2796,5.808,2797,5.808,2798,5.808,2799,3.858,2800,5.808,2801,5.808,2802,3.858,2803,5.808,2804,3.858]],["t/1300",[14,0.417,33,3.563,379,4.164,1757,4.884,1761,3.871,2805,6.736,2806,6.736,2807,6.736,2808,6.736,2809,6.736,2810,6.736,2811,6.736,2812,6.736,2813,6.736,2814,6.736,2815,6.736]],["t/1303",[2098,6.731,2531,5.911,2816,7.444,2817,7.444,2818,7.444,2819,7.444,2820,7.444,2821,7.444,2822,7.444,2823,6.731]],["t/1305",[14,0.495,234,3.69,447,4.411,1439,4.103,1686,4.103,2823,4.411,2824,4.878,2825,4.878,2826,7.991,2827,6.892,2828,4.878,2829,4.878,2830,4.878,2831,4.878,2832,4.878,2833,4.878,2834,4.878,2835,4.878,2836,4.878,2837,4.878,2838,6.892,2839,4.878,2840,6.892,2841,6.892,2842,7.991,2843,4.878,2844,4.878,2845,4.878,2846,4.878,2847,4.878]],["t/1307",[14,0.547]],["t/1309",[14,0.639,55,5.724,1144,6.843,2154,6.009,2848,5.584,2849,5.049,2850,8.584,2851,5.584,2852,5.584,2853,5.584,2854,5.049,2855,8.584,2856,5.584,2857,5.584,2858,5.584]],["t/1311",[14,0.496,1259,7.239,2859,8.006,2860,8.006,2861,8.006,2862,8.006]],["t/1313",[14,0.603,2849,7.523,2854,7.523]],["t/1315",[0,3.323,292,7.142]],["t/1317",[14,0.547]],["t/1319",[12,3.255,14,0.687,15,3.494,16,1.574,19,3.259,24,1.983,25,1.742,32,1.704,2863,2.741,2864,6.178,2865,5.423,2866,5.423,2867,6.178,2868,7.178,2869,2.741,2870,2.741,2871,4.357,2872,2.741,2873,2.741]],["t/1321",[0,0.795,2,0.685,7,1.29,8,1.613,9,1.035,10,1.224,11,1.224,12,3.323,13,1.224,14,0.683,15,3.282,16,3.115,17,1.613,19,3.204,24,2.96,25,1.167,30,3.161,31,1.473,32,1.947,52,1.328,125,1.65,364,1.054,1525,1.708,2863,1.837,2864,4.836,2865,4.093,2866,4.093,2867,5.426,2868,5.907,2869,1.837,2870,1.837,2871,3.131,2872,1.837,2873,1.837,2874,2.031,2875,3.463,2876,2.031,2877,2.031,2878,2.031,2879,2.031,2880,2.031,2881,2.031]],["t/1324",[2882,8.839]],["t/1326",[14,0.591,16,3.612,379,4.3,1212,6.29,2883,6.956,2884,9.549,2885,6.956,2886,6.956,2887,6.956,2888,6.956]],["t/1329",[0,1.868,14,0.685,54,4.344,311,4.576,1974,3.607,2889,4.312,2890,4.312,2891,4.312,2892,4.312,2893,4.312,2894,4.312,2895,4.312,2896,4.312,2897,4.312,2898,4.312,2899,4.312]],["t/1332",[2,3.171,14,0.684,125,2.808,364,4.074,2900,5.894,2901,5.894]],["t/1334",[14,0.678,2902,7.444,2903,7.444]],["t/1337",[0,2.837,14,0.691,364,4.311,2567,4.407,2904,4.738,2905,4.738,2906,4.738,2907,4.738]],["t/1339",[0,1.868,14,0.685,54,4.344,311,4.576,1974,3.607,2889,4.312,2890,4.312,2891,4.312,2892,4.312,2893,4.312,2894,4.312,2895,4.312,2896,4.312,2897,4.312,2898,4.312,2899,4.312]],["t/1343",[2908,8.486,2909,8.486,2910,8.486]],["t/1345",[0,3.222,14,0.566,125,3.017,234,6.223,1458,4.023,1462,5.727,2911,8.227,2912,6.334,2913,6.334,2914,6.334,2915,6.334,2916,6.334,2917,6.334,2918,6.334,2919,6.334]],["t/1347",[2,2.235,14,0.63,317,4.808,1416,5.577,1798,4.474,2920,6.631,2921,6.631,2922,8.474,2923,6.631,2924,6.631,2925,6.631,2926,6.631]],["t/1349",[14,0.577,1564,5.045,2116,4.537,2129,6.976,2927,7.715,2928,7.715,2929,7.715]],["t/1352",[2930,8.839]],["t/1354",[0,2.98,2,1.506,14,0.471,45,3.015,125,2.128,317,4.693,379,2.762,1417,4.04,1761,2.567,2116,2.627,2931,4.468,2932,4.468,2933,7.609,2934,6.471,2935,4.468,2936,4.468,2937,4.468,2938,4.468,2939,4.468,2940,7.609,2941,4.468,2942,4.468,2943,4.468,2944,4.468,2945,4.468,2946,4.468,2947,4.468,2948,4.468,2949,4.468,2950,4.468,2951,4.468,2952,6.471,2953,4.468,2954,4.468,2955,4.468,2956,4.468,2957,4.468]],["t/1356",[2,2.345,14,0.431,125,3.314,149,3.829,1354,5.851,2116,4.091,2958,6.956,2959,6.956,2960,6.956,2961,6.956,2962,6.956,2963,6.956,2964,6.956,2965,6.956]],["t/1358",[0,2.77,2,2.384,14,0.642,125,3.369,149,3.893,1416,5.949,2469,5.949,2966,7.072,2967,7.072]],["t/1360",[0,3.323,2968,8.486,2969,8.486]],["t/1362",[2,2.945,33,5.052,379,5.903,2970,7.348,2971,6.956,2972,6.956,2973,6.956,2974,6.956]],["t/1364",[2,2.649,33,4.98,379,4.857,2970,6.61,2975,7.858,2976,7.858]],["t/1366",[2,2.554,33,4.009,379,5.692,2116,4.456,2970,6.374,2977,7.577,2978,7.577,2979,7.577]],["t/1368",[14,0.478,2116,5.88,2980,7.715,2981,7.715,2982,7.715,2983,7.715]],["t/1370",[1798,6.571,2984,8.32,2985,8.32]],["t/1372",[2,2.424,14,0.445,33,4.718,379,4.446,2137,6.503,2986,7.192,2987,7.192,2988,7.192,2989,7.192,2990,7.192,2991,7.192]],["t/1374",[14,0.639,2992,8.32]],["t/1377",[2742,6.876,2993,7.284]],["t/1379",[2,2.601,14,0.577,125,3.675,2742,7.392,2993,7.831]],["t/1381",[2,2.601,14,0.577,125,3.675,2742,7.392,2993,7.831]],["t/1383",[0,3.391,14,0.536]],["t/1385",[223,6.686]],["t/1388",[14,0.645]],["t/1390",[14,0.631,257,5.109,2994,9.013,2995,7.316,2996,7.316,2997,7.316,2998,7.316]],["t/1392",[2,2.424,14,0.552,2999,7.192,3000,7.192,3001,7.192,3002,7.192,3003,7.192,3004,7.192,3005,7.192,3006,7.192,3007,7.192]],["t/1398",[0,3.135,14,0.665]],["t/1400",[14,0.603,2904,7.523,2905,7.523]],["t/1402",[0,2.937,14,0.691,364,4.426,2567,4.636,2906,4.984,2907,4.984]]],"invertedIndex":[["",{"_index":14,"t":{"705":{"position":[[57,1],[73,2],[88,1],[98,1],[132,1],[142,1],[158,1],[165,1],[182,1],[188,1],[194,1],[199,1],[213,1],[223,1],[228,2],[234,1],[241,1],[251,1],[269,1],[271,1],[328,2],[334,1],[341,2],[349,2],[368,1],[375,1],[382,2],[388,2],[397,1],[399,1]]},"707":{"position":[[19,19],[71,8],[83,1],[98,1]]},"711":{"position":[[57,1],[70,1],[80,2],[94,1],[102,1],[106,1],[113,1],[127,1],[132,1],[136,1],[140,1],[145,1],[149,1],[157,2],[164,1],[172,2],[178,1],[185,2],[190,2],[199,1],[201,1],[213,1]]},"713":{"position":[[0,20],[94,1],[99,1],[103,1],[107,1],[112,1],[116,1],[122,2],[125,5],[133,2],[140,1],[165,1],[181,1],[188,1],[205,1],[211,1],[217,1],[222,1],[230,1]]},"715":{"position":[[4,93],[98,5],[264,5]]},"717":{"position":[[57,1],[131,1],[139,2],[144,2],[149,2],[155,1],[164,1],[179,2],[182,6],[198,1],[204,1],[206,2],[209,6],[216,1],[218,2],[221,5],[238,1],[245,1],[267,1],[279,2],[297,1],[352,1],[364,2],[369,2],[376,2],[382,1],[391,1],[404,1],[415,2],[428,1],[457,1],[459,1],[471,1]]},"719":{"position":[[0,47]]},"724":{"position":[[0,39],[40,24]]},"728":{"position":[[21,2],[58,2],[91,2],[125,2],[128,2],[142,2],[145,4],[160,2],[163,5],[184,2],[187,8],[210,2],[213,7],[221,2],[269,1],[279,2],[299,2]]},"730":{"position":[[19,1],[44,2],[47,7],[67,2],[70,7],[78,2]]},"732":{"position":[[9,1],[31,2],[57,2],[60,6],[78,2],[81,2],[86,2],[101,2],[119,2],[128,2],[131,21]]},"734":{"position":[[46,2],[49,6],[67,2],[70,6],[87,2],[90,6],[106,2],[109,6]]},"736":{"position":[[0,2],[3,6],[77,2],[80,10],[94,4],[102,4],[122,2],[125,5]]},"742":{"position":[[12,2],[15,7],[23,2],[60,2],[63,7],[84,5],[133,2],[171,2],[207,2],[214,6],[238,2],[271,2]]},"744":{"position":[[15,2],[62,1],[241,12]]},"746":{"position":[[28,2],[31,10],[42,2],[45,7],[53,2],[56,2],[59,2],[62,2],[65,2],[84,2],[104,2],[122,2],[139,2],[160,2],[180,2],[191,6]]},"750":{"position":[[0,23],[24,25],[50,23],[74,6],[81,4],[86,6],[93,17]]},"752":{"position":[[0,20],[21,36],[58,13],[72,22]]},"754":{"position":[[0,14]]},"761":{"position":[[72,31],[277,5],[283,5]]},"763":{"position":[[0,57]]},"767":{"position":[[234,3],[370,11],[382,7],[403,5],[413,28],[442,39]]},"771":{"position":[[33,44],[78,47]]},"774":{"position":[[55,19],[75,13]]},"779":{"position":[[4,19]]},"783":{"position":[[0,10],[19,31],[51,5],[65,20],[86,7],[94,7],[102,15]]},"786":{"position":[[0,37],[42,23],[66,30]]},"788":{"position":[[0,7],[8,20],[39,13]]},"791":{"position":[[0,15],[16,43],[60,15],[76,22]]},"793":{"position":[[12,9],[22,24],[90,2],[93,4],[107,1],[270,1],[444,1],[631,1]]},"796":{"position":[[0,61],[62,42],[105,56],[162,39],[202,32],[235,47]]},"798":{"position":[[0,40],[41,61],[174,7],[182,4],[208,13]]},"800":{"position":[[0,42],[45,5],[51,32],[86,5],[92,20]]},"802":{"position":[[0,46],[49,5],[71,4],[78,5],[84,54]]},"804":{"position":[[0,27],[28,6],[35,17],[53,22]]},"806":{"position":[[4,12]]},"812":{"position":[[5,1],[9,4],[23,7],[40,8],[54,1],[62,1],[66,6],[77,4],[87,1],[93,4],[103,1],[109,1],[113,4],[123,1],[129,1],[134,4],[144,1],[149,4],[159,1],[169,1],[173,7],[186,1],[196,1],[200,10],[216,1],[220,3],[229,1],[237,1],[241,3],[248,4],[258,1],[263,5],[273,6],[284,6]]},"815":{"position":[[0,3],[4,2],[7,3],[11,2],[14,3],[18,2],[30,4],[43,6],[58,6],[73,4],[87,4],[101,5],[114,4],[128,5],[143,4],[157,6],[173,6],[203,5],[218,8],[234,4]]},"817":{"position":[[21,3],[25,2],[28,3],[32,2],[35,3],[39,2],[52,4],[63,4],[75,2],[87,3],[97,1],[103,6],[115,2],[125,3],[133,2],[142,2],[165,4]]},"821":{"position":[[0,10],[39,1],[45,1],[75,1],[82,1],[88,1],[95,4],[194,11],[255,7],[344,7],[430,6],[527,1],[557,1],[600,1],[638,1],[675,1],[681,1],[691,1],[697,1],[723,1],[725,1],[768,1],[770,1]]},"824":{"position":[[18,1],[71,2]]},"826":{"position":[[0,10],[34,1],[36,1],[70,12],[118,1],[137,1],[160,1],[186,1],[237,1],[239,1],[301,2],[304,9],[314,8],[345,1],[398,15],[423,1],[457,2],[476,1],[511,2],[514,1],[561,1],[587,8],[610,8],[631,10],[667,1],[695,1],[716,1],[726,1],[750,1],[771,1],[773,8],[813,1],[815,3],[819,3],[823,3],[840,1],[842,1]]},"828":{"position":[[77,1]]},"831":{"position":[[7,1],[18,35],[61,1],[128,1]]},"833":{"position":[[0,6],[24,1],[39,19],[71,1],[86,1],[114,1]]},"835":{"position":[[23,1],[51,1],[58,1],[67,3],[71,1],[78,1],[94,1]]},"837":{"position":[[0,3]]},"839":{"position":[[17,4],[31,9],[41,9],[58,18],[205,1],[222,1],[224,3],[496,17],[525,17],[549,17],[579,17],[739,7],[773,39],[837,1]]},"841":{"position":[[13,30],[44,11],[56,2],[59,2],[121,22],[156,20],[183,15],[208,15],[230,10],[246,15],[344,15],[377,16],[403,15],[428,18],[460,22],[555,10],[566,2],[569,2],[577,17],[609,20],[643,23],[679,2],[684,9],[699,14],[721,8],[732,9],[751,34],[797,20],[820,4],[868,17],[905,20],[941,15],[964,18],[993,18],[1024,25],[1065,25],[1099,22],[1135,29],[1181,29],[1222,22],[1253,12],[1279,13],[1300,12],[1325,13],[1352,24],[1382,8],[1403,9],[1423,24],[1455,35],[1503,16],[1530,5],[1536,2],[1539,2],[1600,10],[1631,11],[1664,11],[1693,16],[1710,5],[1716,2],[1719,2],[1737,11],[1770,10],[1793,28],[1835,4],[1858,9],[1873,2],[1888,4],[1893,8],[1902,2],[1905,2],[1922,19],[1954,20],[1987,26],[2026,23],[2050,5],[2056,2],[2059,2],[2071,17],[2103,4],[2114,2],[2132,9],[2159,9],[2194,10],[2215,9],[2225,4],[2230,2],[2233,2],[2244,13],[2277,18],[2306,11],[2327,12],[2350,9],[2370,11],[2382,8],[2391,2],[2394,2],[2417,19],[2461,10],[2476,13],[2502,13],[2520,13],[2546,13],[2572,16],[2609,16],[2643,23],[2684,23]]},"843":{"position":[[274,2],[323,2],[377,2],[451,2],[454,15],[480,2],[483,5],[498,2],[501,5],[522,2],[543,2],[546,4],[561,2],[564,14],[592,2],[595,6],[612,2],[615,15],[639,2],[642,21],[682,2],[778,2],[843,2],[933,2],[971,2],[1043,2],[1106,2],[1109,10],[1130,2],[1174,2],[1242,2],[1298,2],[1335,2],[1394,2],[1397,13],[1411,2],[1414,1],[1416,23],[1440,2],[1513,1],[1547,2],[1553,1],[1571,1],[1584,1],[1602,2],[1611,1],[1613,1],[1620,2],[1628,2],[1631,1],[1633,2],[1636,1],[1643,2],[1662,1]]},"845":{"position":[[219,2],[222,15],[246,2],[249,21],[287,2],[314,2],[339,2],[342,6],[363,2],[366,6],[382,2],[385,4],[400,2],[403,14],[430,2],[502,2],[565,2],[568,10],[589,2],[592,5],[607,2],[610,5],[626,2],[657,2],[703,2],[799,2],[864,2],[953,2],[987,2]]},"847":{"position":[[329,8],[338,3],[342,2],[354,8],[676,5],[682,4],[687,2],[701,4],[713,10],[724,3],[749,4],[763,4],[776,4],[789,6],[805,6],[822,4],[827,1],[829,5],[861,7],[885,11],[908,11],[928,9],[949,13],[973,17],[991,1],[1000,6],[1033,2],[1104,12],[1126,8],[1149,10],[1176,9]]},"849":{"position":[[149,2],[160,2]]},"851":{"position":[[336,2],[349,2],[359,1],[368,2],[519,2],[664,2],[667,4],[672,2],[681,1],[691,2],[783,1],[798,2],[892,2],[895,4],[900,2],[917,2],[965,2],[1001,2],[1004,4],[1009,2],[1022,2],[1025,6],[1043,2],[1046,6],[1064,2],[1067,6]]},"853":{"position":[[179,2],[182,2],[194,2],[197,2],[209,2],[212,4],[228,2],[253,2],[256,8]]},"855":{"position":[[184,2],[187,3],[200,2],[203,3],[218,2],[221,6],[238,2],[241,6],[259,2],[262,8],[281,2],[284,10]]},"857":{"position":[[124,2],[127,13],[151,2],[154,6],[171,2],[174,10],[195,2],[223,2],[226,25],[268,2],[271,21],[303,2],[306,8],[324,2],[327,16],[362,2],[365,8],[385,2],[388,8],[413,2],[416,23],[453,2],[456,15],[485,2],[488,15],[515,2],[518,19],[547,2],[550,18],[578,2],[581,8],[599,2],[602,8],[627,2],[630,13],[659,2],[662,16]]},"861":{"position":[[11,1],[20,5],[89,11],[108,24],[146,24],[171,2],[187,8],[211,1],[234,2],[240,2],[248,4],[255,1],[298,2],[305,7],[332,1],[336,5],[367,2],[374,6],[402,1],[406,5],[443,2],[446,1],[452,1],[456,5],[498,1],[503,3],[509,1],[515,4],[522,4],[544,5],[559,2],[565,7],[575,6],[592,2],[598,6],[607,7],[626,2],[632,3],[638,8],[657,2],[663,8],[680,2],[683,2],[689,2],[696,6],[716,2],[722,2],[729,9],[750,2],[753,1],[758,10],[783,2],[786,1],[791,2],[798,8],[820,2],[823,1],[828,10],[855,2],[858,1],[888,2],[891,1],[896,11],[921,2],[924,1],[929,2],[936,8],[960,2],[963,2],[980,2],[983,1],[988,12],[1015,1],[1020,2],[1026,2],[1029,1],[1034,7],[1045,1]]},"864":{"position":[[97,1],[103,1],[109,1],[115,1],[117,8],[148,1],[182,15],[207,1],[216,2],[235,1],[245,2],[248,1],[295,1],[321,8],[344,8],[365,10],[401,1],[429,1],[450,1],[452,8],[492,1],[514,1],[558,1],[600,1],[607,1],[689,1],[704,1],[706,8],[742,1],[840,1],[845,1],[854,1],[911,1],[918,1],[956,1],[966,1],[1018,2],[1024,1],[1065,1],[1067,1],[1069,1],[1083,1],[1085,8],[1121,1],[1188,2],[1197,1],[1199,2],[1208,2],[1211,1],[1213,2],[1288,1],[1293,1],[1302,1],[1325,1],[1344,1],[1351,1],[1389,1],[1399,1],[1451,2],[1457,1],[1525,2],[1534,1],[1536,2],[1543,2],[1546,1],[1548,2],[1557,1],[1572,1],[1574,1],[1588,1],[1598,1],[1632,1],[1647,2],[1655,1],[1657,2],[1664,2],[1667,1],[1669,2],[1686,1],[1688,1],[1697,2],[1718,1],[1720,1],[1740,1],[1946,1],[1963,2],[1966,14],[1991,1],[1998,1],[2021,2],[2030,2],[2033,1],[2035,2],[2043,2],[2057,2],[2060,14],[2257,1],[2280,1],[2287,1],[2313,2],[2325,2],[2328,1],[2330,2],[2338,2],[2360,2],[2377,1]]},"866":{"position":[[99,1],[105,1],[111,1],[117,1],[189,8],[220,1],[273,15],[298,1],[332,2],[351,1],[386,2],[389,1],[436,1],[462,8],[485,8],[506,10],[542,1],[570,1],[591,1],[601,1],[625,1],[646,1],[648,8],[688,1],[710,1],[754,1],[847,1],[854,1],[1038,1],[1053,1],[1055,1],[1137,2],[1175,1],[1205,1],[1338,1],[1340,1],[1419,1],[1501,1],[1649,1],[1751,1],[1899,1],[1901,1],[2126,1],[2128,1],[2194,1],[2278,1],[2337,1],[2374,1],[2416,1],[2469,1],[2502,1],[2514,1]]},"868":{"position":[[234,5],[259,5],[310,1],[329,1],[424,8],[448,4],[485,3],[580,4],[660,2],[693,10],[728,2],[764,1],[766,5],[790,1],[806,1],[865,1],[911,1],[955,1],[1004,1],[1025,2],[1031,1],[1043,1],[1045,1],[1058,1],[1092,1],[1094,11],[1106,11],[1118,5],[1124,7],[1132,7],[1267,6],[1283,1],[1289,6],[1347,1],[1352,6],[1410,1],[1415,7],[1495,6],[1531,1],[1553,1],[1565,1],[1577,1],[1603,1],[1635,2],[1659,1],[1771,1],[1773,7],[1788,1],[1832,1],[1834,8],[1851,1],[1856,1],[1863,1],[1865,6],[1893,1],[1898,1],[1900,1],[1913,1],[1915,2],[1988,3],[2004,1],[2070,2],[2100,7],[2151,6],[2184,4],[2204,10],[2262,1],[2328,7],[2368,1],[2370,5],[2427,1],[2451,1],[2477,5],[2494,8],[2503,1],[2510,1],[2563,1],[2621,9],[2631,1],[2633,1],[2635,2],[2638,8],[2647,2],[2650,11],[2663,15],[2702,1],[2715,1],[2795,2],[2868,1],[2897,1],[2926,1],[3030,4],[3038,1],[3109,1],[3132,1],[3160,1],[3198,1],[3200,1],[3212,1]]},"871":{"position":[[197,1],[218,2],[221,10],[278,2],[307,1],[309,2],[357,7],[400,2],[403,13],[456,2],[459,11],[523,2],[526,15],[584,2],[587,15],[614,1],[616,2],[619,10],[676,2],[705,1],[742,2],[745,14],[799,2],[802,11],[866,2],[869,15],[927,2],[930,15],[957,1],[959,2],[962,3],[988,1],[1063,1],[1065,2],[1068,4],[1090,1],[1151,1],[1255,1],[1333,3],[1337,2],[1340,9],[1350,1],[1352,2],[1355,4],[1378,1],[1465,1],[1467,2],[1470,4],[1493,1],[1580,1],[1582,2],[1585,4],[1609,1],[1698,1],[1711,1],[1743,1],[1795,2],[1798,4],[1803,2],[1847,2],[1850,4],[1897,2],[1900,4],[1939,2],[1942,9],[1952,2],[1989,2],[1992,9],[2011,2],[2014,4],[2019,2],[2032,2],[2035,4],[2040,2],[2053,2],[2067,2],[2070,4],[2075,2],[2088,2],[2101,2],[2104,4],[2109,2],[2122,1],[2134,1]]},"873":{"position":[[197,1],[264,1],[445,1],[493,1],[674,1],[698,1],[773,1],[792,1],[853,1],[957,1],[1035,3],[1039,1],[1059,1],[1146,1],[1166,1],[1253,1],[1274,1],[1363,1],[1376,1],[1408,1],[1460,2],[1580,2],[1626,2],[1639,2],[1653,2],[1666,1],[1678,1]]},"875":{"position":[[277,1],[340,2],[350,1],[537,1],[558,1],[570,2],[652,1],[665,1],[827,1]]},"879":{"position":[[123,1],[159,1],[184,1],[200,1],[220,2],[232,1],[256,9],[266,1],[282,1],[292,1],[315,1],[347,2],[374,1],[415,1],[417,8],[441,1],[472,1],[479,1],[493,1],[495,1],[497,1],[499,1],[501,1],[572,1],[630,4],[635,2],[638,1],[666,1],[736,1],[805,1],[863,1],[881,1],[883,1],[885,1],[936,1],[1002,2],[1335,1],[1371,1],[1396,1],[1412,1],[1432,2],[1444,1],[1468,9],[1478,1],[1494,1],[1504,1],[1527,1],[1559,2],[1586,1],[1656,1],[1687,1],[1694,1],[1708,1],[1710,1],[1712,1],[1714,1],[1716,1],[1718,2],[1721,1],[1750,1],[1803,1],[1830,2],[1871,1],[2145,2],[2254,1],[2312,2],[2340,2],[2352,1]]},"881":{"position":[[67,2],[225,15],[365,1],[393,1],[514,1],[516,14],[587,1],[589,14],[718,1],[747,1],[822,1],[849,1],[907,1],[967,1],[1024,13],[1053,36]]},"885":{"position":[[28,14],[43,16],[60,7],[68,11],[80,8],[195,10]]},"889":{"position":[[19,9],[29,9],[39,7]]},"891":{"position":[[0,9],[10,20]]},"893":{"position":[[49,5],[105,17],[123,19],[143,19]]},"895":{"position":[[0,6],[167,16],[184,8],[258,58],[317,3],[354,5],[441,17],[459,2],[487,2],[514,2],[517,4],[538,2],[557,3],[578,5],[633,1],[702,2],[733,1],[799,1],[862,1],[929,1],[970,2],[982,1],[1060,2],[1097,3],[1143,5],[1198,1],[1234,2],[1259,2],[1287,2],[1290,4],[1308,2],[1421,1],[1449,1],[1570,1],[1572,14],[1643,1],[1645,14],[1774,1],[1803,1],[1878,1],[1905,1],[1963,1],[2023,1],[2080,5],[2086,12],[2099,16],[2116,15]]},"900":{"position":[[86,3],[151,24],[176,3],[180,84],[265,18]]},"902":{"position":[[77,18],[96,3],[100,3],[104,5],[110,7],[171,5],[266,4],[363,4]]},"908":{"position":[[45,8],[54,8],[63,4],[68,9],[83,10],[94,64],[159,56],[216,54],[271,8],[280,9],[399,10],[513,9],[694,10],[873,8],[882,9],[1004,10],[1143,9],[1339,10]]},"911":{"position":[[0,19],[20,5],[26,5],[32,5],[38,4],[43,3],[47,2]]},"913":{"position":[[0,16],[42,33]]},"915":{"position":[[0,7],[25,3]]},"918":{"position":[[0,5],[6,39],[46,7],[54,6],[61,6],[68,6],[75,6],[82,22],[105,22],[128,73],[202,3],[206,64],[275,74]]},"920":{"position":[[0,7],[8,3],[12,50],[63,3],[261,12],[274,3],[278,7],[286,3],[290,26],[317,3],[321,40],[362,3],[509,10],[520,3]]},"922":{"position":[[0,23],[24,5],[35,6],[42,3],[46,3],[50,12],[63,7],[71,6],[78,6],[85,4],[90,8],[99,4],[104,5],[110,5],[116,5],[122,53],[176,3],[180,12],[193,39],[233,19],[277,19]]},"924":{"position":[[0,76],[77,34]]},"926":{"position":[[0,17],[359,42],[885,60],[1114,2],[1169,2]]},"928":{"position":[[0,14],[169,27],[630,2],[685,2]]},"930":{"position":[[0,5],[6,38],[45,13],[359,5],[365,40],[406,13]]},"937":{"position":[[0,5],[6,15],[22,12],[35,23],[59,29],[89,14],[104,5],[110,84],[195,16],[212,22],[235,20],[256,77],[334,90]]},"939":{"position":[[99,10],[110,5],[116,39]]},"942":{"position":[[0,6],[160,6]]},"944":{"position":[[0,9],[10,45],[56,8],[65,30],[96,26],[123,27]]},"946":{"position":[[10,7],[18,34],[53,13],[76,7],[84,17],[102,13],[127,7],[135,37],[173,13],[198,7],[206,17],[272,10],[283,9],[326,16],[343,6]]},"948":{"position":[[0,10],[11,64],[76,56],[133,54],[188,11],[200,19],[220,24],[245,25],[271,18],[290,21],[312,26],[362,18],[433,35],[469,38],[508,27],[536,49],[586,12],[599,46],[646,68],[715,8],[724,3],[728,3],[732,12],[745,25],[771,46],[818,56],[875,17],[896,4],[901,2]]},"950":{"position":[[4,14]]},"965":{"position":[[201,18],[285,17],[562,26]]},"969":{"position":[[256,10],[917,5],[923,10]]},"981":{"position":[[0,4],[14,5],[66,3],[113,40]]},"994":{"position":[[0,5],[389,4],[812,13]]},"998":{"position":[[0,1],[24,2],[64,39],[116,18],[154,25],[199,19],[219,5],[225,25],[259,14],[274,5],[280,38],[327,1],[338,10],[357,1],[410,5],[424,32],[465,1],[505,46],[560,1],[621,10]]},"1002":{"position":[[790,31],[1558,15],[1602,1],[1628,2],[1647,1]]},"1006":{"position":[[0,30],[232,7]]},"1008":{"position":[[0,12]]},"1010":{"position":[[187,15]]},"1012":{"position":[[0,8],[13,13],[74,11]]},"1017":{"position":[[0,3],[19,2],[30,9]]},"1019":{"position":[[0,13],[27,2],[45,8],[69,5]]},"1023":{"position":[[9,7],[71,1],[88,1],[90,1],[92,1],[94,1],[130,1],[147,1],[149,1],[151,1],[153,1],[174,8],[198,1],[209,15]]},"1025":{"position":[[0,19],[55,1],[122,1],[230,1],[330,1],[397,1],[502,1],[586,1],[593,4],[605,19],[637,2],[650,19],[674,5],[685,5],[719,2],[748,8],[782,1],[809,5],[824,17],[870,1],[948,1],[1022,1],[1100,1]]},"1027":{"position":[[0,1],[9,2],[20,3],[32,11],[53,8],[124,17],[146,32],[195,17],[220,50]]},"1029":{"position":[[9,1],[31,1],[91,1],[120,1],[159,1],[181,3],[187,3],[237,5],[245,8],[278,33],[312,1],[327,8],[340,8],[351,3],[359,30],[413,14],[430,10],[441,1],[456,9],[589,1],[718,1],[720,1],[733,1],[760,3],[766,6],[773,1],[784,9],[796,5],[804,7],[814,16],[833,13],[849,27],[879,1],[883,7],[911,22],[934,5],[953,6],[1002,5],[1016,10],[1035,10],[1054,5],[1073,30],[1120,6],[1135,28],[1172,13],[1194,14],[1266,6]]},"1031":{"position":[[0,15],[155,5],[170,7],[221,1],[269,1],[293,1],[323,1],[392,1],[505,1],[516,14],[531,1],[587,46],[649,10],[660,3],[666,5],[681,24],[744,33],[803,13],[826,11],[912,6],[921,13],[937,13],[953,44],[998,5],[1012,6],[1029,3],[1118,2],[1134,11],[1154,5],[1177,7],[1209,9],[1227,1],[1276,5],[1297,7]]},"1033":{"position":[[9,7],[37,11],[49,9],[63,2],[79,6],[91,4],[188,30],[219,4],[224,46],[296,7],[307,26],[348,10],[359,5],[368,11],[399,1],[570,8],[753,4],[774,5],[786,10],[800,4],[810,10],[824,1],[876,17],[922,4],[932,7],[954,2],[961,3],[976,1],[990,1],[996,7],[1008,1],[1017,2],[1031,1],[1046,1],[1052,10],[1066,3],[1087,2],[1140,8],[1149,2],[1155,20],[1199,13],[1226,4],[1255,12],[1277,20],[1304,1],[1377,28],[1416,43],[1464,15],[1494,2],[1501,3],[1516,1],[1530,1],[1536,7],[1548,1],[1557,2],[1571,1],[1586,1],[1592,10],[1607,3],[1614,2],[1669,29],[1720,4],[1759,3],[1848,13],[1868,24],[1932,11],[1968,11]]},"1036":{"position":[[0,15],[27,2],[42,12],[65,2],[70,4],[129,9],[172,3],[187,6],[206,7],[254,17],[272,5],[278,9],[298,5],[315,15],[340,1],[344,6],[361,6],[368,8],[409,2],[436,20],[469,34],[504,19],[529,3],[542,5],[572,3],[596,15],[614,3],[635,2],[642,1],[660,32]]},"1039":{"position":[[0,3],[4,5],[18,3],[36,5],[46,19],[80,5],[86,3],[97,1],[132,4],[145,14],[168,7],[189,8],[198,23],[222,3],[230,3],[241,4],[307,24],[340,11],[360,11],[380,15],[396,12],[416,37],[462,9],[480,9],[507,3],[519,10]]},"1041":{"position":[[7,5],[15,31],[56,2]]},"1043":{"position":[[5,5]]},"1046":{"position":[[90,35],[366,1],[370,18],[400,3],[404,8],[415,24],[444,19],[464,3],[468,48],[517,3],[521,51],[584,3],[588,8],[599,31],[633,7],[641,3],[645,14],[662,31],[694,3],[698,47],[748,14],[765,6],[774,19]]},"1048":{"position":[[100,5],[286,81]]},"1055":{"position":[[0,5],[105,1],[160,1],[212,1],[256,8],[723,1],[779,1],[869,1],[959,1],[1061,1],[1101,1],[1110,1],[1126,1],[1135,1],[1152,1],[1161,1],[1194,1],[1232,1],[1268,1],[1277,11],[1289,33],[1470,1],[1513,1],[1523,1],[1643,1],[1689,1],[1717,1],[1949,1],[2015,1],[2072,1],[2090,1],[2111,2],[2166,10],[2367,1],[2393,1],[2422,3],[3014,5],[3020,1],[3150,1],[3207,1],[3259,1],[3303,1],[3363,1],[3453,1],[3543,1],[3625,1],[3665,1],[3674,1],[3690,1],[3699,1],[3716,1],[3725,1],[3758,1],[3796,1],[3832,1],[3841,1],[3883,1],[3893,1],[3939,1],[3985,1],[4013,1],[4108,1],[4174,1],[4231,1],[4249,1],[4270,2],[4325,1],[4351,1]]},"1057":{"position":[[130,4],[190,4],[257,4]]},"1061":{"position":[[0,4]]},"1066":{"position":[[0,137]]},"1068":{"position":[[10,8],[19,19],[39,15],[55,21],[77,6],[84,21],[106,6],[113,52],[166,3],[170,32],[203,6],[210,6],[217,16],[234,6],[241,26]]},"1070":{"position":[[244,51]]},"1072":{"position":[[0,3],[87,3],[91,53]]},"1074":{"position":[[0,3],[96,3],[100,53]]},"1076":{"position":[[0,32],[33,82],[116,43],[504,27],[663,17],[681,118]]},"1078":{"position":[[4,33]]},"1080":{"position":[[0,89],[90,157]]},"1084":{"position":[[191,2],[199,8],[242,16],[286,31],[354,31]]},"1086":{"position":[[361,3]]},"1088":{"position":[[12,34],[225,28],[821,29],[856,41],[1154,5],[1388,5]]},"1090":{"position":[[302,11],[314,2],[322,49],[372,1],[379,32],[424,65],[498,87],[594,40],[635,11]]},"1094":{"position":[[4,8]]},"1100":{"position":[[72,1],[161,15],[253,1],[297,1],[335,1],[452,1],[564,1]]},"1104":{"position":[[106,12],[162,1]]},"1106":{"position":[[95,1]]},"1108":{"position":[[107,1],[137,6]]},"1111":{"position":[[139,16]]},"1115":{"position":[[0,24],[25,14],[40,32]]},"1119":{"position":[[24,1],[37,1],[116,1],[307,1],[352,1]]},"1121":{"position":[[22,1],[40,1],[44,1],[52,1],[158,1],[176,1],[180,1],[188,1],[296,1]]},"1124":{"position":[[37,19],[89,1],[189,1]]},"1126":{"position":[[0,4],[317,2],[353,2],[356,2],[707,2],[719,2],[743,2],[777,2],[803,2],[817,2],[832,2],[880,2],[893,1],[948,2],[1001,1],[1033,1],[1064,1],[1121,4],[1176,2],[1228,2],[1236,1],[1253,2],[1266,2],[1269,2],[1345,2],[1442,1],[1454,1],[1496,1],[1518,1],[1541,1],[1588,1],[1638,1],[1685,1],[1710,1],[1744,1],[1776,1],[1821,1],[1871,1]]},"1136":{"position":[[0,150]]},"1138":{"position":[[335,30],[498,38],[537,15],[566,1],[576,1],[593,1],[598,2],[610,1],[614,1],[619,1],[630,1],[634,1]]},"1145":{"position":[[271,1],[494,3],[498,14],[513,32],[546,15]]},"1150":{"position":[[197,1],[249,1],[503,1],[542,1],[771,1],[775,1],[1022,1],[1067,1],[1137,1],[1173,1],[1190,1],[1252,1],[1285,1],[1358,2],[1459,2],[1483,2],[1580,1],[1628,1],[1683,1],[1803,1],[1841,1],[1991,1],[2026,1],[2037,1],[2097,1],[2163,1],[2175,1],[2197,1],[2209,1],[2231,1],[2236,1],[2251,2],[2257,2],[2271,2],[2310,1],[2319,1],[2324,1],[2376,1],[2435,1],[2564,1],[2577,1],[2650,1],[2678,1],[2735,1],[2751,1]]},"1155":{"position":[[0,24],[25,23],[49,5],[55,3]]},"1157":{"position":[[0,26],[179,20],[495,17],[801,16]]},"1159":{"position":[[0,31],[261,10],[341,1]]},"1162":{"position":[[0,88],[89,62]]},"1164":{"position":[[0,115],[116,80],[197,64],[262,47],[310,50]]},"1166":{"position":[[0,78],[79,65]]},"1171":{"position":[[0,35]]},"1175":{"position":[[89,38],[158,1],[306,1]]},"1177":{"position":[[0,4],[24,5]]},"1181":{"position":[[83,1],[102,1],[121,1],[141,1],[160,1],[180,1],[209,1],[267,1],[293,1],[323,1],[388,1],[485,1],[518,1],[524,1],[551,1],[556,1],[589,1],[594,1],[606,3],[610,1],[625,1],[714,1],[762,1],[764,8],[775,1],[862,1],[893,2],[930,1],[1041,1],[1069,1],[1097,1],[1130,3],[1203,3],[1209,1],[1250,1],[1291,1],[1324,3],[1406,3]]},"1183":{"position":[[0,4]]},"1188":{"position":[[213,6]]},"1190":{"position":[[157,19]]},"1196":{"position":[[0,4],[24,5]]},"1199":{"position":[[0,8],[81,6],[90,7],[98,11],[176,3],[249,6],[561,6],[627,20],[753,3]]},"1201":{"position":[[0,10],[264,14],[377,2],[402,2],[405,2],[474,2],[477,2]]},"1205":{"position":[[122,1],[126,1],[139,3],[143,33],[177,17],[195,14]]},"1207":{"position":[[0,4]]},"1211":{"position":[[518,3],[535,3],[553,3],[571,3]]},"1215":{"position":[[0,4],[14,5],[66,3],[113,40]]},"1228":{"position":[[0,5],[389,4],[812,13]]},"1232":{"position":[[0,1],[24,2],[64,39],[116,18],[154,25],[199,19],[219,5],[225,25],[259,14],[274,5],[280,38],[327,1],[338,10],[357,1],[410,5],[424,32],[465,1],[505,46],[560,1],[621,10]]},"1236":{"position":[[790,31],[1558,15],[1602,1],[1628,2],[1647,1]]},"1238":{"position":[[0,8],[13,13],[74,11]]},"1243":{"position":[[0,3],[19,2],[30,9]]},"1245":{"position":[[0,13],[27,2],[45,8],[69,5]]},"1249":{"position":[[9,7],[71,1],[88,1],[90,1],[92,1],[94,1],[130,1],[147,1],[149,1],[151,1],[153,1],[174,8],[198,1],[209,15]]},"1251":{"position":[[0,19],[55,1],[122,1],[230,1],[330,1],[397,1],[502,1],[586,1],[593,4],[605,19],[637,2],[650,19],[674,5],[685,5],[719,2],[748,8],[782,1],[809,5],[824,17],[870,1],[948,1],[1022,1],[1100,1]]},"1253":{"position":[[0,1],[9,2],[20,3],[32,11],[53,8],[124,17],[146,32],[195,17],[220,50]]},"1255":{"position":[[9,1],[31,1],[91,1],[120,1],[159,1],[181,3],[187,3],[237,5],[245,8],[278,33],[312,1],[327,8],[340,8],[351,3],[359,30],[413,14],[430,10],[441,1],[456,9],[590,1],[719,1],[721,1],[734,1],[761,3],[767,6],[774,1],[785,9],[797,5],[805,7],[815,16],[834,13],[850,27],[880,1],[884,7],[912,22],[935,5],[954,6],[1003,5],[1017,10],[1036,10],[1055,5],[1074,30],[1121,6],[1136,28],[1173,13],[1195,14],[1267,6]]},"1257":{"position":[[0,15],[155,5],[170,7],[221,1],[269,1],[293,1],[323,1],[392,1],[505,1],[516,14],[531,1],[587,46],[649,10],[660,3],[666,5],[681,24],[744,33],[803,13],[826,11],[912,6],[921,13],[937,13],[953,44],[998,5],[1012,6],[1029,3],[1118,2],[1134,11],[1154,5],[1177,8],[1210,9],[1228,1],[1277,5],[1298,8]]},"1259":{"position":[[9,7],[37,11],[49,9],[63,2],[79,6],[91,4],[187,30],[218,4],[223,46],[295,7],[306,26],[346,10],[357,5],[366,11],[397,1],[568,8],[751,4],[772,5],[784,10],[798,4],[808,10],[822,1],[874,17],[919,4],[929,7],[951,2],[958,3],[973,1],[987,1],[993,7],[1005,1],[1014,2],[1028,1],[1043,1],[1049,10],[1063,3],[1084,2],[1137,8],[1146,2],[1152,20],[1196,13],[1223,4],[1252,12],[1274,20],[1301,1],[1374,28],[1413,43],[1461,15],[1491,2],[1498,3],[1513,1],[1527,1],[1533,7],[1545,1],[1554,2],[1568,1],[1583,1],[1589,10],[1604,3],[1611,2],[1666,29],[1717,4],[1756,3],[1845,13],[1865,24],[1929,11],[1965,11]]},"1262":{"position":[[0,15],[27,2],[42,12],[65,2],[70,4],[129,9],[172,3],[187,6],[206,7],[254,17],[272,5],[278,9],[298,5],[315,15],[340,1],[344,6],[361,6],[368,8],[409,2],[436,20],[469,34],[504,19],[529,3],[542,5],[572,3],[596,15],[614,3],[635,2],[642,1],[660,32]]},"1265":{"position":[[7,5],[15,31]]},"1267":{"position":[[0,1],[6,14],[29,6],[100,2],[123,12],[156,1],[180,7],[192,35],[263,3],[290,14],[313,1],[323,2],[346,4],[373,8],[389,11],[410,7],[431,32],[464,4],[494,3],[521,12],[541,17],[568,7],[589,11],[627,4],[632,6],[661,7],[679,5],[710,3],[718,16],[745,6],[776,7],[784,3],[792,3],[803,4],[869,24],[902,11],[922,11],[942,15],[958,12],[978,37],[1024,9],[1042,9],[1069,3],[1081,10]]},"1269":{"position":[[66,1],[85,4],[94,15],[118,24],[151,14],[189,1],[213,14],[246,7],[262,8],[279,8],[321,14],[336,1],[360,4],[369,11]]},"1276":{"position":[[29,7]]},"1278":{"position":[[30,1],[41,1],[43,3],[47,1],[181,1],[183,22],[206,1],[278,1],[353,1]]},"1280":{"position":[[30,1],[152,1],[154,22]]},"1282":{"position":[[0,2],[3,14],[40,9]]},"1286":{"position":[[4,12]]},"1290":{"position":[[0,6],[65,1],[148,2],[151,9],[211,1],[412,2],[433,1]]},"1292":{"position":[[5,32]]},"1294":{"position":[[244,14],[293,1],[345,1],[384,1],[391,2],[400,1],[422,3],[495,3],[502,1],[515,1],[537,3],[598,3],[609,1],[614,1],[633,3],[661,1],[676,1],[692,2],[708,1],[723,1],[794,3],[874,2],[877,2],[880,1],[888,2],[891,2],[952,2],[955,2],[958,1],[966,2],[969,2],[1030,2],[1033,2],[1036,1],[1044,2],[1047,2],[1272,69]]},"1298":{"position":[[69,11],[81,1],[98,1],[116,1],[140,1],[158,1],[189,1],[216,1],[218,8],[265,3],[354,10],[365,1],[367,10],[378,1],[380,8],[404,1],[425,1],[427,8],[476,3]]},"1300":{"position":[[0,4]]},"1305":{"position":[[148,12],[209,2],[330,5]]},"1307":{"position":[[0,18]]},"1309":{"position":[[24,1],[26,4],[183,7],[191,1],[193,1],[195,4],[281,7],[289,1]]},"1311":{"position":[[75,13]]},"1313":{"position":[[0,16],[26,16]]},"1317":{"position":[[0,31]]},"1319":{"position":[[39,1],[41,2],[44,1],[46,23],[70,2],[90,2],[93,1],[103,1],[108,2],[111,17],[143,1],[148,2],[151,2],[163,1],[179,1],[191,1],[193,2],[196,13],[215,1],[227,1],[232,1],[250,2],[276,2],[288,1],[290,2],[347,1],[357,1],[375,1],[382,1],[393,1],[400,1],[402,2],[405,9],[438,1],[440,2],[502,1],[514,1],[522,2],[525,26],[552,1],[561,2],[564,6],[571,1],[595,1],[597,2],[648,1],[667,2],[670,6],[677,1]]},"1321":{"position":[[0,14],[33,7],[126,1],[128,2],[131,1],[133,23],[157,2],[177,2],[180,1],[190,1],[195,2],[198,17],[230,1],[235,2],[238,2],[250,1],[266,1],[278,1],[280,2],[283,13],[302,1],[314,1],[319,1],[337,2],[363,2],[375,1],[377,2],[434,1],[444,1],[462,1],[469,1],[480,1],[487,1],[489,2],[492,9],[525,1],[527,2],[589,1],[601,1],[609,2],[612,26],[639,1],[648,2],[651,6],[658,1],[682,1],[684,2],[735,1],[754,2],[757,6],[764,1],[777,1],[800,2],[806,1],[833,1],[854,2],[862,1],[878,1],[899,1],[932,1],[954,1],[966,1],[985,1],[992,2],[1000,1],[1007,1],[1022,1],[1041,2],[1062,1],[1069,2],[1077,1],[1079,1],[1086,2],[1095,1],[1107,1]]},"1326":{"position":[[43,6],[56,2],[92,2]]},"1329":{"position":[[0,7],[8,74],[83,9],[93,90],[184,9],[260,10],[271,46],[318,5],[324,36],[361,16],[378,16],[395,8],[404,33],[467,1],[482,1],[519,3],[552,9],[564,12],[603,9],[615,11],[660,3],[666,10],[677,41],[764,5]]},"1332":{"position":[[0,5],[6,2],[11,6],[22,2],[39,14],[54,7],[62,9],[74,5],[86,1],[91,1],[95,8],[104,7],[112,18],[131,41],[173,43],[217,45]]},"1334":{"position":[[0,5],[6,4],[11,30],[42,6],[49,40],[107,4],[112,1],[114,1]]},"1337":{"position":[[0,51],[52,16],[128,12],[141,4],[146,10],[157,12],[170,9],[180,63],[248,14],[263,13],[277,15],[361,20],[386,72],[459,13],[473,43],[517,68],[586,87],[674,14],[689,9],[699,49],[749,12],[762,28],[791,14],[917,55]]},"1339":{"position":[[0,7],[8,74],[83,9],[93,90],[184,9],[260,10],[271,46],[318,5],[324,36],[361,16],[378,16],[395,8],[404,33],[467,1],[482,1],[519,3],[552,9],[564,12],[603,9],[615,11],[660,3],[666,10],[677,41],[764,5]]},"1345":{"position":[[140,15],[156,30],[187,6]]},"1347":{"position":[[162,10],[173,6],[180,6],[187,12],[200,4]]},"1349":{"position":[[0,31],[81,48]]},"1354":{"position":[[600,20],[725,14],[789,10]]},"1356":{"position":[[11,7]]},"1358":{"position":[[3,5],[62,24],[87,33],[198,4],[203,28]]},"1368":{"position":[[134,38]]},"1372":{"position":[[146,6]]},"1374":{"position":[[0,48],[105,15],[121,91]]},"1379":{"position":[[3,7],[47,7]]},"1381":{"position":[[3,7],[47,7]]},"1383":{"position":[[4,14]]},"1388":{"position":[[0,59],[60,30],[91,30]]},"1390":{"position":[[0,4],[5,4],[193,2],[196,13]]},"1392":{"position":[[0,16],[69,1]]},"1398":{"position":[[4,5],[10,8],[19,12],[32,7],[40,4]]},"1400":{"position":[[0,51],[52,16]]},"1402":{"position":[[0,12],[13,4],[18,10],[29,12],[42,9],[52,63],[120,14],[135,13],[149,15],[233,20],[258,72],[331,13],[345,43],[389,68],[458,87],[546,14],[561,9],[571,49],[621,12],[634,28],[663,14],[789,55]]}}}],["0",{"_index":19,"t":{"705":{"position":[[90,2],[100,2],[144,2],[160,2],[208,4],[231,2],[365,2]]},"711":{"position":[[115,2],[129,2],[210,2]]},"713":{"position":[[96,2],[167,2],[183,2]]},"715":{"position":[[161,24],[186,3],[257,2],[260,3]]},"717":{"position":[[86,3],[142,1],[152,2],[367,1],[379,2],[468,2]]},"719":{"position":[[48,22]]},"746":{"position":[[114,7],[172,7]]},"761":{"position":[[0,17]]},"835":{"position":[[53,2]]},"843":{"position":[[1605,2],[1659,2]]},"861":{"position":[[253,1],[273,1],[839,1]]},"864":{"position":[[842,2],[913,2],[1021,2],[1290,2],[1346,2],[1454,2],[1993,2],[2282,2],[2374,2]]},"866":{"position":[[2511,2]]},"868":{"position":[[92,1],[121,1],[792,2],[808,2],[3089,3],[3209,2]]},"871":{"position":[[382,2],[724,2],[1007,2],[2131,2]]},"873":{"position":[[283,2],[512,2],[717,2],[1675,2]]},"875":{"position":[[824,2]]},"877":{"position":[[50,5]]},"895":{"position":[[2156,5]]},"1002":{"position":[[1518,39],[1631,2]]},"1029":{"position":[[1273,2]]},"1031":{"position":[[223,2]]},"1055":{"position":[[167,2],[173,3],[177,3],[184,2],[799,2],[813,3],[817,3],[824,3],[835,4],[889,2],[900,2],[903,3],[907,3],[911,2],[918,3],[982,3],[986,3],[993,3],[1001,2],[1015,4],[3214,2],[3220,3],[3224,3],[3231,2],[3383,2],[3397,3],[3401,3],[3408,3],[3419,4],[3473,2],[3484,2],[3487,3],[3491,3],[3495,2],[3502,3],[3566,3],[3570,3],[3577,3],[3585,2],[3599,4]]},"1119":{"position":[[169,14]]},"1121":{"position":[[38,1],[46,3],[61,3],[174,1],[182,3],[197,3]]},"1138":{"position":[[568,1],[578,1],[601,1]]},"1150":{"position":[[2260,1]]},"1152":{"position":[[44,74]]},"1175":{"position":[[308,1]]},"1181":{"position":[[958,2],[982,3]]},"1236":{"position":[[1518,39],[1631,2]]},"1255":{"position":[[1274,2]]},"1257":{"position":[[223,2]]},"1278":{"position":[[131,5]]},"1280":{"position":[[56,5],[62,5]]},"1294":{"position":[[648,3],[1217,2],[1229,2],[1253,2]]},"1319":{"position":[[105,2],[145,2],[165,2],[244,5],[359,5],[443,33],[600,25]]},"1321":{"position":[[192,2],[232,2],[252,2],[331,5],[446,5],[530,33],[687,25],[857,4],[894,4],[995,4],[1104,2]]}}}],["0&d(u,v)<d_1\\end{cases}\\tag{22}h(u,v)=⎩⎨⎧​1d0​−d1​d(u,v)−d1​​0​d(u,v)>d0​d1​≤d(u,v)≤d0​d(u,v)<d1​​(22",{"_index":1396,"t":{"928":{"position":[[688,102]]}}}],["0&d(u,v)>d_0\\end{cases}\\tag{14}h(u,v)={10​d(u,v)≤d0​d(u,v)>d0​​(14",{"_index":1361,"t":{"926":{"position":[[142,67]]}}}],["0&d(u,v)>d_1\\end{cases}\\tag{18}h(u,v)=⎩⎨⎧​1d0​−d1​d(u,v)−d1​​0​d(u,v)<d0​d0​≤d(u,v)≤d1​d(u,v)>d1​​(18",{"_index":1381,"t":{"926":{"position":[[1172,102]]}}}],["0&d(u,v)\\leq",{"_index":1384,"t":{"928":{"position":[[97,12]]}}}],["0.1",{"_index":2500,"t":{"1181":{"position":[[826,5],[850,4]]}}}],["0.1959",{"_index":1829,"t":{"1033":{"position":[[1099,8]]},"1259":{"position":[[1096,8]]}}}],["0.2",{"_index":2503,"t":{"1181":{"position":[[855,6]]}}}],["0.2042",{"_index":1827,"t":{"1033":{"position":[[1079,7]]},"1259":{"position":[[1076,7]]}}}],["0.25",{"_index":344,"t":{"826":{"position":[[188,5]]}}}],["0.3",{"_index":2497,"t":{"1181":{"position":[[802,5]]}}}],["0.7",{"_index":2501,"t":{"1181":{"position":[[832,4]]}}}],["0.8",{"_index":2498,"t":{"1181":{"position":[[814,4],[837,5]]}}}],["0.88",{"_index":2502,"t":{"1181":{"position":[[843,6]]}}}],["0.9",{"_index":2428,"t":{"1150":{"position":[[2737,4]]},"1181":{"position":[[797,4],[808,5]]}}}],["0.99",{"_index":2499,"t":{"1181":{"position":[[819,6]]}}}],["01",{"_index":698,"t":{"861":{"position":[[500,2]]}}}],["012",{"_index":691,"t":{"861":{"position":[[370,3]]}}}],["0x3f3f3f3f",{"_index":303,"t":{"821":{"position":[[489,10]]},"875":{"position":[[131,10]]}}}],["0xf",{"_index":686,"t":{"861":{"position":[[301,3]]}}}],["0xff;//d",{"_index":1071,"t":{"879":{"position":[[294,8],[1506,8]]}}}],["0维度的相加过程中出现了shape为(3",{"_index":2787,"t":{"1294":{"position":[[1080,24]]}}}],["0阶矩和1",{"_index":1410,"t":{"942":{"position":[[167,33]]}}}],["1",{"_index":2,"t":{"703":{"position":[[64,1]]},"705":{"position":[[243,2],[331,2],[386,1]]},"713":{"position":[[63,21]]},"717":{"position":[[200,2],[240,2],[293,3]]},"736":{"position":[[91,2]]},"746":{"position":[[76,7],[93,10]]},"761":{"position":[[18,12]]},"767":{"position":[[78,57]]},"821":{"position":[[742,3],[772,2],[775,2]]},"839":{"position":[[198,4]]},"843":{"position":[[1597,2]]},"861":{"position":[[264,8],[342,1],[573,1],[605,1],[636,1],[739,1],[769,1],[807,1]]},"864":{"position":[[213,2],[1315,3],[1611,3],[1630,1],[1774,3],[2109,3]]},"866":{"position":[[1645,3],[1747,3]]},"868":{"position":[[76,1],[105,1],[143,1],[1055,2],[2864,3]]},"871":{"position":[[862,3],[923,3],[1935,3],[1985,3]]},"873":{"position":[[617,3],[659,3],[1576,3],[1613,3]]},"875":{"position":[[370,2],[568,1],[797,3]]},"922":{"position":[[254,1],[257,1],[260,1],[269,1],[272,1],[275,1],[298,1],[303,1],[306,1],[311,1],[314,1],[319,1]]},"1002":{"position":[[1669,2]]},"1025":{"position":[[124,3],[399,3],[815,3],[950,3],[1102,3]]},"1029":{"position":[[951,1]]},"1039":{"position":[[105,1],[254,12]]},"1046":{"position":[[364,1],[389,10],[413,1]]},"1055":{"position":[[162,4],[170,2],[191,3],[195,2],[198,2],[201,3],[802,3],[806,3],[810,2],[821,2],[828,3],[832,2],[892,3],[896,3],[914,3],[922,2],[925,4],[997,3],[1008,3],[1012,2],[1608,9],[1714,2],[3209,4],[3217,2],[3238,3],[3242,2],[3245,2],[3248,3],[3386,3],[3390,3],[3394,2],[3405,2],[3412,3],[3416,2],[3476,3],[3480,3],[3498,3],[3506,2],[3509,4],[3581,3],[3592,3],[3596,2],[4010,2]]},"1108":{"position":[[87,1]]},"1119":{"position":[[132,2],[184,13]]},"1121":{"position":[[186,1]]},"1126":{"position":[[1564,3],[1628,3],[1799,3]]},"1140":{"position":[[22,20]]},"1150":{"position":[[404,2],[407,2],[2233,2],[2288,2],[2321,2],[2437,2]]},"1181":{"position":[[961,3],[1243,4],[1382,4]]},"1236":{"position":[[1669,2]]},"1251":{"position":[[124,3],[399,3],[815,3],[950,3],[1102,3]]},"1255":{"position":[[952,1]]},"1267":{"position":[[321,1],[816,12]]},"1294":{"position":[[0,30],[409,2],[441,5],[521,2],[555,3],[652,3],[663,3]]},"1298":{"position":[[100,3],[269,3],[480,3]]},"1321":{"position":[[889,2]]},"1332":{"position":[[20,1],[25,13],[93,1],[263,37]]},"1347":{"position":[[134,16]]},"1354":{"position":[[35,7]]},"1356":{"position":[[0,2]]},"1358":{"position":[[0,2]]},"1362":{"position":[[70,2],[190,2]]},"1364":{"position":[[84,2]]},"1366":{"position":[[91,2]]},"1372":{"position":[[100,2]]},"1379":{"position":[[0,2]]},"1381":{"position":[[0,2]]},"1392":{"position":[[46,1]]}}}],["1)&&(countout(1)==n",{"_index":797,"t":{"866":{"position":[[1625,19]]}}}],["1),indegree(0),outdegree(0",{"_index":354,"t":{"826":{"position":[[429,27]]},"866":{"position":[[304,27]]}}}],["1)[1,−1)的索引区间中的元素值都会加1，而对于某次刷漆终点e的下一个索引为e+1的元素值由于−1",{"_index":68,"t":{"719":{"position":[[193,51]]}}}],["1)[\\frac{d(u,v)}{d_0}]^{2n}}\\tag{16}h(u,v)=1+(2​−1)[d0​d(u,v)​]2n1​(16",{"_index":1366,"t":{"926":{"position":[[461,71]]}}}],["1)[\\frac{d_0}{d(u,v)}]^{2n}}\\tag{20}h(u,v)=1+(2​−1)[d(u,v)d0​​]2n1​(20",{"_index":1388,"t":{"928":{"position":[[273,71]]}}}],["1)\\tag{13}s(k)=ceil(sk​×l−1)(13",{"_index":1349,"t":{"920":{"position":[[210,32]]}}}],["1)的每一列复制三次为(3",{"_index":2790,"t":{"1294":{"position":[[1144,14]]}}}],["1)的矩阵与shape为(1",{"_index":2788,"t":{"1294":{"position":[[1105,15]]}}}],["1+max(getheight(t[rt].l),getheight(t[rt].r",{"_index":987,"t":{"871":{"position":[[1017,45]]},"873":{"position":[[727,45]]}}}],["1,0",{"_index":321,"t":{"821":{"position":[[778,4]]}}}],["1,0,1,0,0,1,0",{"_index":319,"t":{"821":{"position":[[727,14]]}}}],["1,0,1,1",{"_index":323,"t":{"821":{"position":[[790,8]]}}}],["1,0,n",{"_index":1016,"t":{"871":{"position":[[1929,5],[1979,5]]},"873":{"position":[[1570,5],[1607,5]]},"875":{"position":[[791,5]]}}}],["1,1,0",{"_index":322,"t":{"821":{"position":[[783,6]]}}}],["1,1,0,1,1",{"_index":324,"t":{"821":{"position":[[799,11]]}}}],["1,l2+1,l2+p2",{"_index":1044,"t":{"875":{"position":[[475,14]]}}}],["1,lb+1,lb+p2",{"_index":978,"t":{"871":{"position":[[508,14]]},"873":{"position":[[377,14]]}}}],["1,lb,lb+p2",{"_index":983,"t":{"871":{"position":[[851,10]]},"873":{"position":[[606,10]]}}}],["1.0",{"_index":298,"t":{"821":{"position":[[454,4]]}}}],["1.51",{"_index":1099,"t":{"879":{"position":[[876,4]]}}}],["1.vector",{"_index":405,"t":{"839":{"position":[[22,8]]}}}],["10",{"_index":25,"t":{"705":{"position":[[196,2]]},"711":{"position":[[142,2],[151,3],[160,3]]},"713":{"position":[[109,2],[118,3],[136,3],[219,2]]},"821":{"position":[[683,3]]},"826":{"position":[[121,3],[287,3]]},"831":{"position":[[144,33]]},"1033":{"position":[[304,2],[797,2],[821,2]]},"1119":{"position":[[335,3]]},"1121":{"position":[[324,3]]},"1150":{"position":[[850,4],[2742,2]]},"1259":{"position":[[303,2],[795,2],[819,2]]},"1294":{"position":[[733,6]]},"1319":{"position":[[229,2]]},"1321":{"position":[[316,2]]}}}],["10,3.141590，\"method",{"_index":335,"t":{"826":{"position":[[38,19]]}}}],["10.multimap",{"_index":420,"t":{"839":{"position":[[567,11]]}}}],["100",{"_index":387,"t":{"831":{"position":[[77,42]]},"868":{"position":[[281,3]]},"895":{"position":[[687,4]]},"1119":{"position":[[325,4],[330,4]]},"1121":{"position":[[314,4],[319,4]]}}}],["1000",{"_index":41,"t":{"711":{"position":[[72,5]]},"1033":{"position":[[86,4],[277,18],[927,4]]},"1259":{"position":[[86,4],[276,18],[924,4]]}}}],["10000",{"_index":1814,"t":{"1033":{"position":[[271,5]]},"1259":{"position":[[270,5]]}}}],["1000000007",{"_index":1026,"t":{"875":{"position":[[154,10]]}}}],["1010",{"_index":692,"t":{"861":{"position":[[390,7],[412,4],[462,4]]}}}],["106",{"_index":1245,"t":{"895":{"position":[[957,4]]}}}],["108",{"_index":2122,"t":{"1104":{"position":[[164,3]]}}}],["10px",{"_index":2758,"t":{"1290":{"position":[[367,5]]}}}],["10的vector，初始化为3",{"_index":97,"t":{"728":{"position":[[24,23]]}}}],["11",{"_index":925,"t":{"868":{"position":[[2726,2]]}}}],["11.hash_set",{"_index":421,"t":{"839":{"position":[[597,11]]}}}],["1111",{"_index":688,"t":{"861":{"position":[[321,6]]}}}],["1125",{"_index":1727,"t":{"1025":{"position":[[195,5],[211,5],[467,5]]},"1251":{"position":[[195,5],[211,5],[467,5]]}}}],["11×1",{"_index":2929,"t":{"1349":{"position":[[150,18]]}}}],["11×1卷积核，每个filter对上一步的featur",{"_index":2130,"t":{"1108":{"position":[[14,28]]}}}],["12",{"_index":301,"t":{"821":{"position":[[474,2]]},"861":{"position":[[381,8]]},"1108":{"position":[[109,2]]},"1294":{"position":[[740,6]]}}}],["12.hash_multiset",{"_index":423,"t":{"839":{"position":[[629,16]]}}}],["120",{"_index":2347,"t":{"1150":{"position":[[780,5]]}}}],["120，210都是30的倍数，由于要找最大的，所以答案是210",{"_index":5,"t":{"703":{"position":[[108,33]]}}}],["13",{"_index":2774,"t":{"1294":{"position":[[747,4],[758,5]]}}}],["13.hash_map",{"_index":424,"t":{"839":{"position":[[666,11]]}}}],["1313×13个grid",{"_index":2961,"t":{"1356":{"position":[[75,12]]}}}],["14",{"_index":2775,"t":{"1294":{"position":[[752,5],[764,4],[775,5]]}}}],["14.hash_multimap",{"_index":425,"t":{"839":{"position":[[698,16]]}}}],["148",{"_index":1260,"t":{"895":{"position":[[1237,8]]}}}],["149",{"_index":1221,"t":{"895":{"position":[[462,8]]}}}],["15",{"_index":2776,"t":{"1294":{"position":[[769,5],[781,4]]}}}],["16",{"_index":2344,"t":{"1150":{"position":[[669,3]]},"1294":{"position":[[786,7]]}}}],["18446744073709551615ull",{"_index":310,"t":{"821":{"position":[[602,24]]}}}],["1?'\\n",{"_index":998,"t":{"871":{"position":[[1324,8]]},"873":{"position":[[1026,8]]}}}],["1\\eta",{"_index":2109,"t":{"1100":{"position":[[545,10]]}}}],["1\\mu_1μ1​和μ2\\mu_2μ2​分别是第一个和第二个高斯分布的均值向量；σ1\\sigma_1σ1​和σ2\\sigma_2σ2​则是它们的协方差矩阵；tr(⋅)\\mathrm{tr}(\\cdot)tr",{"_index":1485,"t":{"967":{"position":[[592,119]]}}}],["1][b,c,1,1]的tensor",{"_index":2972,"t":{"1362":{"position":[[73,43]]}}}],["1][b,c,1,1]的tensor，再送入共享的多层感知机网络进行降维再升维，最后将二者相加再经过sigmoid",{"_index":2976,"t":{"1364":{"position":[[87,72]]}}}],["1][b,c,1,1]的tensor，该tensor",{"_index":2990,"t":{"1372":{"position":[[103,37]]}}}],["1]，即reduce了dim=1",{"_index":2495,"t":{"1181":{"position":[[742,19]]}}}],["1_44=fd.img",{"_index":1170,"t":{"881":{"position":[[629,12]]},"895":{"position":[[1685,12]]}}}],["1_44=fd_aug.img",{"_index":1172,"t":{"881":{"position":[[668,16]]},"895":{"position":[[1724,16]]}}}],["1e",{"_index":300,"t":{"821":{"position":[[471,2]]}}}],["1e5",{"_index":314,"t":{"821":{"position":[[677,3]]}}}],["1e9",{"_index":316,"t":{"821":{"position":[[693,3]]},"1002":{"position":[[1635,4]]},"1236":{"position":[[1635,4]]}}}],["1k−1",{"_index":2263,"t":{"1131":{"position":[[117,4]]}}}],["1}=\\frac{1}{\\sqrt{\\alpha_{t}}}\\left(\\mathbf{x}_{t",{"_index":1674,"t":{"1010":{"position":[[254,50]]}}}],["1}\\sum_{v=0}^{n",{"_index":1340,"t":{"908":{"position":[[1430,15]]}}}],["1}\\sum_{y=0}^{n",{"_index":1336,"t":{"908":{"position":[[1219,15]]}}}],["1}a−1",{"_index":2905,"t":{"1337":{"position":[[122,5]]},"1400":{"position":[[122,5]]}}}],["1}f(u)e^{j\\frac{2\\pi",{"_index":1333,"t":{"908":{"position":[[1074,20]]}}}],["1}f(u,v)e^{j2\\pi",{"_index":1341,"t":{"908":{"position":[[1446,16]]}}}],["1}f(x)e",{"_index":1329,"t":{"908":{"position":[[938,9]]}}}],["1}f(x,y)e",{"_index":1337,"t":{"908":{"position":[[1235,11]]}}}],["1}key0,...,keyn−1,query0,...,queryn−1query^{0",{"_index":1979,"t":{"1057":{"position":[[142,47]]}}}],["1}query0,...,queryn−1以及value0,...,valuen−1value^{0",{"_index":1981,"t":{"1057":{"position":[[204,52]]}}}],["1}value0,...,valuen−1",{"_index":1983,"t":{"1057":{"position":[[271,22]]}}}],["1}xt−1​代表当前步骤即将输出的降噪后的图像，ϵθ\\epsilon_\\thetaϵθ​代表nois",{"_index":1679,"t":{"1010":{"position":[[539,52]]}}}],["1×11",{"_index":2129,"t":{"1108":{"position":[[0,6]]},"1349":{"position":[[130,12]]}}}],["1×1×3×4=12(3)1",{"_index":2131,"t":{"1108":{"position":[[65,14]]}}}],["1ηλ<1",{"_index":2110,"t":{"1100":{"position":[[566,15]]}}}],["1−1。这样在所有输入结束后的计算前缀和阶段，在每一个值为[1,−1)[1",{"_index":67,"t":{"719":{"position":[[153,38]]}}}],["1−1加上之前元素所累积的1",{"_index":70,"t":{"719":{"position":[[261,42]]}}}],["1−1而抵消影响（自身值为−1",{"_index":69,"t":{"719":{"position":[[245,15]]}}}],["1−σ)(2",{"_index":2151,"t":{"1119":{"position":[[160,8]]}}}],["1−σ)(2)\\frac{{\\rm",{"_index":2146,"t":{"1119":{"position":[[77,18]]}}}],["1个filter，其中包含3个kernel。每个kernel分别对输入图像的3",{"_index":2124,"t":{"1106":{"position":[[0,55]]}}}],["1，即n0",{"_index":2900,"t":{"1332":{"position":[[80,5]]}}}],["1：a为（4，5）的二维数组，b为（4，1）的二维数组，其中一方维度为1",{"_index":2763,"t":{"1294":{"position":[[141,55]]}}}],["2",{"_index":125,"t":{"736":{"position":[[99,2]]},"742":{"position":[[188,18]]},"839":{"position":[[207,4]]},"864":{"position":[[1808,3],[2199,3]]},"868":{"position":[[163,1]]},"922":{"position":[[262,1],[264,1],[266,1],[300,1],[308,1],[316,1]]},"1031":{"position":[[1010,1]]},"1039":{"position":[[275,23]]},"1055":{"position":[[181,2],[187,3],[979,2],[3228,2],[3234,3],[3563,2]]},"1126":{"position":[[1657,3],[1840,3]]},"1157":{"position":[[474,20]]},"1181":{"position":[[976,2],[979,2],[1060,2],[1229,2],[1240,2],[1340,2],[1379,2]]},"1257":{"position":[[1010,1]]},"1267":{"position":[[475,1],[837,23]]},"1294":{"position":[[447,6],[559,5],[656,4],[667,3],[678,3]]},"1298":{"position":[[104,2],[283,3],[484,2]]},"1321":{"position":[[901,2],[946,3]]},"1332":{"position":[[72,1]]},"1345":{"position":[[5,1]]},"1354":{"position":[[786,2]]},"1356":{"position":[[8,2]]},"1358":{"position":[[195,2]]},"1379":{"position":[[44,2]]},"1381":{"position":[[44,2]]}}}],["2)中，当i,ji,ji,j",{"_index":2439,"t":{"1157":{"position":[[426,47]]}}}],["2.2960",{"_index":1826,"t":{"1033":{"position":[[1070,8]]},"1259":{"position":[[1067,8]]}}}],["2.6420",{"_index":1828,"t":{"1033":{"position":[[1090,8]]},"1259":{"position":[[1087,8]]}}}],["2.95.2",{"_index":1230,"t":{"895":{"position":[[658,6]]}}}],["2.list",{"_index":406,"t":{"839":{"position":[[51,6]]}}}],["20",{"_index":844,"t":{"868":{"position":[[354,2]]}}}],["20,\"abc",{"_index":110,"t":{"730":{"position":[[21,11]]}}}],["200",{"_index":1176,"t":{"881":{"position":[[743,3]]},"895":{"position":[[1799,3]]}}}],["2001,2003,2004",{"_index":1086,"t":{"879":{"position":[[682,14]]}}}],["2003",{"_index":1090,"t":{"879":{"position":[[752,5]]}}}],["2004",{"_index":1094,"t":{"879":{"position":[[821,5]]}}}],["201",{"_index":3,"t":{"703":{"position":[[66,14],[142,8]]}}}],["2019",{"_index":1840,"t":{"1033":{"position":[[1704,4]]},"1188":{"position":[[356,5]]},"1259":{"position":[[1701,4]]}}}],["201，210，012，021，102，120",{"_index":4,"t":{"703":{"position":[[81,26]]}}}],["201，让数字随意组合，是否能组合出30的倍数，如果能够组合成30",{"_index":1,"t":{"703":{"position":[[4,59]]}}}],["2020",{"_index":2562,"t":{"1188":{"position":[[491,5]]}}}],["2021",{"_index":2577,"t":{"1188":{"position":[[669,5],[814,5]]}}}],["2021】transform",{"_index":1542,"t":{"981":{"position":[[44,21]]},"1215":{"position":[[44,21]]}}}],["2022发表的diffusionclip使用了diffusion模型代替nada中的stylegan",{"_index":2590,"t":{"1188":{"position":[[952,65]]}}}],["2022的文章few",{"_index":2527,"t":{"1183":{"position":[[68,10]]}}}],["2023",{"_index":2523,"t":{"1183":{"position":[[13,4]]}}}],["20px",{"_index":2756,"t":{"1290":{"position":[[327,5]]}}}],["210",{"_index":6,"t":{"703":{"position":[[151,8]]}}}],["2147483647",{"_index":306,"t":{"821":{"position":[[529,11]]}}}],["256",{"_index":2426,"t":{"1150":{"position":[[2652,3]]}}}],["27",{"_index":2126,"t":{"1106":{"position":[[97,2]]}}}],["28",{"_index":2331,"t":{"1150":{"position":[[410,3],[414,3]]}}}],["2\\left(\\sigma_1\\sigma_2\\right)^{\\frac12}\\right)\\tag{1}fid=∥μ1​−μ2​∥22​+tr(σ1​+σ2​−2(σ1​σ2​)21​)(1",{"_index":1484,"t":{"967":{"position":[[493,98]]}}}],["2型文法（上下文无关语法，cfg",{"_index":197,"t":{"771":{"position":[[0,32]]}}}],["2型文法，又称上下文无关文法（context",{"_index":177,"t":{"761":{"position":[[31,22]]}}}],["2的top",{"_index":3001,"t":{"1392":{"position":[[51,8]]}}}],["2的整数次幂表示，如大多图像为彩色rgb图像，256个灰度级，位深度为8（28=2562^8=25628=256），则对于分辨率为256×256的图像来说，需要256×256×3×8位表示，即每一个像素实际上使用24",{"_index":1292,"t":{"900":{"position":[[284,118]]}}}],["2（stanford",{"_index":2053,"t":{"1088":{"position":[[726,10]]}}}],["2，iter",{"_index":1823,"t":{"1033":{"position":[[978,11],[1518,11]]},"1259":{"position":[[975,11],[1515,11]]}}}],["2，抹除所有置信度更小的其iou超过阈值的bbox",{"_index":2955,"t":{"1354":{"position":[[681,39]]}}}],["3",{"_index":149,"t":{"744":{"position":[[64,2]]},"833":{"position":[[26,2]]},"839":{"position":[[214,5]]},"864":{"position":[[1791,3],[2217,3],[2235,3]]},"1046":{"position":[[631,1],[660,1],[746,1],[772,1]]},"1055":{"position":[[146,3],[990,2],[1004,3],[1196,3],[1200,2],[1234,3],[1238,2],[1270,3],[1274,2],[3193,3],[3574,2],[3588,3],[3760,3],[3764,2],[3798,3],[3802,2],[3834,3],[3838,2]]},"1104":{"position":[[142,1],[151,1]]},"1106":{"position":[[77,1],[93,1]]},"1108":{"position":[[96,1]]},"1126":{"position":[[1561,2],[1568,3],[1796,2],[1803,3]]},"1181":{"position":[[118,2],[157,2],[287,3],[505,2],[508,2],[511,4],[520,3],[553,2],[591,2],[596,3],[600,2],[603,2],[868,2],[1063,3],[1232,3],[1236,3],[1343,4]]},"1290":{"position":[[88,3]]},"1294":{"position":[[364,3],[368,3],[402,3],[406,2],[454,6],[517,3],[524,2],[565,5],[671,4],[682,3],[1182,12]]},"1298":{"position":[[107,2],[297,3],[487,2]]},"1356":{"position":[[19,2]]},"1358":{"position":[[232,2]]}}}],["3)(3,3)，因此每个权重矩阵的形状应该是(4,3)(4",{"_index":1897,"t":{"1055":{"position":[[352,30]]}}}],["3)(4,3)。为了统一性分析，计key，query以及value各向量维度为numnumnum",{"_index":1898,"t":{"1055":{"position":[[383,49]]}}}],["3)中的a,ba,ba,b可缩小范围，并不用来实现全连接，此时a,ba,ba,b代表着卷积核的感受野，即kernel",{"_index":2442,"t":{"1157":{"position":[[698,97]]}}}],["3)的每一行复制三次为(3",{"_index":2792,"t":{"1294":{"position":[[1167,14]]}}}],["3)的矩阵相加的情况，此时进行广播，将(3",{"_index":2789,"t":{"1294":{"position":[[1121,22]]}}}],["3)，将(1",{"_index":2791,"t":{"1294":{"position":[[1159,7]]}}}],["3.14159);//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p",{"_index":390,"t":{"831":{"position":[[197,63]]}}}],["3.141590",{"_index":339,"t":{"826":{"position":[[139,9]]}}}],["3.dequ",{"_index":407,"t":{"839":{"position":[[77,7]]}}}],["30",{"_index":27,"t":{"705":{"position":[[225,2]]}}}],["300",{"_index":1824,"t":{"1033":{"position":[[992,3],[1048,3],[1532,3],[1588,3]]},"1259":{"position":[[989,3],[1045,3],[1529,3],[1585,3]]}}}],["300000",{"_index":1178,"t":{"881":{"position":[[770,6]]},"895":{"position":[[1826,6]]}}}],["30]的tensor",{"_index":2950,"t":{"1354":{"position":[[454,17]]}}}],["30]的tensor（包含所有预测框的坐标、置信度和类别结果），通过解析输出的tensor",{"_index":2936,"t":{"1354":{"position":[[100,51]]}}}],["32",{"_index":682,"t":{"861":{"position":[[213,3]]}}}],["320",{"_index":1726,"t":{"1025":{"position":[[190,4],[206,4],[462,4],[478,4]]},"1251":{"position":[[190,4],[206,4],[462,4],[478,4]]}}}],["32，iter",{"_index":1825,"t":{"1033":{"position":[[1033,12],[1573,12]]},"1259":{"position":[[1030,12],[1570,12]]}}}],["33×3卷积核，padding=1,stride=1padding=1",{"_index":2117,"t":{"1102":{"position":[[101,36]]}}}],["33×3卷积的消融实验发现，7×77",{"_index":2982,"t":{"1368":{"position":[[96,18]]}}}],["35deg",{"_index":2750,"t":{"1290":{"position":[[253,6]]}}}],["3][5,5,3",{"_index":2112,"t":{"1102":{"position":[[27,12]]}}}],["3]图像，输出[7",{"_index":2935,"t":{"1354":{"position":[[86,10]]}}}],["3×33",{"_index":2115,"t":{"1102":{"position":[[87,6]]}}}],["3×3×3×4=108(1)3",{"_index":2121,"t":{"1104":{"position":[[119,15]]}}}],["3×3××3=27(2)3",{"_index":2125,"t":{"1106":{"position":[[56,13]]}}}],["3个权重向量做乘法得到3个新的向量，分别为key，query以及value。在本例中将新的向量维度设为3，由于输出的k、q、v矩阵大小均为(3,3)(3",{"_index":1896,"t":{"1055":{"position":[[265,86]]}}}],["3型文法，又称正规文法（regular",{"_index":185,"t":{"761":{"position":[[245,19]]}}}],["3科成绩（假设年级只有a班和b",{"_index":2476,"t":{"1181":{"position":[[211,40]]}}}],["4",{"_index":205,"t":{"793":{"position":[[0,11]]},"861":{"position":[[334,1],[404,1],[454,1]]},"864":{"position":[[1825,3],[2127,3]]},"1055":{"position":[[150,2],[3197,2]]},"1104":{"position":[[160,1]]},"1108":{"position":[[105,1]]},"1181":{"position":[[284,2],[864,3],[1284,4],[1401,4]]},"1294":{"position":[[461,5],[571,3],[686,5]]}}}],["4.stack",{"_index":411,"t":{"839":{"position":[[274,7]]}}}],["40px",{"_index":2759,"t":{"1290":{"position":[[407,4]]}}}],["448",{"_index":2934,"t":{"1354":{"position":[[73,7],[81,4]]}}}],["4696",{"_index":1735,"t":{"1025":{"position":[[483,5]]},"1251":{"position":[[483,5]]}}}],["49406",{"_index":1725,"t":{"1025":{"position":[[181,8],[453,8]]},"1251":{"position":[[181,8],[453,8]]}}}],["49407",{"_index":1729,"t":{"1025":{"position":[[217,6],[489,6]]},"1251":{"position":[[217,6],[489,6]]}}}],["4][5,5,4]的featur",{"_index":2114,"t":{"1102":{"position":[[65,17]]}}}],["4个filter（输出通道为4），每个filter3个kernel（输入通道为3",{"_index":2119,"t":{"1104":{"position":[[0,45]]}}}],["4邻域n4(p)n_4(p)n4​(p)即该像素上下左右的四个点，8邻域n8(p)n_8(p)n8​(p)，对角邻域nd(p)n_d(p)nd​(p",{"_index":1293,"t":{"902":{"position":[[0,76]]}}}],["5",{"_index":749,"t":{"864":{"position":[[1842,3],[1859,3],[2145,3],[2163,3],[2181,3]]},"1102":{"position":[[24,2],[62,2]]},"1148":{"position":[[97,40]]},"1150":{"position":[[773,1],[777,2],[2254,2]]},"1181":{"position":[[1088,2],[1270,2],[1281,2],[1359,2],[1398,2]]},"1294":{"position":[[467,6],[575,5]]}}}],["5.queue",{"_index":413,"t":{"839":{"position":[[334,7]]}}}],["5000",{"_index":1820,"t":{"1033":{"position":[[805,4],[871,4]]},"1259":{"position":[[803,4],[869,4]]}}}],["50000",{"_index":1819,"t":{"1033":{"position":[[780,5]]},"1259":{"position":[[778,5]]}}}],["512",{"_index":1743,"t":{"1025":{"position":[[958,4],[1110,4]]},"1029":{"position":[[65,4],[106,4],[174,4],[336,3],[355,3],[466,3]]},"1251":{"position":[[958,4],[1110,4]]},"1255":{"position":[[65,4],[106,4],[174,4],[336,3],[355,3],[466,3]]}}}],["512是clip中的n_dim，token_embed",{"_index":1744,"t":{"1025":{"position":[[963,41],[1115,41]]},"1251":{"position":[[963,41],[1115,41]]}}}],["539",{"_index":1728,"t":{"1025":{"position":[[201,4],[473,4]]},"1251":{"position":[[201,4],[473,4]]}}}],["54、probabilist",{"_index":2615,"t":{"1196":{"position":[[30,16]]}}}],["58",{"_index":1836,"t":{"1033":{"position":[[1617,3]]},"1259":{"position":[[1614,3]]}}}],["586",{"_index":3003,"t":{"1392":{"position":[[71,5]]}}}],["594",{"_index":3002,"t":{"1392":{"position":[[60,8]]}}}],["6",{"_index":751,"t":{"864":{"position":[[1876,3],[1893,3]]},"868":{"position":[[2724,1]]},"881":{"position":[[1044,8]]},"1046":{"position":[[368,1],[573,10],[597,1],[763,1]]},"1150":{"position":[[571,2]]},"1181":{"position":[[405,3],[1091,3],[1273,3],[1277,3],[1362,4]]},"1294":{"position":[[474,6],[581,5],[695,3]]}}}],["6.priority_queu",{"_index":415,"t":{"839":{"position":[[431,16]]}}}],["600",{"_index":2685,"t":{"1211":{"position":[[54,3]]}}}],["6层encod",{"_index":2920,"t":{"1347":{"position":[[16,11]]}}}],["7",{"_index":317,"t":{"821":{"position":[[699,2]]},"864":{"position":[[1910,3],[1927,3]]},"1126":{"position":[[1572,2],[1807,2]]},"1294":{"position":[[481,5],[587,3],[699,3],[710,3]]},"1347":{"position":[[0,15]]},"1354":{"position":[[97,2],[451,2]]}}}],["7.14",{"_index":860,"t":{"868":{"position":[[687,5]]}}}],["7.28",{"_index":897,"t":{"868":{"position":[[1982,5],[2717,6]]}}}],["7.set",{"_index":417,"t":{"839":{"position":[[490,5]]}}}],["700",{"_index":2761,"t":{"1290":{"position":[[428,4]]}}}],["77",{"_index":1721,"t":{"1025":{"position":[[128,3],[403,3],[706,5],[722,2],[745,2],[819,4],[954,3],[1106,3]]},"1251":{"position":[[128,3],[403,3],[706,5],[722,2],[745,2],[819,4],[954,3],[1106,3]]}}}],["77×7",{"_index":2983,"t":{"1368":{"position":[[122,11]]}}}],["77×7卷积与3×33",{"_index":2981,"t":{"1368":{"position":[[77,11]]}}}],["77×7卷积学习特征并降维，最后送入sigmoid",{"_index":2979,"t":{"1366":{"position":[[141,40]]}}}],["77是clip在tokenize方法中缺省的context_length，超过context_length将被truncate，不足的将用0",{"_index":1731,"t":{"1025":{"position":[[232,72],[504,72]]},"1251":{"position":[[232,72],[504,72]]}}}],["7×77",{"_index":2980,"t":{"1368":{"position":[[0,69]]}}}],["7个损失项是最终融合得到的featur",{"_index":2925,"t":{"1347":{"position":[[86,21]]}}}],["8",{"_index":154,"t":{"746":{"position":[[0,10]]},"881":{"position":[[610,1]]},"895":{"position":[[1666,1]]},"1294":{"position":[[487,7],[591,6],[703,4],[714,3],[725,3]]}}}],["8.multiset",{"_index":418,"t":{"839":{"position":[[514,10]]}}}],["84",{"_index":1835,"t":{"1033":{"position":[[1611,2]]},"1150":{"position":[[817,4]]},"1259":{"position":[[1608,2]]}}}],["9",{"_index":44,"t":{"711":{"position":[[108,2]]},"1126":{"position":[[1575,4],[1810,4]]},"1181":{"position":[[570,2],[573,2],[576,4]]},"1294":{"position":[[718,4],[729,3]]}}}],["9.map",{"_index":419,"t":{"839":{"position":[[543,5]]}}}],["9223372036854775807ll",{"_index":308,"t":{"821":{"position":[[559,22]]}}}],["92540646808111039ll",{"_index":312,"t":{"821":{"position":[[640,20]]}}}],["928/929",{"_index":2994,"t":{"1390":{"position":[[10,7],[210,94]]}}}],["9999",{"_index":42,"t":{"711":{"position":[[83,5]]}}}],["9月28日（2023年是9月29日），是研招网全国推免系统开放的日子，也是已经拿到offer",{"_index":2995,"t":{"1390":{"position":[[18,61]]}}}],["__init__(self",{"_index":2326,"t":{"1150":{"position":[[311,15],[447,15]]}}}],["__stack_chk_fail",{"_index":1258,"t":{"895":{"position":[[1124,18]]}}}],["a(10,3",{"_index":96,"t":{"728":{"position":[[12,8]]}}}],["a(4,3),b(3,4",{"_index":106,"t":{"728":{"position":[[249,14]]}}}],["a)=\\frac{p(a\\mid",{"_index":2632,"t":{"1199":{"position":[[683,16]]}}}],["a)=p(b\\mid",{"_index":2646,"t":{"1201":{"position":[[208,10]]},"1203":{"position":[[249,10]]}}}],["a)\\cdot",{"_index":2643,"t":{"1201":{"position":[[116,7],[219,7]]},"1203":{"position":[[161,7],[260,7]]}}}],["a)move(t,a",{"_index":194,"t":{"767":{"position":[[311,11]]}}}],["a)p(bi​∣a",{"_index":2636,"t":{"1199":{"position":[[812,16]]}}}],["a,b",{"_index":2654,"t":{"1201":{"position":[[449,4],[507,4]]}}}],["a,b)\\cdot",{"_index":2640,"t":{"1201":{"position":[[73,9],[98,9]]},"1203":{"position":[[120,9]]}}}],["a,b)p(b,c∣a)=p(b∣a)⋅p(c∣a,b",{"_index":2648,"t":{"1201":{"position":[[235,28]]}}}],["a,ba,ba,b",{"_index":2436,"t":{"1157":{"position":[[200,40]]}}}],["a,const",{"_index":382,"t":{"828":{"position":[[64,7]]}}}],["a.argmax(dim=0",{"_index":2505,"t":{"1181":{"position":[[896,16]]}}}],["a.argmax(dim=1",{"_index":2506,"t":{"1181":{"position":[[913,16]]}}}],["a.assign(b.begin",{"_index":576,"t":{"845":{"position":[[1009,19]]}}}],["a.assign(n",{"_index":574,"t":{"845":{"position":[[970,11]]}}}],["a.back",{"_index":103,"t":{"728":{"position":[[150,9]]},"734":{"position":[[77,9]]},"740":{"position":[[57,9]]},"845":{"position":[[598,8]]}}}],["a.begin",{"_index":559,"t":{"845":{"position":[[209,9]]}}}],["a.clear",{"_index":101,"t":{"728":{"position":[[114,10]]},"732":{"position":[[67,10]]},"740":{"position":[[35,10]]},"845":{"position":[[555,9]]}}}],["a.empti",{"_index":100,"t":{"728":{"position":[[80,10]]},"732":{"position":[[46,10]]},"734":{"position":[[24,10]]},"740":{"position":[[24,10]]},"845":{"position":[[390,9]]}}}],["a.end",{"_index":560,"t":{"845":{"position":[[238,7]]}}}],["a.erase(first",{"_index":571,"t":{"845":{"position":[[882,14]]}}}],["a.erase(it",{"_index":570,"t":{"845":{"position":[[852,11]]}}}],["a.erase({\"1\",1",{"_index":151,"t":{"744":{"position":[[86,17]]}}}],["a.find({\"1\",1",{"_index":152,"t":{"744":{"position":[[104,16]]}}}],["a.first",{"_index":111,"t":{"730":{"position":[[33,10]]}}}],["a.front",{"_index":102,"t":{"728":{"position":[[131,10]]},"734":{"position":[[56,10]]},"740":{"position":[[46,10]]},"845":{"position":[[579,9]]}}}],["a.h)<(b.h",{"_index":384,"t":{"828":{"position":[[89,13]]}}}],["a.insert(it",{"_index":569,"t":{"845":{"position":[[685,12],[727,12],[773,12]]}}}],["a.insert({\"1\",1",{"_index":150,"t":{"744":{"position":[[67,18]]}}}],["a.merge(b",{"_index":567,"t":{"845":{"position":[[646,10]]}}}],["a.pop",{"_index":119,"t":{"734":{"position":[[97,8]]}}}],["a.pop_back",{"_index":105,"t":{"728":{"position":[[196,13]]},"740":{"position":[[82,13]]},"845":{"position":[[326,12]]}}}],["a.pop_front",{"_index":563,"t":{"845":{"position":[[349,13]]}}}],["a.push(1",{"_index":118,"t":{"734":{"position":[[35,10]]}}}],["a.push_back",{"_index":104,"t":{"728":{"position":[[169,14]]},"740":{"position":[[67,14]]}}}],["a.push_back(x",{"_index":562,"t":{"845":{"position":[[299,14]]}}}],["a.push_front(x",{"_index":561,"t":{"845":{"position":[[271,15]]}}}],["a.remove(x",{"_index":572,"t":{"845":{"position":[[941,11]]}}}],["a.resize(n",{"_index":564,"t":{"845":{"position":[[418,11],[485,11]]}}}],["a.second",{"_index":112,"t":{"730":{"position":[[55,11]]}}}],["a.siz",{"_index":98,"t":{"728":{"position":[[48,9]]},"732":{"position":[[21,9]]},"734":{"position":[[14,9]]},"740":{"position":[[14,9]]},"845":{"position":[[373,8]]}}}],["a.swap(v",{"_index":565,"t":{"845":{"position":[[616,9]]}}}],["a<0",{"_index":889,"t":{"868":{"position":[[1630,4]]}}}],["a[\"2",{"_index":148,"t":{"744":{"position":[[55,6]]}}}],["aaa发生后，计算其条件事件bib_ibi​在事件aaa",{"_index":2630,"t":{"1199":{"position":[[568,58]]}}}],["aaa而言，假设有一组互斥且穷尽的条件事件b1,b2,…bnb_{1},b_{2},\\ldot",{"_index":2624,"t":{"1199":{"position":[[256,52]]}}}],["abbr",{"_index":1420,"t":{"957":{"position":[[59,5]]},"973":{"position":[[33,5]]},"1006":{"position":[[585,5]]}}}],["abcdef",{"_index":926,"t":{"868":{"position":[[2729,6]]}}}],["abov",{"_index":1951,"t":{"1055":{"position":[[2446,5]]}}}],["acc",{"_index":2391,"t":{"1150":{"position":[[1765,5],[1777,6],[2498,3],[2524,3]]},"1175":{"position":[[233,63]]}}}],["acc=∑i(predi==yi)len(y)(1)acc",{"_index":2455,"t":{"1175":{"position":[[128,29]]}}}],["accept",{"_index":2047,"t":{"1088":{"position":[[608,44]]}}}],["access",{"_index":2525,"t":{"1183":{"position":[[23,6]]}}}],["accur",{"_index":2268,"t":{"1131":{"position":[[321,8]]}}}],["accuraci",{"_index":2366,"t":{"1150":{"position":[[1254,13]]},"1175":{"position":[[313,8]]}}}],["accuracy(y_hat",{"_index":2369,"t":{"1150":{"position":[[1301,15],[2111,15]]}}}],["accuracy作为数学上的训练方法，即在训练过程中不使用与acc",{"_index":2454,"t":{"1175":{"position":[[47,41]]}}}],["acc并无变化，出现梯度为0",{"_index":2461,"t":{"1175":{"position":[[353,63]]}}}],["acc，但并不会将maxim",{"_index":2453,"t":{"1175":{"position":[[0,46]]}}}],["acmer，一个cv",{"_index":3004,"t":{"1392":{"position":[[77,33]]}}}],["aco",{"_index":297,"t":{"821":{"position":[[448,5]]}}}],["action=report",{"_index":1191,"t":{"881":{"position":[[1010,13]]},"895":{"position":[[2066,13]]}}}],["activ",{"_index":1690,"t":{"1015":{"position":[[37,8]]},"1241":{"position":[[37,8]]}}}],["activation=\"fused_lrelu",{"_index":1773,"t":{"1029":{"position":[[693,24]]},"1255":{"position":[[694,24]]}}}],["acw",{"_index":114,"t":{"732":{"position":[[11,9]]}}}],["adain",{"_index":1796,"t":{"1031":{"position":[[856,5]]},"1257":{"position":[[856,5]]}}}],["adapt",{"_index":1685,"t":{"1012":{"position":[[58,10]]},"1031":{"position":[[640,8],[862,9]]},"1183":{"position":[[101,8]]},"1185":{"position":[[158,10]]},"1238":{"position":[[58,10]]},"1257":{"position":[[640,8],[862,9]]}}}],["adaption的任务是使在大规模源域图片上训练的生成模型适应到数据有限的目标域中，根据目标域训练资料的大小可以分为few",{"_index":2542,"t":{"1188":{"position":[[17,61]]}}}],["addedge(int",{"_index":371,"t":{"826":{"position":[[787,11]]},"864":{"position":[[466,11]]},"866":{"position":[[662,11]]}}}],["adio",{"_index":1076,"t":{"879":{"position":[[394,6],[1606,6]]}}}],["adjacent_find",{"_index":431,"t":{"841":{"position":[[62,13]]}}}],["adjacent）的等价（ident",{"_index":432,"t":{"841":{"position":[[76,32]]}}}],["adjlist",{"_index":857,"t":{"868":{"position":[[636,7]]}}}],["adjlist[max_vertex_num",{"_index":854,"t":{"868":{"position":[[555,24]]}}}],["adjust",{"_index":2682,"t":{"1209":{"position":[[80,6]]}}}],["adjv",{"_index":849,"t":{"868":{"position":[[418,5],[2605,6]]}}}],["adjv=b;p",{"_index":893,"t":{"868":{"position":[[1723,9]]}}}],["adjv]==0",{"_index":920,"t":{"868":{"position":[[2577,10]]}}}],["adversari",{"_index":1987,"t":{"1061":{"position":[[22,12]]},"1070":{"position":[[15,11]]},"1188":{"position":[[325,11]]}}}],["advis",{"_index":1941,"t":{"1055":{"position":[[2027,8],[4186,8]]}}}],["aggreg",{"_index":1889,"t":{"1051":{"position":[[283,10]]}}}],["ai",{"_index":2291,"t":{"1140":{"position":[[0,21]]},"1183":{"position":[[41,2]]}}}],["aia^iai在计算注意力分数时，只将aia^iai的query向量与a1a^1a1至aia^{i}ai的iii个key向量做dot",{"_index":1604,"t":{"994":{"position":[[1192,112]]},"1228":{"position":[[1192,112]]}}}],["ai论文】yolo",{"_index":2931,"t":{"1354":{"position":[[4,17]]}}}],["alexei",{"_index":2568,"t":{"1188":{"position":[[538,6]]}}}],["alexnet是指2012年由alex",{"_index":2133,"t":{"1111":{"position":[[0,19]]}}}],["algorithm",{"_index":254,"t":{"817":{"position":[[42,9]]},"866":{"position":[[9,11]]}}}],["algraph",{"_index":859,"t":{"868":{"position":[[650,9],[2816,7]]}}}],["align",{"_index":1860,"t":{"1036":{"position":[[412,15],[548,14]]},"1183":{"position":[[141,9]]},"1262":{"position":[[412,15],[548,14]]}}}],["all_ofc++11",{"_index":433,"t":{"841":{"position":[[109,11]]}}}],["all_proxi",{"_index":2856,"t":{"1309":{"position":[[228,9]]}}}],["all_proxy=socks5://127.0.0.1:7890",{"_index":2851,"t":{"1309":{"position":[[59,33]]}}}],["allow",{"_index":1884,"t":{"1051":{"position":[[146,6]]}}}],["alpha",{"_index":163,"t":{"757":{"position":[[0,66],[116,6]]},"761":{"position":[[160,6]]}}}],["alpha,\\spac",{"_index":166,"t":{"757":{"position":[[102,13]]}}}],["alpha_{t}}{\\sqrt{1",{"_index":1676,"t":{"1010":{"position":[[313,19]]}}}],["alt",{"_index":231,"t":{"812":{"position":[[105,3],[125,3]]}}}],["analysi",{"_index":2059,"t":{"1088":{"position":[[926,9]]}}}],["anchor",{"_index":2959,"t":{"1356":{"position":[[22,7]]}}}],["anchor宽高比的聚类，聚类数越大，覆盖的i",{"_index":2965,"t":{"1356":{"position":[[150,43]]}}}],["anchor是通过k",{"_index":2964,"t":{"1356":{"position":[[115,10]]}}}],["anim",{"_index":2387,"t":{"1150":{"position":[[1674,8]]}}}],["animator.add(epoch",{"_index":2415,"t":{"1150":{"position":[[2291,18],[2416,18]]}}}],["announcementbar",{"_index":2741,"t":{"1290":{"position":[[48,16],[71,16]]}}}],["answer",{"_index":2036,"t":{"1088":{"position":[[374,9],[1186,10]]}}}],["any_ofc++11",{"_index":434,"t":{"841":{"position":[[144,11]]}}}],["append(),push_back",{"_index":599,"t":{"847":{"position":[[728,20]]}}}],["applic",{"_index":2827,"t":{"1305":{"position":[[41,11],[88,11]]}}}],["appropri",{"_index":1905,"t":{"1055":{"position":[[533,11]]}}}],["ar",{"_index":1425,"t":{"957":{"position":[[205,120]]}}}],["architectur",{"_index":2700,"t":{"1211":{"position":[[354,12]]}}}],["arch系用户通过以下命令即可完成bochs和nasm",{"_index":1211,"t":{"893":{"position":[[55,31]]}}}],["arcnod",{"_index":848,"t":{"868":{"position":[[405,8],[460,7],[475,9],[528,7],[1187,7],[1661,8],[2286,7]]}}}],["arcnum",{"_index":863,"t":{"868":{"position":[[782,7],[1402,7],[1517,8]]}}}],["argmax",{"_index":1750,"t":{"1027":{"position":[[213,6]]},"1181":{"position":[[612,12],[932,6]]},"1253":{"position":[[213,6]]}}}],["argmin",{"_index":2491,"t":{"1181":{"position":[[627,6]]}}}],["args.mix",{"_index":1755,"t":{"1029":{"position":[[70,12]]},"1255":{"position":[[70,12]]}}}],["args.source_class",{"_index":1714,"t":{"1023":{"position":[[96,18]]},"1249":{"position":[[96,18]]}}}],["args.target_class",{"_index":1716,"t":{"1023":{"position":[[155,18]]},"1249":{"position":[[155,18]]}}}],["argument",{"_index":2691,"t":{"1211":{"position":[[201,10]]}}}],["arm",{"_index":1422,"t":{"957":{"position":[[81,6]]}}}],["arm（autoregress",{"_index":1423,"t":{"957":{"position":[[88,18]]}}}],["arr_size(a",{"_index":285,"t":{"821":{"position":[[214,11]]}}}],["arxiv",{"_index":1541,"t":{"981":{"position":[[5,8]]},"1177":{"position":[[5,8]]},"1196":{"position":[[5,8]]},"1215":{"position":[[5,8]]}}}],["ar模型与非自回归nar",{"_index":1418,"t":{"955":{"position":[[0,73]]}}}],["ar）的方法逐token",{"_index":1421,"t":{"957":{"position":[[65,15]]}}}],["asciicod",{"_index":1070,"t":{"879":{"position":[[272,9],[481,11],[1484,9],[1696,11]]}}}],["asciicode=='d')//ctrl+d",{"_index":1074,"t":{"879":{"position":[[350,23],[1562,23]]}}}],["assert.h",{"_index":238,"t":{"815":{"position":[[21,8]]}}}],["assign",{"_index":598,"t":{"847":{"position":[[690,10]]},"1213":{"position":[[17,10]]}}}],["attent",{"_index":1597,"t":{"994":{"position":[[800,11],[978,9],[1429,11]]},"1002":{"position":[[32,15]]},"1043":{"position":[[29,9],[50,17]]},"1051":{"position":[[7,9],[126,9],[239,9],[252,14],[320,9],[401,34]]},"1055":{"position":[[1489,9],[1659,9],[3043,9],[3860,9],[3955,9]]},"1057":{"position":[[294,12]]},"1059":{"position":[[53,19]]},"1228":{"position":[[800,11],[978,9],[1429,11]]},"1236":{"position":[[32,15]]}}}],["attention(q,k,v)=softmax(qktdk)v(1)attention(q,k,v)=\\textit{softmax}(\\frac{qk^t}{\\sqrt{d_k}})v",{"_index":1968,"t":{"1055":{"position":[[2873,94]]}}}],["attention》的讨论环节：teach",{"_index":1601,"t":{"994":{"position":[[923,23]]},"1228":{"position":[[923,23]]}}}],["attention之后，通过residu",{"_index":1572,"t":{"990":{"position":[[67,22]]},"1224":{"position":[[67,22]]}}}],["attention可以看作是复杂化的cnn，cnn只能在感受野范围内考虑上下文信息，而self",{"_index":1985,"t":{"1059":{"position":[[5,47]]}}}],["attention和mask",{"_index":1624,"t":{"1002":{"position":[[15,16]]},"1236":{"position":[[15,16]]}}}],["attention应运而生，允许每个位置关注到序列中地所有其他位置。这种全局关联性质使得transform",{"_index":1877,"t":{"1048":{"position":[[475,71]]}}}],["attention接受任意向量数量的向量序列的输入，输出每一个向量所有向量（包括自身）的注意力分数。这使得self",{"_index":1890,"t":{"1051":{"position":[[343,57]]}}}],["attention的计算中应用一个掩码（mask",{"_index":1603,"t":{"994":{"position":[[1111,80]]},"1228":{"position":[[1111,80]]}}}],["attention的输入是向量序列，其向量数量是任意的，计算每个输入向量之间的注意力分数。在本例中输入向量个数为3，同时为了统一性分析，计输入向量个数为batchbatchbatch",{"_index":1892,"t":{"1055":{"position":[[11,93]]}}}],["attention的输入是时间步sss之前decod",{"_index":1608,"t":{"994":{"position":[[1373,43]]},"1228":{"position":[[1373,43]]}}}],["attention的输出向量维度与valu",{"_index":1948,"t":{"1055":{"position":[[2318,48]]}}}],["attention，则对每个输入向量生成对应的key，query和value后，再次使用nnn个可学习的权重矩阵生成nnn个不同的key0,...,keyn−1key^{0",{"_index":1977,"t":{"1057":{"position":[[41,88]]}}}],["at）以及non",{"_index":1579,"t":{"992":{"position":[[56,8]]},"1226":{"position":[[56,8]]}}}],["audio",{"_index":2698,"t":{"1211":{"position":[[322,5]]}}}],["augment",{"_index":2141,"t":{"1115":{"position":[[157,12]]},"1188":{"position":[[778,12]]}}}],["augustu",{"_index":2549,"t":{"1188":{"position":[[250,8]]}}}],["auto",{"_index":1525,"t":{"973":{"position":[[19,4]]},"1006":{"position":[[571,4]]},"1321":{"position":[[1013,5]]}}}],["autoregressive（非自回归，abbr",{"_index":1580,"t":{"992":{"position":[[65,25]]},"1226":{"position":[[65,25]]}}}],["averag",{"_index":2267,"t":{"1131":{"position":[[294,8]]}}}],["avoid",{"_index":1966,"t":{"1055":{"position":[[2771,5]]}}}],["a→b→ca\\to",{"_index":2665,"t":{"1203":{"position":[[0,42]]}}}],["a∈vn",{"_index":180,"t":{"761":{"position":[[109,5],[222,6]]}}}],["a与另一个list",{"_index":566,"t":{"845":{"position":[[629,16]]}}}],["a中与范围b",{"_index":439,"t":{"841":{"position":[[271,23]]}}}],["a中所有值为x",{"_index":573,"t":{"845":{"position":[[956,13]]}}}],["a中查找第一个与范围b",{"_index":448,"t":{"841":{"position":[[490,23]]}}}],["a中的所有元素替换成n个val",{"_index":575,"t":{"845":{"position":[[990,18]]}}}],["a中第一个与范围b",{"_index":441,"t":{"841":{"position":[[309,26]]}}}],["a为（3，4，5）的三维数据，b为（4，5）的二维数组。由于a和b的后缘维度都为（4，5），所以可以进行广播。同理，当a为（3，4）的二维数组，b为（4，）的数组，他们的后缘维度都是4",{"_index":2762,"t":{"1294":{"position":[[31,109]]}}}],["a变成b",{"_index":578,"t":{"845":{"position":[[1038,7]]}}}],["a是a班4位同学3科成绩，b是这4名同学其他3门课的成绩，拼接后代表这4名同学的6",{"_index":2481,"t":{"1181":{"position":[[325,47]]}}}],["a班4位同学，每位同学3",{"_index":2472,"t":{"1181":{"position":[[123,15]]}}}],["a而言，假设有一组互斥且穷尽的条件事件b，则事件a的概率等于事件a",{"_index":2889,"t":{"1329":{"position":[[194,65]]},"1339":{"position":[[194,65]]}}}],["a，若存在方阵b使得ab=ba=单位方阵i，则方阵b为方阵a的逆矩阵，记为a−1a",{"_index":2904,"t":{"1337":{"position":[[69,52]]},"1400":{"position":[[69,52]]}}}],["b",{"_index":54,"t":{"717":{"position":[[94,2],[122,3],[136,2]]},"728":{"position":[[271,2]]},"831":{"position":[[125,2]]},"864":{"position":[[89,2],[99,3],[111,3]]},"866":{"position":[[91,2],[101,3],[113,3]]},"868":{"position":[[1601,1],[2780,1],[2787,2],[2892,2]]},"933":{"position":[[0,26]]},"948":{"position":[[893,2]]},"1098":{"position":[[48,2]]},"1100":{"position":[[69,2],[250,2]]},"1138":{"position":[[574,1],[628,1],[632,1]]},"1181":{"position":[[139,1],[198,3],[312,3],[516,1],[1067,1],[1106,2],[1248,1],[1300,2]]},"1199":{"position":[[79,1]]},"1298":{"position":[[124,4],[287,4],[496,4]]},"1329":{"position":[[550,1],[613,1],[664,1]]},"1339":{"position":[[550,1],[613,1],[664,1]]}}}],["b)=\\frac{p(a,b)}{p(b)}p(a∣b)=p(b)p(a,b",{"_index":2621,"t":{"1199":{"position":[[135,40]]}}}],["b)\\cdot",{"_index":2669,"t":{"1203":{"position":[[145,7]]}}}],["b)p(a∣b",{"_index":2619,"t":{"1199":{"position":[[63,15]]}}}],["b)p(b,c∣a)=p(b∣a)⋅p(c∣b",{"_index":2672,"t":{"1203":{"position":[[276,24]]}}}],["b){return",{"_index":383,"t":{"828":{"position":[[79,9]]}}}],["b)}{\\partial",{"_index":2100,"t":{"1100":{"position":[[319,12]]}}}],["b,a",{"_index":927,"t":{"868":{"position":[[2736,3]]}}}],["b,c,h,w][b",{"_index":2970,"t":{"1362":{"position":[[0,23],[117,29]]},"1364":{"position":[[0,17]]},"1366":{"position":[[0,17]]}}}],["b,d",{"_index":928,"t":{"868":{"position":[[2740,3]]}}}],["b.end",{"_index":577,"t":{"845":{"position":[[1029,8]]}}}],["b<0",{"_index":890,"t":{"868":{"position":[[1638,4]]}}}],["b[i],e[i](0<=b[i]<=e[i]<=200000",{"_index":48,"t":{"715":{"position":[[104,56]]}}}],["b\\to",{"_index":2666,"t":{"1203":{"position":[[43,4]]}}}],["b_i)\\cdot",{"_index":2627,"t":{"1199":{"position":[[437,9],[700,9]]}}}],["b_i)p(a∣bi",{"_index":2638,"t":{"1199":{"position":[[844,16]]}}}],["b_t)}{\\partial",{"_index":2106,"t":{"1100":{"position":[[481,14]]}}}],["b_{n}b1​,b2​,…bn​构成一个完备事件组，则事件aaa的概率等于事件aaa在每个条件事件bib_ibi",{"_index":2625,"t":{"1199":{"position":[[309,79]]}}}],["background",{"_index":2748,"t":{"1290":{"position":[[213,11]]}}}],["bao",{"_index":2583,"t":{"1188":{"position":[[718,3]]}}}],["bar{\\alpha}_{t}}\\boldsymbol{\\epsilon},t)\\right\\|^{2}\\tag{1}∇θ​∥∥​ϵ−ϵθ​(αˉt​​x0​+1−αˉt​​ϵ,t)∥∥​2(1",{"_index":1662,"t":{"1008":{"position":[[345,99]]}}}],["bar{\\alpha}_{t}}}\\boldsymbol{\\epsilon}_{\\theta}(\\mathbf{x}_{t},t)\\right)+\\sigma_{t}\\mathbf{z}\\tag{2}xt−1​=αt​​1​(xt​−1−αˉt​​1−αt​​ϵθ​(xt​,t))+σt​z(2",{"_index":1677,"t":{"1010":{"position":[[333,150]]}}}],["base",{"_index":831,"t":{"868":{"position":[[45,4],[58,4]]},"1088":{"position":[[1171,5]]}}}],["based的文字生成模型有很多，如gpt模型，大多使用自回归（autoregress",{"_index":1419,"t":{"957":{"position":[[12,46]]}}}],["baselin",{"_index":2560,"t":{"1188":{"position":[[441,8]]}}}],["bash的配置文件：~/.bashrc",{"_index":2861,"t":{"1311":{"position":[[55,19]]}}}],["basic",{"_index":2254,"t":{"1129":{"position":[[108,5]]}}}],["batch",{"_index":2400,"t":{"1150":{"position":[[1910,6],[2224,6],[2265,5],[2312,6]]}}}],["batch)(batch,batch",{"_index":1925,"t":{"1055":{"position":[[1449,20]]}}}],["batch_siz",{"_index":1757,"t":{"1029":{"position":[[93,12],[161,12]]},"1033":{"position":[[965,10],[1020,10],[1505,10],[1560,10]]},"1150":{"position":[[2639,10]]},"1255":{"position":[[93,12],[161,12]]},"1259":{"position":[[962,10],[1017,10],[1502,10],[1557,10]]},"1300":{"position":[[192,11]]}}}],["batch_size，比如torch.nn.linear的输入(batch_size,in_features)，torch.nn.conv2d的输入(batch_s",{"_index":2806,"t":{"1300":{"position":[[44,119]]}}}],["batchbatchbatch个向量计算得到的注意力分数，都要与其对应的value向量相乘，计算加权的注意力分数。最终的注意力分数矩阵的形状应为(batch,num)(batch",{"_index":1937,"t":{"1055":{"position":[[1831,100]]}}}],["batch中有大量样本均存在这种情况，此时acc有显著提升而网络的权重的更新极小，此时，与acc有关的loss",{"_index":2465,"t":{"1175":{"position":[[489,129]]}}}],["batteri",{"_index":2839,"t":{"1305":{"position":[[201,7]]}}}],["bbb",{"_index":2090,"t":{"1098":{"position":[[181,10]]},"1138":{"position":[[178,38]]}}}],["bbox与其他所有置信度更小的bbox做iou判断，若iou大于设置的阈值，则抹除置信度小的bbox",{"_index":2954,"t":{"1354":{"position":[[621,59]]}}}],["bbox包含(x",{"_index":2944,"t":{"1354":{"position":[[290,11]]}}}],["bbox的置信度与其父grid",{"_index":2953,"t":{"1354":{"position":[[549,17]]}}}],["bbox都会在loss",{"_index":2956,"t":{"1354":{"position":[[740,19]]}}}],["be",{"_index":1218,"t":{"895":{"position":[[330,5]]},"1131":{"position":[[209,5]]}}}],["becom",{"_index":1965,"t":{"1055":{"position":[[2706,7]]}}}],["befor",{"_index":1911,"t":{"1055":{"position":[[647,6]]}}}],["beg,end]内所有字符作为字符串",{"_index":597,"t":{"847":{"position":[[649,26]]}}}],["begin",{"_index":63,"t":{"717":{"position":[[303,6],[337,7],[357,6],[406,6]]},"994":{"position":[[221,8]]},"1228":{"position":[[221,8]]}}}],["begin()，end",{"_index":614,"t":{"847":{"position":[[1135,13]]}}}],["begin[i]+1",{"_index":51,"t":{"715":{"position":[[289,37]]}}}],["begin[i],end[i]（0<=begin[i]<=end[i]<=200000",{"_index":49,"t":{"715":{"position":[[190,66]]}}}],["begin{cas",{"_index":2159,"t":{"1121":{"position":[[24,13],[160,13]]}}}],["begin符号又叫start符号或sos符号（start",{"_index":1591,"t":{"994":{"position":[[520,28]]},"1228":{"position":[[520,28]]}}}],["begin符号是在lexicon中添加的特殊符号，用来表示decoder生成的开始。begin符号通常被嵌入到一个低维的连续向量空间中，这个向量空间是通过嵌入层（embed",{"_index":1589,"t":{"994":{"position":[[394,90]]},"1228":{"position":[[394,90]]}}}],["behind",{"_index":2256,"t":{"1129":{"position":[[119,6]]}}}],["below",{"_index":2702,"t":{"1211":{"position":[[397,6]]}}}],["benchmark",{"_index":2028,"t":{"1088":{"position":[[86,10],[215,9],[541,40]]}}}],["benchmark：fid与clip",{"_index":1473,"t":{"967":{"position":[[0,37]]}}}],["bert",{"_index":2010,"t":{"1082":{"position":[[0,18]]},"1084":{"position":[[194,4],[237,4],[281,4],[349,4]]},"1088":{"position":[[0,11],[936,86]]},"1090":{"position":[[317,4],[374,4],[490,7],[586,7]]}}}],["bert也可以用来完成截取式问答任务，提供一篇文章以及问题，要求输出两个integ",{"_index":2063,"t":{"1088":{"position":[[1197,66]]}}}],["bert在大规模语料库（corpus）上预训练后，输出的向量表示了对应输入token的意思，特别地，是考虑了上下文信息的意思。比如，对于水果的苹果已经苹果公司的苹果，bert对一样的苹果有不同的输出。即对一个处在不同上下文信息中的相同词汇，bert有不同的embedding。类似于word",{"_index":2067,"t":{"1090":{"position":[[0,145]]}}}],["bert模型的核心就是通过预训练来学习上下文信息，进而对每个输入token生成相应的向量表示。这个向量表示考虑了上下文信息，所以对于处在不同上下文中的相同词汇，bert会有不同的embed",{"_index":2069,"t":{"1090":{"position":[[202,99]]}}}],["bert模型的自监督性质主要体现在其训练数据并不需要人为标注label，而是通过对输入句子中的部分词汇做mask，将输入数据的部分内容使用speci",{"_index":2017,"t":{"1086":{"position":[[15,76]]}}}],["bert的损失函数主要是mask",{"_index":2020,"t":{"1086":{"position":[[174,18]]}}}],["bert的结构其实是transformer的encoder部分，仅使用encod",{"_index":2011,"t":{"1084":{"position":[[0,49]]}}}],["bert（bidirect",{"_index":2012,"t":{"1084":{"position":[[50,18]]}}}],["best",{"_index":1841,"t":{"1033":{"position":[[1709,4]]},"1259":{"position":[[1706,4]]}}}],["beta",{"_index":174,"t":{"759":{"position":[[43,5],[82,16]]},"761":{"position":[[183,5]]}}}],["beta,\\spac",{"_index":173,"t":{"759":{"position":[[30,12]]},"761":{"position":[[147,12]]}}}],["better",{"_index":2844,"t":{"1305":{"position":[[310,6]]}}}],["between",{"_index":1962,"t":{"1055":{"position":[[2636,7]]}}}],["bfs(int",{"_index":722,"t":{"864":{"position":[[727,7]]},"871":{"position":[[1078,7]]},"873":{"position":[[780,7]]}}}],["bfs(rt",{"_index":1018,"t":{"871":{"position":[[2002,8]]},"873":{"position":[[1617,8]]}}}],["bhpf",{"_index":1386,"t":{"928":{"position":[[197,16]]}}}],["bib_ibi​）推“果”（结果事件aaa",{"_index":2629,"t":{"1199":{"position":[[480,80]]}}}],["big",{"_index":2098,"t":{"1100":{"position":[[291,5]]},"1303":{"position":[[101,3]]}}}],["big(l(w",{"_index":2097,"t":{"1100":{"position":[[240,9]]}}}],["bilinear",{"_index":1344,"t":{"915":{"position":[[8,16]]}}}],["binary_search",{"_index":493,"t":{"841":{"position":[[1908,13]]}}}],["bit",{"_index":259,"t":{"817":{"position":[[152,4]]}}}],["bitbit",{"_index":681,"t":{"861":{"position":[[65,6],[101,6]]}}}],["bits/stdc++.h",{"_index":8,"t":{"705":{"position":[[9,15]]},"711":{"position":[[9,15]]},"717":{"position":[[9,15]]},"1321":{"position":[[50,15]]}}}],["bitset",{"_index":95,"t":{"726":{"position":[[313,9]]},"817":{"position":[[145,6]]},"861":{"position":[[0,10],[26,13]]}}}],["bitset<10000",{"_index":155,"t":{"746":{"position":[[11,13]]}}}],["bitset<maxn",{"_index":683,"t":{"861":{"position":[[217,12],[275,12],[344,12],[417,12],[467,12]]}}}],["bitsetbitset",{"_index":680,"t":{"861":{"position":[[40,24],[72,16],[133,12],[174,12],[531,12]]}}}],["block",{"_index":2915,"t":{"1345":{"position":[[127,8]]}}}],["block。每一个block",{"_index":1577,"t":{"990":{"position":[[215,35]]},"1224":{"position":[[215,35]]}}}],["blpf",{"_index":1364,"t":{"926":{"position":[[342,16]]}}}],["bn",{"_index":2958,"t":{"1356":{"position":[[3,4]]}}}],["boch",{"_index":1166,"t":{"881":{"position":[[574,5],[879,5],[1038,5],[1092,20]]},"893":{"position":[[18,8],[94,5]]},"895":{"position":[[217,20],[1357,13],[1630,5],[1935,5]]}}}],["bochs.out",{"_index":1174,"t":{"881":{"position":[[706,11],[909,10]]},"895":{"position":[[1762,11],[1965,10]]}}}],["bochs.out、depend.mak以及fd.img文件，bochs.out文件是日志输出文件，depend.mak是编译中间生成的文件，最终生成的fd.img是最重要的geekos映像文件，有了它才能使用bochs运行geeko",{"_index":1152,"t":{"881":{"position":[[87,137]]}}}],["bochsrc",{"_index":1154,"t":{"881":{"position":[[378,8]]},"895":{"position":[[1434,8]]}}}],["bochs是一个x86",{"_index":1202,"t":{"887":{"position":[[0,20]]}}}],["bochs的镜像文件fd.img",{"_index":1208,"t":{"889":{"position":[[167,22]]}}}],["bochs的镜像文件fd.img以构建geeko",{"_index":1215,"t":{"895":{"position":[[113,33]]}}}],["bochs运行geekos系统了，可以说bochs的运行依赖两个文件，一个是配置文件.bochsrc，一个是映像文件fd.img，映像文件的加载路径需要在.bochsrc",{"_index":1153,"t":{"881":{"position":[[241,123]]}}}],["bochs运行所必须的文件,也是geeko",{"_index":1209,"t":{"889":{"position":[[190,34]]}}}],["boldsymbol{\\epsilon}_{\\theta}(\\sqrt{\\bar{\\alpha}_{t}}\\mathbf{x}_{0}+\\sqrt{1",{"_index":1661,"t":{"1008":{"position":[[268,76]]}}}],["bool",{"_index":361,"t":{"826":{"position":[[619,4],[655,4],[782,4]]},"828":{"position":[[36,4]]},"864":{"position":[[353,4],[389,4],[461,4],[1261,4]]},"866":{"position":[[494,4],[530,4],[657,4],[1503,4],[1651,4],[1753,4]]},"868":{"position":[[197,5]]}}}],["boot",{"_index":1168,"t":{"881":{"position":[[612,5]]},"895":{"position":[[1668,5]]}}}],["boot_info",{"_index":1126,"t":{"879":{"position":[[1850,10]]}}}],["bootinfo",{"_index":1127,"t":{"879":{"position":[[1861,9]]}}}],["box预测框（bbox），每个bbox的中心点都落在该grid",{"_index":2942,"t":{"1354":{"position":[[234,31]]}}}],["break",{"_index":58,"t":{"717":{"position":[[157,6],[384,6]]},"864":{"position":[[1565,6]]}}}],["bs",{"_index":2837,"t":{"1305":{"position":[[191,2]]}}}],["bt",{"_index":684,"t":{"861":{"position":[[230,3],[237,2],[562,2],[595,2],[629,2],[660,2],[686,2],[719,2],[755,2],[788,2],[825,2],[860,2],[893,2],[926,2],[985,2],[1023,2],[1031,2]]}}}],["bt.ani",{"_index":700,"t":{"861":{"position":[[550,8]]}}}],["bt.count",{"_index":702,"t":{"861":{"position":[[615,10]]}}}],["bt.flip",{"_index":711,"t":{"861":{"position":[[878,9]]}}}],["bt.flip(po",{"_index":712,"t":{"861":{"position":[[908,12]]}}}],["bt.none",{"_index":701,"t":{"861":{"position":[[582,9]]}}}],["bt.reset",{"_index":708,"t":{"861":{"position":[[809,10]]}}}],["bt.reset(po",{"_index":709,"t":{"861":{"position":[[841,13]]}}}],["bt.set",{"_index":706,"t":{"861":{"position":[[741,8]]}}}],["bt.set(po",{"_index":707,"t":{"861":{"position":[[771,11]]}}}],["bt.size",{"_index":703,"t":{"861":{"position":[[647,9]]}}}],["bt.test(po",{"_index":705,"t":{"861":{"position":[[703,12]]}}}],["bt.to_ulong",{"_index":714,"t":{"861":{"position":[[966,13]]}}}],["bt1",{"_index":689,"t":{"861":{"position":[[328,3]]}}}],["bt1(0xf",{"_index":685,"t":{"861":{"position":[[288,9]]}}}],["bt2",{"_index":693,"t":{"861":{"position":[[398,3]]}}}],["bt2(012",{"_index":690,"t":{"861":{"position":[[357,9]]}}}],["bt3",{"_index":695,"t":{"861":{"position":[[448,3]]}}}],["bt3(\"1010",{"_index":694,"t":{"861":{"position":[[430,12]]}}}],["bt4",{"_index":699,"t":{"861":{"position":[[527,3]]}}}],["bt4(",{"_index":696,"t":{"861":{"position":[[480,6]]}}}],["bt[po",{"_index":704,"t":{"861":{"position":[[672,7]]}}}],["bt[pos].flip",{"_index":713,"t":{"861":{"position":[[945,14]]}}}],["bv",{"_index":754,"t":{"864":{"position":[[1943,2]]}}}],["bv.size",{"_index":756,"t":{"864":{"position":[[2000,10]]}}}],["bv[j",{"_index":757,"t":{"864":{"position":[[2024,5]]}}}],["b与e，b作为开始刷的节点索引令前缀和数组中对应元素的值+1+1+1，e+1作为刷墙结束的下一个节点的索引令对应的值−1",{"_index":66,"t":{"719":{"position":[[71,81]]}}}],["b变为空，a中元素包含原来a和b",{"_index":568,"t":{"845":{"position":[[660,24]]}}}],["b班4位同学，每位同学3",{"_index":2473,"t":{"1181":{"position":[[162,15]]}}}],["b（semant",{"_index":2043,"t":{"1088":{"position":[[511,10]]}}}],["c",{"_index":33,"t":{"707":{"position":[[0,5]]},"812":{"position":[[171,1]]},"826":{"position":[[194,19]]},"839":{"position":[[9,3]]},"847":{"position":[[518,2],[563,2],[1055,9],[1080,5]]},"868":{"position":[[3035,2],[3040,2]]},"879":{"position":[[647,1],[678,3],[748,3],[817,3],[1730,1]]},"881":{"position":[[1090,1]]},"895":{"position":[[642,1],[740,1],[945,1],[1219,1]]},"1017":{"position":[[104,1],[115,1]]},"1181":{"position":[[178,1],[1095,1],[1118,2],[1289,1],[1312,2]]},"1243":{"position":[[104,1],[115,1]]},"1298":{"position":[[129,4],[301,4],[501,4]]},"1300":{"position":[[164,2]]},"1362":{"position":[[24,2],[67,2],[147,2]]},"1364":{"position":[[18,2],[81,2]]},"1366":{"position":[[18,2]]},"1372":{"position":[[50,2],[97,2]]}}}],["c)五种信息，其中x",{"_index":2945,"t":{"1354":{"position":[[311,11]]}}}],["c++stl",{"_index":427,"t":{"839":{"position":[[747,25]]}}}],["c,b",{"_index":929,"t":{"868":{"position":[[2744,3]]}}}],["c,f",{"_index":930,"t":{"868":{"position":[[2748,3]]}}}],["c_i",{"_index":2300,"t":{"1145":{"position":[[62,3],[431,3]]}}}],["c_ico​×ci",{"_index":2296,"t":{"1143":{"position":[[105,15]]},"1145":{"position":[[122,10]]}}}],["c_ihw×ci​，权重形状为co×cic_o",{"_index":2295,"t":{"1143":{"position":[[74,23]]}}}],["c_str",{"_index":79,"t":{"726":{"position":[[69,7]]},"847":{"position":[[1072,7]]}}}],["can't",{"_index":2830,"t":{"1305":{"position":[[106,5]]}}}],["canni",{"_index":1416,"t":{"946":{"position":[[261,10]]},"1347":{"position":[[151,10]]},"1358":{"position":[[158,36]]}}}],["capac",{"_index":608,"t":{"847":{"position":[[938,10]]}}}],["casc",{"_index":3005,"t":{"1392":{"position":[[111,44]]}}}],["caution",{"_index":203,"t":{"783":{"position":[[11,7],[57,7]]}}}],["ca→b→c",{"_index":2667,"t":{"1203":{"position":[[48,10]]}}}],["cbam是通道+空间注意力机制（senet",{"_index":2969,"t":{"1360":{"position":[[82,30]]}}}],["cc_general_opt",{"_index":1222,"t":{"895":{"position":[[471,15],[522,15]]}}}],["ccf",{"_index":426,"t":{"839":{"position":[[735,3]]}}}],["cd",{"_index":1200,"t":{"885":{"position":[[321,16]]}}}],["cdot",{"_index":2655,"t":{"1201":{"position":[[454,5],[492,5]]}}}],["cd命令进入geeko",{"_index":1207,"t":{"889":{"position":[[93,20]]}}}],["cell",{"_index":2952,"t":{"1354":{"position":[[506,12],[567,22]]}}}],["cell。在yolov1中s=7s=7s=7",{"_index":2939,"t":{"1354":{"position":[[184,22]]}}}],["cell中。在yolov1中b=2b=2b=2",{"_index":2943,"t":{"1354":{"position":[[266,23]]}}}],["cell生成5个anchor",{"_index":2963,"t":{"1356":{"position":[[100,14]]}}}],["cell选出条件类别概率最大的类别，因此每个grid",{"_index":2951,"t":{"1354":{"position":[[479,26]]}}}],["cell预测出bbb个bound",{"_index":2941,"t":{"1354":{"position":[[214,19]]}}}],["cell预测出一组与数据集有关的条件类别概率。在yolov1论文使用的数据集pasc",{"_index":2948,"t":{"1354":{"position":[[378,44]]}}}],["cell，每个grid",{"_index":2962,"t":{"1356":{"position":[[88,11]]}}}],["center",{"_index":2831,"t":{"1305":{"position":[[115,8]]}}}],["center(replac",{"_index":2841,"t":{"1305":{"position":[[220,14],[270,14]]}}}],["ch",{"_index":768,"t":{"864":{"position":[[2352,3],[2363,3]]}}}],["chang",{"_index":2460,"t":{"1175":{"position":[[344,8]]}}}],["char",{"_index":330,"t":{"824":{"position":[[46,5]]},"831":{"position":[[120,4]]},"847":{"position":[[96,16]]},"864":{"position":[[2347,4]]},"868":{"position":[[229,4],[1151,4],[1177,4],[2827,4]]}}}],["char[10",{"_index":388,"t":{"831":{"position":[[134,9]]}}}],["checkpoint",{"_index":1854,"t":{"1036":{"position":[[194,11],[304,10]]},"1262":{"position":[[194,11],[304,10]]}}}],["cheung",{"_index":2588,"t":{"1188":{"position":[[762,7]]}}}],["cho",{"_index":2557,"t":{"1188":{"position":[[384,4]]}}}],["choos",{"_index":2273,"t":{"1133":{"position":[[73,6]]}}}],["church",{"_index":1270,"t":{"897":{"position":[[65,7]]}}}],["cin",{"_index":17,"t":{"705":{"position":[[69,3]]},"849":{"position":[[145,3]]},"864":{"position":[[2356,3]]},"1321":{"position":[[795,4]]}}}],["cin>>n>>m",{"_index":777,"t":{"866":{"position":[[1086,10]]}}}],["cin>>row",{"_index":392,"t":{"833":{"position":[[29,9]]}}}],["cin>>row>>col",{"_index":398,"t":{"835":{"position":[[0,14]]}}}],["cin>>src>>dst",{"_index":781,"t":{"866":{"position":[[1140,14]]}}}],["ci×h×wc_i",{"_index":2297,"t":{"1145":{"position":[[0,12]]}}}],["class",{"_index":2324,"t":{"1150":{"position":[[276,5],[418,5]]}}}],["classifi",{"_index":2289,"t":{"1138":{"position":[[656,10]]},"1209":{"position":[[0,8]]}}}],["clear",{"_index":602,"t":{"847":{"position":[[781,7]]}}}],["clip",{"_index":1488,"t":{"967":{"position":[[912,4],[924,4],[1000,9]]},"1025":{"position":[[588,4],[680,4]]},"1031":{"position":[[1019,4]]},"1193":{"position":[[639,4],[885,4]]},"1251":{"position":[[588,4],[680,4]]},"1257":{"position":[[1019,4]]}}}],["clip_directional_loss",{"_index":1799,"t":{"1031":{"position":[[1033,34]]},"1257":{"position":[[1033,34]]},"1269":{"position":[[338,21]]}}}],["clip_model.token_embedding(source_tokenized_prompts).type(clip_model.dtyp",{"_index":1742,"t":{"1025":{"position":[[872,75]]},"1251":{"position":[[872,75]]}}}],["clip_model.token_embedding(target_tokenized_prompts).type(clip_model.dtyp",{"_index":1746,"t":{"1025":{"position":[[1024,75]]},"1251":{"position":[[1024,75]]}}}],["clock",{"_index":2845,"t":{"1305":{"position":[[324,5]]}}}],["closure(t)\\epsilon",{"_index":195,"t":{"767":{"position":[[323,22]]}}}],["closure(t)ϵ−closure(t",{"_index":196,"t":{"767":{"position":[[347,22]]}}}],["cloud",{"_index":1707,"t":{"1019":{"position":[[39,5]]},"1245":{"position":[[39,5]]}}}],["cnn",{"_index":1874,"t":{"1048":{"position":[[0,21],[22,77]]}}}],["cnn中没有全连接层时，本质上可以接受任意尺寸的输入，但这是狭隘的。若考虑其下游任务以及输出，如fcn（fulli",{"_index":1868,"t":{"1046":{"position":[[126,68]]}}}],["cnn本质上可以接受任意通道数的图像输入，但是其模型效果将会受到极大的影响。以一个使用通道数为3的数据集进行训练的cnn",{"_index":1871,"t":{"1046":{"position":[[280,83]]}}}],["cnn模型的输入向量的形状是固定的，其输出向量的形状也是固定的或可以根据不同的下游任务而唯一确定，即输入形状与下游任务共同确定了一个cnn",{"_index":1867,"t":{"1046":{"position":[[0,84]]}}}],["cnn的权值共享使得模型能够学习到图像中的局部特征，这也是一种对于上下文的假设。相邻位置上的权重共享使得模型能够对局部结构进行建模，这种权重共享使得cnn",{"_index":1875,"t":{"1048":{"position":[[106,175]]}}}],["cnn的设计理念认为：在图像任务中，局部结构通常更为重要，局部连接和权值共享使得cnn更适用于图像处理等任务。但也正是这种设计理念，使得cnn在面临长输入序列时不能很好地综合上下文信息、提取位置信息，因此self",{"_index":1876,"t":{"1048":{"position":[[368,106]]}}}],["cnt",{"_index":939,"t":{"868":{"position":[[2811,4],[2985,6]]}}}],["cnt<max_vertex_num",{"_index":945,"t":{"868":{"position":[[2965,19]]}}}],["cnt=0",{"_index":944,"t":{"868":{"position":[[2957,7]]}}}],["code",{"_index":1082,"t":{"879":{"position":[[649,4],[1732,4]]},"1036":{"position":[[82,39],[464,4],[625,9]]},"1055":{"position":[[3029,4]]},"1262":{"position":[[82,39],[464,4],[625,9]]}}}],["cola（corpu",{"_index":2045,"t":{"1088":{"position":[[582,11]]}}}],["collapse（模式坍塌），因此提出了从每个源域图像中学习出多样且准确的prompt",{"_index":2592,"t":{"1188":{"position":[[1088,65]]}}}],["color",{"_index":2753,"t":{"1290":{"position":[[270,5],[304,5],[343,5],[383,5]]}}}],["colors(200001",{"_index":53,"t":{"717":{"position":[[71,14]]}}}],["colors.s",{"_index":61,"t":{"717":{"position":[[247,14]]}}}],["colors[",{"_index":60,"t":{"717":{"position":[[189,8]]}}}],["colors[b",{"_index":59,"t":{"717":{"position":[[166,12]]}}}],["colors[i",{"_index":62,"t":{"717":{"position":[[269,9],[282,8],[445,11]]}}}],["compar",{"_index":604,"t":{"847":{"position":[[835,25]]}}}],["compil",{"_index":1228,"t":{"895":{"position":[[644,9],[742,9],[768,7],[947,9]]}}}],["comput",{"_index":1919,"t":{"1055":{"position":[[1063,7],[1472,7],[1951,7],[2369,7],[3627,7],[3843,7],[4110,7],[4327,7]]}}}],["compute_text_featur",{"_index":2715,"t":{"1267":{"position":[[158,21],[639,21]]}}}],["concat",{"_index":2469,"t":{"1181":{"position":[[50,32]]},"1267":{"position":[[305,7],[382,6],[534,6]]},"1358":{"position":[[121,32]]}}}],["concat与stack",{"_index":2468,"t":{"1181":{"position":[[0,14]]}}}],["conda",{"_index":1687,"t":{"1015":{"position":[[0,5],[31,5]]},"1017":{"position":[[40,5]]},"1241":{"position":[[0,5],[31,5]]},"1243":{"position":[[40,5]]}}}],["condit",{"_index":1313,"t":{"908":{"position":[[33,11]]},"1072":{"position":[[405,11]]}}}],["connection加上自身的输入向量，再经过lay",{"_index":1573,"t":{"990":{"position":[[90,28]]},"1224":{"position":[[90,28]]}}}],["connection加上送入fcn的输入自身，最终再进行lay",{"_index":1575,"t":{"990":{"position":[[152,33]]},"1224":{"position":[[152,33]]}}}],["connection，norm指的是lay",{"_index":1548,"t":{"986":{"position":[[49,23]]},"1220":{"position":[[49,23]]}}}],["connector",{"_index":352,"t":{"826":{"position":[[386,11]]},"864":{"position":[[170,11]]},"866":{"position":[[261,11]]}}}],["consist",{"_index":1846,"t":{"1033":{"position":[[1909,11]]},"1188":{"position":[[283,11]]},"1259":{"position":[[1906,11]]}}}],["const",{"_index":304,"t":{"821":{"position":[[509,5],[541,5],[582,5],[627,5],[661,5],[702,5],[746,5]]},"828":{"position":[[50,7]]},"833":{"position":[[7,5]]},"861":{"position":[[196,5]]},"871":{"position":[[122,5]]},"873":{"position":[[122,5]]},"875":{"position":[[208,5]]}}}],["contain",{"_index":2706,"t":{"1211":{"position":[[463,10]]}}}],["content",{"_index":2742,"t":{"1290":{"position":[[92,8]]},"1377":{"position":[[5,7]]},"1379":{"position":[[16,7],[60,7]]},"1381":{"position":[[16,7],[60,7]]}}}],["context",{"_index":1710,"t":{"1023":{"position":[[33,7]]},"1249":{"position":[[33,7]]}}}],["context_length",{"_index":1738,"t":{"1025":{"position":[[691,14]]},"1251":{"position":[[691,14]]}}}],["continu",{"_index":2462,"t":{"1175":{"position":[[430,10]]}}}],["continun",{"_index":2464,"t":{"1175":{"position":[[476,12]]}}}],["control",{"_index":2840,"t":{"1305":{"position":[[212,7],[262,7]]}}}],["conv2d",{"_index":2128,"t":{"1106":{"position":[[120,33]]}}}],["convolut",{"_index":1869,"t":{"1046":{"position":[[195,11]]}}}],["copi",{"_index":450,"t":{"841":{"position":[[572,4]]},"847":{"position":[[1048,6]]},"879":{"position":[[991,10]]}}}],["copy_backward",{"_index":451,"t":{"841":{"position":[[595,13]]}}}],["copy_ifc++11",{"_index":452,"t":{"841":{"position":[[630,12]]}}}],["copy_nc++11",{"_index":453,"t":{"841":{"position":[[667,11]]}}}],["copyright",{"_index":1085,"t":{"879":{"position":[[668,9],[738,9],[807,9]]}}}],["copy构造函数，生成一个str",{"_index":585,"t":{"847":{"position":[[377,20]]}}}],["corpu",{"_index":2051,"t":{"1088":{"position":[[688,33]]}}}],["correct",{"_index":2463,"t":{"1175":{"position":[[461,7]]}}}],["correctli",{"_index":2290,"t":{"1138":{"position":[[667,9]]}}}],["correspond",{"_index":2576,"t":{"1188":{"position":[[644,15]]}}}],["count",{"_index":156,"t":{"746":{"position":[[68,7]]},"841":{"position":[[177,5]]},"879":{"position":[[2207,9]]}}}],["count(indegreelist.begin(),indegreelist.end(),n",{"_index":791,"t":{"866":{"position":[[1369,49]]}}}],["count(outdegreelist.begin(),outdegreelist.end(),n",{"_index":793,"t":{"866":{"position":[[1449,51]]}}}],["count_if",{"_index":435,"t":{"841":{"position":[[199,8]]}}}],["countin(0)==1)&&(countin(1)==n",{"_index":800,"t":{"866":{"position":[[1715,31]]}}}],["countin(0)==1)&&(countout(0)==1)&&(countin(1)==n",{"_index":796,"t":{"866":{"position":[[1575,49]]}}}],["countin(int",{"_index":790,"t":{"866":{"position":[[1346,11]]}}}],["countout(int",{"_index":792,"t":{"866":{"position":[[1425,12]]}}}],["cout",{"_index":30,"t":{"705":{"position":[[336,4],[377,4]]},"711":{"position":[[180,4]]},"728":{"position":[[274,4],[294,4]]},"732":{"position":[[96,4]]},"843":{"position":[[1615,4],[1638,4]]},"864":{"position":[[1181,6],[1518,6],[1640,6],[1690,6],[1958,4],[2016,4],[2038,4],[2052,4],[2308,4],[2333,4]]},"1321":{"position":[[987,4],[1064,4],[1081,4]]}}}],["cout<<\"error\"<<endl",{"_index":819,"t":{"866":{"position":[[2316,20]]}}}],["cout<<\"hav",{"_index":827,"t":{"866":{"position":[[2477,11]]}}}],["cout<<\"list\"<<endl",{"_index":821,"t":{"866":{"position":[[2354,19]]}}}],["cout<<\"no",{"_index":825,"t":{"866":{"position":[[2446,9]]}}}],["cout<<\"tree\"<<endl",{"_index":823,"t":{"866":{"position":[[2396,19]]}}}],["co×cic_o",{"_index":2303,"t":{"1145":{"position":[[103,11]]}}}],["co×ci×kh×kwc_o",{"_index":2299,"t":{"1145":{"position":[[38,16]]}}}],["co×h′×w′c_o",{"_index":2304,"t":{"1145":{"position":[[133,14]]}}}],["creat",{"_index":1688,"t":{"1015":{"position":[[6,6]]},"1241":{"position":[[6,6]]}}}],["create(int",{"_index":1031,"t":{"875":{"position":[[304,10]]}}}],["createdg_al(&g",{"_index":941,"t":{"868":{"position":[[2841,16]]}}}],["createdg_al(algraph",{"_index":873,"t":{"868":{"position":[[1067,19]]}}}],["cross",{"_index":1609,"t":{"994":{"position":[[1417,11]]},"1126":{"position":[[5,5]]},"1129":{"position":[[7,5],[133,5]]},"1131":{"position":[[28,5]]},"1185":{"position":[[189,5]]},"1188":{"position":[[631,5]]},"1228":{"position":[[1417,11]]}}}],["cross_loss",{"_index":2244,"t":{"1126":{"position":[[1733,10]]}}}],["cross_loss(predict",{"_index":2246,"t":{"1126":{"position":[[1844,19]]}}}],["crossentropyloss",{"_index":2243,"t":{"1126":{"position":[[1712,20]]}}}],["cs",{"_index":2999,"t":{"1392":{"position":[[17,13]]}}}],["csp特征融合可以参考：https://blog.csdn.net/weixin_55073640/article/details/122614176",{"_index":2968,"t":{"1360":{"position":[[4,77]]}}}],["ctrl",{"_index":225,"t":{"812":{"position":[[0,4],[49,4],[82,4],[98,4],[118,4],[139,4],[154,4],[164,4],[181,4],[191,4],[211,4],[224,4],[253,4]]},"879":{"position":[[118,4],[1330,4]]}}}],["ctrl+e,d",{"_index":227,"t":{"812":{"position":[[14,8]]}}}],["ctrl+k,f",{"_index":228,"t":{"812":{"position":[[31,8]]}}}],["ctx_init",{"_index":1709,"t":{"1023":{"position":[[0,8],[200,8]]},"1249":{"position":[[0,8],[200,8]]},"1267":{"position":[[36,19],[114,8],[136,10],[147,8],[401,8],[559,8],[685,15],[701,8]]}}}],["ctype.h",{"_index":239,"t":{"815":{"position":[[35,7]]}}}],["cuda",{"_index":1692,"t":{"1017":{"position":[[11,7]]},"1243":{"position":[[11,7]]}}}],["cuda=11.8",{"_index":1697,"t":{"1017":{"position":[[93,9]]},"1243":{"position":[[93,9]]}}}],["cudnn中rnn的api就是batch_size在第二维度。进一步讲，batch",{"_index":2811,"t":{"1300":{"position":[[331,43]]}}}],["cup",{"_index":168,"t":{"757":{"position":[[132,4]]},"761":{"position":[[198,4]]}}}],["curve_name_2",{"_index":2736,"t":{"1280":{"position":[[134,17]]}}}],["custom.css",{"_index":2746,"t":{"1290":{"position":[[161,18]]}}}],["cvpr",{"_index":2522,"t":{"1183":{"position":[[5,7],[53,14]]},"1188":{"position":[[475,4],[663,5],[944,7]]}}}],["c语言代码编写以及编译、使用boch",{"_index":1267,"t":{"895":{"position":[[2162,36]]}}}],["d",{"_index":57,"t":{"717":{"position":[[117,4],[332,4]]},"868":{"position":[[2790,1]]},"1181":{"position":[[291,1]]}}}],["d\",rt",{"_index":1001,"t":{"871":{"position":[[1426,8],[1556,8],[1689,8]]},"873":{"position":[[1107,8],[1229,8],[1354,8]]}}}],["d(g(z)))]\\tag{2}lossfake​=−ez∼pz​(z)​[log(1−d(g(z)))](2",{"_index":2003,"t":{"1076":{"position":[[405,56]]}}}],["d(g(z))]\\tag{4}lg​=−ez∼pz​(z)​[logd(g(z))](4",{"_index":2008,"t":{"1076":{"position":[[855,45]]}}}],["d(u,v)=u2+v2(15)d(u,v)=\\sqrt{u^2+v^2}\\tag{15}d(u,v)=u2+v2​(15",{"_index":1362,"t":{"926":{"position":[[210,62]]}}}],["d(u,v)\\leq",{"_index":1379,"t":{"926":{"position":[[1152,10]]},"928":{"position":[[668,10]]},"930":{"position":[[184,10],[514,10]]}}}],["d(u,v)d(u,v)d(u,v)达到截止频率时，d(u,v)d0=1\\frac{d(u,v)}{d_0}=1d0​d(u,v)​=1，此时h(u,v)=0.707h(u,v)=0.707h(u,v)=0.707",{"_index":1368,"t":{"926":{"position":[[603,110]]}}}],["d(x)]\\tag{1}lossreal​=−ex∼pdata​(x)​[logd(x)](1",{"_index":1998,"t":{"1076":{"position":[[241,48]]}}}],["d(x)d(x)d(x)是判别器的输出，xxx是真实样本，eee",{"_index":1999,"t":{"1076":{"position":[[290,41]]}}}],["d,c",{"_index":931,"t":{"868":{"position":[[2752,3]]}}}],["d,e",{"_index":932,"t":{"868":{"position":[[2756,3]]}}}],["d,f",{"_index":933,"t":{"868":{"position":[[2760,3]]}}}],["d.\\n",{"_index":1063,"t":{"879":{"position":[[125,7],[1337,7]]}}}],["d0d_0d0​处垂直截止，通过频率和截止频率在d0d_0d0",{"_index":1363,"t":{"926":{"position":[[273,68]]}}}],["d0d_0d0​尾部包含高频分量d1d_1d1",{"_index":1374,"t":{"926":{"position":[[961,59]]}}}],["d0d_0d0​是通带中心频率，www",{"_index":1402,"t":{"930":{"position":[[330,28]]}}}],["d2l",{"_index":2316,"t":{"1150":{"position":[[101,3],[121,3]]}}}],["d2l.accumulator(2",{"_index":2360,"t":{"1150":{"position":[[1069,18]]}}}],["d2l.accumulator(3",{"_index":2396,"t":{"1150":{"position":[[1843,18]]}}}],["d2l.animator(xlabel='epoch",{"_index":2388,"t":{"1150":{"position":[[1685,28]]}}}],["d2l.load_data_fashion_mnist(batch_s",{"_index":2427,"t":{"1150":{"position":[[2680,39]]}}}],["d2l.timer",{"_index":2394,"t":{"1150":{"position":[[1805,12]]}}}],["d2l.try_gpu",{"_index":2431,"t":{"1150":{"position":[[2814,14]]}}}],["d4(p,q)=∣x−s∣+∣y−t∣(2)d_4(p,q)=\\vert",{"_index":1299,"t":{"902":{"position":[[271,36]]}}}],["d8(p,q)=max(∣x−s∣,∣y−t∣)(3)d_8(p,q)=max(\\vert",{"_index":1303,"t":{"902":{"position":[[368,45]]}}}],["d_0",{"_index":1360,"t":{"926":{"position":[[136,5]]},"928":{"position":[[679,5]]}}}],["d_0+\\frac{w}{2}\\\\0&d(u,v)\\geq",{"_index":1400,"t":{"930":{"position":[[195,29]]}}}],["d_0+\\frac{w}{2}\\end{cases}\\tag{23}h(u,v)=⎩⎨⎧​010​d(u,v)<d0​−2w​d0​−2w​≤d(u,v)≤d0​+2w​d(u,v)≥d0​+2w​​(23",{"_index":1401,"t":{"930":{"position":[[225,104]]}}}],["d_0\\end{cases}\\tag{19}h(u,v)={10​d(u,v)>d0​d(u,v)≤d0​​(19",{"_index":1385,"t":{"928":{"position":[[110,58]]}}}],["d_1",{"_index":1380,"t":{"926":{"position":[[1163,5]]}}}],["d_1}&d_0\\leq",{"_index":1378,"t":{"926":{"position":[[1139,12]]}}}],["d_1}&d_1\\leq",{"_index":1395,"t":{"928":{"position":[[655,12]]}}}],["d_1}{d_0",{"_index":1377,"t":{"926":{"position":[[1130,8]]},"928":{"position":[[646,8]]}}}],["d_{kl}(p\\space",{"_index":2224,"t":{"1126":{"position":[[1238,14]]}}}],["d_{kl}(q",{"_index":2206,"t":{"1126":{"position":[[761,8]]}}}],["data",{"_index":612,"t":{"847":{"position":[[1097,6]]},"868":{"position":[[522,5]]},"1115":{"position":[[145,11]]},"1188":{"position":[[773,4]]},"1211":{"position":[[238,4],[453,4],[496,5],[502,4]]}}}],["data_dir",{"_index":2692,"t":{"1211":{"position":[[212,9]]}}}],["data_it",{"_index":2353,"t":{"1150":{"position":[[927,10],[1100,10]]}}}],["dataset",{"_index":2258,"t":{"1129":{"position":[[166,7]]},"1211":{"position":[[13,7],[174,7],[370,7]]}}}],["daveho@cs.umd.edu",{"_index":1089,"t":{"879":{"position":[[716,19]]}}}],["david",{"_index":1087,"t":{"879":{"position":[[697,5]]}}}],["ddpm",{"_index":2617,"t":{"1196":{"position":[[109,8]]}}}],["ddpm论文中的原图来分析ddpm",{"_index":1655,"t":{"1006":{"position":[[854,31]]}}}],["ddpm（denois",{"_index":1534,"t":{"979":{"position":[[137,15]]}}}],["de(p,q)=(x−s)2+(y−t)2(1)d_e(p,q)=\\sqrt{(x",{"_index":1296,"t":{"902":{"position":[[177,41]]}}}],["death",{"_index":1282,"t":{"897":{"position":[[204,6]]}}}],["deathless",{"_index":1281,"t":{"897":{"position":[[194,9]]}}}],["debug",{"_index":1185,"t":{"881":{"position":[[885,9],[980,9],[1002,7]]},"895":{"position":[[1941,9],[2036,9],[2058,7]]}}}],["decod",{"_index":1446,"t":{"965":{"position":[[254,30]]},"969":{"position":[[762,8]]},"998":{"position":[[27,7],[180,18],[251,7],[329,8],[416,7],[467,18],[562,7]]},"1232":{"position":[[27,7],[180,18],[251,7],[329,8],[416,7],[467,18],[562,7]]}}}],["decoder在推理时是一个一个词汇产生的，在产生第iii个词汇时其后续的词汇是未知的，更不用说进行注意力分数的就算了，而在训练过程中使用teach",{"_index":1621,"t":{"1000":{"position":[[215,82]]},"1234":{"position":[[215,82]]}}}],["decoder来说，它的输入是中间产物（即gener",{"_index":1512,"t":{"969":{"position":[[806,39]]}}}],["decoder每一步的输出是一个经过softmax的prob",{"_index":1586,"t":{"994":{"position":[[119,37]]},"1228":{"position":[[119,37]]}}}],["decoder的任务是生成输出，可以根据是否一次性生成输出分为autoregressive（自回归，abbr",{"_index":1578,"t":{"992":{"position":[[0,55]]},"1226":{"position":[[0,55]]}}}],["decoder的整体结构，掩码多头自注意力的输入是添加位置编码之后的decod",{"_index":1602,"t":{"994":{"position":[[988,68]]},"1228":{"position":[[988,68]]}}}],["decoder的生成中，每一个时间步的输出是词汇表中每一个单词经过softmax之后的概率分布。为了保证生成任务可以通过模型自己停止而不是一直重复，我们向decoder的输出中加入end符号的生成，即每一次输出除了词汇表的所有词汇外还有end符号的概率，当end",{"_index":1594,"t":{"994":{"position":[[610,155]]},"1228":{"position":[[610,155]]}}}],["decoder的结构训练生成模型的decod",{"_index":1519,"t":{"969":{"position":[[1134,25]]}}}],["decoder结构，将每一层对应的featur",{"_index":2921,"t":{"1347":{"position":[[28,24]]}}}],["decoder试图在一次操作中生成整个输出序列。这通常通过使用诸如注意力机制等策略来实现，这些策略允许解码器关注输入序列的不同部分，同时生成输出序列的不同部分。nat的优点在于其高效性，因为它不需要保存和更新大量的可能选项。然而，由于它不能利用上下文信息来生成输出，因此其生成的输出质量普遍会低于at",{"_index":1583,"t":{"992":{"position":[[252,158]]},"1226":{"position":[[252,158]]}}}],["decoder输出，使用3x3卷积以及双线性插值上采样到原始分辨率得到该层的特征图，且卷积核的个数为1，输出的featur",{"_index":2916,"t":{"1345":{"position":[[214,62]]}}}],["decoder阶段，每个block",{"_index":2914,"t":{"1345":{"position":[[80,32]]}}}],["decoder需要逐步生成输出，并将之前自身输出的所有词汇经过嵌入层后生成token",{"_index":1582,"t":{"992":{"position":[[101,150]]},"1226":{"position":[[101,150]]}}}],["decoder）在每个时间步（或每个解码步骤）的输入都来自于前一个时间步自身的输出以及编码器（encoder）的输出。特别地，首个时间步的输入是begin符号以及编码器（encoder）的输出，在每个后续的时间步，解码器的输入会是前一个时间步自身的输出以及编码器（encod",{"_index":1588,"t":{"994":{"position":[[230,158]]},"1228":{"position":[[230,158]]}}}],["decoder）都是通过最小化整体损失来进行联合训练的。这是因为整体模型需要协同工作，encod",{"_index":1613,"t":{"998":{"position":[[359,50]]},"1232":{"position":[[359,50]]}}}],["deep",{"_index":1470,"t":{"965":{"position":[[873,4]]}}}],["def",{"_index":115,"t":{"732":{"position":[[89,6]]},"1150":{"position":[[307,3],[364,3],[443,3],[855,3],[896,3],[1297,3],[1364,3],[1427,3]]}}}],["defin",{"_index":276,"t":{"821":{"position":[[11,7],[52,7],[100,7],[133,7],[206,7],[263,7],[301,7],[352,7],[373,7],[404,7],[437,7],[459,7],[477,7]]},"864":{"position":[[74,7]]},"866":{"position":[[76,7]]},"868":{"position":[[50,7],[63,7],[78,7],[94,7],[107,7],[123,7],[145,7],[210,7],[240,7],[265,7],[331,7]]},"871":{"position":[[40,7]]},"873":{"position":[[40,7]]},"875":{"position":[[40,7],[78,7],[119,7],[142,7]]},"1055":{"position":[[107,6],[725,6],[3152,6]]}}}],["delta}^{\\delta}\\sum_{b",{"_index":2444,"t":{"1159":{"position":[[131,24]]}}}],["delta}^{\\delta}{v_{a,b}*x_{i_a,j+b",{"_index":2445,"t":{"1159":{"position":[[156,37]]}}}],["denoise模块的目标是预测出输入的噪声图片中的噪声，其资料可以通过对数据集中的图片不断加入从gaussian",{"_index":1537,"t":{"979":{"position":[[362,56]]}}}],["depend",{"_index":1151,"t":{"881":{"position":[[75,6]]}}}],["depend以及mak",{"_index":1214,"t":{"895":{"position":[[79,15]]}}}],["depend和mak",{"_index":1201,"t":{"885":{"position":[[346,14]]},"889":{"position":[[152,14]]}}}],["depth",{"_index":2927,"t":{"1349":{"position":[[32,24]]}}}],["dequ",{"_index":86,"t":{"726":{"position":[[176,10]]},"817":{"position":[[57,5]]}}}],["deque<int",{"_index":134,"t":{"740":{"position":[[0,10]]}}}],["deque是一个双端队列(doubl",{"_index":409,"t":{"839":{"position":[[144,19]]}}}],["desktop文件，因此在更换图标是最好直接更换在主题文件中替换icon，而不是更改desktop的icon",{"_index":2820,"t":{"1303":{"position":[[203,69]]}}}],["detect",{"_index":2910,"t":{"1343":{"position":[[22,32]]}}}],["dev/your_partit",{"_index":2887,"t":{"1326":{"position":[[72,19]]}}}],["devic",{"_index":1756,"t":{"1029":{"position":[[83,7]]},"1150":{"position":[[1007,7],[1015,6],[1418,8]]},"1255":{"position":[[83,7]]}}}],["device=non",{"_index":2354,"t":{"1150":{"position":[[938,13]]}}}],["df",{"_index":2885,"t":{"1326":{"position":[[50,2]]}}}],["df(x)dx={0x<01x≥0(4)\\frac",{"_index":2163,"t":{"1121":{"position":[[104,25]]}}}],["dfa",{"_index":187,"t":{"767":{"position":[[0,13],[14,9],[238,8],[390,12]]},"793":{"position":[[109,11],[272,11],[446,11],[633,11]]}}}],["dfa的可接受以及接受集的定义：从开始状态开始，经过该符号串表示的路径，若能到达终态则称该符号串可被改dfa",{"_index":189,"t":{"767":{"position":[[136,57]]}}}],["dfs(int",{"_index":738,"t":{"864":{"position":[[1106,7]]}}}],["dg",{"_index":879,"t":{"868":{"position":[[1285,3]]}}}],["differ",{"_index":2260,"t":{"1129":{"position":[[258,9]]}}}],["diffus",{"_index":1437,"t":{"963":{"position":[[53,19]]},"965":{"position":[[680,9],[851,9]]},"971":{"position":[[0,34]]},"979":{"position":[[153,9],[480,9]]},"1006":{"position":[[813,9]]},"1039":{"position":[[497,9]]},"1177":{"position":[[37,9]]},"1196":{"position":[[47,9],[87,15]]},"1267":{"position":[[1059,9]]}}}],["diffusion、dal",{"_index":1447,"t":{"965":{"position":[[313,14]]}}}],["diffusion以及dal",{"_index":1451,"t":{"965":{"position":[[400,15]]}}}],["diffusion就是在这篇文章的基础上，使用ldm",{"_index":2467,"t":{"1177":{"position":[[65,32]]}}}],["diffusion是目前图像生成的sota模型之一，在本章中我们快速的了解一下st",{"_index":1436,"t":{"963":{"position":[[7,45]]}}}],["diffusion等sota",{"_index":1438,"t":{"965":{"position":[[11,66]]}}}],["dim",{"_index":1933,"t":{"1055":{"position":[[1709,4],[4005,4]]},"1126":{"position":[[1623,4]]}}}],["dim=0",{"_index":2475,"t":{"1181":{"position":[[202,6]]}}}],["dim=1",{"_index":2480,"t":{"1181":{"position":[[316,6],[687,26]]}}}],["dimens",{"_index":1935,"t":{"1055":{"position":[[1738,9],[2574,9],[4034,9]]},"1181":{"position":[[667,9]]}}}],["dim指定操作的维度，dim",{"_index":2492,"t":{"1181":{"position":[[634,23]]}}}],["direct",{"_index":2535,"t":{"1185":{"position":[[169,9]]},"1193":{"position":[[621,17]]}}}],["directori",{"_index":2693,"t":{"1211":{"position":[[243,10],[378,9],[507,10]]}}}],["dirichlet",{"_index":1312,"t":{"908":{"position":[[0,32]]}}}],["discrimin",{"_index":1992,"t":{"1070":{"position":[[224,19]]},"1074":{"position":[[4,37]]},"1188":{"position":[[417,14]]}}}],["disney",{"_index":1734,"t":{"1025":{"position":[[425,7]]},"1027":{"position":[[105,14]]},"1251":{"position":[[425,7]]},"1253":{"position":[[105,14]]}}}],["distanc",{"_index":1477,"t":{"967":{"position":[[67,10]]}}}],["distance（fid",{"_index":1831,"t":{"1033":{"position":[[1126,13]]},"1259":{"position":[[1123,13]]}}}],["distribut",{"_index":1587,"t":{"994":{"position":[[157,63]]},"1033":{"position":[[1316,56]]},"1055":{"position":[[552,12],[599,14]]},"1228":{"position":[[157,63]]},"1259":{"position":[[1313,56]]}}}],["distribution中sample出z\\mathbf{z}z，否则z=0\\mathbf{z}=\\mathbf{0}z=0",{"_index":1672,"t":{"1010":{"position":[[123,63]]}}}],["distribution中sample出图片大小的噪声xt\\mathbf{x}_txt",{"_index":1669,"t":{"1010":{"position":[[8,45]]}}}],["distribution中sample出的与x0\\mathbf{x}_0x0",{"_index":1659,"t":{"1008":{"position":[[116,47]]}}}],["distribution中sample出的噪声的方法来获得，这个加噪声的过程我们称为forward",{"_index":1538,"t":{"979":{"position":[[419,49]]}}}],["distribution）中sampl",{"_index":1430,"t":{"961":{"position":[[76,35]]}}}],["distribution），并不是encoder直接输出一个distrubut",{"_index":1528,"t":{"973":{"position":[[185,43]]}}}],["div[class^='announcementbar_",{"_index":2747,"t":{"1290":{"position":[[180,30]]}}}],["divergence)，又称相对熵（rel",{"_index":2199,"t":{"1126":{"position":[[512,26]]}}}],["division(",{"_index":2878,"t":{"1321":{"position":[[934,11]]}}}],["division(str",{"_index":2863,"t":{"1319":{"position":[[7,15]]},"1321":{"position":[[94,15]]}}}],["divisor",{"_index":2864,"t":{"1319":{"position":[[30,8],[279,8],[349,7],[384,8]]},"1321":{"position":[[117,8],[366,8],[436,7],[471,8]]}}}],["dk",{"_index":1959,"t":{"1055":{"position":[[2584,3],[2683,3]]}}}],["dkl(p",{"_index":2202,"t":{"1126":{"position":[[701,5],[826,5]]}}}],["dkl(p,q)=log⁡σ2σ1+σ12+(μ1−μ2)22σ22−12d_{kl}(p,q)=\\log\\frac{\\sigma_2}{\\sigma_1}+\\frac{\\sigma_1^2+(\\mu_1",{"_index":2662,"t":{"1201":{"position":[[757,102]]}}}],["dkl(plabel",{"_index":2216,"t":{"1126":{"position":[[986,14]]}}}],["dlib",{"_index":1859,"t":{"1036":{"position":[[404,4],[524,4]]},"1262":{"position":[[404,4],[524,4]]}}}],["dock显示的图标是全局图标，程序启动器的desktop文件位于/usr/share/applications中，全局主题中图标主题的程序logo位于~/.local/share/icons/mko",{"_index":2816,"t":{"1303":{"position":[[0,100]]}}}],["docusaurus.config.js的themeconfig",{"_index":2740,"t":{"1290":{"position":[[7,40]]}}}],["docusaurus的支持以及对sond",{"_index":73,"t":{"722":{"position":[[0,41]]}}}],["dog",{"_index":1273,"t":{"897":{"position":[[93,3]]}}}],["domain",{"_index":1434,"t":{"961":{"position":[[387,32]]},"1006":{"position":[[413,32]]},"1185":{"position":[[195,6],[234,6]]},"1188":{"position":[[637,6]]},"1269":{"position":[[0,23],[166,6],[191,6]]}}}],["domain）符合某种分布。因此目前的sota模型除了将文字prompt作为输入，还从某随机分布中sample出图片shape的随机向量（矩阵）作为输入，期待模型根据prompt将源域（sourc",{"_index":1433,"t":{"961":{"position":[[287,99]]},"1006":{"position":[[313,99]]}}}],["done",{"_index":1147,"t":{"879":{"position":[[2334,5]]},"1055":{"position":[[637,4]]}}}],["don’t",{"_index":1953,"t":{"1055":{"position":[[2466,5],[2658,5]]}}}],["dot",{"_index":1942,"t":{"1055":{"position":[[2044,3],[2481,3],[2623,3],[2694,3],[2796,3],[2809,6],[4203,3]]}}}],["dote",{"_index":1939,"t":{"1055":{"position":[[1982,6],[4141,6]]}}}],["doubl",{"_index":328,"t":{"824":{"position":[[31,6]]},"849":{"position":[[134,7]]}}}],["download",{"_index":2690,"t":{"1211":{"position":[[148,8]]}}}],["downstream",{"_index":2015,"t":{"1084":{"position":[[318,18]]},"1088":{"position":[[898,10]]}}}],["do循环中，list",{"_index":39,"t":{"707":{"position":[[152,33]]}}}],["drive",{"_index":1705,"t":{"1019":{"position":[[21,5]]},"1211":{"position":[[194,6]]},"1245":{"position":[[21,5]]}}}],["dropout",{"_index":2138,"t":{"1113":{"position":[[9,14]]},"1115":{"position":[[100,44]]}}}],["dtype=torch.float32",{"_index":1895,"t":{"1055":{"position":[[235,20],[840,20],[930,20],[1020,20],[3282,20],[3424,20],[3514,20],[3604,20]]},"1294":{"position":[[322,20]]}}}],["dvərˈseriəl",{"_index":1988,"t":{"1061":{"position":[[35,15]]}}}],["d}\\sigma}{{\\rm",{"_index":2147,"t":{"1119":{"position":[[96,14]]}}}],["d}f(x)}{{\\text",{"_index":2164,"t":{"1121":{"position":[[138,14]]}}}],["d}x",{"_index":2148,"t":{"1119":{"position":[[111,4]]},"1121":{"position":[[153,4]]}}}],["dσdx",{"_index":2145,"t":{"1119":{"position":[[70,6]]}}}],["e",{"_index":55,"t":{"717":{"position":[[97,2],[126,4],[147,1]]},"812":{"position":[[64,1]]},"868":{"position":[[307,2],[325,3],[952,2],[957,12],[1028,2]]},"1119":{"position":[[39,3]]},"1309":{"position":[[181,1],[279,1]]}}}],["e,a",{"_index":934,"t":{"868":{"position":[[2764,3]]}}}],["e4",{"_index":1851,"t":{"1036":{"position":[[30,3],[160,3],[242,3],[644,3]]},"1262":{"position":[[30,3],[160,3],[242,3],[644,3]]}}}],["e_{x\\sim",{"_index":1996,"t":{"1076":{"position":[[207,8]]}}}],["e_{z\\sim",{"_index":2001,"t":{"1076":{"position":[[382,8],[833,8]]}}}],["each",{"_index":1886,"t":{"1051":{"position":[[181,4]]},"1129":{"position":[[285,4]]},"1131":{"position":[[3,4],[199,4],[267,4]]}}}],["echo",{"_index":1144,"t":{"879":{"position":[[2179,4]]},"1309":{"position":[[175,4],[273,4]]}}}],["edit",{"_index":1156,"t":{"881":{"position":[[412,4]]},"895":{"position":[[1468,4]]}}}],["edit_direciton",{"_index":1800,"t":{"1031":{"position":[[1068,35]]},"1257":{"position":[[1068,35]]}}}],["edit_direct",{"_index":1807,"t":{"1031":{"position":[[1282,14]]},"1257":{"position":[[1283,14]]}}}],["efro",{"_index":2569,"t":{"1188":{"position":[[547,6]]}}}],["ehpf",{"_index":1390,"t":{"928":{"position":[[414,14]]}}}],["ei",{"_index":3006,"t":{"1392":{"position":[[156,20]]}}}],["element",{"_index":1563,"t":{"988":{"position":[[1054,32]]},"1029":{"position":[[1060,7]]},"1031":{"position":[[1121,7],[1243,8]]},"1039":{"position":[[176,7]]},"1222":{"position":[[1054,32]]},"1255":{"position":[[1061,7]]},"1257":{"position":[[1121,7],[1244,8]]},"1267":{"position":[[418,7],[576,7]]}}}],["elf_i386",{"_index":1255,"t":{"895":{"position":[[1088,8]]}}}],["eli",{"_index":2572,"t":{"1188":{"position":[[568,3]]}}}],["elpf",{"_index":1369,"t":{"926":{"position":[[714,14]]}}}],["embed",{"_index":1740,"t":{"1025":{"position":[[842,10]]},"1090":{"position":[[191,10]]},"1251":{"position":[[842,10]]}}}],["embedding中的cbow，bert可以看作是contextu",{"_index":2068,"t":{"1090":{"position":[[146,39]]}}}],["embedding和posit",{"_index":1568,"t":{"990":{"position":[[10,20]]},"1224":{"position":[[10,20]]}}}],["embedding相加得到。输入序列经过mutil",{"_index":1569,"t":{"990":{"position":[[31,25]]},"1224":{"position":[[31,25]]}}}],["empti",{"_index":607,"t":{"847":{"position":[[920,7]]}}}],["enabled=0",{"_index":1180,"t":{"881":{"position":[[784,9],[812,9],[839,9]]},"895":{"position":[[1840,9],[1868,9],[1895,9]]}}}],["encdoer",{"_index":1801,"t":{"1031":{"position":[[1110,7]]},"1257":{"position":[[1110,7]]}}}],["encod",{"_index":1458,"t":{"965":{"position":[[602,7],[753,7]]},"973":{"position":[[24,8]]},"975":{"position":[[129,58]]},"998":{"position":[[14,9],[35,28],[135,18],[319,7],[349,7],[457,7],[552,7]]},"1006":{"position":[[576,8]]},"1036":{"position":[[34,7],[164,7],[246,7]]},"1084":{"position":[[69,7]]},"1232":{"position":[[14,9],[35,28],[135,18],[319,7],[349,7],[457,7],[552,7]]},"1262":{"position":[[34,7],[164,7],[246,7]]},"1345":{"position":[[194,19]]}}}],["encoder中得到一个representation，再将对应prompt生成的图像输入至clip的imag",{"_index":1492,"t":{"967":{"position":[[1050,55]]}}}],["encoder中得到对应的representation，计算二者之间的距离，即得到clip",{"_index":1493,"t":{"967":{"position":[[1106,45]]}}}],["encoder中输入数据集中的高清预期图片，encoder将其转换为某种lat",{"_index":1520,"t":{"969":{"position":[[1160,48]]}}}],["encoder使用数据集中的图片（即期待模型最终输出的图片）作为输入，输出该图片的某种lat",{"_index":1506,"t":{"969":{"position":[[604,52]]}}}],["encoder可以帮助模型理解prompt",{"_index":1456,"t":{"965":{"position":[[531,30]]}}}],["encoder后得到其在clip空间的编码表示。将源域的prompt文字和图像编码表示作为contrast",{"_index":2610,"t":{"1193":{"position":[[489,56]]}}}],["encoder后的编码共同作为domain",{"_index":2606,"t":{"1193":{"position":[[324,21]]}}}],["encoder和decoder的桥梁，也是decod",{"_index":1610,"t":{"994":{"position":[[1441,46]]},"1228":{"position":[[1441,46]]}}}],["encoder和生成模型的decod",{"_index":1522,"t":{"969":{"position":[[1307,27]]}}}],["encoder得到源域图片prompt描述在clip空间的编码表示，同时源域图像再经过来自clip的imag",{"_index":2609,"t":{"1193":{"position":[[433,55]]}}}],["encoder得到目标域图片prompt在clip空间的编码表示，并与目标域标签经过text",{"_index":2605,"t":{"1193":{"position":[[277,46]]}}}],["encoder的多头自注意力不同，在decoder中，为注意力机制应用了掩码，使模型只能关注到当前位置及其之前的位置，而不能访问未来的信息。这解决了引入teach",{"_index":1625,"t":{"1002":{"position":[[48,84]]},"1236":{"position":[[48,84]]}}}],["encoder的模型大小对图像生成模型的影响是非常大的。text",{"_index":1455,"t":{"965":{"position":[[498,32]]}}}],["encoder结构如下图所示。其中，add指的是残差连接residu",{"_index":1547,"t":{"986":{"position":[[12,36]]},"1220":{"position":[[12,36]]}}}],["encoder设计为可逆的（invertible），在训练阶段喂入多张图片，期待模型的向量符合某个随机分布。而在预测阶段，由于encoder是可逆的，输入从该随机分布中sampl",{"_index":1529,"t":{"975":{"position":[[0,128]]}}}],["encoder输出的prompt表示以及从随机分布sampl",{"_index":1443,"t":{"965":{"position":[[138,62]]}}}],["encoder阶段，每个block之后使用maxpool",{"_index":2913,"t":{"1345":{"position":[[42,37]]}}}],["encoder）的输出序列（通常是输入序列的表示），另一个来自解码器（decod",{"_index":1611,"t":{"994":{"position":[[1488,102]]},"1228":{"position":[[1488,102]]}}}],["encoder，psp",{"_index":1865,"t":{"1036":{"position":[[648,11]]},"1262":{"position":[[648,11]]}}}],["encoder，使用encod",{"_index":1518,"t":{"969":{"position":[[1116,17]]}}}],["encoder：根据输入的text",{"_index":1440,"t":{"965":{"position":[[83,17]]}}}],["encrypt",{"_index":2993,"t":{"1377":{"position":[[22,10]]},"1379":{"position":[[33,10],[77,10]]},"1381":{"position":[[33,10],[77,10]]}}}],["end",{"_index":64,"t":{"717":{"position":[[310,4],[345,6],[372,3],[418,4]]},"742":{"position":[[136,22]]},"839":{"position":[[164,5]]},"994":{"position":[[603,6]]},"1138":{"position":[[639,3]]},"1228":{"position":[[603,6]]}}}],["end[i",{"_index":50,"t":{"715":{"position":[[270,18]]}}}],["endif",{"_index":837,"t":{"868":{"position":[[203,6]]}}}],["endl",{"_index":31,"t":{"705":{"position":[[352,5],[391,5]]},"711":{"position":[[193,5]]},"732":{"position":[[122,5]]},"843":{"position":[[1646,5]]},"864":{"position":[[1700,5],[2046,5],[2341,5]]},"1321":{"position":[[1089,5]]}}}],["endoftext",{"_index":1737,"t":{"1025":{"position":[[640,9]]},"1251":{"position":[[640,9]]}}}],["endow",{"_index":2536,"t":{"1185":{"position":[[214,8]]}}}],["end{align*}p(b,c∣a)​=p(a)p(a,b,c)​=p(c∣a,b)⋅p(b∣a)p(a,b,c)​p(a,b,c)​=p(b∣a)⋅p(c∣a,b",{"_index":2658,"t":{"1201":{"position":[[512,86]]}}}],["end{align}h(p",{"_index":2227,"t":{"1126":{"position":[[1313,15]]}}}],["end{align}h(p)​=−i∑n​pi",{"_index":2194,"t":{"1126":{"position":[[411,25]]}}}],["end{cas",{"_index":2161,"t":{"1121":{"position":[[65,11],[201,11]]}}}],["enhanc",{"_index":2538,"t":{"1185":{"position":[[264,8]]}}}],["entail",{"_index":2041,"t":{"1088":{"position":[[463,43]]}}}],["entri",{"_index":1083,"t":{"879":{"position":[[654,5],[1737,5]]}}}],["entropi",{"_index":2073,"t":{"1092":{"position":[[131,7]]}}}],["entropy)，是描述两个概率分布p和q",{"_index":2200,"t":{"1126":{"position":[[539,29]]}}}],["entropy中的entropi",{"_index":2177,"t":{"1126":{"position":[[11,50]]}}}],["entrpoy",{"_index":2182,"t":{"1126":{"position":[[97,7]]}}}],["enumerate(train_it",{"_index":2401,"t":{"1150":{"position":[[1927,22]]}}}],["enum{dg",{"_index":845,"t":{"868":{"position":[[365,8]]}}}],["eot",{"_index":1723,"t":{"1025":{"position":[[156,4]]},"1027":{"position":[[120,3],[142,3],[188,6]]},"1039":{"position":[[42,3]]},"1251":{"position":[[156,4]]},"1253":{"position":[[120,3],[142,3],[188,6]]},"1267":{"position":[[188,3],[714,3]]}}}],["ep",{"_index":299,"t":{"821":{"position":[[467,3]]}}}],["epoch",{"_index":2398,"t":{"1150":{"position":[[1878,5]]},"1278":{"position":[[313,8]]}}}],["epsilon_\\theta",{"_index":1668,"t":{"1008":{"position":[[816,34]]}}}],["epsilon_{\\theta}ϵθ​是nois",{"_index":1665,"t":{"1008":{"position":[[688,28]]}}}],["epsilonϵ是从norm",{"_index":1658,"t":{"1008":{"position":[[97,18]]}}}],["equal",{"_index":436,"t":{"841":{"position":[[224,5]]}}}],["equal_rang",{"_index":494,"t":{"841":{"position":[[1942,11]]}}}],["equallinear",{"_index":1770,"t":{"1029":{"position":[[643,12]]},"1255":{"position":[[644,12]]}}}],["eras",{"_index":601,"t":{"847":{"position":[[768,7]]}}}],["errno.h",{"_index":240,"t":{"815":{"position":[[50,7]]}}}],["error",{"_index":833,"t":{"868":{"position":[[115,5],[1329,6],[1392,6],[1650,6]]},"895":{"position":[[347,6]]}}}],["estim",{"_index":2269,"t":{"1131":{"position":[[330,8]]}}}],["eta",{"_index":2103,"t":{"1100":{"position":[[435,4],[454,4]]}}}],["etc",{"_index":1730,"t":{"1025":{"position":[[224,5],[496,5]]},"1251":{"position":[[224,5],[496,5]]}}}],["evalu",{"_index":2252,"t":{"1129":{"position":[[67,8]]}}}],["evaluate_accuracy_gpu(net",{"_index":2352,"t":{"1150":{"position":[[900,26],[2378,26]]}}}],["evaluation）是一个评估自然语言处理模型在多个任务上综合性能的基准（benchmark）。它旨在测试模型对各种语言任务的通用理解能力。glu",{"_index":2031,"t":{"1088":{"position":[[139,75]]}}}],["exactli",{"_index":2265,"t":{"1131":{"position":[[220,7]]}}}],["exampl",{"_index":618,"t":{"849":{"position":[[90,30]]},"881":{"position":[[370,7]]},"895":{"position":[[1426,7]]}}}],["examples/sec",{"_index":2423,"t":{"1150":{"position":[[2596,12]]}}}],["excit",{"_index":2987,"t":{"1372":{"position":[[12,10]]}}}],["excitation激励操作就是通过sigmoid",{"_index":2991,"t":{"1372":{"position":[[153,42]]}}}],["execut",{"_index":1238,"t":{"895":{"position":[[788,7]]}}}],["exit",{"_index":1061,"t":{"879":{"position":[[109,4],[1321,4]]}}}],["exit(0",{"_index":1148,"t":{"879":{"position":[[2343,8]]}}}],["exit(1",{"_index":1077,"t":{"879":{"position":[[426,8],[1641,8]]}}}],["exit(overflow",{"_index":892,"t":{"868":{"position":[[1705,15]]}}}],["export",{"_index":2850,"t":{"1309":{"position":[[52,6],[93,6],[133,6]]}}}],["extra_c_opt",{"_index":1263,"t":{"895":{"position":[[1271,15],[1341,15]]}}}],["extract",{"_index":2062,"t":{"1088":{"position":[[1160,10]]}}}],["e将lat",{"_index":1452,"t":{"965":{"position":[[416,8]]}}}],["e系列以及google的imagen",{"_index":1448,"t":{"965":{"position":[[328,24]]}}}],["f",{"_index":687,"t":{"861":{"position":[[313,7]]},"875":{"position":[[237,2],[573,3]]},"1055":{"position":[[3096,1]]},"1119":{"position":[[290,1]]},"1121":{"position":[[279,1]]},"1150":{"position":[[94,1]]}}}],["f(u)=∑x=0n−1f(x)e−j2πuxn(9)f(u)=\\sum_{x=0}^{n",{"_index":1328,"t":{"908":{"position":[[892,45]]}}}],["f(u)=∫−∞+∞f(x)e−j2πuxdx(5)f(u)=\\int_",{"_index":1314,"t":{"908":{"position":[[290,37]]}}}],["f(u,v)=∑x=0m−1∑y=0n−1f(x,y)e−j2π(uxm+vyn)(11)f(u,v)=\\sum_{x=0}^{m",{"_index":1335,"t":{"908":{"position":[[1153,65]]}}}],["f(u,v)=∫−∞∞∫−∞∞f(x,y)e−j2π(ux+vy)dxdy(7)f(u,v)=\\int_",{"_index":1321,"t":{"908":{"position":[[523,53]]}}}],["f(x",{"_index":2173,"t":{"1124":{"position":[[176,4]]}}}],["f(x)=1n∑u=0n−1f(u)ej2πuxn(10)f(x)=\\frac{1}{n}\\sum_{u=0}^{n",{"_index":1332,"t":{"908":{"position":[[1015,58]]}}}],["f(x)={0x<0xx≥0(3)f(x",{"_index":2158,"t":{"1121":{"position":[[0,21]]}}}],["f(x)=∫−∞∞f(u)ej2πuxdu(6)f(x)=\\int_",{"_index":1318,"t":{"908":{"position":[[410,35]]}}}],["f(x)]^2",{"_index":2170,"t":{"1124":{"position":[[102,9],[210,9]]}}}],["f(x,y)=1mn∑u=0m−1∑v=0n−1f(u,v)ej2π(uxm+vyn)(12)f(x,y)=\\frac{1}{mn}\\sum_{u=0}^{m",{"_index":1339,"t":{"908":{"position":[[1350,79]]}}}],["f(x,y)=∫−∞∞∫−∞∞f(u,v)ej2π(ux+vy)dudv(8)f(x,y)=\\int_",{"_index":1325,"t":{"908":{"position":[[705,52]]}}}],["f(x,y)f(x,y)f(x,y)经过退化系统h(x,y)h(x,y)h(x,y)后再与噪声n(x,y)n(x,y)n(x,y)叠加，得到最后退化的图像g(x,y)g(x,y)g(x,i",{"_index":1406,"t":{"939":{"position":[[0,98]]}}}],["f,a",{"_index":935,"t":{"868":{"position":[[2768,3]]}}}],["f,b",{"_index":936,"t":{"868":{"position":[[2772,3]]}}}],["f,e",{"_index":937,"t":{"868":{"position":[[2776,3]]}}}],["f.relu(x",{"_index":2166,"t":{"1121":{"position":[[328,9]]}}}],["f.sigmoid(x",{"_index":2156,"t":{"1119":{"position":[[339,12]]}}}],["f.softmax(scor",{"_index":1932,"t":{"1055":{"position":[[1691,17],[3987,17]]}}}],["f1",{"_index":232,"t":{"812":{"position":[[131,2],[146,2]]}}}],["f10",{"_index":236,"t":{"812":{"position":[[269,3]]}}}],["f11",{"_index":237,"t":{"812":{"position":[[280,3]]}}}],["f12",{"_index":230,"t":{"812":{"position":[[73,3],[89,3]]}}}],["f5",{"_index":235,"t":{"812":{"position":[[245,2],[260,2]]}}}],["f=0",{"_index":1048,"t":{"875":{"position":[[623,4]]}}}],["f=1",{"_index":1054,"t":{"875":{"position":[[801,4]]}}}],["factor",{"_index":1956,"t":{"1055":{"position":[[2541,6]]}}}],["fals",{"_index":376,"t":{"826":{"position":[[862,7]]},"864":{"position":[[540,6],[1327,6],[1753,7],[2087,7]]},"866":{"position":[[736,6],[2257,20]]},"868":{"position":[[86,5]]},"1290":{"position":[[141,6]]}}}],["fa根据当前的状态及扫描的输入字符，便能唯一地知道fa",{"_index":188,"t":{"767":{"position":[[24,49]]}}}],["fcn",{"_index":2967,"t":{"1358":{"position":[[235,9]]}}}],["featur",{"_index":1794,"t":{"1031":{"position":[[778,8]]},"1033":{"position":[[1781,62]]},"1209":{"position":[[30,9]]},"1257":{"position":[[778,8]]},"1259":{"position":[[1778,62]]}}}],["few",{"_index":2544,"t":{"1188":{"position":[[95,3],[105,5]]}}}],["fewshot",{"_index":2575,"t":{"1188":{"position":[[602,7]]}}}],["fid",{"_index":1834,"t":{"1033":{"position":[[1373,3],[1460,3],[1603,3],[1665,3],[1747,3],[1893,4]]},"1259":{"position":[[1370,3],[1457,3],[1600,3],[1662,3],[1744,3],[1890,4]]}}}],["fid=∥μ1−μ2∥22+tr(σ1+σ2−2(σ1σ2)12)(1)\\mathrm{fid}=\\left\\|\\mu_1",{"_index":1482,"t":{"967":{"position":[[378,61]]}}}],["fid中，做出了如下重要的假设：将生成的图像真实的图像经过cnn输出的representation看作是sample自两个高斯分布的随机变量。然后，通过计算两个特征向量的均值和协方差矩阵来得到两个高斯分布的参数。最后，利用两个高斯分布之间的fréchet",{"_index":1481,"t":{"967":{"position":[[229,148]]}}}],["fid指标需要一定数量的生成图像和真实图像来进行统计估计。这是因为fid",{"_index":1487,"t":{"967":{"position":[[818,93]]}}}],["fid提供一个pr",{"_index":1478,"t":{"967":{"position":[[78,10]]}}}],["fid（fréchet",{"_index":1475,"t":{"967":{"position":[[45,11]]}}}],["file",{"_index":1105,"t":{"879":{"position":[[986,4]]},"881":{"position":[[387,5]]},"893":{"position":[[11,6]]},"895":{"position":[[1228,5],[1443,5]]},"1211":{"position":[[458,4]]}}}],["file=/usr/local/share/bochs/bio",{"_index":1165,"t":{"881":{"position":[[541,32]]},"895":{"position":[[1597,32]]}}}],["file=/usr/local/share/bochs/vgabio",{"_index":1161,"t":{"881":{"position":[[466,35]]},"895":{"position":[[1522,35]]}}}],["filesystem",{"_index":1122,"t":{"879":{"position":[[1790,12]]}}}],["fill",{"_index":454,"t":{"841":{"position":[[694,4]]}}}],["fill_n",{"_index":455,"t":{"841":{"position":[[714,6]]}}}],["filter",{"_index":1358,"t":{"926":{"position":[[63,7]]}}}],["filter都对输入图像的所有通道完成一次卷积，filter中的kernel",{"_index":2120,"t":{"1104":{"position":[[46,59]]}}}],["final",{"_index":2275,"t":{"1133":{"position":[[109,5]]}}}],["find",{"_index":437,"t":{"841":{"position":[[241,4]]},"1051":{"position":[[205,4]]},"1055":{"position":[[2496,4]]}}}],["find_end",{"_index":438,"t":{"841":{"position":[[262,8]]}}}],["find_first_of",{"_index":440,"t":{"841":{"position":[[295,13]]}}}],["find_if",{"_index":442,"t":{"841":{"position":[[336,7]]}}}],["find_if_notc++11",{"_index":443,"t":{"841":{"position":[[360,16]]}}}],["findallpath(algraph",{"_index":903,"t":{"868":{"position":[[2220,19]]}}}],["findallpath(g",{"_index":921,"t":{"868":{"position":[[2588,14],[3068,14]]}}}],["finder小组件中appl",{"_index":2821,"t":{"1303":{"position":[[273,21]]}}}],["finder栏中plasmoid",{"_index":2824,"t":{"1305":{"position":[[0,29]]}}}],["find，拷贝copy，删除erase，替换replace，插入insert",{"_index":583,"t":{"847":{"position":[[287,41]]}}}],["fine",{"_index":1614,"t":{"998":{"position":[[570,9]]},"1084":{"position":[[259,7]]},"1188":{"position":[[150,7],[454,4]]},"1232":{"position":[[570,9]]}}}],["first",{"_index":327,"t":{"824":{"position":[[24,6]]},"826":{"position":[[280,6]]},"843":{"position":[[765,6]]},"845":{"position":[[786,6]]},"871":{"position":[[178,6]]},"873":{"position":[[178,6]]}}}],["first(该非终结符)减去ϵ\\epsilonϵ的所有终结符元素都加入至follow",{"_index":200,"t":{"774":{"position":[[155,52]]}}}],["first=1",{"_index":1011,"t":{"871":{"position":[[1745,8]]},"873":{"position":[[1410,8]]}}}],["first=tru",{"_index":2810,"t":{"1300":{"position":[[308,22]]}}}],["firstarc",{"_index":853,"t":{"868":{"position":[[536,10]]}}}],["first和last",{"_index":558,"t":{"845":{"position":[[150,47]]}}}],["first和last所指定的序列[first",{"_index":535,"t":{"843":{"position":[[781,28],[884,29],[1177,33]]},"845":{"position":[[802,28],[905,29]]}}}],["first意味着不同序列中同一个时刻对应的输入单元在内存中是毗邻的，这样才能做到真正的batch",{"_index":2815,"t":{"1300":{"position":[[505,51]]}}}],["first意味着模型的输入（一个tensor）在内存中存储时，先存储第一个sequence，再存储第二个，而如果是seq_len",{"_index":2812,"t":{"1300":{"position":[[375,64]]}}}],["first集、follow集是针对于符号串而言的，而select",{"_index":201,"t":{"776":{"position":[[4,49]]}}}],["first，模型的输入在内存中，先存储每一个sequ",{"_index":2813,"t":{"1300":{"position":[[440,56]]}}}],["fish的配置文件：~/.config/fish/config.fish",{"_index":2859,"t":{"1311":{"position":[[0,36]]}}}],["flag",{"_index":20,"t":{"705":{"position":[[93,4],[236,4],[322,5]]},"895":{"position":[[1200,5]]}}}],["flexibl",{"_index":2539,"t":{"1185":{"position":[[273,12]]}}}],["flip",{"_index":162,"t":{"746":{"position":[[183,7]]}}}],["float",{"_index":332,"t":{"824":{"position":[[59,5]]},"831":{"position":[[178,5],[191,5]]}}}],["float.h",{"_index":241,"t":{"815":{"position":[[65,7]]}}}],["floppya",{"_index":1169,"t":{"881":{"position":[[620,8],[658,9]]},"895":{"position":[[1676,8],[1714,9]]}}}],["fno",{"_index":1264,"t":{"895":{"position":[[1321,3]]}}}],["focal",{"_index":2984,"t":{"1370":{"position":[[0,5]]}}}],["fold",{"_index":2247,"t":{"1129":{"position":[[2,4],[128,4],[198,6],[268,4]]},"1131":{"position":[[23,4],[61,5],[122,5],[204,4]]}}}],["follow",{"_index":198,"t":{"774":{"position":[[4,20],[25,29],[130,24]]},"1207":{"position":[[69,6]]}}}],["follow集加入到该非终结符的follow",{"_index":199,"t":{"774":{"position":[[89,40]]}}}],["follow集解决的话则是slr(1",{"_index":221,"t":{"798":{"position":[[222,29]]}}}],["font",{"_index":2760,"t":{"1290":{"position":[[415,4]]}}}],["for(i,f_start,f_end",{"_index":282,"t":{"821":{"position":[[141,20]]}}}],["for(int",{"_index":283,"t":{"821":{"position":[[162,7]]},"864":{"position":[[901,7],[1334,7],[1981,7],[2270,7]]},"866":{"position":[[1828,7],[1956,7]]},"871":{"position":[[1275,7],[1754,7],[1806,7],[1855,7]]},"873":{"position":[[977,7],[1419,7],[1463,7],[1504,7]]},"875":{"position":[[690,7],[732,7]]}}}],["for_each",{"_index":444,"t":{"841":{"position":[[394,8]]}}}],["forcing与mask",{"_index":1600,"t":{"994":{"position":[[892,14],[947,14]]},"1228":{"position":[[892,14],[947,14]]}}}],["forcing出现的问题，避免了训练与推理阶段的mismatch",{"_index":1626,"t":{"1002":{"position":[[133,43]]},"1236":{"position":[[133,43]]}}}],["forcing时却可以得到第i+1i+1i+1个及其之后词汇的注意力信息，如果不添加其他策略显然会对模型的泛化能力造成很大的影响，而且这并不符合自回归（autoregression）的特性。为了解决这个问题，掩码多头注意力机制应运而生，在训练阶段将模型在时间发展顺序的右侧的输入mask",{"_index":1622,"t":{"1000":{"position":[[298,163]]},"1234":{"position":[[298,163]]}}}],["forcing策略有很大的关系，具体分析见下文《teach",{"_index":1599,"t":{"994":{"position":[[860,31]]},"1228":{"position":[[860,31]]}}}],["forcing策略，将ground",{"_index":1619,"t":{"1000":{"position":[[158,17]]},"1234":{"position":[[158,17]]}}}],["forcing，一次性输入为两个词汇voc1voc_1voc1​与voc2voc_2voc2",{"_index":1629,"t":{"1002":{"position":[[449,54]]},"1236":{"position":[[449,54]]}}}],["fork",{"_index":1686,"t":{"1012":{"position":[[69,4]]},"1238":{"position":[[69,4]]},"1305":{"position":[[179,6]]}}}],["forward",{"_index":1640,"t":{"1006":{"position":[[31,7],[118,7]]}}}],["forward(self",{"_index":2329,"t":{"1150":{"position":[[368,13],[859,13]]}}}],["found",{"_index":741,"t":{"864":{"position":[[1266,6],[1319,5],[1551,5],[1579,8]]},"965":{"position":[[730,5]]}}}],["four",{"_index":333,"t":{"824":{"position":[[65,5]]}}}],["four：0.25",{"_index":348,"t":{"826":{"position":[[291,9]]}}}],["frac12dkl​(p,q)=logσ1​σ2​​+2σ22​σ12​+(μ1​−μ2​)2​−21",{"_index":2664,"t":{"1201":{"position":[[883,53]]}}}],["frac1n\\sum_{i=1}^ny_i\\log(p_i)\\tag{1}l=−n1​i=1∑n​yi​log(pi​)(1",{"_index":2023,"t":{"1086":{"position":[[296,64]]}}}],["frac{1",{"_index":1675,"t":{"1010":{"position":[[305,7]]}}}],["frac{1}{1",{"_index":2143,"t":{"1119":{"position":[[26,10]]}}}],["frac{\\lambda}{2",{"_index":2093,"t":{"1100":{"position":[[74,17],[255,17]]}}}],["frac{\\parti",{"_index":2099,"t":{"1100":{"position":[[299,14],[459,14]]}}}],["frac{\\sum{i(pred_i==y_i)}}{len(i",{"_index":2456,"t":{"1175":{"position":[[160,35]]}}}],["frac{d(u,v",{"_index":1376,"t":{"926":{"position":[[1117,12]]},"928":{"position":[[633,12]]}}}],["frac{d(u,v)}{d_0}]^n}\\tag{17}h(u,v)=e−[d0​d(u,v)​]n(17",{"_index":1372,"t":{"926":{"position":[[827,57]]}}}],["frac{d_0}{d(u,v)}]^n}\\tag{21}h(u,v)=e−[d(u,v)d0​​]n(21",{"_index":1392,"t":{"928":{"position":[[464,57]]}}}],["frac{p(a,b,c)}{\\frac{p(a,b,c)}{p(c",{"_index":2653,"t":{"1201":{"position":[[408,35]]}}}],["frac{p(a,b,c)}{p(a",{"_index":2652,"t":{"1201":{"position":[[380,21]]}}}],["frac{p(b|a",{"_index":2891,"t":{"1329":{"position":[[469,12]]},"1339":{"position":[[469,12]]}}}],["frac{shape_{input",{"_index":2308,"t":{"1145":{"position":[[273,19]]},"1159":{"position":[[343,19]]}}}],["frac{ux}{m}+\\frac{vy}{n})}\\tag{11}f(u,v)=x=0∑m−1​y=0∑n−1​f(x,y)e−j2π(mux​+nvy​)(11",{"_index":1338,"t":{"908":{"position":[[1253,85]]}}}],["frac{ux}{m}+\\frac{vy}{n})}\\tag{12}f(x,y)=mn1​u=0∑m−1​v=0∑n−1​f(u,v)ej2π(mux​+nvy​)(12",{"_index":1342,"t":{"908":{"position":[[1463,88]]}}}],["frac{w}{2}\\\\1&d_0",{"_index":1398,"t":{"930":{"position":[[149,18]]}}}],["frac{w}{2}\\leq",{"_index":1399,"t":{"930":{"position":[[168,15]]}}}],["free",{"_index":178,"t":{"761":{"position":[[54,4]]},"879":{"position":[[895,4]]}}}],["freebsd",{"_index":1243,"t":{"895":{"position":[[891,8]]}}}],["freez",{"_index":1782,"t":{"1031":{"position":[[148,6]]},"1188":{"position":[[406,6]]},"1257":{"position":[[148,6]]}}}],["front",{"_index":81,"t":{"726":{"position":[[91,8]]}}}],["fréchet",{"_index":1830,"t":{"1033":{"position":[[1108,7],[1634,7]]},"1259":{"position":[[1105,7],[1631,7]]}}}],["ftfi",{"_index":1699,"t":{"1017":{"position":[[136,4]]},"1243":{"position":[[136,4]]}}}],["function",{"_index":2154,"t":{"1119":{"position":[[276,10]]},"1121":{"position":[[265,10]]},"1150":{"position":[[80,10]]},"1309":{"position":[[31,8],[200,8]]}}}],["function中起到更新的作用，因此不进行nm",{"_index":2957,"t":{"1354":{"position":[[760,25]]}}}],["g",{"_index":725,"t":{"864":{"position":[[774,2],[1153,2]]},"866":{"position":[[1070,2]]},"868":{"position":[[938,2],[2240,2],[2824,2]]}}}],["g(8",{"_index":375,"t":{"826":{"position":[[857,4]]},"864":{"position":[[1748,4]]}}}],["g(x,y)]^2\\tag{4}mse=mn1​x=1∑m​y=1∑n​[f(x,y)−g(x,y)]2(4",{"_index":1308,"t":{"904":{"position":[[118,55]]}}}],["g(z)g(z)g(z)是生成器的输出，d(g(z))d(g(z))d(g(z))是生成样本输入到判别器后的输出，zzz是随机噪声，eee",{"_index":2009,"t":{"1076":{"position":[[901,78]]}}}],["g(z)g(z)g(z)是生成器的输出，zzz是随机噪声，eee",{"_index":2004,"t":{"1076":{"position":[[462,41]]}}}],["g.addedge(0",{"_index":746,"t":{"864":{"position":[[1761,12],[1778,12]]}}}],["g.addedge(1",{"_index":747,"t":{"864":{"position":[[1795,12]]}}}],["g.addedge(3",{"_index":748,"t":{"864":{"position":[[1812,12],[1829,12]]}}}],["g.addedge(4",{"_index":750,"t":{"864":{"position":[[1846,12],[1863,12]]}}}],["g.addedge(5",{"_index":752,"t":{"864":{"position":[[1880,12],[1897,12]]}}}],["g.addedge(6",{"_index":753,"t":{"864":{"position":[[1914,12]]}}}],["g.addedge(src,dst",{"_index":782,"t":{"866":{"position":[[1155,19]]}}}],["g.bfs(0",{"_index":755,"t":{"864":{"position":[[1948,9]]}}}],["g.erase(g.begin",{"_index":731,"t":{"864":{"position":[[862,19]]}}}],["g.pop_back",{"_index":745,"t":{"864":{"position":[[1672,13]]}}}],["g.push_back(id1",{"_index":736,"t":{"864":{"position":[[1026,17],[1459,17]]}}}],["g.push_back(start",{"_index":727,"t":{"864":{"position":[[782,19],[1161,19]]}}}],["g.vers[i].data",{"_index":872,"t":{"868":{"position":[[1009,15]]}}}],["g.vers[path[i]].data",{"_index":914,"t":{"868":{"position":[[2429,21]]}}}],["g.vertexs.begin",{"_index":784,"t":{"866":{"position":[[1207,18]]}}}],["g.vertexs[u].connectors.clear();//清空u",{"_index":814,"t":{"866":{"position":[[2130,42]]}}}],["g1(6",{"_index":758,"t":{"864":{"position":[[2081,5]]}}}],["g1.addedge(0",{"_index":759,"t":{"864":{"position":[[2095,13],[2113,13],[2131,13]]}}}],["g1.addedge(1",{"_index":760,"t":{"864":{"position":[[2149,13]]}}}],["g1.addedge(2",{"_index":763,"t":{"864":{"position":[[2221,13]]}}}],["g1.addedge(4",{"_index":761,"t":{"864":{"position":[[2167,13]]}}}],["g1.addedge(5",{"_index":762,"t":{"864":{"position":[[2185,13],[2203,13]]}}}],["g1.dfs(0",{"_index":765,"t":{"864":{"position":[[2259,10]]}}}],["g=graph(n",{"_index":778,"t":{"866":{"position":[[1097,10]]}}}],["g[0",{"_index":730,"t":{"864":{"position":[[856,5]]}}}],["g[g.size",{"_index":742,"t":{"864":{"position":[[1304,10],[1600,10]]}}}],["gan",{"_index":1808,"t":{"1033":{"position":[[0,8]]},"1068":{"position":[[0,9],[268,86]]},"1070":{"position":[[296,98]]},"1188":{"position":[[466,5],[795,3]]},"1259":{"position":[[0,8]]}}}],["gan模型的结构分为generator和discriminator，其中generator接受来自随机分布的向量，产生预期图像；discrimin",{"_index":1530,"t":{"977":{"position":[[0,221]]}}}],["gan（gen",{"_index":1990,"t":{"1070":{"position":[[0,14]]}}}],["gan）或变分自动编码器（vae）等生成模型，uncondit",{"_index":1994,"t":{"1072":{"position":[[269,45]]}}}],["gaussian",{"_index":1907,"t":{"1055":{"position":[[570,9]]}}}],["gcc",{"_index":1229,"t":{"895":{"position":[[654,3],[973,3]]}}}],["geeko",{"_index":1056,"t":{"879":{"position":[[0,8],[640,6]]},"881":{"position":[[0,16]]},"885":{"position":[[110,12],[123,7],[206,25],[270,16]]},"887":{"position":[[70,15]]},"889":{"position":[[0,18]]},"893":{"position":[[0,10],[34,14]]},"895":{"position":[[34,8],[360,8],[584,8],[1149,8],[1371,7],[2132,15]]}}}],["geekos!\\n",{"_index":1141,"t":{"879":{"position":[[2093,12]]}}}],["geekos/bootinfo.h",{"_index":1106,"t":{"879":{"position":[[1014,19]]}}}],["geekos/crc32.h",{"_index":1110,"t":{"879":{"position":[[1121,16]]}}}],["geekos/int.h",{"_index":1112,"t":{"879":{"position":[[1171,14]]}}}],["geekos/keyboard.h",{"_index":1116,"t":{"879":{"position":[[1274,19]]}}}],["geekos/kthread.h",{"_index":1113,"t":{"879":{"position":[[1195,18]]}}}],["geekos/mem.h",{"_index":1109,"t":{"879":{"position":[[1097,14]]}}}],["geekos/screen.h",{"_index":1108,"t":{"879":{"position":[[1070,17]]}}}],["geekos/string.h",{"_index":1107,"t":{"879":{"position":[[1043,17]]}}}],["geekos/timer.h",{"_index":1115,"t":{"879":{"position":[[1248,16]]}}}],["geekos/trap.h",{"_index":1114,"t":{"879":{"position":[[1223,15]]}}}],["geekos/tss.h",{"_index":1111,"t":{"879":{"position":[[1147,14]]}}}],["geekos中makefil",{"_index":1216,"t":{"895":{"position":[[193,23],[238,19]]}}}],["geekos是一个基于x86",{"_index":1192,"t":{"885":{"position":[[0,27]]}}}],["geekos环境的配置，下面我们来验证环境配置的成功与否以及project",{"_index":1055,"t":{"877":{"position":[[0,49]]}}}],["geekos设计的7",{"_index":1197,"t":{"885":{"position":[[174,20]]}}}],["geekos运行依托于boch",{"_index":1203,"t":{"887":{"position":[[21,17]]}}}],["gener",{"_index":456,"t":{"841":{"position":[[742,8]]},"895":{"position":[[907,9]]},"965":{"position":[[114,10]]},"969":{"position":[[0,10],[18,10],[267,11],[771,10],[934,11]]},"1012":{"position":[[41,10]]},"1070":{"position":[[106,15]]},"1072":{"position":[[4,33],[159,11],[185,83],[315,89],[417,11]]},"1183":{"position":[[84,10]]},"1185":{"position":[[241,9]]},"1188":{"position":[[0,10],[314,10],[616,10]]},"1238":{"position":[[41,10]]}}}],["general_opt",{"_index":1223,"t":{"895":{"position":[[490,15],[541,15],[1246,12],[1295,12]]}}}],["generate_n",{"_index":457,"t":{"841":{"position":[[786,10]]}}}],["generator_train",{"_index":1780,"t":{"1031":{"position":[[16,53]]},"1257":{"position":[[16,53]]}}}],["generator）通常接收一个来自潜在空间（lat",{"_index":1989,"t":{"1064":{"position":[[0,33]]}}}],["geq",{"_index":2160,"t":{"1121":{"position":[[56,4],[192,4]]}}}],["getheight(int",{"_index":985,"t":{"871":{"position":[[970,13]]},"873":{"position":[[680,13]]}}}],["getlin",{"_index":610,"t":{"847":{"position":[[1007,12]]}}}],["git+https://github.com/openai/clip.git",{"_index":1703,"t":{"1017":{"position":[[170,38]]},"1243":{"position":[[170,38]]}}}],["github",{"_index":2466,"t":{"1177":{"position":[[14,9]]},"1196":{"position":[[14,9]]},"1207":{"position":[[89,6]]},"1282":{"position":[[18,21]]}}}],["give",{"_index":1285,"t":{"897":{"position":[[228,4]]}}}],["given",{"_index":2681,"t":{"1209":{"position":[[24,5]]}}}],["global",{"_index":2833,"t":{"1305":{"position":[[136,6]]}}}],["global_clip_loss",{"_index":1777,"t":{"1029":{"position":[[960,27]]},"1255":{"position":[[961,27]]},"1269":{"position":[[68,16]]}}}],["global_step",{"_index":2729,"t":{"1278":{"position":[[232,14]]},"1280":{"position":[[198,14]]}}}],["glue",{"_index":2029,"t":{"1088":{"position":[[97,5],[851,4]]}}}],["glue（gener",{"_index":2030,"t":{"1088":{"position":[[103,12]]}}}],["gnu",{"_index":1248,"t":{"895":{"position":[[999,3]]}}}],["god",{"_index":1284,"t":{"897":{"position":[[216,4]]}}}],["good",{"_index":1283,"t":{"897":{"position":[[211,4]]}}}],["googl",{"_index":1704,"t":{"1019":{"position":[[14,6]]},"1211":{"position":[[187,6]]},"1245":{"position":[[14,6]]}}}],["gpt的结构是transformer的decod",{"_index":2070,"t":{"1092":{"position":[[0,39]]}}}],["gpt的自监督学习的特征体现在：在训练过程中，gpt根据输入的token预测输入的下一个token应该是什么，对输出的distribution与ground",{"_index":2071,"t":{"1092":{"position":[[40,78]]}}}],["gradient",{"_index":2458,"t":{"1175":{"position":[[297,8],[417,8]]},"1290":{"position":[[242,9]]}}}],["grammar，cfg",{"_index":179,"t":{"761":{"position":[[59,12]]}}}],["grammar，rg",{"_index":186,"t":{"761":{"position":[[265,11]]}}}],["graph",{"_index":358,"t":{"826":{"position":[[524,15],[555,5],[718,7],[844,6],[851,5]]},"864":{"position":[[258,15],[289,5],[1722,6],[1742,5],[2075,5]]},"866":{"position":[[399,15],[430,5],[593,7],[1057,6],[1064,5]]}}}],["graph(int",{"_index":363,"t":{"826":{"position":[[642,9]]},"864":{"position":[[376,9]]},"866":{"position":[[517,9]]}}}],["graphkind",{"_index":847,"t":{"868":{"position":[[379,10],[601,9]]}}}],["gray",{"_index":1142,"t":{"879":{"position":[[2137,7]]}}}],["greatli",{"_index":2537,"t":{"1185":{"position":[[256,7]]}}}],["green|bright",{"_index":1139,"t":{"879":{"position":[[2059,15]]}}}],["grid",{"_index":2940,"t":{"1354":{"position":[[207,6],[369,8],[472,6]]}}}],["grow",{"_index":1963,"t":{"1055":{"position":[[2664,4]]}}}],["guid",{"_index":2678,"t":{"1207":{"position":[[80,5]]}}}],["h",{"_index":379,"t":{"828":{"position":[[26,3]]},"868":{"position":[[1551,1],[1597,3]]},"879":{"position":[[703,2]]},"1145":{"position":[[20,1],[155,2],[442,1],[460,2]]},"1300":{"position":[[167,2]]},"1326":{"position":[[54,1]]},"1354":{"position":[[305,2]]},"1362":{"position":[[27,2],[150,2],[193,2]]},"1364":{"position":[[21,2]]},"1366":{"position":[[21,2],[94,2]]},"1372":{"position":[[53,2]]}}}],["h(p",{"_index":2190,"t":{"1126":{"position":[[312,4],[1157,4],[1213,4],[1231,4]]}}}],["h(p)=−∑inpi",{"_index":2187,"t":{"1126":{"position":[[259,11]]}}}],["h(u,v)=11+(2−1)[d(u,v)d0]2n(16)h(u,v)=\\frac{1}{1+(\\sqrt{2",{"_index":1365,"t":{"926":{"position":[[402,58]]}}}],["h(u,v)=11+(2−1)[d0d(u,v)]2n(20)h(u,v)=\\frac{1}{1+(\\sqrt{2",{"_index":1387,"t":{"928":{"position":[[214,58]]}}}],["h(u,v)=e−[d(u,v)d0]n(17)h(u,v)=",{"_index":1371,"t":{"926":{"position":[[792,34]]}}}],["h(u,v)=e−[d0d(u,v)]n(21)h(u,v)=",{"_index":1391,"t":{"928":{"position":[[429,34]]}}}],["h(u,v)={0d(u,v)<d0−w21d0−w2≤d(u,v)≤d0+w20d(u,v)≥d0+w2(23)h(u,v)=\\begin{cases}0&d(u,v)<d_0",{"_index":1397,"t":{"930":{"position":[[59,89]]}}}],["h(u,v)={1d(u,v)<d0d(u,v)−d1d0−d1d0≤d(u,v)≤d10d(u,v)>d1(18)h(u,v)=\\begin{cases}1&d(u,v)<d_0",{"_index":1375,"t":{"926":{"position":[[1021,92]]}}}],["h(u,v)={1d(u,v)<w10w1⩽d(u,v)≤w21d(u,v)>w2(24)h(u,v)=\\begin{cases}1&d(u,v)<w_1\\\\0&w_1\\leqsl",{"_index":1403,"t":{"930":{"position":[[420,93]]}}}],["h(u,v)={1d(u,v)>d00d(u,v)≤d0(19)h(u,v)=\\begin{cases}1&d(u,v)>d_0",{"_index":1383,"t":{"928":{"position":[[30,66]]}}}],["h(u,v)={1d(u,v)>d0d(u,v)−d1d0−d1d1≤d(u,v)≤d00d(u,v)<d1(22)h(u,v)=\\begin{cases}1&d(u,v)>d_0",{"_index":1394,"t":{"928":{"position":[[537,92]]}}}],["h(u,v)={1d(u,v)≤d00d(u,v)>d0(14)h(u,v)=\\begin{cases}1&d(u,v)\\leq",{"_index":1359,"t":{"926":{"position":[[71,64]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的0.707时的d(u,v)d(u,v)d(u,v",{"_index":1389,"t":{"928":{"position":[[345,68]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的0.707时的d(u,v)d(u,v)d(u,v)作为截止频率d0d_0d0",{"_index":1367,"t":{"926":{"position":[[533,69]]}}}],["h(u,v)h(u,v)h(u,v)下降到最大值的1/2时的d(u,v)d(u,v)d(u,v",{"_index":1370,"t":{"926":{"position":[[729,62]]}}}],["h,t",{"_index":876,"t":{"868":{"position":[[1182,4]]}}}],["han",{"_index":2546,"t":{"1188":{"position":[[220,8]]}}}],["happen",{"_index":1880,"t":{"1051":{"position":[[74,7]]}}}],["hash",{"_index":422,"t":{"839":{"position":[[609,19],[646,19],[678,19],[715,19]]}}}],["head",{"_index":1570,"t":{"990":{"position":[[57,4]]},"994":{"position":[[790,4],[913,4],[968,4],[1363,4]]},"1057":{"position":[[31,4]]},"1224":{"position":[[57,4]]},"1228":{"position":[[790,4],[913,4],[968,4],[1363,4]]}}}],["heap",{"_index":121,"t":{"736":{"position":[[30,5]]}}}],["heap.clear",{"_index":122,"t":{"736":{"position":[[36,13]]}}}],["heap.empti",{"_index":124,"t":{"736":{"position":[[63,13]]}}}],["heap.push",{"_index":126,"t":{"736":{"position":[[107,10]]}}}],["heap.siz",{"_index":123,"t":{"736":{"position":[[50,12]]}}}],["help",{"_index":1960,"t":{"1055":{"position":[[2593,5]]}}}],["higher",{"_index":2181,"t":{"1126":{"position":[[90,6],[132,6]]}}}],["highest",{"_index":1934,"t":{"1055":{"position":[[1730,7],[4026,7]]}}}],["hinton提出的一种卷积神经网络模型，它主要应用于图像分类任务。在当时，alexnet的表现远远超过了其他参赛的网络模型，并且在imagenet",{"_index":2136,"t":{"1111":{"position":[[55,83]]}}}],["hit",{"_index":1062,"t":{"879":{"position":[[114,3],[1326,3]]}}}],["hollings@cs.umd.edu",{"_index":1093,"t":{"879":{"position":[[783,21]]}}}],["hollingsworth",{"_index":1092,"t":{"879":{"position":[[769,13]]}}}],["honglak",{"_index":2551,"t":{"1188":{"position":[[270,7]]}}}],["host",{"_index":1236,"t":{"895":{"position":[[735,4],[805,4]]}}}],["host_cc",{"_index":1246,"t":{"895":{"position":[[962,7]]}}}],["hovemey",{"_index":1088,"t":{"879":{"position":[[706,9]]}}}],["http://127.0.0.1:7890",{"_index":2321,"t":{"1150":{"position":[[199,23]]}}}],["http_proxi",{"_index":2857,"t":{"1309":{"position":[[244,10]]}}}],["http_proxy=http://127.0.0.1:7890",{"_index":2852,"t":{"1309":{"position":[[100,32]]}}}],["https://127.0.0.1:7890",{"_index":2323,"t":{"1150":{"position":[[251,24]]}}}],["https://blog.csdn.net/f_zyj/article/details/51594851",{"_index":403,"t":{"837":{"position":[[4,52]]}}}],["https://download.csdn.net/download/f_zyj/9988653",{"_index":404,"t":{"837":{"position":[[57,48]]}}}],["https://www.bilibili.com/video/bv12u411s7us/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":212,"t":{"793":{"position":[[284,107]]}}}],["https://www.bilibili.com/video/bv13r4y1m7sq/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":219,"t":{"793":{"position":[[732,107]]}}}],["https://www.bilibili.com/video/bv1pl4y1e7re/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":209,"t":{"793":{"position":[[121,107]]}}}],["https://www.bilibili.com/video/bv1vm4y1q7xb/?spm_id_from=333.788&vd_source=24d8fcf68bc0e2b0003defe0995cf533",{"_index":215,"t":{"793":{"position":[[458,107]]}}}],["https://www.jianshu.com/p/41c15d301542",{"_index":2805,"t":{"1300":{"position":[[5,38]]}}}],["https_proxi",{"_index":2858,"t":{"1309":{"position":[[261,11]]}}}],["https_proxy=https://127.0.0.1:7890",{"_index":2853,"t":{"1309":{"position":[[140,34]]}}}],["hung",{"_index":2582,"t":{"1188":{"position":[[702,4]]}}}],["hw4",{"_index":2712,"t":{"1213":{"position":[[53,4]]}}}],["hw×cihw",{"_index":2294,"t":{"1143":{"position":[[51,15]]}}}],["hyperparamet",{"_index":2274,"t":{"1133":{"position":[[80,14]]}}}],["hyperstyl",{"_index":1850,"t":{"1036":{"position":[[16,10],[176,10]]},"1262":{"position":[[16,10],[176,10]]}}}],["h′以及w′h'以及w'h′以及w",{"_index":2306,"t":{"1145":{"position":[[177,24]]}}}],["i'll",{"_index":1271,"t":{"897":{"position":[[73,4],[125,4]]}}}],["i+1",{"_index":953,"t":{"868":{"position":[[3182,4]]}}}],["i,a,b",{"_index":874,"t":{"868":{"position":[[1144,6]]}}}],["i,j",{"_index":938,"t":{"868":{"position":[[2802,4]]}}}],["i,ji,ji,j代表输出神经元的二维索引坐标，h,wh,wh,w",{"_index":2433,"t":{"1157":{"position":[[27,49]]}}}],["i/o",{"_index":250,"t":{"815":{"position":[[188,5]]}}}],["i440fxsupport",{"_index":1182,"t":{"881":{"position":[[824,14]]},"895":{"position":[[1880,14]]}}}],["i<0",{"_index":880,"t":{"868":{"position":[[1316,5],[1379,5]]}}}],["i<=k",{"_index":911,"t":{"868":{"position":[[2386,5]]}}}],["i<g.vernum",{"_index":871,"t":{"868":{"position":[[987,11]]}}}],["i<max_vertex_num",{"_index":866,"t":{"868":{"position":[[821,17]]}}}],["i<pathnum",{"_index":950,"t":{"868":{"position":[[3144,10]]}}}],["i<pg",{"_index":883,"t":{"868":{"position":[[1451,4],[1512,4]]}}}],["i=0",{"_index":865,"t":{"868":{"position":[[815,5],[981,5],[1445,5],[1506,5],[2380,5],[3138,5]]}}}],["i=0;i<g.vertexs[u].connectors.size();i",{"_index":808,"t":{"866":{"position":[[1964,42]]}}}],["i=0;i<len;i",{"_index":996,"t":{"871":{"position":[[1283,14]]},"873":{"position":[[985,14]]}}}],["i=0;i<n;i",{"_index":803,"t":{"866":{"position":[[1836,13]]},"871":{"position":[[1762,12],[1814,12],[1863,12]]},"873":{"position":[[1427,12],[1471,12],[1512,12]]},"875":{"position":[[698,12],[740,12]]}}}],["i=f_start;i<=f_end;++i",{"_index":284,"t":{"821":{"position":[[170,23]]}}}],["iccv",{"_index":1839,"t":{"1033":{"position":[[1699,4]]},"1259":{"position":[[1696,4]]}}}],["iclr",{"_index":2553,"t":{"1188":{"position":[[350,5]]}}}],["icom",{"_index":2843,"t":{"1305":{"position":[[289,4]]}}}],["icon",{"_index":2842,"t":{"1305":{"position":[[239,4],[256,5],[304,5]]}}}],["id",{"_index":353,"t":{"826":{"position":[[425,3]]},"864":{"position":[[154,3],[209,3],[851,2],[1299,2]]},"866":{"position":[[300,3]]},"1290":{"position":[[67,3]]}}}],["id(nid",{"_index":717,"t":{"864":{"position":[[237,7]]}}}],["id(nid),indegree(0),outdegree(0",{"_index":357,"t":{"826":{"position":[[478,32]]},"866":{"position":[[353,32]]}}}],["id,indegree,outdegre",{"_index":351,"t":{"826":{"position":[[351,22]]},"866":{"position":[[226,22]]}}}],["id1",{"_index":372,"t":{"826":{"position":[[799,4]]},"864":{"position":[[478,4],[962,3],[1395,3],[1539,3]]},"866":{"position":[[674,4]]}}}],["id2",{"_index":373,"t":{"826":{"position":[[808,4]]},"864":{"position":[[487,4],[509,4],[1594,3],[1634,5],[1660,3]]},"866":{"position":[[683,4],[705,4]]}}}],["id;int",{"_index":378,"t":{"828":{"position":[[19,6]]}}}],["idea",{"_index":2255,"t":{"1129":{"position":[[114,4]]}}}],["ideal",{"_index":1355,"t":{"926":{"position":[[48,5]]}}}],["ident",{"_index":1848,"t":{"1033":{"position":[[1944,8]]},"1259":{"position":[[1941,8]]}}}],["idx",{"_index":2866,"t":{"1319":{"position":[[99,3],[174,4],[554,6]]},"1321":{"position":[[186,3],[261,4],[641,6]]}}}],["if(!((keycod",{"_index":1067,"t":{"879":{"position":[[186,13],[1398,13]]}}}],["if((keycod",{"_index":1072,"t":{"879":{"position":[[303,11],[1515,11]]}}}],["if(a",{"_index":107,"t":{"728":{"position":[[264,4]]}}}],["if(f",{"_index":1047,"t":{"875":{"position":[[617,5]]}}}],["if(indegreelist[i]==0",{"_index":804,"t":{"866":{"position":[[1850,23]]}}}],["if(indegreelist[v]==0){//顶点v的入度减为0",{"_index":812,"t":{"866":{"position":[[2077,37]]}}}],["if(is_list",{"_index":820,"t":{"866":{"position":[[2339,14]]}}}],["if(is_tre",{"_index":822,"t":{"866":{"position":[[2381,14]]}}}],["if(l2>r2",{"_index":1037,"t":{"875":{"position":[[352,9]]}}}],["if(la>ra",{"_index":970,"t":{"871":{"position":[[365,9],[707,9]]},"873":{"position":[[266,9],[495,9]]}}}],["if(n==0||m==0",{"_index":818,"t":{"866":{"position":[[2300,15]]}}}],["if(num==n",{"_index":816,"t":{"866":{"position":[[2196,10]]}}}],["if(read_key(&keycod",{"_index":1066,"t":{"879":{"position":[[161,22],[1373,22]]}}}],["if(rt",{"_index":1046,"t":{"875":{"position":[[560,7]]}}}],["if(rt==0",{"_index":986,"t":{"871":{"position":[[990,9],[1380,9],[1495,9],[1611,9]]},"873":{"position":[[700,9],[1061,9],[1168,9],[1276,9]]}}}],["if(t[w].l!=0",{"_index":991,"t":{"871":{"position":[[1195,13]]},"873":{"position":[[897,13]]}}}],["if(t[w].r!=0",{"_index":993,"t":{"871":{"position":[[1225,13]]},"873":{"position":[[927,13]]}}}],["if(topologicalsort",{"_index":824,"t":{"866":{"position":[[2423,22]]}}}],["ifm",{"_index":2752,"t":{"1290":{"position":[[266,3],[300,3],[339,3],[379,3]]}}}],["ifndef",{"_index":830,"t":{"868":{"position":[[37,7]]}}}],["ihpf",{"_index":1382,"t":{"928":{"position":[[15,14]]}}}],["illustr",{"_index":1866,"t":{"1043":{"position":[[11,12]]}}}],["ilpf",{"_index":1353,"t":{"926":{"position":[[18,14],[37,4]]}}}],["imag",{"_index":1469,"t":{"965":{"position":[[845,5]]},"967":{"position":[[977,5]]},"1031":{"position":[[1104,5]]},"1033":{"position":[[1628,5]]},"1185":{"position":[[0,10],[202,5]]},"1188":{"position":[[610,5]]},"1257":{"position":[[1104,5]]},"1259":{"position":[[1625,5]]},"1267":{"position":[[267,5],[351,5],[498,5]]}}}],["imagenet",{"_index":1821,"t":{"1033":{"position":[[913,8],[1231,10],[1268,8]]},"1259":{"position":[[910,8],[1228,10],[1265,8]]}}}],["imagen将压缩版本的图片作为gener",{"_index":1449,"t":{"965":{"position":[[353,28]]}}}],["imagen的实验结果，相对于decoder即diffus",{"_index":1453,"t":{"965":{"position":[[447,34]]}}}],["image数据，在传入visdom时仍需要先转化为numpi",{"_index":2732,"t":{"1278":{"position":[[355,35]]}}}],["impact",{"_index":1467,"t":{"965":{"position":[[791,9]]}}}],["import",{"_index":1461,"t":{"965":{"position":[[623,9]]},"1055":{"position":[[3053,6],[3066,6],[3098,6],[3117,6]]},"1119":{"position":[[269,6],[292,6]]},"1121":{"position":[[258,6],[281,6]]},"1126":{"position":[[1474,6]]},"1150":{"position":[[0,6],[13,6],[43,6],[73,6],[105,6],[141,6],[162,6]]},"1278":{"position":[[12,6]]},"1280":{"position":[[12,6]]},"1294":{"position":[[259,6],[278,6]]}}}],["improv",{"_index":1463,"t":{"965":{"position":[[702,8]]}}}],["in[maxn",{"_index":1029,"t":{"875":{"position":[[255,9]]}}}],["incept",{"_index":1476,"t":{"967":{"position":[[57,9]]},"1033":{"position":[[17,9],[66,9],[554,9],[758,9],[826,9],[1116,9],[1213,9],[1242,9],[1406,9],[1642,9],[1763,9]]},"1259":{"position":[[17,9],[66,9],[552,9],[756,9],[824,9],[1113,9],[1210,9],[1239,9],[1403,9],[1639,9],[1760,9]]}}}],["includ",{"_index":7,"t":{"705":{"position":[[0,8]]},"711":{"position":[[0,8]]},"717":{"position":[[0,8]]},"744":{"position":[[0,8]]},"841":{"position":[[2062,8]]},"843":{"position":[[1443,8],[1463,8]]},"864":{"position":[[0,8],[20,8],[38,8]]},"866":{"position":[[0,8],[21,8],[41,8],[59,8]]},"879":{"position":[[1005,8],[1034,8],[1061,8],[1088,8],[1112,8],[1138,8],[1162,8],[1186,8],[1214,8],[1239,8],[1265,8]]},"1321":{"position":[[41,8]]}}}],["include<algorithm",{"_index":263,"t":{"819":{"position":[[35,19]]}}}],["include<bits/stdc++.h",{"_index":955,"t":{"871":{"position":[[0,23]]},"873":{"position":[[0,23]]},"875":{"position":[[0,23]]}}}],["include<bitset",{"_index":268,"t":{"819":{"position":[[124,16]]}}}],["include<cmath",{"_index":270,"t":{"819":{"position":[[159,15]]},"871":{"position":[[24,15]]},"873":{"position":[[24,15]]},"875":{"position":[[24,15]]}}}],["include<cstdio",{"_index":261,"t":{"819":{"position":[[0,16]]}}}],["include<cstdlib",{"_index":269,"t":{"819":{"position":[[141,17]]}}}],["include<cstr",{"_index":262,"t":{"819":{"position":[[17,17]]}}}],["include<dequ",{"_index":273,"t":{"819":{"position":[[204,15]]}}}],["include<iostream",{"_index":264,"t":{"819":{"position":[[55,18]]}}}],["include<list",{"_index":272,"t":{"819":{"position":[[189,14]]}}}],["include<map",{"_index":274,"t":{"819":{"position":[[220,13]]}}}],["include<queu",{"_index":275,"t":{"819":{"position":[[234,15]]}}}],["include<set",{"_index":271,"t":{"819":{"position":[[175,13]]}}}],["include<stack",{"_index":267,"t":{"819":{"position":[[108,15]]}}}],["include<stdio.h",{"_index":828,"t":{"868":{"position":[[0,17]]}}}],["include<stdlib.h",{"_index":829,"t":{"868":{"position":[[18,18]]}}}],["include<str",{"_index":265,"t":{"819":{"position":[[74,16]]}}}],["include<vector",{"_index":266,"t":{"819":{"position":[[91,16]]}}}],["indegre",{"_index":787,"t":{"866":{"position":[[1280,11]]}}}],["indegreelist,outdegreelist",{"_index":770,"t":{"866":{"position":[[161,27]]}}}],["indegreelist.push_back(it",{"_index":786,"t":{"866":{"position":[[1254,25]]}}}],["indegreelist[v",{"_index":810,"t":{"866":{"position":[[2050,15]]}}}],["indegree为0的头且其余节点indegree均为1",{"_index":799,"t":{"866":{"position":[[1667,40]]}}}],["indegree为0的头和一个outdegree为0的尾，且其余节点入度与出度都为1",{"_index":795,"t":{"866":{"position":[[1519,48]]}}}],["inf",{"_index":302,"t":{"821":{"position":[[485,3]]},"875":{"position":[[127,3]]}}}],["inf_int",{"_index":305,"t":{"821":{"position":[[519,7]]}}}],["inf_ll",{"_index":307,"t":{"821":{"position":[[550,6]]}}}],["inf_ul",{"_index":309,"t":{"821":{"position":[[592,7]]}}}],["infeas",{"_index":834,"t":{"868":{"position":[[131,10]]}}}],["infer",{"_index":2038,"t":{"1088":{"position":[[401,37]]}}}],["inference.pi",{"_index":1855,"t":{"1036":{"position":[[214,27]]},"1262":{"position":[[214,27]]}}}],["info",{"_index":74,"t":{"726":{"position":[[0,4]]},"810":{"position":[[0,4]]},"908":{"position":[[78,4]]},"922":{"position":[[30,4]]},"961":{"position":[[232,4]]},"1043":{"position":[[0,4]]},"1046":{"position":[[85,4]]},"1292":{"position":[[0,4]]}}}],["inform",{"_index":2184,"t":{"1126":{"position":[[116,11]]}}}],["infty}^{+\\infty}f(x)",{"_index":1315,"t":{"908":{"position":[[328,24]]}}}],["infty}^{\\infty}\\int_",{"_index":1322,"t":{"908":{"position":[[577,22],[758,22]]}}}],["infty}^{\\infty}f(u)e^{j2\\pi",{"_index":1319,"t":{"908":{"position":[[446,28]]}}}],["infty}^{\\infty}f(u,v)e^{j2\\pi",{"_index":1326,"t":{"908":{"position":[[781,30]]}}}],["infty}^{\\infty}f(x,y)",{"_index":1323,"t":{"908":{"position":[[600,25]]}}}],["init",{"_index":776,"t":{"866":{"position":[[1078,7],[2292,7]]},"879":{"position":[[1816,4]]}}}],["init_bss",{"_index":1128,"t":{"879":{"position":[[1873,11]]}}}],["init_crc32",{"_index":1131,"t":{"879":{"position":[[1920,13]]}}}],["init_interrupt",{"_index":1133,"t":{"879":{"position":[[1946,18]]}}}],["init_keyboard",{"_index":1137,"t":{"879":{"position":[[2011,16]]}}}],["init_mem(bootinfo",{"_index":1130,"t":{"879":{"position":[[1900,19]]}}}],["init_schedul",{"_index":1134,"t":{"879":{"position":[[1965,17]]}}}],["init_screen",{"_index":1129,"t":{"879":{"position":[[1885,14]]}}}],["init_tim",{"_index":1136,"t":{"879":{"position":[[1997,13]]}}}],["init_trap",{"_index":1135,"t":{"879":{"position":[[1983,13]]}}}],["init_tss",{"_index":1132,"t":{"879":{"position":[[1934,11]]}}}],["init_weights(m",{"_index":2375,"t":{"1150":{"position":[[1431,16]]}}}],["initgraph_al(algraph",{"_index":861,"t":{"868":{"position":[[738,20]]}}}],["initgraph_al(pg",{"_index":877,"t":{"868":{"position":[[1203,17]]}}}],["initi",{"_index":1119,"t":{"879":{"position":[[1752,11]]},"1055":{"position":[[3305,10]]},"1138":{"position":[[553,10]]}}}],["initialis",{"_index":1903,"t":{"1055":{"position":[[503,11],[619,14]]}}}],["initmemb",{"_index":326,"t":{"824":{"position":[[7,10]]},"826":{"position":[[18,10],[90,10],[221,10]]}}}],["inlin",{"_index":2838,"t":{"1305":{"position":[[194,6],[317,6]]}}}],["inplace_merg",{"_index":497,"t":{"841":{"position":[[2089,13]]}}}],["input",{"_index":1879,"t":{"1051":{"position":[[37,6],[157,6]]},"1055":{"position":[[118,6],[153,6],[205,6],[1103,6],[1128,6],[1154,6],[1569,38],[3163,6],[3200,6],[3252,6],[3667,6],[3692,6],[3718,6]]},"1086":{"position":[[8,6]]}}}],["input_size)，batch_size位于第二维度！虽然可以将batch_size和序列长度seq_len对换位置，此时只需令batch_first=tru",{"_index":2808,"t":{"1300":{"position":[[204,83]]}}}],["inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i)(4)inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i",{"_index":1565,"t":{"988":{"position":[[1098,135]]},"1222":{"position":[[1098,135]]}}}],["insert",{"_index":600,"t":{"847":{"position":[[754,8]]}}}],["insert方法插入元素对,insert操作会返回一个pair,当map中没有与key相匹配的键值时,其first是指向插入元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为fals",{"_index":636,"t":{"851":{"position":[[522,141]]}}}],["instal",{"_index":1694,"t":{"1017":{"position":[[46,7],[128,7],[162,7]]},"1243":{"position":[[46,7],[128,7],[162,7]]},"1273":{"position":[[4,7]]}}}],["instanc",{"_index":1797,"t":{"1031":{"position":[[872,8]]},"1257":{"position":[[872,8]]}}}],["int",{"_index":12,"t":{"705":{"position":[[46,3],[79,3],[134,3],[151,4]]},"711":{"position":[[46,3],[63,4],[96,3]]},"713":{"position":[[157,3],[174,4]]},"717":{"position":[[46,3],[90,3],[231,4],[299,3],[397,4]]},"821":{"position":[[500,8],[515,3],[708,3],[752,3]]},"824":{"position":[[20,3]]},"826":{"position":[[347,3],[596,3],[804,3]]},"831":{"position":[[0,3],[13,4],[54,3]]},"833":{"position":[[13,3],[59,3],[97,3]]},"835":{"position":[[15,3],[44,4]]},"843":{"position":[[1502,3],[1530,3],[1577,4]]},"851":{"position":[[318,4],[675,3]]},"861":{"position":[[202,3]]},"864":{"position":[[150,3],[330,3],[483,3],[847,3],[958,3],[1295,3],[1391,3],[1590,3],[1729,3]]},"866":{"position":[[140,3],[222,3],[471,3],[679,3],[1115,3],[1342,3],[1421,3],[1789,3],[1922,3],[2007,3],[2280,3]]},"868":{"position":[[173,3],[193,3],[255,3],[414,3],[617,3],[772,3],[913,3],[970,3],[1140,3],[2073,3],[2158,3],[2189,3],[2243,3],[2279,3],[2704,3],[2798,3],[2807,3]]},"871":{"position":[[128,3],[141,3],[174,3],[199,3],[232,3],[385,3],[417,3],[630,3],[727,3],[760,3],[966,3],[1153,3],[1257,3],[1700,3],[1713,3],[1905,3],[1955,3]]},"873":{"position":[[128,3],[141,3],[174,3],[199,3],[218,3],[286,3],[301,3],[447,3],[515,3],[530,3],[676,3],[855,3],[959,3],[1365,3],[1378,3],[1546,3],[1583,3]]},"875":{"position":[[214,3],[233,3],[240,3],[279,3],[300,3],[373,3],[384,3],[654,3],[667,3],[773,3]]},"879":{"position":[[268,3],[1480,3]]},"1025":{"position":[[670,3]]},"1251":{"position":[[670,3]]},"1319":{"position":[[26,3],[95,3],[129,3],[154,3]]},"1321":{"position":[[113,3],[182,3],[216,3],[241,3],[766,3],[825,3],[864,3]]}}}],["int(*)[maxcol])pp_arr",{"_index":396,"t":{"833":{"position":[[116,23]]}}}],["int(100",{"_index":386,"t":{"831":{"position":[[67,9]]}}}],["int*[row",{"_index":399,"t":{"835":{"position":[[29,10]]}}}],["int>::iter",{"_index":638,"t":{"851":{"position":[[765,14]]}}}],["int[col",{"_index":402,"t":{"835":{"position":[[84,9]]}}}],["int[nrow",{"_index":394,"t":{"833":{"position":[[77,8]]}}}],["interact",{"_index":1885,"t":{"1051":{"position":[[167,8],[303,12]]}}}],["introduction以及rel",{"_index":2739,"t":{"1282":{"position":[[50,51]]}}}],["invers",{"_index":1857,"t":{"1036":{"position":[[351,9]]},"1262":{"position":[[351,9]]}}}],["ios::sync_with_stdio(fals",{"_index":72,"t":{"719":{"position":[[346,28]]}}}],["iostream",{"_index":547,"t":{"843":{"position":[[1452,10]]},"864":{"position":[[9,10]]},"866":{"position":[[30,10]]}}}],["ipl",{"_index":1682,"t":{"1012":{"position":[[9,3],[27,3]]},"1015":{"position":[[16,3],[46,3]]},"1033":{"position":[[957,3],[1004,3],[1497,3],[1544,3]]},"1039":{"position":[[226,3]]},"1193":{"position":[[0,11]]},"1238":{"position":[[9,3],[27,3]]},"1241":{"position":[[16,3],[46,3]]},"1259":{"position":[[954,3],[1001,3],[1494,3],[1541,3]]},"1267":{"position":[[2,3],[788,3]]},"1269":{"position":[[90,3],[365,3]]}}}],["ipl独立于生成模型，可以自由选择diffus",{"_index":2540,"t":{"1185":{"position":[[286,64]]}}}],["is(g)=exp⁡(ex∼pgdkl(p(y∣x)∣∣p(y)))\\mathbf{is}(g)=\\exp\\left(\\mathbb{e}_{\\mathbf{x}\\sim",{"_index":1817,"t":{"1033":{"position":[[579,85]]},"1259":{"position":[[577,85]]}}}],["is_heap",{"_index":503,"t":{"841":{"position":[[2236,7]]}}}],["is_heap_untilc++11",{"_index":504,"t":{"841":{"position":[[2258,18]]}}}],["is_list",{"_index":794,"t":{"866":{"position":[[1508,10]]}}}],["is_partitionedc++11",{"_index":480,"t":{"841":{"position":[[1542,19]]}}}],["is_permutationc++11",{"_index":509,"t":{"841":{"position":[[2397,19]]}}}],["is_sorted_untilc++11",{"_index":487,"t":{"841":{"position":[[1749,20]]}}}],["is_sortedc++11",{"_index":486,"t":{"841":{"position":[[1722,14]]}}}],["is_tre",{"_index":798,"t":{"866":{"position":[[1656,10]]}}}],["isclos",{"_index":2745,"t":{"1290":{"position":[[128,12]]}}}],["isdag",{"_index":362,"t":{"826":{"position":[[624,6],[660,6]]},"864":{"position":[[358,6],[394,6],[550,7]]},"866":{"position":[[499,6],[535,6],[746,7]]}}}],["isdag(1",{"_index":369,"t":{"826":{"position":[[741,8]]},"866":{"position":[[616,8]]}}}],["isdag(isdag",{"_index":366,"t":{"826":{"position":[[682,12]]},"864":{"position":[[416,12]]},"866":{"position":[[557,12]]}}}],["isinstance(net",{"_index":2355,"t":{"1150":{"position":[[955,15]]}}}],["isinstance(train_lay",{"_index":1789,"t":{"1031":{"position":[[347,24]]},"1257":{"position":[[347,24]]}}}],["isinstance(x",{"_index":2361,"t":{"1150":{"position":[[1114,13]]}}}],["it'",{"_index":2178,"t":{"1126":{"position":[[62,4]]}}}],["item",{"_index":2800,"t":{"1298":{"position":[[231,4],[440,4]]}}}],["iter",{"_index":255,"t":{"817":{"position":[[78,8]]},"841":{"position":[[835,22]]},"1131":{"position":[[8,9],[272,9]]}}}],["iter_swap",{"_index":458,"t":{"841":{"position":[[825,9]]}}}],["it指向的元素前插入n个新元素val",{"_index":534,"t":{"843":{"position":[[729,22]]},"845":{"position":[[750,22]]}}}],["it指向的元素前插入新元素val",{"_index":533,"t":{"843":{"position":[[685,20]]},"845":{"position":[[706,20]]}}}],["iulian",{"_index":1095,"t":{"879":{"position":[[827,6]]}}}],["j",{"_index":226,"t":{"812":{"position":[[7,1],[111,1]]},"864":{"position":[[1989,1],[1996,1],[2011,4]]},"868":{"position":[[2924,1],[3086,2]]}}}],["j2\\pi",{"_index":1316,"t":{"908":{"position":[[353,5],[626,5],[1247,5]]}}}],["j\\frac{2\\pi",{"_index":1330,"t":{"908":{"position":[[948,11]]}}}],["jae",{"_index":2571,"t":{"1188":{"position":[[559,3]]}}}],["jeffrey",{"_index":1091,"t":{"879":{"position":[[758,7]]}}}],["jingwan",{"_index":2566,"t":{"1188":{"position":[[526,7]]}}}],["jinwoo",{"_index":2558,"t":{"1188":{"position":[[393,6]]}}}],["k",{"_index":233,"t":{"812":{"position":[[161,2],[188,2]]},"868":{"position":[[2259,2]]},"879":{"position":[[766,2]]},"1129":{"position":[[0,1],[126,1]]},"1131":{"position":[[21,1]]}}}],["k+1",{"_index":922,"t":{"868":{"position":[[2615,5]]}}}],["k_h",{"_index":2301,"t":{"1145":{"position":[[73,3]]}}}],["k_wco​×ci​×kh​×kw",{"_index":2302,"t":{"1145":{"position":[[84,18]]}}}],["kaim",{"_index":1909,"t":{"1055":{"position":[[591,7]]}}}],["kaiyang",{"_index":2597,"t":{"1190":{"position":[[177,7]]}}}],["kernel",{"_index":1118,"t":{"879":{"position":[[1723,6],[1764,6],[2162,6]]},"881":{"position":[[994,7]]},"895":{"position":[[2050,7]]}}}],["kernel_size=5",{"_index":2338,"t":{"1150":{"position":[[574,14],[673,15]]}}}],["kernel_thread",{"_index":1079,"t":{"879":{"position":[[542,13],[2224,13]]}}}],["key",{"_index":626,"t":{"851":{"position":[[63,4],[920,31]]},"879":{"position":[[2192,4]]},"1055":{"position":[[748,5],[1071,5],[1096,4],[1188,5],[2570,3],[2654,3],[3332,5],[3635,5],[3660,4],[3752,5]]}}}],["key]操作是map很有特色的操作,如果在map中存在键值为key",{"_index":633,"t":{"851":{"position":[[371,39]]}}}],["key^{n",{"_index":1978,"t":{"1057":{"position":[[135,6]]}}}],["key_ctrl_flag)==key_ctrl_flag",{"_index":1073,"t":{"879":{"position":[[317,29],[1529,29]]}}}],["key_release_flag",{"_index":1069,"t":{"879":{"position":[[234,21],[1446,21]]}}}],["key_special_flag",{"_index":1068,"t":{"879":{"position":[[202,17],[1414,17]]}}}],["keyboard_serial_delay",{"_index":1175,"t":{"881":{"position":[[720,22]]},"895":{"position":[[1776,22]]}}}],["keycod",{"_index":1064,"t":{"879":{"position":[[133,7],[141,8],[223,8],[284,7],[1345,7],[1353,8],[1435,8],[1496,7]]}}}],["keys.t",{"_index":1927,"t":{"1055":{"position":[[1525,6],[3895,6]]}}}],["key的元素对,值域为默认值。所以可以用该操作向map",{"_index":634,"t":{"851":{"position":[[411,74]]}}}],["key部分作为标识，map中所有元素的key值必须是唯一的，multimap则允许有重复的key",{"_index":628,"t":{"851":{"position":[[90,50]]}}}],["key（当另一个元素是整形时，m[key]=0",{"_index":637,"t":{"851":{"position":[[694,58]]}}}],["key，query以及valu",{"_index":1891,"t":{"1053":{"position":[[0,140]]},"1055":{"position":[[1041,19]]}}}],["kh=kw=1k_h=k_w=1kh​=kw​=1",{"_index":2293,"t":{"1143":{"position":[[0,50]]}}}],["kien",{"_index":2585,"t":{"1188":{"position":[[736,4]]}}}],["kind",{"_index":855,"t":{"868":{"position":[[611,5],[1277,5]]}}}],["kkk",{"_index":2259,"t":{"1129":{"position":[[179,3],[239,3]]},"1131":{"position":[[57,3],[183,3]]}}}],["kl",{"_index":2197,"t":{"1126":{"position":[[473,5],[479,15],[689,11]]},"1201":{"position":[[599,10]]}}}],["knife",{"_index":1279,"t":{"897":{"position":[[173,6]]}}}],["kpple",{"_index":2825,"t":{"1305":{"position":[[30,5]]}}}],["krizhevsky、ilya",{"_index":2134,"t":{"1111":{"position":[[20,15]]}}}],["kruskal",{"_index":2902,"t":{"1334":{"position":[[90,9]]}}}],["kullback–leibl",{"_index":2198,"t":{"1126":{"position":[[495,16]]}}}],["k−1k",{"_index":2262,"t":{"1131":{"position":[[112,4]]}}}],["k个变为v",{"_index":160,"t":{"746":{"position":[[152,7]]}}}],["k的结点是u（第k+1个是u",{"_index":909,"t":{"868":{"position":[[2336,21]]}}}],["l",{"_index":222,"t":{"800":{"position":[[84,1]]},"802":{"position":[[76,1]]},"843":{"position":[[1527,2]]},"920":{"position":[[208,1]]},"1150":{"position":[[2035,1]]}}}],["l(w",{"_index":2081,"t":{"1098":{"position":[[43,4]]},"1100":{"position":[[314,4]]}}}],["l(w,b",{"_index":2078,"t":{"1098":{"position":[[4,6],[124,6]]}}}],["l(w,b)+λ2∥w∥12(2)l(w",{"_index":2092,"t":{"1100":{"position":[[47,21]]}}}],["l(w_t",{"_index":2105,"t":{"1100":{"position":[[474,6]]}}}],["l(y,z)=max(0,−y∗z)(1)l(y,z)=max(0",{"_index":2280,"t":{"1138":{"position":[[366,34]]}}}],["l,r",{"_index":959,"t":{"871":{"position":[[203,4]]},"873":{"position":[[203,4]]}}}],["l,r,d",{"_index":1030,"t":{"875":{"position":[[283,6]]}}}],["l.backward",{"_index":2407,"t":{"1150":{"position":[[2054,12]]}}}],["l.push_back(x",{"_index":549,"t":{"843":{"position":[[1555,15]]}}}],["l.size",{"_index":550,"t":{"843":{"position":[[1586,8]]}}}],["l1",{"_index":1041,"t":{"875":{"position":[[433,3]]}}}],["l1,int",{"_index":1032,"t":{"875":{"position":[[315,6]]}}}],["l1正则化(硬性限制)、l2",{"_index":2076,"t":{"1096":{"position":[[200,35]]}}}],["l1正则化会使得一部分参数变为0，从而实现特征选择的效果；l2正则化则会使得模型参数尽量接近0",{"_index":2077,"t":{"1096":{"position":[[236,93]]}}}],["l1正则化限制权重参数的l1",{"_index":2089,"t":{"1098":{"position":[[154,26]]}}}],["l2",{"_index":1802,"t":{"1031":{"position":[[1146,2],[1268,2]]},"1257":{"position":[[1146,2],[1269,2]]}}}],["l2,int",{"_index":1034,"t":{"875":{"position":[[329,6]]}}}],["l2正则化是指在模型的损失函数中，加入对模型参数的l2",{"_index":2091,"t":{"1100":{"position":[[0,46]]}}}],["l2范数是对元素求平方和后再开根号，需要.pow(2",{"_index":2167,"t":{"1124":{"position":[[0,36]]}}}],["l=−1n∑i=1nyilog⁡(pi)(1)l",{"_index":2022,"t":{"1086":{"position":[[270,25]]}}}],["l[i",{"_index":551,"t":{"843":{"position":[[1623,4]]}}}],["la",{"_index":976,"t":{"871":{"position":[[477,3],[820,3]]},"873":{"position":[[346,3],[575,3]]}}}],["la,int",{"_index":962,"t":{"871":{"position":[[253,6],[651,6]]},"873":{"position":[[239,6],[468,6]]}}}],["la,ra",{"_index":966,"t":{"871":{"position":[[281,12],[679,12]]}}}],["label",{"_index":2239,"t":{"1126":{"position":[[1632,5],[1678,6],[1815,5],[1864,6]]}}}],["lalr(1",{"_index":217,"t":{"793":{"position":[[620,10]]}}}],["lambda",{"_index":2095,"t":{"1100":{"position":[[137,23],[337,7],[556,7]]}}}],["lambda)w_t",{"_index":2104,"t":{"1100":{"position":[[440,11]]}}}],["lambda_l",{"_index":1778,"t":{"1029":{"position":[[1209,9]]},"1255":{"position":[[1210,9]]}}}],["lambda_src",{"_index":1779,"t":{"1029":{"position":[[1255,10]]},"1255":{"position":[[1256,10]]}}}],["landmark",{"_index":1862,"t":{"1036":{"position":[[533,8]]},"1262":{"position":[[533,8]]}}}],["languag",{"_index":1471,"t":{"965":{"position":[[878,8]]},"967":{"position":[[968,8]]},"1086":{"position":[[193,8]]},"1088":{"position":[[116,8],[392,8]]}}}],["lantent",{"_index":2599,"t":{"1193":{"position":[[34,19]]}}}],["laplac",{"_index":1414,"t":{"946":{"position":[[187,10]]},"948":{"position":[[339,22],[381,51]]}}}],["larg",{"_index":1964,"t":{"1055":{"position":[[2673,5],[2718,5]]}}}],["last",{"_index":524,"t":{"843":{"position":[[370,6],[422,10],[772,5],[876,7],[914,5],[1168,5],[1225,16]]},"845":{"position":[[144,5],[793,5],[897,7],[935,5]]}}}],["last)插入到迭代器it",{"_index":536,"t":{"843":{"position":[[810,20]]},"845":{"position":[[831,20]]}}}],["last)，[first",{"_index":545,"t":{"843":{"position":[[1211,13]]}}}],["latent",{"_index":1444,"t":{"965":{"position":[[220,17]]},"969":{"position":[[456,11],[484,11],[1048,11],[1076,12]]},"1029":{"position":[[256,9]]},"1036":{"position":[[75,6],[457,6],[618,6]]},"1070":{"position":[[122,35]]},"1177":{"position":[[30,6]]},"1193":{"position":[[12,13],[223,11],[380,11],[587,12]]},"1255":{"position":[[256,9]]},"1262":{"position":[[75,6],[457,6],[618,6]]}}}],["later",{"_index":1231,"t":{"895":{"position":[[668,5]]}}}],["latest",{"_index":1163,"t":{"881":{"position":[[507,6],[580,6]]},"895":{"position":[[1563,6],[1636,6]]}}}],["layer",{"_index":1590,"t":{"994":{"position":[[485,34]]},"1029":{"position":[[582,6]]},"1031":{"position":[[325,5]]},"1228":{"position":[[485,34]]},"1255":{"position":[[583,6]]},"1257":{"position":[[325,5]]}}}],["layers.append",{"_index":1769,"t":{"1029":{"position":[[628,14]]},"1255":{"position":[[629,14]]}}}],["layman’",{"_index":1881,"t":{"1051":{"position":[[101,8]]}}}],["lb,int",{"_index":964,"t":{"871":{"position":[[267,6],[665,6]]},"873":{"position":[[253,6],[482,6]]}}}],["lb,rb",{"_index":967,"t":{"871":{"position":[[294,12],[692,12]]}}}],["ld",{"_index":1249,"t":{"895":{"position":[[1003,2]]}}}],["learn",{"_index":2251,"t":{"1129":{"position":[[55,8]]},"1190":{"position":[[138,18],[242,47]]},"1193":{"position":[[546,8]]},"1209":{"position":[[40,5]]},"1269":{"position":[[312,8]]}}}],["learning（ipl）方法来解决风格迁移任务中生成模型从源域到目标域的适应问题。一个lat",{"_index":2532,"t":{"1185":{"position":[[27,50]]}}}],["lecun等人于1998年提出的卷积神经网络结构，该结构由卷积层、池化层和全连接层组成，可以高效地处理手写数字图像，并在mnist",{"_index":2314,"t":{"1148":{"position":[[12,78]]}}}],["lee",{"_index":2552,"t":{"1188":{"position":[[278,4],[563,4]]}}}],["legend=[\"curve_name_1",{"_index":2735,"t":{"1280":{"position":[[110,23]]}}}],["legend=['train",{"_index":2390,"t":{"1150":{"position":[[1736,14]]}}}],["len",{"_index":2875,"t":{"1321":{"position":[[829,3],[950,3]]}}}],["len(train_it",{"_index":2395,"t":{"1150":{"position":[[1818,15]]}}}],["len==1，则la==ra",{"_index":968,"t":{"871":{"position":[[312,41]]}}}],["len=v.siz",{"_index":995,"t":{"871":{"position":[[1261,13]]},"873":{"position":[[963,13]]}}}],["lenet",{"_index":2315,"t":{"1148":{"position":[[91,5]]},"1150":{"position":[[2745,5]]}}}],["lenet5",{"_index":2429,"t":{"1150":{"position":[[2753,8]]}}}],["lenet5(nn.modul",{"_index":2332,"t":{"1150":{"position":[[424,18]]}}}],["lenetreshap",{"_index":2336,"t":{"1150":{"position":[[526,15]]}}}],["lenetreshape(nn.modul",{"_index":2325,"t":{"1150":{"position":[[282,24]]}}}],["lenet是由yann",{"_index":2313,"t":{"1148":{"position":[[0,11]]}}}],["length",{"_index":2697,"t":{"1211":{"position":[[312,6]]}}}],["leq",{"_index":2085,"t":{"1098":{"position":[[101,4]]}}}],["less",{"_index":2183,"t":{"1126":{"position":[[111,4]]}}}],["lexicographical_compar",{"_index":510,"t":{"841":{"position":[[2437,23]]}}}],["lg=−ez∼pz(z)[log⁡d(g(z))](4)l_g",{"_index":2006,"t":{"1076":{"position":[[800,32]]}}}],["lgorithm",{"_index":430,"t":{"841":{"position":[[0,12]]}}}],["lgpl",{"_index":1162,"t":{"881":{"position":[[502,4]]},"895":{"position":[[1558,4]]}}}],["li",{"_index":1275,"t":{"897":{"position":[[119,5]]},"1188":{"position":[[522,3]]}}}],["life",{"_index":1286,"t":{"897":{"position":[[240,5]]}}}],["lighter",{"_index":2755,"t":{"1290":{"position":[[284,9],[318,8]]}}}],["lightest",{"_index":2757,"t":{"1290":{"position":[[357,9],[397,9]]}}}],["limits.h",{"_index":242,"t":{"815":{"position":[[78,8]]}}}],["line",{"_index":1157,"t":{"881":{"position":[[423,5]]},"895":{"position":[[1479,5]]}}}],["linear",{"_index":2749,"t":{"1290":{"position":[[235,6]]}}}],["linguist",{"_index":2046,"t":{"1088":{"position":[[597,10]]}}}],["linker",{"_index":1247,"t":{"895":{"position":[[991,7]]}}}],["linux",{"_index":1242,"t":{"895":{"position":[[881,5]]}}}],["linux操作系统后需要安装bochs以及nasm",{"_index":1204,"t":{"887":{"position":[[39,30]]}}}],["linux自带的编译环境以及编译命令对特定的geeko",{"_index":1205,"t":{"889":{"position":[[47,30]]}}}],["list",{"_index":257,"t":{"817":{"position":[[110,4]]},"845":{"position":[[0,8],[9,23],[198,10]]},"1031":{"position":[[372,6]]},"1150":{"position":[[1128,6]]},"1181":{"position":[[526,16]]},"1257":{"position":[[372,6]]},"1390":{"position":[[316,4]]}}}],["list.end",{"_index":36,"t":{"707":{"position":[[58,12],[138,13]]}}}],["list1",{"_index":2795,"t":{"1298":{"position":[[92,5]]}}}],["list2",{"_index":2796,"t":{"1298":{"position":[[110,5],[202,6]]}}}],["list3",{"_index":2797,"t":{"1298":{"position":[[134,5],[209,6]]}}}],["list<int>a(first",{"_index":557,"t":{"845":{"position":[[126,17]]}}}],["list<int>a(n",{"_index":553,"t":{"845":{"position":[[51,13],[87,13]]}}}],["list<int>a{1,2,3",{"_index":552,"t":{"845":{"position":[[33,17]]}}}],["list和tensor",{"_index":2484,"t":{"1181":{"position":[[409,17]]}}}],["list和vector",{"_index":410,"t":{"839":{"position":[[228,45]]}}}],["list或deque实现，封闭头部即可，不用vector",{"_index":412,"t":{"839":{"position":[[282,51],[342,51]]}}}],["list的*乘法是复制元素，改变list的shap",{"_index":2485,"t":{"1181":{"position":[[427,26]]}}}],["ll",{"_index":291,"t":{"821":{"position":[[360,2],[547,2],[633,2],[667,2]]},"871":{"position":[[118,3]]},"873":{"position":[[118,3]]},"875":{"position":[[204,3]]}}}],["lll",{"_index":1350,"t":{"920":{"position":[[243,17]]}}}],["locale.h",{"_index":243,"t":{"815":{"position":[[92,8]]}}}],["locatevex_al(*pg",{"_index":888,"t":{"868":{"position":[[1579,17],[1605,17]]}}}],["locatevex_al(algraph",{"_index":870,"t":{"868":{"position":[[917,20]]}}}],["locatevex_al(g",{"_index":942,"t":{"868":{"position":[[2899,15],[2928,15]]}}}],["log",{"_index":1173,"t":{"881":{"position":[[701,4]]},"895":{"position":[[1757,4]]}}}],["log2(1pi)(7)\\begin{align",{"_index":2189,"t":{"1126":{"position":[[286,25]]}}}],["log2(pi)=∑inpi",{"_index":2188,"t":{"1126":{"position":[[271,14]]}}}],["log2(pi)−log2(qi)](9)d_{kl}(p",{"_index":2211,"t":{"1126":{"position":[[842,30]]}}}],["log2(qi)(10)\\begin{align",{"_index":2223,"t":{"1126":{"position":[[1187,25]]}}}],["log2​(pi​)=i∑n​pi",{"_index":2195,"t":{"1126":{"position":[[437,18]]}}}],["log2​(pi​)−log2​(qi​)](9",{"_index":2215,"t":{"1126":{"position":[[959,26]]}}}],["log2​(pi​1​)​(7",{"_index":2196,"t":{"1126":{"position":[[456,16]]}}}],["log2​(qi​)​(10",{"_index":2229,"t":{"1126":{"position":[[1357,15]]}}}],["log_2(p_i",{"_index":2213,"t":{"1126":{"position":[[910,11]]}}}],["log_2(q_i)]}\\tag{9}dkl​(p",{"_index":2214,"t":{"1126":{"position":[[922,25]]}}}],["logist",{"_index":2449,"t":{"1169":{"position":[[0,8]]}}}],["long",{"_index":292,"t":{"821":{"position":[[363,4],[368,4],[394,4],[399,4]]},"861":{"position":[[1010,4]]},"871":{"position":[[108,4],[113,4]]},"873":{"position":[[108,4],[113,4]]},"875":{"position":[[194,4],[199,4]]},"1315":{"position":[[4,17],[22,32]]}}}],["loss",{"_index":1798,"t":{"1031":{"position":[[1024,4]]},"1092":{"position":[[139,10]]},"1150":{"position":[[1623,4],[1751,6]]},"1193":{"position":[[890,39]]},"1257":{"position":[[1024,4]]},"1278":{"position":[[280,8]]},"1347":{"position":[[129,4]]},"1370":{"position":[[6,43],[87,14]]}}}],["loss(y_hat",{"_index":2406,"t":{"1150":{"position":[[2039,11]]}}}],["loss.to(devic",{"_index":2386,"t":{"1150":{"position":[[1658,15]]}}}],["lossdiscriminator=lossreal+lossfake(3)loss_{discriminator}=loss_{real}+loss_{fake}\\tag{3}lossdiscriminator​=lossreal​+lossfake​(3",{"_index":2005,"t":{"1076":{"position":[[532,130]]}}}],["lossfake=−ez∼pz(z)[log(1−d(g(z)))](2)loss_{fak",{"_index":2000,"t":{"1076":{"position":[[332,49]]}}}],["lossmse=∑[y−f(x)]2(5)loss_{ms",{"_index":2168,"t":{"1124":{"position":[[57,31]]}}}],["lossreal=−ex∼pdata(x)[log⁡d(x)](1)loss_{r",{"_index":1995,"t":{"1076":{"position":[[160,46]]}}}],["loss得到6",{"_index":2924,"t":{"1347":{"position":[[74,11]]}}}],["loss来训练目标域生成器，使源于生成器向目标域迁移学习。需要输入源域以及目标域图像、源域以及目标域的prompt描述。源域图像的lat",{"_index":2612,"t":{"1193":{"position":[[644,71]]}}}],["loss的输入来约束从源域中学习到的prompt",{"_index":2607,"t":{"1193":{"position":[[346,33]]}}}],["loss的输入，约束学习到的prompt",{"_index":2611,"t":{"1193":{"position":[[555,31]]}}}],["loss，使目标域的imag",{"_index":2718,"t":{"1269":{"position":[[24,15]]}}}],["lot",{"_index":1188,"t":{"881":{"position":[[936,3]]},"895":{"position":[[1992,3]]}}}],["low",{"_index":1356,"t":{"926":{"position":[[54,3]]}}}],["lower_bound",{"_index":495,"t":{"841":{"position":[[1975,11]]}}}],["lr",{"_index":204,"t":{"788":{"position":[[29,9]]},"1150":{"position":[[1414,3],[2720,3],[2810,3]]}}}],["lr(0",{"_index":208,"t":{"793":{"position":[[98,8]]},"798":{"position":[[139,6],[160,13]]}}}],["lr(1",{"_index":214,"t":{"793":{"position":[[435,8]]},"798":{"position":[[154,5]]}}}],["lr=lr",{"_index":2384,"t":{"1150":{"position":[[1616,6]]}}}],["lr_mul=lr_mlp",{"_index":1772,"t":{"1029":{"position":[[678,14]]},"1255":{"position":[[679,14]]}}}],["lu",{"_index":2567,"t":{"1188":{"position":[[534,3]]},"1337":{"position":[[806,57]]},"1402":{"position":[[678,57]]}}}],["m",{"_index":555,"t":{"845":{"position":[[101,2]]},"851":{"position":[[323,2]]},"895":{"position":[[1086,1]]},"1276":{"position":[[52,1]]}}}],["m.clear",{"_index":645,"t":{"851":{"position":[[1053,10]]}}}],["m.empti",{"_index":644,"t":{"851":{"position":[[1032,10]]}}}],["m.erase(it",{"_index":642,"t":{"851":{"position":[[952,12]]}}}],["m.erase(key",{"_index":641,"t":{"851":{"position":[[903,13]]}}}],["m.find(key",{"_index":639,"t":{"851":{"position":[[785,12]]}}}],["m.insert(make_pair(key",{"_index":635,"t":{"851":{"position":[[486,23]]}}}],["m.size",{"_index":643,"t":{"851":{"position":[[1012,9]]}}}],["m32",{"_index":1235,"t":{"895":{"position":[[729,3],[978,3]]}}}],["m[key",{"_index":631,"t":{"851":{"position":[[352,6],[683,7]]}}}],["machin",{"_index":2250,"t":{"1129":{"position":[[47,7]]}}}],["main",{"_index":13,"t":{"705":{"position":[[50,6]]},"711":{"position":[[50,6]]},"717":{"position":[[50,6]]},"843":{"position":[[1506,6]]},"864":{"position":[[1733,6]]},"866":{"position":[[2284,7]]},"868":{"position":[[2708,6]]},"871":{"position":[[1704,6]]},"873":{"position":[[1369,6]]},"875":{"position":[[658,6]]},"879":{"position":[[503,31]]},"1321":{"position":[[770,6]]}}}],["main(struct",{"_index":1125,"t":{"879":{"position":[[1838,11]]}}}],["make",{"_index":1150,"t":{"881":{"position":[[70,4],[82,4]]},"885":{"position":[[338,7]]},"889":{"position":[[144,7]]},"895":{"position":[[147,19]]},"1055":{"position":[[2602,6]]}}}],["make_heap",{"_index":505,"t":{"841":{"position":[[2296,9]]}}}],["malloc(sizeof(arcnod",{"_index":891,"t":{"868":{"position":[[1670,26]]}}}],["man",{"_index":2587,"t":{"1188":{"position":[[758,3]]}}}],["map",{"_index":88,"t":{"726":{"position":[[192,4]]},"744":{"position":[[9,5]]},"817":{"position":[[99,3]]},"851":{"position":[[0,7],[223,68],[292,13],[326,9],[339,9]]},"1029":{"position":[[470,12],[560,10]]},"1033":{"position":[[1844,3]]},"1102":{"position":[[83,3]]},"1108":{"position":[[43,21]]},"1255":{"position":[[470,12],[561,10]]},"1259":{"position":[[1841,3]]}}}],["map<str",{"_index":630,"t":{"851":{"position":[[306,11],[753,11]]}}}],["map<string,int",{"_index":147,"t":{"744":{"position":[[36,15]]}}}],["map<string,list<str",{"_index":428,"t":{"839":{"position":[[813,23]]}}}],["mapper",{"_index":1747,"t":{"1027":{"position":[[2,6]]},"1029":{"position":[[988,13],[1104,15]]},"1033":{"position":[[1010,6],[1550,6]]},"1039":{"position":[[90,6],[107,24],[234,6],[409,6]]},"1041":{"position":[[0,6]]},"1193":{"position":[[26,7],[600,20]]},"1253":{"position":[[2,6]]},"1255":{"position":[[989,13],[1105,15]]},"1259":{"position":[[1007,6],[1547,6]]},"1265":{"position":[[0,6]]},"1267":{"position":[[242,20],[326,6],[333,12],[477,16],[796,6],[971,6]]},"1269":{"position":[[239,6]]}}}],["mapper接收源域图像的lat",{"_index":2601,"t":{"1193":{"position":[[91,19]]}}}],["mapper接收源域图像的隐式表示后输出再分别与源域和目标域标签concat而得到。分别将源域图像、生成的目标域图像以及源域、目标域的图片prompt描述一起输入至direct",{"_index":2614,"t":{"1193":{"position":[[791,93]]}}}],["mapper来为每一个训练集的源域图片生成一组prompt。lat",{"_index":2600,"t":{"1193":{"position":[[54,36]]}}}],["mapper来从源域图像中学习出包含图像特征且适应目标域的prompt",{"_index":2533,"t":{"1185":{"position":[[78,50]]}}}],["mapper输出的prompt与源域标签concat后送入来自clip的text",{"_index":2608,"t":{"1193":{"position":[[392,40]]}}}],["mapper输出的prompt与目标域标签concat后送入来自clip的text",{"_index":2604,"t":{"1193":{"position":[[235,41]]}}}],["mapping)。具体来说，w",{"_index":1795,"t":{"1031":{"position":[[787,15]]},"1257":{"position":[[787,15]]}}}],["mapping.json",{"_index":2707,"t":{"1211":{"position":[[522,12]]}}}],["map与ground",{"_index":2922,"t":{"1347":{"position":[[53,10],[108,10]]}}}],["map中存在与key相匹配的键值时,find操作将返回指向该元素对的迭代器,否则,返回的迭代器等于map的end()(参见vector中提到的begin()和end",{"_index":640,"t":{"851":{"position":[[801,90]]}}}],["map看作是由key标识元素的元素集合，这类容器也被称为“关联容器”，可以通过一个key值来快速决定一个元素，因此非常适合于需要按照key",{"_index":629,"t":{"851":{"position":[[141,81]]}}}],["map进行concat拼接，得到6通道的融合featur",{"_index":2918,"t":{"1345":{"position":[[300,29]]}}}],["map通道数也为1。将每一层的featur",{"_index":2917,"t":{"1345":{"position":[[277,22]]}}}],["map，最后使用1x1卷积以及sigmoid",{"_index":2919,"t":{"1345":{"position":[[330,38]]}}}],["marr",{"_index":1415,"t":{"946":{"position":[[224,36]]}}}],["mask",{"_index":1595,"t":{"994":{"position":[[766,17]]},"1002":{"position":[[1577,4]]},"1086":{"position":[[0,7]]},"1228":{"position":[[766,17]]},"1236":{"position":[[1577,4]]}}}],["mask置为负无穷是因为这是在经过softmax之前进行的掩码，在经过softmax之后负无穷小就变成了0",{"_index":1638,"t":{"1002":{"position":[[1672,60]]},"1236":{"position":[[1672,60]]}}}],["math.h",{"_index":244,"t":{"815":{"position":[[107,6]]}}}],["mathcal{n}(\\mu_1,\\sigma_1^2)p∼n(μ1​,σ12​)和q∼n(μ2,σ22)q\\sim",{"_index":2660,"t":{"1201":{"position":[[640,59]]}}}],["mathcal{n}(\\mu_2,\\sigma_2^2)q∼n(μ2​,σ22​)而言，它们的kl",{"_index":2661,"t":{"1201":{"position":[[700,56]]}}}],["matlab",{"_index":1268,"t":{"897":{"position":[[4,49]]}}}],["matplotlib",{"_index":2317,"t":{"1150":{"position":[[130,10]]}}}],["matplotlib.pyplot",{"_index":1975,"t":{"1055":{"position":[[3124,17]]}}}],["max",{"_index":511,"t":{"841":{"position":[[2472,3]]}}}],["max(a",{"_index":716,"t":{"864":{"position":[[82,6]]},"866":{"position":[[84,6]]}}}],["max(id1",{"_index":718,"t":{"864":{"position":[[497,11]]},"866":{"position":[[693,11]]}}}],["max(maxx",{"_index":28,"t":{"705":{"position":[[253,9]]}}}],["max(x,i",{"_index":277,"t":{"821":{"position":[[19,8]]}}}],["max_el",{"_index":512,"t":{"841":{"position":[[2490,11]]}}}],["max_siz",{"_index":606,"t":{"847":{"position":[[897,10]]}}}],["max_vertex_num",{"_index":843,"t":{"868":{"position":[[339,14]]}}}],["maxcol",{"_index":391,"t":{"833":{"position":[[17,6],[88,8]]}}}],["maxn",{"_index":313,"t":{"821":{"position":[[670,4]]},"861":{"position":[[206,4],[243,4],[257,4]]}}}],["maxn=50",{"_index":957,"t":{"871":{"position":[[132,8]]},"873":{"position":[[132,8]]}}}],["maxn=5e4+1000",{"_index":1027,"t":{"875":{"position":[[218,14]]}}}],["maxpool",{"_index":2139,"t":{"1113":{"position":[[24,14]]}}}],["maxsiz",{"_index":840,"t":{"868":{"position":[[273,7]]}}}],["maxx",{"_index":18,"t":{"705":{"position":[[83,4],[246,4],[344,4]]}}}],["mco",{"_index":2836,"t":{"1305":{"position":[[186,4]]}}}],["mean",{"_index":1354,"t":{"926":{"position":[[42,5]]},"1126":{"position":[[105,5]]},"1356":{"position":[[126,23]]}}}],["measur",{"_index":2179,"t":{"1126":{"position":[[69,7]]}}}],["mechan",{"_index":1883,"t":{"1051":{"position":[[136,9]]}}}],["meg",{"_index":1167,"t":{"881":{"position":[[604,5]]},"895":{"position":[[1660,5]]}}}],["mel",{"_index":2688,"t":{"1211":{"position":[[122,3],[480,3]]}}}],["mem(a,b",{"_index":289,"t":{"821":{"position":[[309,8]]},"871":{"position":[[48,8]]},"873":{"position":[[48,8]]},"875":{"position":[[48,8]]}}}],["memset((a),(b),sizeof(a",{"_index":290,"t":{"821":{"position":[[318,25]]}}}],["memset(a,b,sizeof",{"_index":956,"t":{"871":{"position":[[57,17]]},"873":{"position":[[57,17]]},"875":{"position":[[57,17]]}}}],["memset(x,i,sizeof(x",{"_index":288,"t":{"821":{"position":[[279,21]]}}}],["mention",{"_index":1950,"t":{"1055":{"position":[[2429,9]]}}}],["menu",{"_index":2826,"t":{"1305":{"position":[[36,4],[143,4],[299,4]]}}}],["merg",{"_index":498,"t":{"841":{"position":[[2108,5]]}}}],["messag",{"_index":1186,"t":{"881":{"position":[[895,8]]},"895":{"position":[[1951,8]]}}}],["metadata",{"_index":2695,"t":{"1211":{"position":[[285,9]]}}}],["metadata.json",{"_index":2708,"t":{"1211":{"position":[[539,13]]}}}],["metadata_path",{"_index":2694,"t":{"1211":{"position":[[254,14]]}}}],["method",{"_index":341,"t":{"826":{"position":[[162,7]]}}}],["metric",{"_index":2359,"t":{"1150":{"position":[[1060,6],[1834,6]]}}}],["metric.add(d2l.accuracy(net(x",{"_index":2364,"t":{"1150":{"position":[[1205,31]]}}}],["metric.add(l",{"_index":2409,"t":{"1150":{"position":[[2084,12]]}}}],["metric[0",{"_index":2367,"t":{"1150":{"position":[[1275,9],[2165,9]]}}}],["metric[1",{"_index":2368,"t":{"1150":{"position":[[1287,9],[2199,9]]}}}],["metric[2",{"_index":2413,"t":{"1150":{"position":[[2177,9],[2211,9]]}}}],["mid",{"_index":2651,"t":{"1201":{"position":[[369,4],[444,4],[464,4],[484,4],[502,4]]}}}],["mid[maxn],po[maxn],pr[maxn",{"_index":958,"t":{"871":{"position":[[145,28]]},"873":{"position":[[145,28]]}}}],["mid_po_build(int",{"_index":980,"t":{"871":{"position":[[634,16]]},"873":{"position":[[451,16]]}}}],["mid_pr_build(int",{"_index":961,"t":{"871":{"position":[[236,16]]},"873":{"position":[[222,16]]}}}],["midt(int",{"_index":1004,"t":{"871":{"position":[[1480,8]]},"873":{"position":[[1153,8]]}}}],["midt(rt",{"_index":1022,"t":{"871":{"position":[[2091,9]]},"873":{"position":[[1656,9]]}}}],["midt(t[rt].l",{"_index":1005,"t":{"871":{"position":[[1513,14]]},"873":{"position":[[1186,14]]}}}],["midt(t[rt].r",{"_index":1006,"t":{"871":{"position":[[1565,14]]},"873":{"position":[[1238,14]]}}}],["min",{"_index":513,"t":{"841":{"position":[[2516,3]]},"1098":{"position":[[0,3]]}}}],["min(x,i",{"_index":279,"t":{"821":{"position":[[60,8]]}}}],["min_el",{"_index":514,"t":{"841":{"position":[[2534,11]]}}}],["minmax_elementc++11",{"_index":516,"t":{"841":{"position":[[2589,19]]}}}],["minmaxc++11",{"_index":515,"t":{"841":{"position":[[2560,11]]}}}],["minsu",{"_index":2556,"t":{"1188":{"position":[[378,5]]}}}],["mismatch",{"_index":445,"t":{"841":{"position":[[419,8]]}}}],["mixing_noise(args.batch_mapp",{"_index":1754,"t":{"1029":{"position":[[33,31]]},"1255":{"position":[[33,31]]}}}],["ml2021spring",{"_index":2711,"t":{"1213":{"position":[[40,12]]}}}],["mnli（multinli",{"_index":2032,"t":{"1088":{"position":[[254,53]]}}}],["mo",{"_index":2555,"t":{"1188":{"position":[[374,3]]}}}],["mod",{"_index":315,"t":{"821":{"position":[[687,3]]},"875":{"position":[[150,3]]}}}],["mod(x",{"_index":280,"t":{"821":{"position":[[108,6]]}}}],["mode",{"_index":2591,"t":{"1188":{"position":[[1018,69]]}}}],["model",{"_index":1424,"t":{"957":{"position":[[107,97]]},"965":{"position":[[690,5],[861,6]]},"969":{"position":[[11,6]]},"1004":{"position":[[58,28]]},"1006":{"position":[[823,7]]},"1012":{"position":[[52,5]]},"1031":{"position":[[634,5]]},"1129":{"position":[[97,6],[233,5]]},"1133":{"position":[[24,5]]},"1177":{"position":[[47,10]]},"1183":{"position":[[95,5]]},"1188":{"position":[[11,5]]},"1196":{"position":[[103,5]]},"1238":{"position":[[52,5]]},"1257":{"position":[[634,5]]}}}],["model'",{"_index":2270,"t":{"1131":{"position":[[346,7]]}}}],["models）模型为例，模型在denoise时为每个denoise步骤赋予一个编号，越早进行denoise的步骤编号越大，因此，这个编号也代表着图像中噪声的严重程度。在denoise模块中，模型根据输入的带有噪声的图片、文字prompt以及噪声的严重程度（即denoise的步骤）预测出该图片中噪声的分布，然后将输入的图片中减去预测出的噪声得到denois",{"_index":1536,"t":{"979":{"position":[[177,184]]}}}],["model以及gan",{"_index":1523,"t":{"971":{"position":[[35,23]]}}}],["model其实就是训练一个nois",{"_index":1498,"t":{"969":{"position":[[226,18]]}}}],["model或gan",{"_index":2541,"t":{"1185":{"position":[[351,11]]}}}],["model时的训练资料可以通过对数据集中的原始图片添加与图像大小一致地从已知随机分布中sample出的噪声来获得。此时加入噪声后的图像可以作为压缩图像输入至nois",{"_index":1501,"t":{"969":{"position":[[323,83]]}}}],["model概率扩散模型理论与完整pytorch",{"_index":2616,"t":{"1196":{"position":[[57,29]]}}}],["model生成的压缩的图片或lat",{"_index":1513,"t":{"969":{"position":[[846,20]]}}}],["model的中间产物是压缩图像时，如diffusion模型，在训练gener",{"_index":1500,"t":{"969":{"position":[[279,43]]}}}],["model的中间产物，st",{"_index":1450,"t":{"965":{"position":[[382,17]]}}}],["model的具体数学推导，可以参考胡老师推荐的论文understand",{"_index":1652,"t":{"1006":{"position":[[774,38]]}}}],["model的最终输出是中间产物，这个中间产物可以是图像的压缩版本，也可以是一个lat",{"_index":1496,"t":{"969":{"position":[[149,45]]}}}],["model的模型大小，text",{"_index":1454,"t":{"965":{"position":[[482,15]]}}}],["model的生成过程其实就是denoise的过程。具体来讲，输入文字prompt以及从随机分布中sample出的与预期生成图像具有相同大小的噪声矩阵，预测出输入图片中的噪声分布，在输入图像中减去噪声，输出去噪后的图像。gener",{"_index":1495,"t":{"969":{"position":[[29,119]]}}}],["model的训练需要大量成对的（pair",{"_index":1511,"t":{"969":{"position":[[782,23]]}}}],["model的输出是压缩版本的图像时，decoder的训练资料可以将从互联网上fetch到的图像作为label，并对这些图像做down",{"_index":1515,"t":{"969":{"position":[[946,66]]}}}],["model等生成模型，都不只是单独使用文字作为输入来生成图像，而是使用了从已知的随机分布（e.g",{"_index":1428,"t":{"961":{"position":[[19,49]]}}}],["model非常相似：vae对训练集中的原始图像使用encoder将其变换为某种lat",{"_index":1648,"t":{"1006":{"position":[[606,45]]}}}],["model（mlm）任务的交叉熵损失，通过最小化encoder输出的概率分布与ground",{"_index":2021,"t":{"1086":{"position":[[202,45]]}}}],["model：接受text",{"_index":1442,"t":{"965":{"position":[[125,12]]}}}],["modifi",{"_index":1103,"t":{"879":{"position":[[956,6]]}}}],["modul",{"_index":1878,"t":{"1051":{"position":[[17,6],[90,7]]}}}],["monitor",{"_index":2835,"t":{"1305":{"position":[[171,7]]}}}],["more",{"_index":1460,"t":{"965":{"position":[[618,4],[786,4]]},"1051":{"position":[[234,4]]},"1131":{"position":[[316,4]]},"1185":{"position":[[145,4]]}}}],["motherfuck",{"_index":1117,"t":{"879":{"position":[[1613,13]]}}}],["mount",{"_index":1121,"t":{"879":{"position":[[1783,6]]}}}],["mous",{"_index":1179,"t":{"881":{"position":[[777,6]]},"895":{"position":[[1833,6]]}}}],["move(t,a)move(t",{"_index":193,"t":{"767":{"position":[[292,18]]}}}],["move[4][2",{"_index":318,"t":{"821":{"position":[[712,10]]}}}],["move_[8][2",{"_index":320,"t":{"821":{"position":[[756,11]]}}}],["move_backwardc++11",{"_index":460,"t":{"841":{"position":[[886,18]]}}}],["movec++11",{"_index":459,"t":{"841":{"position":[[858,9]]}}}],["mrpc（microsoft",{"_index":2048,"t":{"1088":{"position":[[653,14]]}}}],["ms",{"_index":138,"t":{"742":{"position":[[56,3]]}}}],["mse",{"_index":1306,"t":{"904":{"position":[[0,29]]},"1171":{"position":[[72,50]]}}}],["mse=1mn∑x=1m∑y=1n[f(x,y)−g(x,y)]2(4)mse=\\frac{1}{mn}\\sum_{x=1}^{m}\\sum_{y=1}^{n}[f(x,i",{"_index":1307,"t":{"904":{"position":[[30,87]]}}}],["mse作为损失函数，其目标是让输出的概率更接近于1",{"_index":2452,"t":{"1173":{"position":[[0,56]]}}}],["mt(x,i",{"_index":287,"t":{"821":{"position":[[271,7]]}}}],["mu_2)^2}{2\\sigma_2^2",{"_index":2663,"t":{"1201":{"position":[[860,22]]}}}],["mu_2\\right\\|_2^2+\\mathrm{tr}\\left(\\sigma_1+\\sigma_2",{"_index":1483,"t":{"967":{"position":[[440,52]]}}}],["multi",{"_index":1596,"t":{"994":{"position":[[784,5],[907,5],[962,5]]},"1228":{"position":[[784,5],[907,5],[962,5]]}}}],["multihead",{"_index":1623,"t":{"1002":{"position":[[0,14]]},"1236":{"position":[[0,14]]}}}],["multimap",{"_index":90,"t":{"726":{"position":[[207,32]]}}}],["multiset",{"_index":89,"t":{"726":{"position":[[197,9]]},"859":{"position":[[83,20]]}}}],["multiset<doubl",{"_index":677,"t":{"859":{"position":[[121,16]]}}}],["multiset<int",{"_index":137,"t":{"742":{"position":[[42,13]]},"859":{"position":[[104,13]]}}}],["multiset和set的基本操作相似，需要注意的是，集合的count()能返回0（无）或者1",{"_index":678,"t":{"859":{"position":[[142,67]]}}}],["mutil",{"_index":1607,"t":{"994":{"position":[[1357,5]]},"1228":{"position":[[1357,5]]}}}],["mux=σ∗z",{"_index":2675,"t":{"1205":{"position":[[128,10]]}}}],["muμ，背景像素的正态分布概率密度函数的均值为ν\\nu",{"_index":1407,"t":{"942":{"position":[[7,102]]}}}],["n",{"_index":364,"t":{"826":{"position":[[652,2]]},"841":{"position":[[523,31],[682,1],[730,1],[818,1]]},"843":{"position":[[719,2],[936,22],[974,51]]},"845":{"position":[[433,51],[740,2]]},"861":{"position":[[492,5],[520,1]]},"864":{"position":[[386,2]]},"866":{"position":[[527,2],[1358,3],[1438,3]]},"868":{"position":[[3043,7],[3123,8]]},"871":{"position":[[1717,2]]},"873":{"position":[[1382,2]]},"875":{"position":[[671,2]]},"879":{"position":[[409,5],[474,4],[1635,5],[1689,4]]},"1015":{"position":[[14,1]]},"1055":{"position":[[2144,4],[4303,4]]},"1241":{"position":[[14,1]]},"1321":{"position":[[19,13]]},"1332":{"position":[[9,1],[18,1]]},"1337":{"position":[[293,12],[306,26],[333,27]]},"1402":{"position":[[165,12],[178,26],[205,27]]}}}],["n\"代替endl",{"_index":71,"t":{"719":{"position":[[304,41]]}}}],["n(μ,σ2)\\mathcal{n}(\\mu,\\sigma^2)n(μ,σ2)采样xxx时，可以先从标准高斯分布n(0,1)\\mathcal{n}(0,1)n(0,1)中sample出zzz",{"_index":2673,"t":{"1205":{"position":[[0,105]]}}}],["n,m",{"_index":769,"t":{"866":{"position":[[144,4]]}}}],["n2",{"_index":2901,"t":{"1332":{"position":[[88,2]]}}}],["n_latent",{"_index":1793,"t":{"1031":{"position":[[672,8],[817,8]]},"1257":{"position":[[672,8],[817,8]]}}}],["nada",{"_index":1822,"t":{"1033":{"position":[[949,4],[1489,4]]},"1259":{"position":[[946,4],[1486,4]]}}}],["nada率先引入了clip模型来获取必须的先验知识，通过预训练大模型的语言理解能力实现在目标域只需要文字标签而不需要图片，将源域和目标域之间的差距编码为在clip",{"_index":2589,"t":{"1188":{"position":[[831,112]]}}}],["namespac",{"_index":10,"t":{"705":{"position":[[31,9]]},"711":{"position":[[31,9]]},"717":{"position":[[31,9]]},"817":{"position":[[6,9]]},"819":{"position":[[256,9]]},"843":{"position":[[1487,9]]},"864":{"position":[[59,9]]},"866":{"position":[[125,9]]},"871":{"position":[[85,9]]},"873":{"position":[[85,9]]},"875":{"position":[[171,9]]},"1321":{"position":[[72,9]]}}}],["nar",{"_index":1426,"t":{"959":{"position":[[0,63]]}}}],["nasm",{"_index":1210,"t":{"893":{"position":[[27,6],[100,4]]}}}],["nat",{"_index":1581,"t":{"992":{"position":[[91,9]]},"1226":{"position":[[91,9]]}}}],["natur",{"_index":2037,"t":{"1088":{"position":[[384,7]]}}}],["neamtiu",{"_index":1096,"t":{"879":{"position":[[834,7]]}}}],["neamtiu@cs.umd.edu",{"_index":1097,"t":{"879":{"position":[[842,20]]}}}],["need",{"_index":1155,"t":{"881":{"position":[[404,4]]},"895":{"position":[[1460,4]]}}}],["neq",{"_index":2205,"t":{"1126":{"position":[[756,4]]}}}],["net",{"_index":1462,"t":{"965":{"position":[[640,3],[698,3],[812,3]]},"1345":{"position":[[7,8]]}}}],["net(x",{"_index":2405,"t":{"1150":{"position":[[2028,6]]}}}],["net.apply(init_weight",{"_index":2380,"t":{"1150":{"position":[[1531,23]]}}}],["net.ev",{"_index":2357,"t":{"1150":{"position":[[989,10]]}}}],["net.generator_frozen.style(sample_z",{"_index":1759,"t":{"1029":{"position":[[122,36]]},"1255":{"position":[[122,36]]}}}],["net.to(devic",{"_index":2381,"t":{"1150":{"position":[[1555,14]]}}}],["net.train",{"_index":2397,"t":{"1150":{"position":[[1862,11]]}}}],["network",{"_index":1766,"t":{"1029":{"position":[[571,10]]},"1033":{"position":[[1773,7]]},"1055":{"position":[[445,7]]},"1072":{"position":[[38,48]]},"1074":{"position":[[42,53]]},"1188":{"position":[[337,9]]},"1255":{"position":[[572,10]]},"1259":{"position":[[1770,7]]}}}],["network由pixelnorm层与equallinear层构成。以下代码节选自sg2_model.pi",{"_index":1765,"t":{"1029":{"position":[[506,53]]},"1255":{"position":[[506,54]]}}}],["network进行映射得到的，map",{"_index":1764,"t":{"1029":{"position":[[483,22]]},"1255":{"position":[[483,22]]}}}],["network），fcn通过最后通过反卷积将tensor还原到原始图像尺寸，即在cnn中，输入与输出（下游任务的要求）都影响着cnn",{"_index":1870,"t":{"1046":{"position":[[207,72]]}}}],["network，生成对抗网络）包括两个主要的组件：生成器（generator）和判别器（discrimin",{"_index":1991,"t":{"1070":{"position":[[27,78]]}}}],["neural",{"_index":1899,"t":{"1055":{"position":[[438,6]]}}}],["new",{"_index":385,"t":{"831":{"position":[[9,3],[63,3],[130,3]]},"833":{"position":[[73,3]]},"835":{"position":[[25,3],[80,3]]}}}],["next",{"_index":851,"t":{"868":{"position":[[468,6],[1814,6],[1825,6],[1845,5],[2556,6]]},"1086":{"position":[[428,4]]}}}],["next(iter(net.parameters())).devic",{"_index":2358,"t":{"1150":{"position":[[1024,35]]}}}],["next=nul",{"_index":894,"t":{"868":{"position":[[1733,11]]}}}],["next_permut",{"_index":517,"t":{"841":{"position":[[2626,16]]}}}],["next_permutation(list.begin",{"_index":38,"t":{"707":{"position":[[106,31]]}}}],["next_permutation(s.begin",{"_index":29,"t":{"705":{"position":[[279,28]]}}}],["nfa",{"_index":190,"t":{"767":{"position":[[194,14]]}}}],["nfa的确定化，即将nfa转换为dfa",{"_index":191,"t":{"767":{"position":[[209,24]]}}}],["nfa终态的集合要标*，代表其为等价dfa",{"_index":192,"t":{"767":{"position":[[251,40]]}}}],["ngai",{"_index":2586,"t":{"1188":{"position":[[753,4]]}}}],["ngoc",{"_index":2578,"t":{"1188":{"position":[[675,9],[713,4]]}}}],["nguyen",{"_index":2584,"t":{"1188":{"position":[[722,7],[741,7]]}}}],["nid",{"_index":356,"t":{"826":{"position":[[471,4]]},"864":{"position":[[230,4]]},"866":{"position":[[346,4]]}}}],["night/128x128/apps(deppend",{"_index":2818,"t":{"1303":{"position":[[109,29]]}}}],["ninja",{"_index":1702,"t":{"1017":{"position":[[152,5]]},"1243":{"position":[[152,5]]}}}],["nli",{"_index":2057,"t":{"1088":{"position":[[795,16]]}}}],["nllloss",{"_index":2235,"t":{"1126":{"position":[[1498,11],[1510,7]]}}}],["nllloss(predict",{"_index":2241,"t":{"1126":{"position":[[1661,16]]}}}],["nlp任务中很重要的一个benchmark：glu",{"_index":2027,"t":{"1088":{"position":[[47,38]]}}}],["nlp领域的，但是bert是seq2seq模型，图片、语音等信号也都可以作为sequence输入至bert中，因此bert",{"_index":2066,"t":{"1088":{"position":[[1394,88]]}}}],["nm",{"_index":1417,"t":{"946":{"position":[[293,32]]},"1354":{"position":[[590,9]]}}}],["nn",{"_index":2234,"t":{"1126":{"position":[[1493,2]]},"1150":{"position":[[50,2],[56,2]]}}}],["nn.avgpool2d(kernel_size=2",{"_index":2341,"t":{"1150":{"position":[[617,27],[705,27]]}}}],["nn.conv2d",{"_index":2378,"t":{"1150":{"position":[[1486,10]]}}}],["nn.conv2d(1",{"_index":2337,"t":{"1150":{"position":[[558,12]]}}}],["nn.conv2d(6",{"_index":2343,"t":{"1150":{"position":[[656,12]]}}}],["nn.crossentropyloss",{"_index":2245,"t":{"1126":{"position":[[1746,21]]}}}],["nn.flatten",{"_index":2345,"t":{"1150":{"position":[[744,13]]}}}],["nn.init.xavier_uniform_(m.weight",{"_index":2379,"t":{"1150":{"position":[[1497,33]]}}}],["nn.leakyrelu",{"_index":2340,"t":{"1150":{"position":[[601,15],[689,15],[786,15]]}}}],["nn.linear",{"_index":2377,"t":{"1150":{"position":[[1462,9]]}}}],["nn.linear(120",{"_index":2348,"t":{"1150":{"position":[[802,14]]}}}],["nn.linear(16",{"_index":2346,"t":{"1150":{"position":[[758,12]]}}}],["nn.linear(84",{"_index":2350,"t":{"1150":{"position":[[836,13]]}}}],["nn.nllloss",{"_index":2236,"t":{"1126":{"position":[[1520,12]]}}}],["nn.sequential(*lay",{"_index":1775,"t":{"1029":{"position":[[735,22]]},"1255":{"position":[[736,22]]}}}],["nn.sigmoid",{"_index":2349,"t":{"1150":{"position":[[822,13]]}}}],["nnn",{"_index":1486,"t":{"967":{"position":[[712,30],[743,74]]},"1002":{"position":[[1079,20]]},"1051":{"position":[[33,3],[56,3]]},"1057":{"position":[[0,29]]},"1086":{"position":[[365,17]]},"1236":{"position":[[1079,20]]}}}],["node",{"_index":380,"t":{"828":{"position":[[30,5],[58,5],[72,4]]},"871":{"position":[[192,4]]},"873":{"position":[[192,4]]},"875":{"position":[[272,4]]}}}],["nois",{"_index":1643,"t":{"1006":{"position":[[165,19]]},"1008":{"position":[[164,20]]}}}],["none",{"_index":157,"t":{"746":{"position":[[107,6]]},"1002":{"position":[[1589,5]]},"1055":{"position":[[2084,5],[2114,5],[4243,5],[4273,5]]},"1150":{"position":[[2360,6],[2440,6],[2447,5]]},"1236":{"position":[[1589,5]]},"1294":{"position":[[394,5],[509,5]]}}}],["none_ofc++11",{"_index":446,"t":{"841":{"position":[[447,12]]}}}],["norm",{"_index":1803,"t":{"1031":{"position":[[1149,4],[1271,4]]},"1257":{"position":[[1149,4],[1272,4]]}}}],["normal",{"_index":1429,"t":{"961":{"position":[[69,6]]},"973":{"position":[[178,6]]},"986":{"position":[[73,14]]},"1010":{"position":[[0,7]]},"1031":{"position":[[881,14]]},"1055":{"position":[[1645,9],[3941,9]]},"1220":{"position":[[73,14]]},"1257":{"position":[[881,14]]}}}],["normalization:\\n",{"_index":1936,"t":{"1055":{"position":[[1778,18],[4074,18]]}}}],["normalization，之后送入fcn并进行residu",{"_index":1574,"t":{"990":{"position":[[119,32]]},"1224":{"position":[[119,32]]}}}],["normalization，以上构成了一个encod",{"_index":1576,"t":{"990":{"position":[[186,28]]},"1224":{"position":[[186,28]]}}}],["notebook",{"_index":2744,"t":{"1290":{"position":[[116,11]]}}}],["now",{"_index":23,"t":{"705":{"position":[[138,3],[184,3],[190,3],[218,4],[263,5]]},"879":{"position":[[2315,3]]}}}],["np",{"_index":1974,"t":{"1055":{"position":[[3114,2]]},"1150":{"position":[[29,2]]},"1294":{"position":[[275,2]]},"1329":{"position":[[789,24]]},"1339":{"position":[[789,24]]}}}],["np完全问题是一类特殊的np问题，没有已知的高效解决算法，并且可以在多项式时间内归约到任何其他的np",{"_index":2899,"t":{"1329":{"position":[[814,52]]},"1339":{"position":[[814,52]]}}}],["ntfsfix",{"_index":2884,"t":{"1326":{"position":[[18,9],[35,7],[64,7]]}}}],["ntfsfix修复ntf",{"_index":2883,"t":{"1326":{"position":[[0,17]]}}}],["nth_element",{"_index":488,"t":{"841":{"position":[[1781,11]]}}}],["null",{"_index":868,"t":{"868":{"position":[[867,5]]}}}],["num)(batch,num",{"_index":1938,"t":{"1055":{"position":[[1932,16],[2286,16]]}}}],["num++;//加入拓扑排序的顶点数加1",{"_index":815,"t":{"866":{"position":[[2173,20]]}}}],["num=0",{"_index":802,"t":{"866":{"position":[[1793,20]]}}}],["num_batch",{"_index":2393,"t":{"1150":{"position":[[1791,11],[2238,12],[2274,11],[2326,12]]}}}],["num_epoch",{"_index":2374,"t":{"1150":{"position":[[1402,11],[1723,12],[2566,10],[2724,10],[2798,11]]}}}],["number",{"_index":1902,"t":{"1055":{"position":[[494,8]]},"1175":{"position":[[451,6]]}}}],["numer",{"_index":260,"t":{"817":{"position":[[157,7]]}}}],["numnumnum的注意力分数向量，考虑到有batchbatchbatch个输入向量，因此最终的注意力分数矩阵的形状为(batch,num)(batch",{"_index":1947,"t":{"1055":{"position":[[2177,108]]}}}],["numpi",{"_index":1973,"t":{"1055":{"position":[[3105,5]]},"1150":{"position":[[20,5]]},"1294":{"position":[[266,5]]}}}],["num个字符c",{"_index":595,"t":{"847":{"position":[[613,17]]}}}],["nu}{2}\\tag{25}t=2μ+ν​(25",{"_index":1409,"t":{"942":{"position":[[132,27]]}}}],["nvertex",{"_index":360,"t":{"826":{"position":[[600,9]]},"864":{"position":[[334,9]]},"866":{"position":[[475,9]]}}}],["nvertexs(1",{"_index":368,"t":{"826":{"position":[[728,12]]},"866":{"position":[[603,12]]}}}],["nvertexs(n",{"_index":365,"t":{"826":{"position":[[669,12]]},"864":{"position":[[403,12]]},"866":{"position":[[544,12]]}}}],["nvidia",{"_index":1691,"t":{"1017":{"position":[[4,6],[117,6]]},"1243":{"position":[[4,6],[117,6]]}}}],["n个int元素的vector",{"_index":522,"t":{"843":{"position":[[326,22]]}}}],["n个元素的列表，每个元素都是0",{"_index":554,"t":{"845":{"position":[[65,21]]}}}],["n个元素的列表，每个元素都是m",{"_index":556,"t":{"845":{"position":[[104,21]]}}}],["n位整数求余10可以得到最后一位，再除以10可以得到除去上述最后一位之后的n",{"_index":46,"t":{"713":{"position":[[21,41]]}}}],["n是一个四位数，它的9倍恰好是其反序数（例如：1234的反序数是4321），求n",{"_index":40,"t":{"709":{"position":[[4,43]]}}}],["n维向量w=(w1,w2,...,wn)w=(w_1,w_2,...,w_n)w=(w1​,w2​,...,wn",{"_index":2277,"t":{"1138":{"position":[[89,88]]}}}],["n维向量x=(x1,x2,...,xn)x=(x_1,x_2,...,x_n)x=(x1​,x2​,...,xn",{"_index":2276,"t":{"1138":{"position":[[0,88]]}}}],["n），val",{"_index":541,"t":{"843":{"position":[[1046,49]]},"845":{"position":[[505,49]]}}}],["o",{"_index":1261,"t":{"895":{"position":[[1263,1],[1312,1]]}}}],["o(co×ci×h×w×h′×w′)o(c_o",{"_index":2311,"t":{"1145":{"position":[[394,29]]}}}],["o1]=[α1,1′][v1](5)\\begin{bmatrix}o_1\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\end{bmatrix}\\tag{5}[o1​​]=[α1,1′​​][v1​​](5",{"_index":1628,"t":{"1002":{"position":[[265,163]]},"1236":{"position":[[265,163]]}}}],["o1o2]=[α1,1′0α1,2′α2,2′][v1v2](7)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&0\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix",{"_index":1632,"t":{"1002":{"position":[[822,203]]},"1236":{"position":[[822,203]]}}}],["o1o2]=[α1,1′α2,1′α1,2′α2,2′][v1v2](6)\\begin{bmatrix}o_1\\\\o_2\\end{bmatrix}=\\begin{bmatrix}\\alpha_{1,1}^{\\prime}&\\alpha_{2,1}^{\\prime}\\\\\\alpha_{1,2}^{\\prime}&\\alpha_{2,2}^{\\prime}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\end{bmatrix",{"_index":1630,"t":{"1002":{"position":[[504,227]]},"1236":{"position":[[504,227]]}}}],["o1o2⋮on]=[α1,1′0⋯0α1,2′α2′⋯0⋮⋮⋮α1,n′α2,n′⋯αn,n′][v1v2⋮vn](8)\\begin{bmatrix}o_1\\\\o_2\\\\\\vdots\\\\o_n\\end{bmatrix}=\\begin{bmatrix}\\alpha'_{1,1}&0&\\cdots&0\\\\\\alpha'_{1,2}&\\alpha'_2&\\cdots&0\\\\\\vdots&\\vdots&&\\vdots\\\\\\alpha'_{1,n}&\\alpha'_{2,n}&\\cdots&\\alpha'_{n,n}\\end{bmatrix}\\begin{bmatrix}v_1\\\\v_2\\\\\\vdots\\\\v_n\\end{bmatrix}\\tag{8}⎣⎡​o1​o2​⋮on​​⎦⎤​=⎣⎡​α1,1′​α1,2′​⋮α1,n′​​0α2′​⋮α2,n′​​⋯⋯⋯​00⋮αn,n′​​⎦⎤​⎣⎡​v1​v2​⋮vn​​⎦⎤​(8",{"_index":1634,"t":{"1002":{"position":[[1100,417]]},"1236":{"position":[[1100,417]]}}}],["object",{"_index":2909,"t":{"1343":{"position":[[15,6]]}}}],["odena",{"_index":2550,"t":{"1188":{"position":[[259,6]]}}}],["offer",{"_index":1280,"t":{"897":{"position":[[180,5]]}}}],["offer的也不用着急，因为每个学生只能上一个学校，928/929当天就算手里一堆offer的学生也是只能选择最想去的学校而释放掉其他offer。稳住心态沉住气，一般10月20",{"_index":2996,"t":{"1390":{"position":[[80,112]]}}}],["ojha",{"_index":2564,"t":{"1188":{"position":[[510,5]]}}}],["ok",{"_index":832,"t":{"868":{"position":[[102,2],[907,3],[1909,3]]}}}],["on",{"_index":1251,"t":{"895":{"position":[[1026,3]]},"1131":{"position":[[46,3]]}}}],["onc",{"_index":1910,"t":{"1055":{"position":[[642,4]]},"1131":{"position":[[228,4]]},"1133":{"position":[[131,4]]}}}],["one\"，0.25",{"_index":336,"t":{"826":{"position":[[58,11]]}}}],["open",{"_index":2524,"t":{"1183":{"position":[[18,4]]}}}],["oper",{"_index":381,"t":{"828":{"position":[[41,8]]}}}],["optim",{"_index":2382,"t":{"1150":{"position":[[1570,9]]}}}],["optimizer.step",{"_index":2408,"t":{"1150":{"position":[[2067,16]]}}}],["optimizer.zero_grad",{"_index":2403,"t":{"1150":{"position":[[1964,21]]}}}],["opts=dic(title=\"win_titl",{"_index":2734,"t":{"1280":{"position":[[82,27]]}}}],["opts=dict(title=\"win_titl",{"_index":2727,"t":{"1278":{"position":[[151,29]]}}}],["origin",{"_index":2683,"t":{"1211":{"position":[[4,8]]}}}],["os",{"_index":715,"t":{"861":{"position":[[1017,2],[1042,2]]},"1150":{"position":[[169,2]]}}}],["os.environ['http_proxi",{"_index":2320,"t":{"1150":{"position":[[172,24]]}}}],["os.environ['https_proxi",{"_index":2322,"t":{"1150":{"position":[[223,25]]}}}],["out",{"_index":1887,"t":{"1051":{"position":[[210,3]]}}}],["outdegre",{"_index":789,"t":{"866":{"position":[[1319,12]]}}}],["outdegreelist.push_back(it",{"_index":788,"t":{"866":{"position":[[1292,26]]}}}],["output",{"_index":1189,"t":{"881":{"position":[[943,7]]},"895":{"position":[[1999,7]]},"1051":{"position":[[60,8],[271,7]]},"1055":{"position":[[2377,7],[2385,7],[2741,6],[4335,7],[4343,7]]},"1126":{"position":[[1687,7],[1873,7]]},"1181":{"position":[[885,7],[939,7]]},"1294":{"position":[[602,6]]}}}],["overflow",{"_index":835,"t":{"868":{"position":[[153,8]]}}}],["p",{"_index":311,"t":{"821":{"position":[[636,1]]},"835":{"position":[[19,3]]},"849":{"position":[[142,2]]},"868":{"position":[[1195,3],[1657,1],[1700,4],[1721,1],[1853,2],[1895,2],[2294,3],[2549,2],[2603,1]]},"1025":{"position":[[89,1],[364,1]]},"1251":{"position":[[89,1],[364,1]]},"1329":{"position":[[740,1],[770,18]]},"1339":{"position":[[740,1],[770,18]]}}}],["p(a)=∑i=1np(a∣bi)⋅p(bi)p(a)=\\sum_{i=1}^np(a\\mid",{"_index":2626,"t":{"1199":{"position":[[389,47]]}}}],["p(a)p(a)p(a)和p(b)p(b)p(b",{"_index":2895,"t":{"1329":{"position":[[627,30]]},"1339":{"position":[[627,30]]}}}],["p(a)p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣a,b)⋅p(b∣a)⋅p(a",{"_index":2644,"t":{"1201":{"position":[[124,49]]}}}],["p(a)p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣b)⋅p(b∣a)⋅p(a",{"_index":2670,"t":{"1203":{"position":[[169,47]]}}}],["p(a)}{p(b)}p(a∣b)=p(b)p(b∣a)∗p(a",{"_index":2892,"t":{"1329":{"position":[[484,34]]},"1339":{"position":[[484,34]]}}}],["p(a,b)=p(c\\mid",{"_index":2641,"t":{"1201":{"position":[[83,14]]},"1203":{"position":[[130,14]]}}}],["p(a,b)p(a,b)p(a,b)是事件aaa、bbb",{"_index":2622,"t":{"1199":{"position":[[180,42]]}}}],["p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣a,b)⋅p(b∣a)⋅p(a)p(a,b,c)=p(c\\mid",{"_index":2639,"t":{"1201":{"position":[[11,61]]}}}],["p(a,b,c)=p(c∣a,b)⋅p(a,b)=p(c∣b)⋅p(b∣a)⋅p(a)p(a,b,c",{"_index":2668,"t":{"1203":{"position":[[59,51]]}}}],["p(a∣b)=p(a,b)p(b)p(a\\mid",{"_index":2620,"t":{"1199":{"position":[[110,24]]}}}],["p(a∣b)=p(b∣a)∗p(a)p(b)p(a|b",{"_index":2890,"t":{"1329":{"position":[[438,28]]},"1339":{"position":[[438,28]]}}}],["p(a∣b)p(a\\mid",{"_index":2618,"t":{"1199":{"position":[[9,53]]}}}],["p(a∣b)p(a|b)p(a∣b",{"_index":2893,"t":{"1329":{"position":[[523,26]]},"1339":{"position":[[523,26]]}}}],["p(a∣bi)p(a\\mid",{"_index":2637,"t":{"1199":{"position":[[829,14]]}}}],["p(b",{"_index":2656,"t":{"1201":{"position":[[460,3],[480,3]]}}}],["p(b)p(b)p(b)是事件bbb",{"_index":2623,"t":{"1199":{"position":[[223,25]]}}}],["p(b,c",{"_index":2650,"t":{"1201":{"position":[[363,5]]}}}],["p(b,c∣a)=p(a,b,c)p(a)=p(a,b,c)p(a,b,c)p(c∣a,b)⋅p(b∣a)=p(b∣a)⋅p(c∣a,b)\\begin{align",{"_index":2649,"t":{"1201":{"position":[[279,83]]}}}],["p(b,c∣a)=p(b∣a)⋅p(c∣a,b)p(b,c\\mid",{"_index":2645,"t":{"1201":{"position":[[174,33]]}}}],["p(b,c∣a)=p(b∣a)⋅p(c∣b)p(b,c\\mid",{"_index":2671,"t":{"1203":{"position":[[217,31]]}}}],["p(b\\mid",{"_index":2642,"t":{"1201":{"position":[[108,7]]},"1203":{"position":[[153,7]]}}}],["p(b_i)p(a)=i=1∑n​p(a∣bi​)⋅p(bi",{"_index":2628,"t":{"1199":{"position":[[447,32]]}}}],["p(b_i)}{p(a)}p(bi​∣a)=p(a)p(a∣bi​)⋅p(bi",{"_index":2633,"t":{"1199":{"position":[[710,42]]}}}],["p(bi)p(b_i)p(bi​)以及p(a)p(a)p(a",{"_index":2634,"t":{"1199":{"position":[[757,37]]}}}],["p(bi∣a)=p(a∣bi)⋅p(bi)p(a)p(b_i\\mid",{"_index":2631,"t":{"1199":{"position":[[648,34]]}}}],["p(bi∣a)p(b_i\\mid",{"_index":2635,"t":{"1199":{"position":[[795,16]]}}}],["p(b∣a)p(b|a)p(b∣a",{"_index":2894,"t":{"1329":{"position":[[577,23]]},"1339":{"position":[[577,23]]}}}],["p(c",{"_index":2657,"t":{"1201":{"position":[[498,3]]}}}],["p(c\\mid",{"_index":2647,"t":{"1201":{"position":[[227,7]]},"1203":{"position":[[111,8],[268,7]]}}}],["p(x∣y)p(x|y)p(x∣y)，而图像生成模型需要完成的任务就是将输入的从某一随机分布中sampl",{"_index":1431,"t":{"961":{"position":[[112,119]]}}}],["p(y)p(y)p(i",{"_index":1815,"t":{"1033":{"position":[[334,13],[401,33],[435,13],[894,18]]},"1259":{"position":[[333,12],[399,33],[433,13],[892,17]]}}}],["p(y∣x)p(y|x)p(y∣x",{"_index":1813,"t":{"1033":{"position":[[168,19],[380,18]]},"1259":{"position":[[168,18],[378,18]]}}}],["p)(8",{"_index":2209,"t":{"1126":{"position":[[820,5]]}}}],["p)(8)d_{kl}(p",{"_index":2204,"t":{"1126":{"position":[[722,13]]}}}],["p)[maxcol",{"_index":395,"t":{"833":{"position":[[101,12]]}}}],["p)\\tag{8}dkl​(p",{"_index":2207,"t":{"1126":{"position":[[787,15]]}}}],["p.first",{"_index":620,"t":{"849":{"position":[[152,7]]}}}],["p.second",{"_index":621,"t":{"849":{"position":[[163,9]]}}}],["p1",{"_index":974,"t":{"871":{"position":[[450,5],[793,5]]},"873":{"position":[[334,5],[563,5]]},"875":{"position":[[421,5]]}}}],["p1=l1,p2",{"_index":1039,"t":{"875":{"position":[[388,9]]}}}],["p1=la,p2",{"_index":972,"t":{"871":{"position":[[421,9],[764,9]]},"873":{"position":[[305,9],[534,9]]}}}],["p2=p1",{"_index":975,"t":{"871":{"position":[[471,5],[814,5]]},"873":{"position":[[340,5],[569,5]]},"875":{"position":[[427,5]]}}}],["p=g.vers[u].firstarc",{"_index":917,"t":{"868":{"position":[[2526,22]]}}}],["p=new",{"_index":389,"t":{"831":{"position":[[184,6]]}}}],["p=p",{"_index":918,"t":{"868":{"position":[[2552,3]]}}}],["p[i",{"_index":401,"t":{"835":{"position":[[73,4]]}}}],["p[i][j",{"_index":397,"t":{"833":{"position":[[140,17]]}}}],["p^(y)=1n∑i=1np(y∣x(i))\\hat{p}(y)=\\frac{1}{n}\\sum_{i=1}^{n}p(y|\\mathbf{x}^{(i)})p^​(y)=n1​i=1∑n​p(y∣x(i",{"_index":1816,"t":{"1033":{"position":[[449,104]]},"1259":{"position":[[447,104]]}}}],["p_\\text{data}{(x)}}[\\log",{"_index":1997,"t":{"1076":{"position":[[216,24]]}}}],["p_attn",{"_index":1636,"t":{"1002":{"position":[[1640,6]]},"1236":{"position":[[1640,6]]}}}],["p_g}d_{kl}\\left(p(y|\\mathbf{x})||p(y)\\right)\\right)is(g)=exp(ex∼pg​​dkl​(p(y∣x)∣∣p(i",{"_index":1818,"t":{"1033":{"position":[[665,87]]},"1259":{"position":[[663,87]]}}}],["p_z(z)}[\\log",{"_index":2007,"t":{"1076":{"position":[[842,12]]}}}],["p_z(z)}[log(1",{"_index":2002,"t":{"1076":{"position":[[391,13]]}}}],["padding=2",{"_index":2339,"t":{"1150":{"position":[[589,11]]}}}],["pair",{"_index":77,"t":{"726":{"position":[[37,10]]},"1088":{"position":[[327,32]]},"1185":{"position":[[208,5]]}}}],["pair<doubl",{"_index":619,"t":{"849":{"position":[[121,12]]}}}],["pair<int,int",{"_index":109,"t":{"730":{"position":[[0,13]]},"821":{"position":[[416,13]]}}}],["pair上的六个比较运算符：<、>、<=、>=、==、!=，其规则是先比较first，first相等时再比较second",{"_index":623,"t":{"849":{"position":[[246,110]]}}}],["pair也能进行sort",{"_index":113,"t":{"730":{"position":[[81,12]]}}}],["pair对象外，如果需要即时生成一个pair对象，也可以调用在其中定义的一个模版函数：make_pair。make_pair",{"_index":624,"t":{"849":{"position":[[357,92]]}}}],["pair模版类需要两个参数：首元素的数据类型和尾元素的数据类型。pair模版类对象有两个成员：first和second",{"_index":622,"t":{"849":{"position":[[173,72]]}}}],["paper",{"_index":1842,"t":{"1033":{"position":[[1714,5]]},"1259":{"position":[[1711,5]]}}}],["paragraph",{"_index":1952,"t":{"1055":{"position":[[2452,10]]}}}],["paramet",{"_index":2271,"t":{"1133":{"position":[[37,9]]},"1209":{"position":[[87,10]]}}}],["paraphras",{"_index":2050,"t":{"1088":{"position":[[677,10]]}}}],["partial_sort",{"_index":489,"t":{"841":{"position":[[1822,12]]}}}],["partial_sort_copi",{"_index":490,"t":{"841":{"position":[[1840,17]]}}}],["partit",{"_index":482,"t":{"841":{"position":[[1590,9]]},"1129":{"position":[[183,11]]}}}],["partition_copyc++11",{"_index":483,"t":{"841":{"position":[[1611,19]]}}}],["partition_pointc++11",{"_index":484,"t":{"841":{"position":[[1643,20]]}}}],["pass",{"_index":1357,"t":{"926":{"position":[[58,4]]}}}],["path",{"_index":912,"t":{"868":{"position":[[2397,11]]},"1211":{"position":[[226,4],[273,4]]}}}],["path/terminal_proxy.sh",{"_index":2862,"t":{"1311":{"position":[[96,23]]}}}],["path[k]=0",{"_index":924,"t":{"868":{"position":[[2691,10]]}}}],["path[k]=u",{"_index":908,"t":{"868":{"position":[[2317,10]]}}}],["path[max_vertex_num",{"_index":901,"t":{"868":{"position":[[2162,21]]}}}],["pathnum",{"_index":916,"t":{"868":{"position":[[2483,10]]}}}],["pathnum=0",{"_index":902,"t":{"868":{"position":[[2193,10],[3006,10]]}}}],["pathnum==0",{"_index":948,"t":{"868":{"position":[[3096,12]]}}}],["paths[i",{"_index":954,"t":{"868":{"position":[[3187,10]]}}}],["paths[maxsize][max_vertex_num",{"_index":900,"t":{"868":{"position":[[2119,31]]}}}],["paths[pathnum][i",{"_index":913,"t":{"868":{"position":[[2409,17]]}}}],["paths[pathnum][i]='\\0",{"_index":915,"t":{"868":{"position":[[2453,23]]}}}],["pay",{"_index":1888,"t":{"1051":{"position":[[230,3]]}}}],["pc",{"_index":1194,"t":{"885":{"position":[[102,7]]}}}],["pe(k,2i)\\\\pe(pos+k,2i+1)=pe(pos,2i+1)\\tim",{"_index":1558,"t":{"988":{"position":[[836,43]]},"1222":{"position":[[836,43]]}}}],["pe(k,2i)\\end{array",{"_index":1561,"t":{"988":{"position":[[908,19]]},"1222":{"position":[[908,19]]}}}],["pe(k,2i+1",{"_index":1559,"t":{"988":{"position":[[880,10]]},"1222":{"position":[[880,10]]}}}],["pe(k,2i+1)+pe(pos,2i+1)\\tim",{"_index":1557,"t":{"988":{"position":[[806,29]]},"1222":{"position":[[806,29]]}}}],["pe(pos+k,2i)=pe(pos,2i)×pe(k,2i+1)+pe(pos,2i+1)×pe(k,2i)pe(pos+k,2i+1)=pe(pos,2i+1)×pe(k,2i+1)−pe(pos,2i)×pe(k,2i)(3)\\begin{array}{l}pe(pos+k,2i)=pe(pos,2i)\\tim",{"_index":1556,"t":{"988":{"position":[[643,162]]},"1222":{"position":[[643,162]]}}}],["pe(pos,2i)=sin(pos100002i/dmodel)(1)pe_{(pos,2i)}=sin(\\frac{pos}{10000^{2i/d_{\\mathrm{model",{"_index":1551,"t":{"988":{"position":[[212,96]]},"1222":{"position":[[212,96]]}}}],["pe(pos,2i)\\tim",{"_index":1560,"t":{"988":{"position":[[891,16]]},"1222":{"position":[[891,16]]}}}],["pe(pos,2i+1)=cos(pos100002i/dmodel)(2)pe_{(pos,2i+1)}=cos(\\frac{pos}{10000^{2i/d_{\\mathrm{model",{"_index":1553,"t":{"988":{"position":[[356,100]]},"1222":{"position":[[356,100]]}}}],["penalti",{"_index":2075,"t":{"1096":{"position":[[151,48]]}}}],["perform",{"_index":2253,"t":{"1129":{"position":[[80,11]]},"1131":{"position":[[354,12]]}}}],["permit",{"_index":1101,"t":{"879":{"position":[[918,9]]}}}],["perspect",{"_index":1654,"t":{"1006":{"position":[[841,12]]}}}],["pg",{"_index":862,"t":{"868":{"position":[[759,4],[779,2],[795,2],[844,2],[1087,4],[1274,2],[1336,2],[1399,2],[1470,2],[1748,3],[1790,2],[1872,2]]}}}],["photo",{"_index":1711,"t":{"1023":{"position":[[44,5],[225,16],[244,5],[255,18]]},"1025":{"position":[[139,5],[150,5],[414,5]]},"1027":{"position":[[72,5],[94,5]]},"1249":{"position":[[44,5],[225,16],[244,5],[255,18]]},"1251":{"position":[[139,5],[150,5],[414,5]]},"1253":{"position":[[72,5],[94,5]]},"1267":{"position":[[59,5]]}}}],["photo.’或‘a",{"_index":1749,"t":{"1027":{"position":[[83,10]]},"1253":{"position":[[83,10]]}}}],["photorealist",{"_index":1468,"t":{"965":{"position":[[822,14]]}}}],["pi",{"_index":296,"t":{"821":{"position":[[445,2]]}}}],["pii",{"_index":295,"t":{"821":{"position":[[412,3]]}}}],["pip",{"_index":1698,"t":{"1017":{"position":[[124,3],[158,3]]},"1243":{"position":[[124,3],[158,3]]},"1273":{"position":[[0,3]]}}}],["pip_{i}pi",{"_index":2025,"t":{"1086":{"position":[[404,23]]}}}],["piscart",{"_index":2526,"t":{"1183":{"position":[[30,10]]}}}],["pixelnorm",{"_index":1767,"t":{"1029":{"position":[[591,13]]},"1255":{"position":[[592,13]]}}}],["plasmpkg2",{"_index":2846,"t":{"1305":{"position":[[336,9]]}}}],["platform",{"_index":1239,"t":{"895":{"position":[[810,9],[841,9]]}}}],["pleas",{"_index":1940,"t":{"1055":{"position":[[2017,6],[4176,6]]}}}],["plot",{"_index":1976,"t":{"1055":{"position":[[3145,4]]}}}],["plt",{"_index":2319,"t":{"1150":{"position":[[158,3]]}}}],["plt.show",{"_index":2425,"t":{"1150":{"position":[[2628,10]]}}}],["po",{"_index":697,"t":{"861":{"position":[[487,4],[511,3],[692,3],[725,3],[794,3],[932,3]]}}}],["point",{"_index":1084,"t":{"879":{"position":[[660,5],[1743,6]]}}}],["polynomi",{"_index":2898,"t":{"1329":{"position":[[753,10]]},"1339":{"position":[[753,10]]}}}],["pop",{"_index":82,"t":{"726":{"position":[[100,5],[141,5],[170,5]]},"864":{"position":[[1650,4]]}}}],["pop_heap",{"_index":506,"t":{"841":{"position":[[2318,8]]}}}],["pos+kpos+kpos+k位置的嵌入向量的某一维度（2i2i2i或2i+12i+12i+1）而言，可以表示为pospospos位置与kkk位置的嵌入向量的2i2i2i与2i+12i+12i+1",{"_index":1555,"t":{"988":{"position":[[506,136]]},"1222":{"position":[[506,136]]}}}],["pospospos指的是该词汇在整个输入句子中的位置，2i2i2i以及2i+12i+12i+1指的是该词汇的嵌入向量中的维度，dmodeld_{model}dmodel​指的是在嵌入层之后嵌入向量的总维度。即对于每个输入词汇，都要计算dmodeld_{model}dmodel",{"_index":1550,"t":{"988":{"position":[[57,154]]},"1222":{"position":[[57,154]]}}}],["postt(int",{"_index":1007,"t":{"871":{"position":[[1595,9]]},"873":{"position":[[1260,9]]},"875":{"position":[[544,9]]}}}],["postt(rt",{"_index":1021,"t":{"871":{"position":[[2056,10]]},"873":{"position":[[1642,10]]},"875":{"position":[[806,10]]}}}],["postt(t[rt].l",{"_index":1008,"t":{"871":{"position":[[1629,15]]},"873":{"position":[[1294,15]]},"875":{"position":[[585,15]]}}}],["postt(t[rt].r",{"_index":1009,"t":{"871":{"position":[[1645,15]]},"873":{"position":[[1310,15]]},"875":{"position":[[601,15]]}}}],["pos处的二进制位置为0",{"_index":710,"t":{"861":{"position":[[863,14]]}}}],["pp_arr",{"_index":393,"t":{"833":{"position":[[63,7]]}}}],["ppp的坐标为(x,y)(x",{"_index":1294,"t":{"902":{"position":[[118,19]]}}}],["practic",{"_index":2677,"t":{"1207":{"position":[[44,8]]}}}],["pre",{"_index":1036,"t":{"875":{"position":[[346,3]]},"967":{"position":[[983,3]]},"1088":{"position":[[1023,6]]}}}],["pre[maxn",{"_index":1028,"t":{"875":{"position":[[244,10]]}}}],["pre_stylegan",{"_index":1708,"t":{"1019":{"position":[[54,14]]},"1245":{"position":[[54,14]]}}}],["precis",{"_index":2534,"t":{"1185":{"position":[[150,7]]}}}],["predic",{"_index":481,"t":{"841":{"position":[[1562,27]]}}}],["predict",{"_index":2026,"t":{"1086":{"position":[[442,11]]},"1126":{"position":[[1533,7],[1580,7],[1768,7]]}}}],["predictor",{"_index":1499,"t":{"969":{"position":[[245,10]]},"979":{"position":[[568,14]]},"1006":{"position":[[185,46]]},"1008":{"position":[[185,10]]}}}],["predictor中。从随机分布中sample出的噪声就是nois",{"_index":1508,"t":{"969":{"position":[[703,34]]}}}],["predictor中，而需要预测出的噪声分布的ground",{"_index":1502,"t":{"969":{"position":[[407,29]]}}}],["predictor对噪声denois",{"_index":1533,"t":{"979":{"position":[[107,29]]}}}],["predictor的ground",{"_index":1509,"t":{"969":{"position":[[738,16]]}}}],["predictor预测出的噪声，αˉ1,αˉ2,...αˉt\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_tαˉ1​,αˉ2​,...αˉt​以及α1,α2,...αt\\alpha_1,\\alpha_2,...\\alpha_tα1​,α2​,...αt",{"_index":1680,"t":{"1010":{"position":[[592,158]]}}}],["predictor，其输入是加入噪声的图像以及sample出的ttt，而ϵθ\\epsilon_\\thetaϵθ​训练的ground",{"_index":1666,"t":{"1008":{"position":[[717,65]]}}}],["predictor，根据文字prompt对从随机分布中sampl",{"_index":1646,"t":{"1006":{"position":[[490,54]]}}}],["predictor；在生成图片时，输入从该随机分布中sample出的向量，使用训练出的nois",{"_index":1532,"t":{"979":{"position":[[58,48]]}}}],["predit",{"_index":1833,"t":{"1033":{"position":[[1306,9]]},"1259":{"position":[[1303,9]]}}}],["preprocess",{"_index":2686,"t":{"1211":{"position":[[88,10],[161,12]]}}}],["press",{"_index":1145,"t":{"879":{"position":[[2184,7]]}}}],["pret(int",{"_index":999,"t":{"871":{"position":[[1365,8]]},"873":{"position":[[1046,8]]}}}],["pret(rt",{"_index":1019,"t":{"871":{"position":[[2022,9]]},"873":{"position":[[1629,9]]}}}],["pret(t[rt].l",{"_index":1002,"t":{"871":{"position":[[1435,14]]},"873":{"position":[[1116,14]]}}}],["pret(t[rt].r",{"_index":1003,"t":{"871":{"position":[[1450,14]]},"873":{"position":[[1131,14]]}}}],["pretrain",{"_index":2014,"t":{"1084":{"position":[[208,28]]}}}],["prev_permut",{"_index":518,"t":{"841":{"position":[[2667,16]]}}}],["prewitt",{"_index":1413,"t":{"946":{"position":[[116,10]]}}}],["prim",{"_index":2903,"t":{"1334":{"position":[[100,6]]}}}],["primari",{"_index":2754,"t":{"1290":{"position":[[276,7],[310,7],[349,7],[389,7]]}}}],["print",{"_index":1146,"t":{"879":{"position":[[2201,5]]}}}],["print(\"%c\",(asciicode=='\\r",{"_index":1078,"t":{"879":{"position":[[443,28],[1658,28]]}}}],["print(\"\\n",{"_index":1075,"t":{"879":{"position":[[376,9],[1588,9]]}}}],["print(\"argmax",{"_index":2504,"t":{"1181":{"position":[[871,13]]}}}],["print(\"attent",{"_index":1928,"t":{"1055":{"position":[[1532,16],[1748,16],[3902,16],[4044,16]]}}}],["print(\"keys:\\n",{"_index":1920,"t":{"1055":{"position":[[1171,16],[3735,16]]}}}],["print(\"queries:\\n",{"_index":1921,"t":{"1055":{"position":[[1203,19],[3767,19]]}}}],["print(\"to",{"_index":1060,"t":{"879":{"position":[[99,9],[1311,9]]}}}],["print(\"values:\\n",{"_index":1922,"t":{"1055":{"position":[[1241,18],[3805,18]]}}}],["print(\"weight",{"_index":1946,"t":{"1055":{"position":[[2120,15],[4279,15]]}}}],["print(\"welcom",{"_index":1140,"t":{"879":{"position":[[2075,14]]}}}],["print(a",{"_index":2488,"t":{"1181":{"position":[[543,7]]}}}],["print(b",{"_index":2490,"t":{"1181":{"position":[[581,7]]}}}],["print(c.shap",{"_index":2477,"t":{"1181":{"position":[[252,14]]}}}],["print(d.shap",{"_index":2482,"t":{"1181":{"position":[[373,14]]}}}],["print(f'loss",{"_index":2417,"t":{"1150":{"position":[[2464,12]]}}}],["print(f'{metric[2",{"_index":2421,"t":{"1150":{"position":[[2545,18]]}}}],["print(i",{"_index":2511,"t":{"1181":{"position":[[1121,8],[1315,8]]}}}],["print(item",{"_index":2801,"t":{"1298":{"position":[[253,11],[464,11]]}}}],["print(output",{"_index":2772,"t":{"1294":{"position":[[619,13]]}}}],["print(x",{"_index":2766,"t":{"1294":{"position":[[372,8]]}}}],["print(x1",{"_index":2768,"t":{"1294":{"position":[[412,9]]}}}],["print(x2",{"_index":2771,"t":{"1294":{"position":[[527,9]]}}}],["printf(\"%c",{"_index":842,"t":{"868":{"position":[[312,12]]}}}],["printf(\"%d%c\",v[i],i==len",{"_index":997,"t":{"871":{"position":[[1298,25]]},"873":{"position":[[1000,25]]}}}],["printf(\"%d\\n",{"_index":65,"t":{"717":{"position":[[430,14]]}}}],["printf(\"%d\\n\",t[rt].d",{"_index":1049,"t":{"875":{"position":[[628,23]]}}}],["printf(\"7.28",{"_index":947,"t":{"868":{"position":[[3017,12]]}}}],["printf(\"\\t",{"_index":949,"t":{"868":{"position":[[3111,10]]}}}],["printf(\"\\t%d",{"_index":951,"t":{"868":{"position":[[3162,12]]}}}],["printf(first?first=0,\"%d",{"_index":1000,"t":{"871":{"position":[[1398,27],[1528,27],[1661,27]]},"873":{"position":[[1079,27],[1201,27],[1326,27]]}}}],["priority_queue<int",{"_index":120,"t":{"736":{"position":[[10,19]]}}}],["priority_queue<int,vector<int>,greater<int",{"_index":127,"t":{"736":{"position":[[131,44]]}}}],["priority_queue：优先队列，push",{"_index":83,"t":{"726":{"position":[[106,27]]}}}],["private_colormap",{"_index":1181,"t":{"881":{"position":[[794,17]]},"895":{"position":[[1850,17]]}}}],["probabilist",{"_index":1535,"t":{"979":{"position":[[163,13]]}}}],["probabl",{"_index":1250,"t":{"895":{"position":[[1009,8]]}}}],["probing（知识探测）方法，给定完形填空（cloz",{"_index":2594,"t":{"1190":{"position":[[23,28]]}}}],["process",{"_index":1124,"t":{"879":{"position":[[1821,8]]},"979":{"position":[[469,7]]},"1006":{"position":[[146,18]]},"1131":{"position":[[163,7]]}}}],["process。此时将加入噪声后的图片、文字prompt以及denoise的步骤序号作为输入，sample出的噪声作为ground",{"_index":1539,"t":{"979":{"position":[[490,65]]}}}],["process又叫做diffus",{"_index":1642,"t":{"1006":{"position":[[126,19]]}}}],["process训练的nois",{"_index":1645,"t":{"1006":{"position":[[474,15]]}}}],["process：使用diffus",{"_index":1644,"t":{"1006":{"position":[[454,19]]}}}],["process：对训练集中的图片不断加入与图片shape相同的、从某随机分布中sample出的噪声，直至图片可以被认为是从该随机分布中sampl",{"_index":1641,"t":{"1006":{"position":[[39,78]]}}}],["produc",{"_index":1187,"t":{"881":{"position":[[925,8]]},"895":{"position":[[1981,8]]},"1131":{"position":[[306,7]]},"1185":{"position":[[134,8]]}}}],["product",{"_index":1943,"t":{"1055":{"position":[[2048,7],[2485,7],[2627,8],[2698,7],[2800,8],[4207,7]]},"1057":{"position":[[387,8]]}}}],["product后，为了避免点积运算经过softmax后的输出太小，在点积后除以key",{"_index":1967,"t":{"1055":{"position":[[2816,56]]}}}],["product），得到的scalar数量与输入向量个数相同，都为batchbatchbatch，即scores矩阵的形状应为(batch,batch)(batch",{"_index":1924,"t":{"1055":{"position":[[1366,82]]}}}],["product，在经过softmax",{"_index":2065,"t":{"1088":{"position":[[1322,65]]}}}],["product，而不考虑aia^iai之后的输入的key",{"_index":1605,"t":{"994":{"position":[[1305,29]]},"1228":{"position":[[1305,29]]}}}],["program",{"_index":1237,"t":{"895":{"position":[[776,8]]}}}],["project",{"_index":1206,"t":{"889":{"position":[[78,14]]},"895":{"position":[[2148,7]]}}}],["project0",{"_index":1059,"t":{"879":{"position":[[87,11],[1299,11]]},"895":{"position":[[7,26],[95,17]]}}}],["project0实现检测键盘输入ctrl+d",{"_index":1058,"t":{"879":{"position":[[50,31]]}}}],["project6这7",{"_index":1196,"t":{"885":{"position":[[158,15]]}}}],["prompt",{"_index":1441,"t":{"965":{"position":[[101,12]]},"1023":{"position":[[17,15]]},"1025":{"position":[[598,6],[712,6]]},"1027":{"position":[[12,7],[24,7]]},"1029":{"position":[[1008,7],[1027,7],[1046,7],[1127,7],[1164,7],[1186,7],[1219,35]]},"1031":{"position":[[1219,7]]},"1039":{"position":[[10,7],[137,7],[160,7],[246,7],[267,7],[299,7],[332,7],[352,7],[372,7],[454,7],[472,7],[511,7]]},"1041":{"position":[[47,8]]},"1185":{"position":[[20,6]]},"1249":{"position":[[17,15]]},"1251":{"position":[[598,6],[712,6]]},"1253":{"position":[[12,7],[24,7]]},"1255":{"position":[[1009,7],[1028,7],[1047,7],[1128,7],[1165,7],[1187,7],[1220,35]]},"1257":{"position":[[1220,7]]},"1265":{"position":[[47,8]]},"1267":{"position":[[21,7],[282,7],[365,7],[513,7],[808,7],[829,7],[861,7],[894,7],[914,7],[934,7],[1016,7],[1034,7],[1073,7]]},"1269":{"position":[[49,16],[110,7],[143,7],[228,10],[254,7],[271,7],[288,6],[305,6]]}}}],["prompt_prefix",{"_index":1713,"t":{"1023":{"position":[[73,14],[132,14]]},"1249":{"position":[[73,14],[132,14]]}}}],["prompt工程最初是一种knowledg",{"_index":2593,"t":{"1190":{"position":[[0,22]]}}}],["prompt期待生成的图像并不是固定的，可以认为生成的图片在目标域（target",{"_index":1432,"t":{"961":{"position":[[237,49]]},"1006":{"position":[[240,72]]}}}],["prompt通常不是最优的，可能提供不准确的适应方向。为了解决这个问题，在nlp领域的prompt",{"_index":2596,"t":{"1190":{"position":[[81,56]]}}}],["prompt（‘a",{"_index":1748,"t":{"1027":{"position":[[62,9]]},"1253":{"position":[[62,9]]}}}],["pronounc",{"_index":1986,"t":{"1061":{"position":[[12,9]]}}}],["propag",{"_index":1617,"t":{"1000":{"position":[[132,13]]},"1234":{"position":[[132,13]]}}}],["protector",{"_index":1265,"t":{"895":{"position":[[1331,9]]}}}],["proxy_off",{"_index":2854,"t":{"1309":{"position":[[209,12]]},"1313":{"position":[[43,9]]}}}],["proxy_on",{"_index":2849,"t":{"1309":{"position":[[40,11]]},"1313":{"position":[[17,8]]}}}],["pr曲线所围成的面积即使该类的ap",{"_index":2930,"t":{"1352":{"position":[[0,18]]}}}],["psnr：峰值信噪比，图像所允许的最大像素值的平方与均方误差的比值的对数的10",{"_index":1310,"t":{"904":{"position":[[217,81]]}}}],["psp",{"_index":1864,"t":{"1036":{"position":[[638,3]]},"1262":{"position":[[638,3]]}}}],["push",{"_index":739,"t":{"864":{"position":[[1191,5],[1528,5]]}}}],["push_heap",{"_index":507,"t":{"841":{"position":[[2340,9]]}}}],["put",{"_index":1020,"t":{"871":{"position":[[2043,9],[2078,9],[2112,9]]}}}],["pyplot",{"_index":2318,"t":{"1150":{"position":[[148,6]]}}}],["python",{"_index":146,"t":{"744":{"position":[[18,17]]},"1181":{"position":[[986,6]]},"1276":{"position":[[44,6]]},"1294":{"position":[[197,46]]},"1296":{"position":[[0,61],[62,85]]}}}],["python=3.8",{"_index":1689,"t":{"1015":{"position":[[20,10]]},"1241":{"position":[[20,10]]}}}],["pytorch",{"_index":1693,"t":{"1017":{"position":[[22,7],[54,7],[85,7],[106,7]]},"1211":{"position":[[445,7]]},"1243":{"position":[[22,7],[54,7],[85,7],[106,7]]}}}],["pytorch中的crossentropyloss",{"_index":2230,"t":{"1126":{"position":[[1373,26]]}}}],["pytorch框架，可以使用visdom或tensorboardx实现可视化，本篇主要讲述visdom",{"_index":2720,"t":{"1271":{"position":[[41,54]]}}}],["p∼n(μ1,σ12)p\\sim",{"_index":2659,"t":{"1201":{"position":[[610,29]]}}}],["p和q",{"_index":2220,"t":{"1126":{"position":[[1126,30]]}}}],["p和q，其离散型随机变量xxx的可能取值为x=x1,x2,...,xnx=x_1,x_2,...,x_nx=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率分别为pi,qip_i,q_ipi​,qi",{"_index":2201,"t":{"1126":{"position":[[569,119]]}}}],["p问题、np问题以及np",{"_index":2896,"t":{"1329":{"position":[[719,16]]},"1339":{"position":[[719,16]]}}}],["q",{"_index":128,"t":{"736":{"position":[[176,2]]},"855":{"position":[[140,2]]},"866":{"position":[[1825,2]]},"868":{"position":[[1199,3],[1785,2],[1812,1],[1843,1]]},"871":{"position":[[1103,2]]},"873":{"position":[[805,2]]},"1126":{"position":[[753,2],[890,2],[1225,2],[1263,2]]}}}],["q)=h(p)+dkl(p",{"_index":2221,"t":{"1126":{"position":[[1162,13]]}}}],["q)=∑pi",{"_index":2210,"t":{"1126":{"position":[[835,6],[951,7]]}}}],["q)=−∑pi",{"_index":2222,"t":{"1126":{"position":[[1179,7],[1348,8]]}}}],["q)​=h(p)+dkl​(p",{"_index":2228,"t":{"1126":{"position":[[1329,15]]}}}],["q)≠dkl(q",{"_index":2203,"t":{"1126":{"position":[[710,8]]}}}],["q)=dkl​(q",{"_index":2208,"t":{"1126":{"position":[[806,10]]}}}],["q.back",{"_index":659,"t":{"855":{"position":[[228,9]]}}}],["q.empti",{"_index":660,"t":{"855":{"position":[[248,10]]}}}],["q.front",{"_index":658,"t":{"855":{"position":[[207,10]]}}}],["q.pop",{"_index":657,"t":{"855":{"position":[[191,8]]},"866":{"position":[[1947,8]]},"871":{"position":[[1170,8]]},"873":{"position":[[872,8]]}}}],["q.push(i);//将所有入度为0",{"_index":805,"t":{"866":{"position":[[1874,24]]}}}],["q.push(rt",{"_index":988,"t":{"871":{"position":[[1121,11]]},"873":{"position":[[823,11]]}}}],["q.push(t[w].l",{"_index":992,"t":{"871":{"position":[[1209,15]]},"873":{"position":[[911,15]]}}}],["q.push(t[w].r",{"_index":994,"t":{"871":{"position":[[1239,15]]},"873":{"position":[[941,15]]}}}],["q.push(v",{"_index":813,"t":{"866":{"position":[[2115,10]]}}}],["q.push(x",{"_index":656,"t":{"855":{"position":[[173,10]]}}}],["q.size",{"_index":661,"t":{"855":{"position":[[271,9]]}}}],["q=q",{"_index":896,"t":{"868":{"position":[[1821,3]]}}}],["q_{pred})dkl​(plabel",{"_index":2218,"t":{"1126":{"position":[[1042,21]]}}}],["qnli（quest",{"_index":2035,"t":{"1088":{"position":[[360,13]]}}}],["qpred)d_{kl}(p_{label",{"_index":2217,"t":{"1126":{"position":[[1003,22]]}}}],["qpred​)表示当用概率分布q来拟合真实分布p时，产生的信息损耗，其中p表示真实分布，q表示p",{"_index":2219,"t":{"1126":{"position":[[1066,54]]}}}],["qq",{"_index":655,"t":{"855":{"position":[[157,3]]}}}],["qqp（quora",{"_index":2033,"t":{"1088":{"position":[[308,9]]}}}],["qr",{"_index":2906,"t":{"1337":{"position":[[864,52]]},"1402":{"position":[[736,52]]}}}],["qualiti",{"_index":1465,"t":{"965":{"position":[[718,8]]}}}],["queri",{"_index":1913,"t":{"1055":{"position":[[754,7],[1077,7],[1118,7],[1223,8],[1515,7],[2644,5],[3338,7],[3641,7],[3682,7],[3787,8],[3885,7]]}}}],["query<int",{"_index":117,"t":{"734":{"position":[[0,10]]}}}],["query^{n",{"_index":1980,"t":{"1057":{"position":[[195,8]]}}}],["query分别与所有向量的key做内积（dot",{"_index":1923,"t":{"1055":{"position":[[1323,42]]}}}],["query来自解码器，key和value来自编码器。解码器每个向量的查询（query）与编码器位置的键（key）进行点积得到了注意力分数，通过softmax操作后转换为注意力权重，再与编码器位置的值（value）weight",{"_index":1612,"t":{"994":{"position":[[1591,132]]},"1228":{"position":[[1591,132]]}}}],["query）向量、键（key）向量和值（valu",{"_index":2992,"t":{"1374":{"position":[[49,55]]}}}],["question",{"_index":2034,"t":{"1088":{"position":[[318,8],[1177,8]]}}}],["queue",{"_index":258,"t":{"817":{"position":[[136,5]]},"839":{"position":[[170,27]]},"855":{"position":[[0,9],[109,19],[161,11]]},"866":{"position":[[68,7]]}}}],["queue<doubl",{"_index":654,"t":{"855":{"position":[[143,13]]}}}],["queue<int",{"_index":653,"t":{"855":{"position":[[129,10]]},"866":{"position":[[1814,10]]},"871":{"position":[[1092,10]]},"873":{"position":[[794,10]]}}}],["queue与stack相似，queue模版类也需要两个模版参数，一个元素类型，一个容器类型，元素类型时必须的，容器类型时可选的，默认为dequ",{"_index":652,"t":{"855":{"position":[[33,75]]}}}],["queue模版类的定义在queu",{"_index":651,"t":{"855":{"position":[[10,22]]}}}],["queue：push",{"_index":80,"t":{"726":{"position":[[77,13]]}}}],["quotient",{"_index":2865,"t":{"1319":{"position":[[80,9],[293,29],[657,9]]},"1321":{"position":[[167,9],[380,29],[744,9]]}}}],["quotient.assign(\"0",{"_index":2873,"t":{"1319":{"position":[[626,21]]},"1321":{"position":[[713,21]]}}}],["quotient.empti",{"_index":2871,"t":{"1319":{"position":[[418,19],[576,18]]},"1321":{"position":[[505,19],[663,18]]}}}],["quotient.push_back('0",{"_index":2872,"t":{"1319":{"position":[[477,24]]},"1321":{"position":[[564,24]]}}}],["quotient.push_back(temp",{"_index":2870,"t":{"1319":{"position":[[323,23]]},"1321":{"position":[[410,23]]}}}],["r1,int",{"_index":1033,"t":{"875":{"position":[[322,6]]}}}],["r2",{"_index":1035,"t":{"875":{"position":[[336,3]]}}}],["ra,int",{"_index":963,"t":{"871":{"position":[[260,6],[658,6]]},"873":{"position":[[246,6],[475,6]]}}}],["random",{"_index":1906,"t":{"1055":{"position":[[545,6]]},"1211":{"position":[[415,7],[580,7]]}}}],["random_shuffl",{"_index":461,"t":{"841":{"position":[[926,14]]}}}],["randomli",{"_index":1904,"t":{"1055":{"position":[[515,8]]},"1211":{"position":[[38,8]]}}}],["range(n_mlp",{"_index":1768,"t":{"1029":{"position":[[614,13]]},"1255":{"position":[[615,13]]}}}],["range(num_epoch",{"_index":2399,"t":{"1150":{"position":[[1887,18]]}}}],["rank",{"_index":3007,"t":{"1392":{"position":[[177,27]]}}}],["rank：前1%（非rank",{"_index":3000,"t":{"1392":{"position":[[31,14]]}}}],["raw",{"_index":1926,"t":{"1055":{"position":[[1480,3],[3851,3]]},"1211":{"position":[[103,3]]}}}],["rb",{"_index":965,"t":{"871":{"position":[[274,3],[672,3]]},"873":{"position":[[260,3],[489,3]]}}}],["rbegin()，rend",{"_index":615,"t":{"847":{"position":[[1160,15]]}}}],["reboot",{"_index":2888,"t":{"1326":{"position":[[95,6]]}}}],["redistribut",{"_index":1102,"t":{"879":{"position":[[938,13]]}}}],["reduc",{"_index":2493,"t":{"1181":{"position":[[680,6]]}}}],["reduce项时只写前向搜索符对应的act",{"_index":216,"t":{"793":{"position":[[566,53]]}}}],["reduce项时只写前向搜索符集对应的act",{"_index":218,"t":{"793":{"position":[[645,86]]}}}],["reduce项时，act",{"_index":210,"t":{"793":{"position":[[229,30]]}}}],["reduce项时，只写产生式左部的follow集对应的act",{"_index":213,"t":{"793":{"position":[[392,42]]}}}],["refer",{"_index":1257,"t":{"895":{"position":[[1111,9]]}}}],["reflect",{"_index":1158,"t":{"881":{"position":[[432,7]]},"895":{"position":[[1488,7]]}}}],["regex",{"_index":1700,"t":{"1017":{"position":[[141,5]]},"1243":{"position":[[141,5]]}}}],["regress",{"_index":2450,"t":{"1169":{"position":[[9,51]]}}}],["regular",{"_index":2074,"t":{"1096":{"position":[[0,150]]},"1188":{"position":[[295,14]]},"1269":{"position":[[173,15],[198,14]]}}}],["relax",{"_index":2529,"t":{"1183":{"position":[[114,7]]}}}],["relev",{"_index":1954,"t":{"1055":{"position":[[2501,10]]}}}],["relu",{"_index":2137,"t":{"1113":{"position":[[0,8]]},"1372":{"position":[[141,4]]}}}],["relu激活函数。因为relu的范围是[0",{"_index":2432,"t":{"1152":{"position":[[0,43]]}}}],["remain",{"_index":2261,"t":{"1131":{"position":[[102,9]]}}}],["remaind",{"_index":2867,"t":{"1319":{"position":[[133,9],[217,9],[365,9],[504,9]]},"1321":{"position":[[220,9],[304,9],[452,9],[591,9],[868,9]]}}}],["remov",{"_index":462,"t":{"841":{"position":[[957,6]]}}}],["remove_copi",{"_index":464,"t":{"841":{"position":[[1012,11]]}}}],["remove_copy_if",{"_index":465,"t":{"841":{"position":[[1050,14]]}}}],["remove_if",{"_index":463,"t":{"841":{"position":[[983,9]]}}}],["repeat",{"_index":2264,"t":{"1131":{"position":[[174,8]]},"1138":{"position":[[580,6]]},"1290":{"position":[[225,9]]}}}],["replac",{"_index":466,"t":{"841":{"position":[[1091,7]]},"847":{"position":[[812,9]]}}}],["replace_copi",{"_index":467,"t":{"841":{"position":[[1122,12]]}}}],["replace_copy_if",{"_index":468,"t":{"841":{"position":[[1165,15]]}}}],["replace_if",{"_index":469,"t":{"841":{"position":[[1211,10]]}}}],["repo",{"_index":2679,"t":{"1207":{"position":[[96,5]]}}}],["repres",{"_index":2705,"t":{"1211":{"position":[[434,10]]}}}],["represent",{"_index":1445,"t":{"965":{"position":[[238,15],[425,21]]},"969":{"position":[[468,15],[588,15],[1060,15]]},"1084":{"position":[[77,15]]}}}],["representation。因此，训练gener",{"_index":1497,"t":{"969":{"position":[[195,30]]}}}],["representation分别输入至源域生成器和目标域生成器中得到对应的图像，同时指导风格迁移方向的源域以及目标域的prompt描述由lat",{"_index":2613,"t":{"1193":{"position":[[716,74]]}}}],["representation时，同样采取从已知随机分布中sample出噪声再添加到网络的输入作为生成ground",{"_index":1504,"t":{"969":{"position":[[496,56]]}}}],["representation时，需要训练一个auto",{"_index":1517,"t":{"969":{"position":[[1089,26]]}}}],["representation的分布也是符合某种随机分布的，vae再通过decod",{"_index":1650,"t":{"1006":{"position":[[676,58]]}}}],["representation），输出的是还原出的高分辨率的图像，它的训练是不需要额外pair",{"_index":1514,"t":{"969":{"position":[[867,49]]}}}],["representation，decoder再吃encoder的输出，最终输出还原出的高清label图片，训练的方向是让输出的图片与输入的图片越接近越好。在这个过程中，不需要额外的标注，auto",{"_index":1521,"t":{"969":{"position":[[1209,97]]}}}],["representation，生成一组prompt向量。第一阶段需要解决两个问题，即在zero",{"_index":2602,"t":{"1193":{"position":[[111,47]]}}}],["representation，经过从随机分布中sample出的噪声的加入，输入至nois",{"_index":1507,"t":{"969":{"position":[[657,45]]}}}],["representation，这种lat",{"_index":1649,"t":{"1006":{"position":[[652,23]]}}}],["research",{"_index":2049,"t":{"1088":{"position":[[668,8]]},"1183":{"position":[[44,8]]}}}],["reserv",{"_index":609,"t":{"847":{"position":[[963,9]]}}}],["reset",{"_index":161,"t":{"746":{"position":[[163,8]]}}}],["residu",{"_index":2911,"t":{"1345":{"position":[[20,8],[113,11]]}}}],["resiz",{"_index":603,"t":{"847":{"position":[[796,8]]}}}],["resize操作和clear",{"_index":546,"t":{"843":{"position":[[1245,52]]}}}],["resourc",{"_index":2834,"t":{"1305":{"position":[[161,9]]}}}],["restyl",{"_index":1861,"t":{"1036":{"position":[[428,7]]},"1262":{"position":[[428,7]]}}}],["restyle_e4e_encod",{"_index":1858,"t":{"1036":{"position":[[377,26],[576,19]]},"1262":{"position":[[377,26],[576,19]]}}}],["result",{"_index":2266,"t":{"1131":{"position":[[254,7]]}}}],["return",{"_index":32,"t":{"705":{"position":[[358,6]]},"711":{"position":[[203,6]]},"717":{"position":[[461,6]]},"826":{"position":[[827,6]]},"843":{"position":[[1652,6]]},"864":{"position":[[533,6],[691,6],[1071,6],[1706,6],[2367,6]]},"866":{"position":[[729,6],[1040,6],[1362,6],[1442,6],[1568,6],[1708,6],[2207,6],[2250,6],[2504,6]]},"868":{"position":[[900,6],[1033,6],[1047,6],[1322,6],[1385,6],[1643,6],[1902,6],[3202,6]]},"871":{"position":[[375,6],[603,6],[717,6],[946,6],[1000,6],[1010,6],[1390,7],[1505,7],[1621,7],[2124,6]]},"873":{"position":[[276,6],[434,6],[505,6],[663,6],[710,6],[720,6],[1071,7],[1178,7],[1286,7],[1668,6]]},"875":{"position":[[362,6],[526,6],[577,7],[817,6]]},"1051":{"position":[[48,7]]},"1150":{"position":[[386,6],[877,6],[1268,6],[1321,6]]},"1319":{"position":[[650,6]]},"1321":{"position":[[737,6],[1097,6]]}}}],["revers",{"_index":470,"t":{"841":{"position":[[1245,7]]},"1006":{"position":[[446,7]]}}}],["reverse_copi",{"_index":471,"t":{"841":{"position":[[1266,12]]}}}],["revis",{"_index":1098,"t":{"879":{"position":[[865,10]]}}}],["rgb",{"_index":1872,"t":{"1046":{"position":[[440,3]]}}}],["richard",{"_index":2574,"t":{"1188":{"position":[[587,7]]}}}],["rightarrow",{"_index":165,"t":{"757":{"position":[[88,13]]},"759":{"position":[[16,13]]},"761":{"position":[[135,11]]}}}],["ring\"<<endl",{"_index":826,"t":{"866":{"position":[[2456,12],[2489,12]]}}}],["rkr_krk",{"_index":1345,"t":{"920":{"position":[[67,26],[524,74]]}}}],["rnn的输入是(seq_len",{"_index":2807,"t":{"1300":{"position":[[174,17]]}}}],["rnn输入默认不是batch",{"_index":2809,"t":{"1300":{"position":[[288,19]]}}}],["robert",{"_index":1411,"t":{"946":{"position":[[0,9]]}}}],["romimag",{"_index":1164,"t":{"881":{"position":[[531,9]]},"895":{"position":[[1587,9]]}}}],["root",{"_index":1958,"t":{"1055":{"position":[[2562,4]]}}}],["rotat",{"_index":472,"t":{"841":{"position":[[1293,6]]}}}],["rotate_copi",{"_index":473,"t":{"841":{"position":[[1313,11]]}}}],["rout",{"_index":764,"t":{"864":{"position":[[2251,5]]}}}],["route.s",{"_index":766,"t":{"864":{"position":[[2289,13]]}}}],["route[i",{"_index":767,"t":{"864":{"position":[[2316,8]]}}}],["row",{"_index":400,"t":{"835":{"position":[[60,4]]}}}],["rst",{"_index":726,"t":{"864":{"position":[[777,4],[1078,4],[1156,4],[1713,4]]}}}],["rst.push_back",{"_index":744,"t":{"864":{"position":[[1615,14]]}}}],["rst.push_back(id",{"_index":732,"t":{"864":{"position":[[882,18]]}}}],["rst.push_back(id1",{"_index":743,"t":{"864":{"position":[[1477,19]]}}}],["rst.push_back(start",{"_index":740,"t":{"864":{"position":[[1239,21]]}}}],["rt",{"_index":969,"t":{"871":{"position":[[354,2],[610,3],[953,3],[984,3],[1086,3],[1374,3],[1489,3],[1605,3]]},"873":{"position":[[441,3],[670,3],[694,3],[788,3],[1055,3],[1162,3],[1270,3]]},"875":{"position":[[533,3],[554,3]]}}}],["rt=create(0,n",{"_index":1053,"t":{"875":{"position":[[777,13]]}}}],["rt=l2",{"_index":1038,"t":{"875":{"position":[[377,6]]}}}],["rt=mid_po_build(0,n",{"_index":1015,"t":{"871":{"position":[[1909,19]]},"873":{"position":[[1550,19]]}}}],["rt=mid_pr_build(0,n",{"_index":1017,"t":{"871":{"position":[[1959,19]]},"873":{"position":[[1587,19]]}}}],["rt=po[rb",{"_index":981,"t":{"871":{"position":[[731,10]]},"873":{"position":[[519,10]]}}}],["rt=pr[lb",{"_index":971,"t":{"871":{"position":[[389,10]]},"873":{"position":[[290,10]]}}}],["rte（recogn",{"_index":2039,"t":{"1088":{"position":[[439,15]]}}}],["run_loop",{"_index":1863,"t":{"1036":{"position":[[563,8]]},"1262":{"position":[[563,8]]}}}],["rɪˈzɪdjuəl",{"_index":2912,"t":{"1345":{"position":[[29,12]]}}}],["s",{"_index":16,"t":{"705":{"position":[[66,2],[76,2]]},"713":{"position":[[142,14]]},"738":{"position":[[11,2]]},"742":{"position":[[9,2]]},"746":{"position":[[25,2]]},"757":{"position":[[67,5]]},"759":{"position":[[0,5]]},"800":{"position":[[43,1]]},"802":{"position":[[47,1],[55,15]]},"843":{"position":[[271,2]]},"847":{"position":[[352,1]]},"853":{"position":[[134,2]]},"857":{"position":[[85,2]]},"859":{"position":[[118,2]]},"861":{"position":[[507,1]]},"893":{"position":[[92,1]]},"1319":{"position":[[23,2]]},"1321":{"position":[[110,2],[786,2],[803,2],[851,2],[930,1]]},"1326":{"position":[[33,1]]}}}],["s(beg，end",{"_index":596,"t":{"847":{"position":[[638,10]]}}}],["s(cstr",{"_index":590,"t":{"847":{"position":[[510,7]]}}}],["s(cstr，len",{"_index":592,"t":{"847":{"position":[[551,11]]}}}],["s(first",{"_index":523,"t":{"843":{"position":[[361,8]]}}}],["s(k)=ceil(sk×l−1)(13)s(k)=\\mathbf{ceil}(s_k\\tim",{"_index":1348,"t":{"920":{"position":[[158,49]]}}}],["s(k)s(k)s(k",{"_index":1347,"t":{"920":{"position":[[119,38],[366,29]]}}}],["s(k)s(k)s(k)和z(k)z(k)z(k)都是归一化后的均匀分布，使用二者之间的就近原则将s(k)s(k)s(k",{"_index":1352,"t":{"920":{"position":[[430,78]]}}}],["s(n",{"_index":521,"t":{"843":{"position":[[317,5]]}}}],["s(num，c",{"_index":594,"t":{"847":{"position":[[604,8]]}}}],["s(str",{"_index":584,"t":{"847":{"position":[[370,6]]}}}],["s(str,idx",{"_index":586,"t":{"847":{"position":[[405,10]]}}}],["s(str,idx,len",{"_index":588,"t":{"847":{"position":[[451,14]]}}}],["s)^2+(i",{"_index":1297,"t":{"902":{"position":[[219,7]]}}}],["s.assign(first",{"_index":544,"t":{"843":{"position":[[1152,15]]}}}],["s.back",{"_index":527,"t":{"843":{"position":[[489,8]]}}}],["s.begin",{"_index":530,"t":{"843":{"position":[[602,9]]},"857":{"position":[[114,9]]}}}],["s.begin()/end",{"_index":136,"t":{"742":{"position":[[26,15]]}}}],["s.clear",{"_index":140,"t":{"742":{"position":[[111,10]]},"843":{"position":[[1096,9]]},"857":{"position":[[141,9]]}}}],["s.count",{"_index":664,"t":{"857":{"position":[[161,9]]}}}],["s.empti",{"_index":130,"t":{"738":{"position":[[24,10]]},"742":{"position":[[100,10]]},"843":{"position":[[551,9]]},"853":{"position":[[217,10]]},"857":{"position":[[185,9]]}}}],["s.end",{"_index":22,"t":{"705":{"position":[[119,9],[308,10]]},"843":{"position":[[631,7]]},"857":{"position":[[215,7]]}}}],["s.equal_rang",{"_index":665,"t":{"857":{"position":[[252,15]]}}}],["s.eras",{"_index":666,"t":{"857":{"position":[[293,9]]}}}],["s.erase(1",{"_index":142,"t":{"742":{"position":[[159,11]]}}}],["s.erase(first",{"_index":538,"t":{"843":{"position":[[861,14]]}}}],["s.erase(it",{"_index":537,"t":{"843":{"position":[[831,11]]}}}],["s.find",{"_index":667,"t":{"857":{"position":[[315,8]]}}}],["s.find(1",{"_index":141,"t":{"742":{"position":[[122,10]]}}}],["s.front",{"_index":526,"t":{"843":{"position":[[470,9]]}}}],["s.get_alloc",{"_index":668,"t":{"857":{"position":[[344,17]]}}}],["s.insert",{"_index":669,"t":{"857":{"position":[[374,10]]}}}],["s.insert(1",{"_index":139,"t":{"742":{"position":[[71,12]]}}}],["s.insert(it",{"_index":531,"t":{"843":{"position":[[664,12],[706,12],[752,12]]}}}],["s.key_comp",{"_index":670,"t":{"857":{"position":[[440,12]]}}}],["s.lower_bound",{"_index":144,"t":{"742":{"position":[[221,16]]},"857":{"position":[[397,15]]}}}],["s.max_siz",{"_index":671,"t":{"857":{"position":[[472,12]]}}}],["s.pop",{"_index":133,"t":{"738":{"position":[[54,8]]},"853":{"position":[[185,8]]}}}],["s.pop_back",{"_index":529,"t":{"843":{"position":[[579,12]]}}}],["s.push",{"_index":131,"t":{"738":{"position":[[35,9]]}}}],["s.push(x",{"_index":650,"t":{"853":{"position":[[168,10]]}}}],["s.push_back(x",{"_index":528,"t":{"843":{"position":[[507,14]]}}}],["s.rbegin",{"_index":672,"t":{"857":{"position":[[504,10]]}}}],["s.rend",{"_index":673,"t":{"857":{"position":[[538,8]]}}}],["s.reserve(n",{"_index":539,"t":{"843":{"position":[[920,12]]}}}],["s.resize(n",{"_index":540,"t":{"843":{"position":[[959,11],[1026,11]]}}}],["s.size",{"_index":24,"t":{"705":{"position":[[167,9]]},"713":{"position":[[190,9]]},"738":{"position":[[14,9]]},"742":{"position":[[90,9]]},"843":{"position":[[534,8]]},"853":{"position":[[243,9]]},"857":{"position":[[569,8]]},"1319":{"position":[[181,9]]},"1321":{"position":[[268,9],[835,9],[956,9]]}}}],["s.swap",{"_index":674,"t":{"857":{"position":[[590,8]]}}}],["s.swap(v",{"_index":542,"t":{"843":{"position":[[1120,9]]}}}],["s.top",{"_index":132,"t":{"738":{"position":[[45,8]]},"853":{"position":[[200,8]]}}}],["s.upper_bound",{"_index":145,"t":{"742":{"position":[[254,16]]},"857":{"position":[[611,15]]}}}],["s.value_comp",{"_index":675,"t":{"857":{"position":[[644,14]]}}}],["s[i",{"_index":26,"t":{"705":{"position":[[201,4]]},"713":{"position":[[224,5]]},"843":{"position":[[446,4]]}}}],["s[idx",{"_index":2869,"t":{"1319":{"position":[[234,7]]},"1321":{"position":[[321,7]]}}}],["s[len",{"_index":2876,"t":{"1321":{"position":[[880,6]]}}}],["s\\n",{"_index":952,"t":{"868":{"position":[[3175,6]]}}}],["s\\vert+\\vert",{"_index":1300,"t":{"902":{"position":[[310,12]]}}}],["s\\vert,\\vert",{"_index":1304,"t":{"902":{"position":[[416,12]]}}}],["salient",{"_index":2908,"t":{"1343":{"position":[[0,14]]}}}],["same",{"_index":1244,"t":{"895":{"position":[[924,4]]}}}],["sampl",{"_index":1464,"t":{"965":{"position":[[711,6]]},"1036":{"position":[[122,6]]},"1262":{"position":[[122,6]]}}}],["sample_w",{"_index":1758,"t":{"1029":{"position":[[111,8]]},"1255":{"position":[[111,8]]}}}],["sample_z",{"_index":1753,"t":{"1029":{"position":[[22,8]]},"1255":{"position":[[22,8]]}}}],["sample出原始图像x0\\mathbf{x}_0x0",{"_index":1656,"t":{"1008":{"position":[[13,36]]}}}],["sample出的向量，并在这个过程中训练出nois",{"_index":1531,"t":{"979":{"position":[[0,57]]}}}],["sampling来获得压缩版本的图像作为decod",{"_index":1516,"t":{"969":{"position":[[1013,34]]}}}],["sangwoo",{"_index":2554,"t":{"1188":{"position":[[362,11]]}}}],["scale",{"_index":1457,"t":{"965":{"position":[[589,7],[656,7],[736,7]]},"1055":{"position":[[2519,5],[2786,5]]}}}],["scanf(\"%",{"_index":881,"t":{"868":{"position":[[1423,11],[1533,11],[2870,11]]}}}],["scanf(\"%d",{"_index":56,"t":{"717":{"position":[[106,10],[321,10]]},"868":{"position":[[1296,11],[1359,11]]}}}],["scanf(\"%d\",&in[i",{"_index":1052,"t":{"875":{"position":[[753,19]]}}}],["scanf(\"%d\",&mid[i",{"_index":1014,"t":{"871":{"position":[[1876,20]]},"873":{"position":[[1525,20]]}}}],["scanf(\"%d\",&n",{"_index":1050,"t":{"875":{"position":[[674,15]]}}}],["scanf(\"%d\",&po[i",{"_index":1012,"t":{"871":{"position":[[1775,19]]},"873":{"position":[[1440,19]]}}}],["scanf(\"%d\",&pr[i",{"_index":1013,"t":{"871":{"position":[[1827,19]]},"873":{"position":[[1484,19]]}}}],["scanf(\"%d\",&pre[i",{"_index":1051,"t":{"875":{"position":[[711,20]]}}}],["score",{"_index":1474,"t":{"967":{"position":[[38,6],[917,6]]},"1002":{"position":[[1595,6]]},"1033":{"position":[[564,5],[768,5],[836,34]]},"1051":{"position":[[330,7]]},"1055":{"position":[[1499,6],[1506,6],[1561,7],[1669,5],[1765,6],[2136,7],[3870,5],[3876,6],[3931,7],[3965,5],[4061,6],[4295,7]]},"1236":{"position":[[1595,6]]},"1259":{"position":[[562,5],[766,5],[834,34]]}}}],["score_softmax",{"_index":1931,"t":{"1055":{"position":[[1675,13],[1797,14],[1989,13],[3971,13],[4093,14],[4148,13]]}}}],["score_softmax.t",{"_index":1945,"t":{"1055":{"position":[[2092,18],[4251,18]]}}}],["scores.masked_fill(mask",{"_index":1635,"t":{"1002":{"position":[[1604,23]]},"1236":{"position":[[1604,23]]}}}],["scores.softmax(dim",{"_index":1637,"t":{"1002":{"position":[[1649,19]]},"1236":{"position":[[1649,19]]}}}],["scores:\\n",{"_index":1929,"t":{"1055":{"position":[[1549,11],[3919,11]]}}}],["score。分数越小，代表文字和图像更align",{"_index":1494,"t":{"967":{"position":[[1152,25]]}}}],["score中的clip指的就是openai的clip（contrast",{"_index":1489,"t":{"967":{"position":[[929,38]]}}}],["score时，使用每一个query查询对应的key，即query0query^{0}query0只与其他每一个输入向量的key0key^{0}key0做dot",{"_index":1984,"t":{"1057":{"position":[[307,79]]}}}],["score的计算方式是将用于生成图像的文字prompt输入至clip的text",{"_index":1491,"t":{"967":{"position":[[1010,39]]}}}],["score（i",{"_index":1809,"t":{"1033":{"position":[[27,9]]},"1259":{"position":[[27,9]]}}}],["score（sc",{"_index":1847,"t":{"1033":{"position":[[1921,10]]},"1259":{"position":[[1918,10]]}}}],["score（sifid",{"_index":1838,"t":{"1033":{"position":[[1652,12]]},"1259":{"position":[[1649,12]]}}}],["search",{"_index":447,"t":{"841":{"position":[[483,6]]},"1305":{"position":[[249,6]]}}}],["search_n",{"_index":449,"t":{"841":{"position":[[514,8]]}}}],["second",{"_index":329,"t":{"824":{"position":[[38,7]]}}}],["second：3.141590",{"_index":345,"t":{"826":{"position":[[241,16]]}}}],["segment",{"_index":2699,"t":{"1211":{"position":[[328,7]]}}}],["segment_len",{"_index":2696,"t":{"1211":{"position":[[295,12]]}}}],["select",{"_index":202,"t":{"781":{"position":[[0,23],[24,65]]},"1055":{"position":[[1719,6],[4015,6]]},"1211":{"position":[[47,6]]}}}],["self",{"_index":1571,"t":{"990":{"position":[[62,4]]},"994":{"position":[[795,4],[918,4],[973,4],[1057,53],[1368,4]]},"1043":{"position":[[24,4],[39,10]]},"1051":{"position":[[2,4],[121,4],[192,8],[338,4]]},"1055":{"position":[[6,4],[1484,4],[2303,14],[3038,4],[3855,4]]},"1057":{"position":[[36,4]]},"1059":{"position":[[0,4]]},"1224":{"position":[[62,4]]},"1228":{"position":[[795,4],[918,4],[973,4],[1057,53],[1368,4]]}}}],["self).__init__",{"_index":2328,"t":{"1150":{"position":[[347,16],[477,16]]}}}],["self.auto_layer_it",{"_index":1785,"t":{"1031":{"position":[[199,21]]},"1257":{"position":[[199,21]]}}}],["self.determine_opt_lay",{"_index":1788,"t":{"1031":{"position":[[295,27]]},"1257":{"position":[[295,27]]}}}],["self.generator_trainable.freeze_lay",{"_index":1790,"t":{"1031":{"position":[[409,40]]},"1257":{"position":[[409,40]]}}}],["self.generator_trainable.unfreeze_lay",{"_index":1786,"t":{"1031":{"position":[[226,42]]},"1257":{"position":[[226,42]]}}}],["self.generator_trainable.unfreeze_layers(train_lay",{"_index":1791,"t":{"1031":{"position":[[450,54]]},"1257":{"position":[[450,54]]}}}],["self.net",{"_index":2334,"t":{"1150":{"position":[[494,8]]}}}],["self.net(x",{"_index":2351,"t":{"1150":{"position":[[884,11]]}}}],["self.styl",{"_index":1774,"t":{"1029":{"position":[[722,10]]},"1255":{"position":[[723,10]]}}}],["self.train",{"_index":1784,"t":{"1031":{"position":[[181,13]]},"1257":{"position":[[181,13]]}}}],["sentenc",{"_index":1593,"t":{"994":{"position":[[592,10]]},"1086":{"position":[[433,8]]},"1228":{"position":[[592,10]]}}}],["sentence），都是表示生成的开始。end符号又叫eos符号（end",{"_index":1592,"t":{"994":{"position":[[552,36]]},"1228":{"position":[[552,36]]}}}],["sentiment",{"_index":2054,"t":{"1088":{"position":[[737,9],[916,9]]}}}],["seq2seq",{"_index":1545,"t":{"981":{"position":[[103,9]]},"1215":{"position":[[103,9]]}}}],["seq_len",{"_index":2814,"t":{"1300":{"position":[[497,7]]}}}],["sequenc",{"_index":1544,"t":{"981":{"position":[[94,8]]},"1215":{"position":[[94,8]]}}}],["set",{"_index":87,"t":{"726":{"position":[[187,4]]},"742":{"position":[[210,3]]},"817":{"position":[[129,3]]},"857":{"position":[[0,7],[60,15],[104,9]]},"859":{"position":[[0,7]]},"864":{"position":[[47,5]]},"1055":{"position":[[453,8]]},"1131":{"position":[[87,4],[153,4],[245,4]]},"1133":{"position":[[6,4],[65,4],[100,4]]}}}],["set()，把所有为置为1",{"_index":158,"t":{"746":{"position":[[125,13]]}}}],["set(k,v",{"_index":159,"t":{"746":{"position":[[142,9]]}}}],["set<doubl",{"_index":663,"t":{"857":{"position":[[88,11]]}}}],["set<int",{"_index":135,"t":{"742":{"position":[[0,8]]},"857":{"position":[[76,8]]},"864":{"position":[[744,8],[1123,8]]}}}],["set_current_attr(attrib(black",{"_index":1138,"t":{"879":{"position":[[2028,30],[2106,30]]}}}],["set_differ",{"_index":499,"t":{"841":{"position":[[2117,14]]}}}],["set_intersect",{"_index":500,"t":{"841":{"position":[[2142,16]]}}}],["set_symmetric_differ",{"_index":501,"t":{"841":{"position":[[2169,24]]}}}],["set_union",{"_index":502,"t":{"841":{"position":[[2205,9]]}}}],["setjmp.h",{"_index":245,"t":{"815":{"position":[[119,8]]}}}],["set头文件中，还定义了另一个非常实用的模版类multiset",{"_index":676,"t":{"859":{"position":[[8,74]]}}}],["set是与集合相关的容器，stl为我们提供了set",{"_index":662,"t":{"857":{"position":[[8,51]]}}}],["sfid",{"_index":1844,"t":{"1033":{"position":[[1751,7]]},"1259":{"position":[[1748,7]]}}}],["sg2gener",{"_index":1792,"t":{"1031":{"position":[[535,49]]},"1257":{"position":[[535,49]]}}}],["shape",{"_index":1893,"t":{"1055":{"position":[[137,5],[3184,5]]}}}],["shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(1)shape_{output",{"_index":2307,"t":{"1145":{"position":[[202,68]]}}}],["shapeoutput=shapeinput−sizekernel+2∗paddingstride+1(5)shape_{output",{"_index":2447,"t":{"1159":{"position":[[272,68]]}}}],["shape为[5,5,3][5",{"_index":2111,"t":{"1102":{"position":[[4,19]]}}}],["shape为[5,5,4][5",{"_index":2113,"t":{"1102":{"position":[[40,21]]}}}],["shape应为[dim0",{"_index":2494,"t":{"1181":{"position":[[716,25]]}}}],["sharp",{"_index":1832,"t":{"1033":{"position":[[1298,5]]},"1259":{"position":[[1295,5]]}}}],["sharpen",{"_index":1278,"t":{"897":{"position":[[160,7]]}}}],["shechtman",{"_index":2573,"t":{"1188":{"position":[[572,10]]}}}],["shift",{"_index":229,"t":{"812":{"position":[[56,5],[231,5]]}}}],["shin",{"_index":2559,"t":{"1188":{"position":[[400,5]]}}}],["shot",{"_index":1684,"t":{"1012":{"position":[[36,4]]},"1183":{"position":[[79,4]]},"1188":{"position":[[89,5],[99,5],[825,5]]},"1238":{"position":[[36,4]]}}}],["shot任务，一般是通过有限的目标域训练集资料fin",{"_index":2545,"t":{"1188":{"position":[[111,27]]}}}],["shot和zero",{"_index":2543,"t":{"1188":{"position":[[79,9]]}}}],["shot的背景下，如何实现prompt与源域图像特征的对齐以及prompt",{"_index":2603,"t":{"1193":{"position":[[159,63]]}}}],["shown",{"_index":2701,"t":{"1211":{"position":[[391,5]]}}}],["shrine",{"_index":1274,"t":{"897":{"position":[[104,6]]}}}],["shufflec++11",{"_index":474,"t":{"841":{"position":[[1339,12]]}}}],["sifid",{"_index":1843,"t":{"1033":{"position":[[1725,21],[1862,5]]},"1259":{"position":[[1722,21],[1859,5]]}}}],["sigma",{"_index":2149,"t":{"1119":{"position":[[118,6],[137,7]]}}}],["sigmoid",{"_index":2152,"t":{"1119":{"position":[[198,56]]},"1150":{"position":[[544,13]]},"1171":{"position":[[36,35]]}}}],["sigmoid函数输出的结果可将其视为probability，而后根据设定的置信度阈值来判断该特征向量对应的标签是1还是0",{"_index":2451,"t":{"1169":{"position":[[61,78]]}}}],["sigmoid改成了relu",{"_index":2140,"t":{"1115":{"position":[[73,26]]}}}],["signal.h",{"_index":246,"t":{"815":{"position":[[134,8]]}}}],["significantli",{"_index":1466,"t":{"965":{"position":[[772,13]]}}}],["similar",{"_index":2044,"t":{"1088":{"position":[[530,10]]}}}],["similarity（id",{"_index":1849,"t":{"1033":{"position":[[1953,14]]},"1259":{"position":[[1950,14]]}}}],["simpl",{"_index":1970,"t":{"1055":{"position":[[3022,6]]},"1188":{"position":[[434,6]]}}}],["sin",{"_index":1277,"t":{"897":{"position":[[142,5]]}}}],["sine函数进行编码，对偶数维度使用cosin",{"_index":1549,"t":{"988":{"position":[[0,56]]},"1222":{"position":[[0,56]]}}}],["singl",{"_index":1837,"t":{"1033":{"position":[[1621,6]]},"1259":{"position":[[1618,6]]}}}],["situation)中。在logo文件夹中挑选想要的logo，在desktop中的icon",{"_index":2819,"t":{"1303":{"position":[[151,51]]}}}],["size",{"_index":1459,"t":{"965":{"position":[[610,4],[644,5],[668,4],[761,4],[816,5]]},"1157":{"position":[[796,4]]}}}],["size(),length",{"_index":605,"t":{"847":{"position":[[869,15]]}}}],["size_{kernel}+2*padding}{stride}+1",{"_index":2309,"t":{"1145":{"position":[[293,34]]},"1159":{"position":[[363,34]]}}}],["sizeof((a))/sizeof((a[0",{"_index":286,"t":{"821":{"position":[[226,28]]}}}],["sks_ksk",{"_index":1346,"t":{"920":{"position":[[94,24]]}}}],["slr(1",{"_index":211,"t":{"793":{"position":[[260,9]]},"798":{"position":[[146,7],[187,20]]}}}],["small",{"_index":1901,"t":{"1055":{"position":[[488,5],[2761,6]]}}}],["snr：参考图像像素值的平方均值与均方误差的比值的对数的10",{"_index":1309,"t":{"904":{"position":[[174,42]]}}}],["sobel",{"_index":1412,"t":{"946":{"position":[[67,8]]}}}],["softmax",{"_index":1930,"t":{"1055":{"position":[[1618,24],[2733,7]]}}}],["softwar",{"_index":1100,"t":{"879":{"position":[[900,9]]}}}],["solut",{"_index":2710,"t":{"1213":{"position":[[28,8]]}}}],["someth",{"_index":37,"t":{"707":{"position":[[85,12]]}}}],["sonder",{"_index":75,"t":{"726":{"position":[[5,13]]},"810":{"position":[[5,13]]}}}],["sophisticated），是长度不定的向量序列（sequence）时，cnn",{"_index":1873,"t":{"1046":{"position":[[794,88]]}}}],["sort",{"_index":491,"t":{"841":{"position":[[1868,4]]}}}],["sort(list.begin",{"_index":35,"t":{"707":{"position":[[39,18]]}}}],["sort(s.begin",{"_index":21,"t":{"705":{"position":[[103,15]]}}}],["sort_heap",{"_index":508,"t":{"841":{"position":[[2360,9]]}}}],["sot",{"_index":1722,"t":{"1025":{"position":[[132,4],[407,4]]},"1251":{"position":[[132,4],[407,4]]}}}],["sota的图像生成模型的共同点，并初步了解了diffus",{"_index":1639,"t":{"1004":{"position":[[4,53]]}}}],["sourc",{"_index":1259,"t":{"895":{"position":[[1221,6]]},"1311":{"position":[[89,6]]}}}],["source_embed",{"_index":1741,"t":{"1025":{"position":[[853,16]]},"1251":{"position":[[853,16]]}}}],["source_prompt",{"_index":1712,"t":{"1023":{"position":[[56,14],[183,14]]},"1249":{"position":[[56,14],[183,14]]}}}],["source_prompts]).to(devic",{"_index":1720,"t":{"1025":{"position":[[94,27]]},"1251":{"position":[[94,27]]}}}],["source_tokenized_prompt",{"_index":1718,"t":{"1025":{"position":[[30,24],[757,24]]},"1251":{"position":[[30,24],[757,24]]}}}],["space",{"_index":182,"t":{"761":{"position":[[176,6]]},"1029":{"position":[[266,5],[401,5]]},"1064":{"position":[[34,72]]},"1070":{"position":[[158,65]]},"1098":{"position":[[36,6],[51,6],[76,6]]},"1119":{"position":[[125,6]]},"1126":{"position":[[736,6],[746,6],[770,6],[780,6],[873,6],[883,6],[1026,6],[1035,6],[1218,6],[1256,6]]},"1255":{"position":[[266,5],[401,5]]}}}],["spatial",{"_index":2530,"t":{"1183":{"position":[[122,7]]}}}],["spawn",{"_index":1123,"t":{"879":{"position":[[1809,6]]}}}],["speaker",{"_index":2680,"t":{"1209":{"position":[[13,7]]},"1211":{"position":[[58,8]]}}}],["specfic",{"_index":2716,"t":{"1267":{"position":[[357,7]]}}}],["specif",{"_index":2531,"t":{"1185":{"position":[[11,8]]},"1267":{"position":[[273,8],[504,8]]},"1269":{"position":[[40,8]]},"1303":{"position":[[142,8]]}}}],["specifi",{"_index":1104,"t":{"879":{"position":[[969,9]]}}}],["spectrogram",{"_index":2689,"t":{"1211":{"position":[[126,13],[484,11]]}}}],["split",{"_index":2257,"t":{"1129":{"position":[[156,5]]}}}],["sqrt[2]{\\sum{[i",{"_index":2175,"t":{"1124":{"position":[[191,16]]}}}],["squar",{"_index":1957,"t":{"1055":{"position":[[2555,6]]}}}],["squeez",{"_index":2986,"t":{"1372":{"position":[[0,7]]}}}],["squeeze挤压操作就是将[b,c,h,w][b",{"_index":2988,"t":{"1372":{"position":[[23,26]]}}}],["src,dst",{"_index":779,"t":{"866":{"position":[[1119,8]]}}}],["ss",{"_index":649,"t":{"853":{"position":[[151,3]]},"857":{"position":[[100,3]]},"859":{"position":[[138,3]]}}}],["ss.clear",{"_index":1024,"t":{"875":{"position":[[96,11]]}}}],["ss.str",{"_index":1025,"t":{"875":{"position":[[108,10]]}}}],["ssclr(ss",{"_index":1023,"t":{"875":{"position":[[86,9]]}}}],["ssim",{"_index":1311,"t":{"904":{"position":[[299,22]]}}}],["sss个时间步，mask",{"_index":1606,"t":{"994":{"position":[[1339,17]]},"1228":{"position":[[1339,17]]}}}],["sst",{"_index":2052,"t":{"1088":{"position":[[722,3]]}}}],["ss×s个grid",{"_index":2938,"t":{"1354":{"position":[[174,9]]}}}],["st",{"_index":2042,"t":{"1088":{"position":[[507,3]]}}}],["stabl",{"_index":1435,"t":{"963":{"position":[[0,6]]},"965":{"position":[[0,10],[303,9]]},"1039":{"position":[[490,6]]},"1177":{"position":[[58,6]]},"1267":{"position":[[1052,6]]}}}],["stable_partit",{"_index":485,"t":{"841":{"position":[[1676,16]]}}}],["stable_sort",{"_index":492,"t":{"841":{"position":[[1876,11]]}}}],["stack",{"_index":256,"t":{"817":{"position":[[91,5]]},"853":{"position":[[0,9],[105,17],[155,12]]},"895":{"position":[[1325,5]]},"1181":{"position":[[15,34]]}}}],["stack<int",{"_index":129,"t":{"738":{"position":[[0,10]]},"853":{"position":[[123,10]]}}}],["stack<str",{"_index":648,"t":{"853":{"position":[[137,13]]}}}],["stack和concat",{"_index":2470,"t":{"1181":{"position":[[85,14]]}}}],["stack和queu",{"_index":414,"t":{"839":{"position":[[394,36]]}}}],["stack模版类的定义在stack",{"_index":646,"t":{"853":{"position":[[10,22]]}}}],["stack模版类需要两个模版参数，一个是元素类型，另一个是容器类型，但是只有元素类型是必要的，在不指定容器类型时，默认容器的类型为dequ",{"_index":647,"t":{"853":{"position":[[33,71]]}}}],["stack：栈，push",{"_index":85,"t":{"726":{"position":[[147,15]]}}}],["stage",{"_index":1776,"t":{"1029":{"position":[[940,10]]},"1031":{"position":[[1004,5]]},"1039":{"position":[[99,5]]},"1255":{"position":[[941,10]]},"1257":{"position":[[1004,5]]},"1267":{"position":[[315,5],[469,5]]}}}],["stand",{"_index":2897,"t":{"1329":{"position":[[742,6]]},"1339":{"position":[[742,6]]}}}],["star",{"_index":223,"t":{"808":{"position":[[0,21]]},"952":{"position":[[0,21]]},"1284":{"position":[[0,21]]},"1288":{"position":[[0,21]]},"1385":{"position":[[0,21]]}}}],["start",{"_index":723,"t":{"864":{"position":[[735,6],[1114,6],[1202,5]]}}}],["start_kernel_thread(&project0,0,priority_normal,fals",{"_index":1081,"t":{"879":{"position":[[574,55],[2256,55]]}}}],["startoftext",{"_index":1736,"t":{"1025":{"position":[[625,11]]},"1251":{"position":[[625,11]]}}}],["statu",{"_index":836,"t":{"868":{"position":[[177,7],[731,6],[1060,6]]}}}],["status=insert",{"_index":1171,"t":{"881":{"position":[[642,15],[685,15]]},"895":{"position":[[1698,15],[1741,15]]}}}],["std",{"_index":11,"t":{"705":{"position":[[41,4]]},"711":{"position":[[41,4]]},"717":{"position":[[41,4]]},"817":{"position":[[16,4]]},"819":{"position":[[266,4]]},"843":{"position":[[1497,4]]},"864":{"position":[[69,4]]},"866":{"position":[[135,4]]},"871":{"position":[[95,4]]},"873":{"position":[[95,4]]},"875":{"position":[[181,4]]},"1321":{"position":[[82,4]]}}}],["stdarg.h",{"_index":247,"t":{"815":{"position":[[148,8]]}}}],["stddef.h",{"_index":248,"t":{"815":{"position":[[164,8]]}}}],["stdio.h",{"_index":249,"t":{"815":{"position":[[180,7]]}}}],["stdlib.h",{"_index":251,"t":{"815":{"position":[[194,8]]}}}],["stl",{"_index":34,"t":{"707":{"position":[[6,12]]},"839":{"position":[[0,8],[13,3]]}}}],["stlstl",{"_index":679,"t":{"861":{"position":[[13,6]]}}}],["stl源码剖析p146",{"_index":408,"t":{"839":{"position":[[85,58]]}}}],["stl的utility头文件中描述了一个看上去非常简单的模版类pair",{"_index":617,"t":{"849":{"position":[[12,77]]}}}],["stl的vector头文件中定义了vector（向量容器模版类），vector容器以连续数组的方式存储元素序列，可以将vector看作是以顺序结构实现的线性表。当我们在程序中需要使用动态数组时，vector将会是理想的选择，vector",{"_index":519,"t":{"843":{"position":[[11,137]]}}}],["stl的头文件中map中定义了模版类map和multimap，用有序二叉树表存储类型为pair<const",{"_index":625,"t":{"851":{"position":[[8,54]]}}}],["str(devic",{"_index":2424,"t":{"1150":{"position":[[2612,15]]}}}],["stream",{"_index":611,"t":{"847":{"position":[[1020,12],[1036,11]]}}}],["stride=1padding=1,stride=1",{"_index":2118,"t":{"1102":{"position":[[138,26]]}}}],["stride=2",{"_index":2342,"t":{"1150":{"position":[[645,10],[733,10]]}}}],["string",{"_index":15,"t":{"705":{"position":[[59,6]]},"732":{"position":[[0,6],[34,11]]},"817":{"position":[[118,6]]},"847":{"position":[[0,10],[84,11],[182,18],[266,20],[345,6],[363,6],[398,6],[444,6],[503,6],[544,6],[597,6],[631,6],[1065,6],[1086,10]]},"1319":{"position":[[0,6],[73,6]]},"1321":{"position":[[87,6],[160,6],[779,6]]}}}],["string.h",{"_index":252,"t":{"815":{"position":[[209,8]]}}}],["string}.pt",{"_index":2704,"t":{"1211":{"position":[[423,10],[588,10]]}}}],["string内始于位置idx且长度最多为len的部分当作字符串",{"_index":589,"t":{"847":{"position":[[466,36]]}}}],["string内始于位置idx的部分当作字符串",{"_index":587,"t":{"847":{"position":[[416,27]]}}}],["string和char",{"_index":580,"t":{"847":{"position":[[68,15]]}}}],["string字符串cstr作为字符串",{"_index":591,"t":{"847":{"position":[[521,22]]}}}],["string字符串cstr的前len个字符作为字符串",{"_index":593,"t":{"847":{"position":[[566,30]]}}}],["string封装了char*，管理这个字符串，是一个char*型的容器。也就是说string是一个容器，里面元素的数据类型是char",{"_index":581,"t":{"847":{"position":[[113,68]]}}}],["string是stl的字符串类型，通常用来表示字符串。而在使用string之前，字符串通常是用char",{"_index":579,"t":{"847":{"position":[[11,56]]}}}],["string管理char*所分配的内存。每一次string的复制，取值都由str",{"_index":582,"t":{"847":{"position":[[201,64]]}}}],["string：字符串，substr",{"_index":78,"t":{"726":{"position":[[48,20]]}}}],["struct",{"_index":325,"t":{"824":{"position":[[0,6]]},"826":{"position":[[11,6],[83,6],[214,6],[331,6],[548,6]]},"864":{"position":[[134,6],[282,6]]},"866":{"position":[[206,6],[423,6]]},"868":{"position":[[398,6],[453,6],[497,6],[593,7]]},"871":{"position":[[185,6]]},"873":{"position":[[185,6]]},"875":{"position":[[265,6]]},"879":{"position":[[535,6],[2217,6]]}}}],["structur",{"_index":1845,"t":{"1033":{"position":[[1898,10]]},"1183":{"position":[[130,10]]},"1259":{"position":[[1895,10]]}}}],["struct{int",{"_index":377,"t":{"828":{"position":[[8,10]]}}}],["style",{"_index":1763,"t":{"1029":{"position":[[392,8]]},"1031":{"position":[[838,6]]},"1255":{"position":[[392,8]]},"1257":{"position":[[838,6]]}}}],["style_dim",{"_index":1771,"t":{"1029":{"position":[[656,10],[667,10]]},"1255":{"position":[[657,10],[668,10]]}}}],["stylegan",{"_index":1762,"t":{"1029":{"position":[[191,8],[314,8],[443,8],[775,8],[893,17]]},"1031":{"position":[[706,8],[715,21]]},"1033":{"position":[[940,8],[1480,8]]},"1036":{"position":[[331,8]]},"1255":{"position":[[191,8],[314,8],[443,8],[776,8],[894,17]]},"1257":{"position":[[706,8],[715,21]]},"1259":{"position":[[937,8],[1477,8]]},"1262":{"position":[[331,8]]}}}],["stylegan2",{"_index":1852,"t":{"1036":{"position":[[55,9]]},"1262":{"position":[[55,9]]}}}],["style）类的prompt",{"_index":2595,"t":{"1190":{"position":[[52,28]]}}}],["subject",{"_index":2079,"t":{"1098":{"position":[[11,7],[131,7]]}}}],["substr",{"_index":613,"t":{"847":{"position":[[1117,8]]}}}],["substr(1,2",{"_index":116,"t":{"732":{"position":[[107,11]]}}}],["subsystem",{"_index":1120,"t":{"879":{"position":[[1771,11]]}}}],["such",{"_index":1241,"t":{"895":{"position":[[873,4]]}}}],["sudo",{"_index":2886,"t":{"1326":{"position":[[59,4]]}}}],["sum",{"_index":47,"t":{"713":{"position":[[161,3],[207,3],[213,3]]},"994":{"position":[[1724,37]]},"1228":{"position":[[1724,37]]}}}],["sum_i^n{p_i}\\space{log_2(p_i",{"_index":2191,"t":{"1126":{"position":[[321,31]]}}}],["sum_i^n{p_i}\\space{log_2({\\frac{1}{p_i",{"_index":2192,"t":{"1126":{"position":[[359,43]]}}}],["sum{[{i",{"_index":2169,"t":{"1124":{"position":[[91,8]]}}}],["sum{p_i\\spac",{"_index":2212,"t":{"1126":{"position":[[895,14]]}}}],["sum{p_i}\\space{log_2({q_i",{"_index":2225,"t":{"1126":{"position":[[1274,29]]}}}],["sum产生加入噪声后的图像。通常来说，αˉ1\\bar{\\alpha}_1αˉ1​至αˉt\\bar{\\alpha}_tαˉt​是递减的，当在第2步中sample到的ttt越大，则原始图像x0\\mathbf{x}_0x0",{"_index":1664,"t":{"1008":{"position":[[568,119]]}}}],["super(lenet5",{"_index":2333,"t":{"1150":{"position":[[463,13]]}}}],["super(lenetreshap",{"_index":2327,"t":{"1150":{"position":[[327,19]]}}}],["sur",{"_index":2817,"t":{"1303":{"position":[[105,3]]}}}],["sure",{"_index":1961,"t":{"1055":{"position":[[2609,4]]}}}],["surpris",{"_index":2180,"t":{"1126":{"position":[[80,9]]}}}],["sutskever和geoffrey",{"_index":2135,"t":{"1111":{"position":[[36,18]]}}}],["svd",{"_index":2907,"t":{"1337":{"position":[[973,61]]},"1402":{"position":[[845,61]]}}}],["swap",{"_index":475,"t":{"841":{"position":[[1377,4]]},"847":{"position":[[706,6]]}}}],["swap_rang",{"_index":476,"t":{"841":{"position":[[1391,11]]}}}],["system",{"_index":1159,"t":{"881":{"position":[[445,7]]},"895":{"position":[[864,8],[1501,7]]}}}],["s×ss",{"_index":2937,"t":{"1354":{"position":[[152,14]]}}}],["s与另一个vector",{"_index":543,"t":{"843":{"position":[[1133,18]]}}}],["t",{"_index":886,"t":{"868":{"position":[[1563,1],[1623,3]]}}}],["t)^2}\\tag{1}de​(p,q)=(x−s)2+(y−t)2​(1",{"_index":1298,"t":{"902":{"position":[[227,38]]}}}],["t=1t=1t=1时，得到x0\\mathbf{x}_0x0",{"_index":1681,"t":{"1010":{"position":[[762,42]]}}}],["t=μ+ν2(25)t=\\frac{\\mu",{"_index":1408,"t":{"942":{"position":[[110,21]]}}}],["t>的元素对序列。序列中的元素以const",{"_index":627,"t":{"851":{"position":[[68,21]]}}}],["t[maxn",{"_index":960,"t":{"871":{"position":[[208,9]]},"873":{"position":[[208,9]]},"875":{"position":[[290,9]]}}}],["t[rt].d=pre[rt",{"_index":1042,"t":{"875":{"position":[[437,16]]}}}],["t[rt].l=create(l1,p1",{"_index":1043,"t":{"875":{"position":[[454,20]]}}}],["t[rt].l=mid_po_build(la,p1",{"_index":982,"t":{"871":{"position":[[824,26]]},"873":{"position":[[579,26]]}}}],["t[rt].l=mid_pr_build(la,p1",{"_index":977,"t":{"871":{"position":[[481,26]]},"873":{"position":[[350,26]]}}}],["t[rt].r=create(p1+1,r1,l2+p2+1,r2",{"_index":1045,"t":{"875":{"position":[[490,35]]}}}],["t[rt].r=mid_po_build(p1+1,ra,lb+p2,rb",{"_index":984,"t":{"871":{"position":[[885,37]]},"873":{"position":[[621,37]]}}}],["t[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb",{"_index":979,"t":{"871":{"position":[[542,41]]},"873":{"position":[[392,41]]}}}],["t\\vert",{"_index":1301,"t":{"902":{"position":[[325,6]]}}}],["t\\vert)\\tag{3}d8​(p,q)=max(∣x−s∣,∣y−t∣)(3",{"_index":1305,"t":{"902":{"position":[[431,42]]}}}],["tag{10",{"_index":2226,"t":{"1126":{"position":[[1304,8]]}}}],["tag{1}",{"_index":170,"t":{"757":{"position":[[144,12]]}}}],["tag{1}3×3×3×4=108(1",{"_index":2123,"t":{"1104":{"position":[[168,21]]}}}],["tag{1}acc=len(y)∑i(predi​==yi​)​(1",{"_index":2457,"t":{"1175":{"position":[[196,36]]}}}],["tag{1}attention(q,k,v)=softmax(dk​​qkt​)v(1",{"_index":1969,"t":{"1055":{"position":[[2968,45]]}}}],["tag{1}l(y,z)=max(0,−y∗z)(1",{"_index":2282,"t":{"1138":{"position":[[406,28]]}}}],["tag{1}min",{"_index":2087,"t":{"1098":{"position":[[113,10]]}}}],["tag{1}pe(pos,2i)​=sin(100002i/dmodel​pos​)(1",{"_index":1552,"t":{"988":{"position":[[309,46]]},"1222":{"position":[[309,46]]}}}],["tag{1}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(1",{"_index":2310,"t":{"1145":{"position":[[328,65]]}}}],["tag{1}x1[0,:,:]+x2[0,:,:](1",{"_index":2780,"t":{"1294":{"position":[[894,29]]}}}],["tag{1}yi,j​=h,w∑​wi,j,h,w​∗xh,w​(1",{"_index":2435,"t":{"1157":{"position":[[142,36]]}}}],["tag{1}σ(x)=1+e−x1​(1",{"_index":2144,"t":{"1119":{"position":[[47,22]]}}}],["tag{2}",{"_index":175,"t":{"759":{"position":[[59,12]]}}}],["tag{2}3×3××3=27(2",{"_index":2127,"t":{"1106":{"position":[[100,19]]}}}],["tag{2}d4​(p,q)=∣x−s∣+∣y−t∣(2",{"_index":1302,"t":{"902":{"position":[[332,30]]}}}],["tag{2}dxd",{"_index":2150,"t":{"1119":{"position":[[145,14]]}}}],["tag{2}l(w,b)+2λ​∥w∥12​(2",{"_index":2094,"t":{"1100":{"position":[[110,26]]}}}],["tag{2}pe(pos,2i+1)​=cos(100002i/dmodel​pos​)(2",{"_index":1554,"t":{"988":{"position":[[457,48]]},"1222":{"position":[[457,48]]}}}],["tag{2}x1[1,:,:]+x2[1,:,:](2",{"_index":2783,"t":{"1294":{"position":[[972,29]]}}}],["tag{2}yi,j​=h,w∑​wi,j,h,w​∗xh,w​=a,b∑​vi,j,a,b​∗xi+a,j+b​(2",{"_index":2438,"t":{"1157":{"position":[[364,61]]}}}],["tag{3}1×1×3×4=12(3",{"_index":2132,"t":{"1108":{"position":[[112,20]]}}}],["tag{3}a",{"_index":183,"t":{"761":{"position":[[210,11]]}}}],["tag{3}f(x)={0x​x<0x≥0​(3",{"_index":2162,"t":{"1121":{"position":[[77,26]]}}}],["tag{3}pe(pos+k,2i)=pe(pos,2i)×pe(k,2i+1)+pe(pos,2i+1)×pe(k,2i)pe(pos+k,2i+1)=pe(pos,2i+1)×pe(k,2i+1)−pe(pos,2i)×pe(k,2i)​(3",{"_index":1562,"t":{"988":{"position":[[928,125]]},"1222":{"position":[[928,125]]}}}],["tag{3}x1[2,:,:]+x2[2,:,:](3",{"_index":2786,"t":{"1294":{"position":[[1050,29]]}}}],["tag{3}yi,j​=a,b∑​vi,j,a,b​∗xi+a,j+b​=a,b∑​va,b​∗xi+a,j+b​(3",{"_index":2441,"t":{"1157":{"position":[[636,61]]}}}],["tag{3}∂w∂​(l(w,b)+2λ​∥w∥12​)=∂w∂l(w,b)​+λw(3",{"_index":2101,"t":{"1100":{"position":[[347,46]]}}}],["tag{4}dxdf(x)​={01​x<0x≥0​(4",{"_index":2165,"t":{"1121":{"position":[[213,30]]}}}],["tag{4}inputembedding(pos,i)=wordembedding(pos,i)+positionencoding(pos,i)(4",{"_index":1566,"t":{"988":{"position":[[1234,76]]},"1222":{"position":[[1234,76]]}}}],["tag{4}wt+1​=(1−ηλ)wt​+η∂wt​∂l(wt​,bt​)​(4",{"_index":2108,"t":{"1100":{"position":[[501,43]]}}}],["tag{4}yi,j​=a,b∑​va,b​∗xi+a,j+b​=a=−δ∑δ​b=−δ∑δ​va,b​∗xia​,j+b​(4",{"_index":2446,"t":{"1159":{"position":[[194,66]]}}}],["tag{5}lossmse​=∑[y−f(x)]2(5",{"_index":2171,"t":{"1124":{"position":[[112,29]]}}}],["tag{5}shapeoutput​=strideshapeinput​−sizekernel​+2∗padding​+1(5",{"_index":2448,"t":{"1159":{"position":[[398,65]]}}}],["tag{6}[o1​o2​​]=[α1,1′​α1,2′​​α2,1′​α2,2′​​][v1​v2​​](6",{"_index":1631,"t":{"1002":{"position":[[732,57]]},"1236":{"position":[[732,57]]}}}],["tag{6}∥y−f(x)∥2​=2∑[y−f(x)]2​(6",{"_index":2176,"t":{"1124":{"position":[[220,33]]}}}],["tag{7",{"_index":2193,"t":{"1126":{"position":[[403,7]]}}}],["tag{7}[o1​o2​​]=[α1,1′​α1,2′​​0α2,2′​​][v1​v2​​](7",{"_index":1633,"t":{"1002":{"position":[[1026,52]]},"1236":{"position":[[1026,52]]}}}],["take",{"_index":1269,"t":{"897":{"position":[[54,4]]},"1051":{"position":[[24,5]]}}}],["target",{"_index":1227,"t":{"895":{"position":[[635,6],[828,6],[938,6],[984,6]]},"1185":{"position":[[227,6]]}}}],["target_cc",{"_index":1233,"t":{"895":{"position":[[692,9]]}}}],["target_cc_prefix)gcc",{"_index":1234,"t":{"895":{"position":[[705,22]]}}}],["target_cc_prefix)ld",{"_index":1254,"t":{"895":{"position":[[1063,21]]}}}],["target_direct",{"_index":1804,"t":{"1031":{"position":[[1160,16]]},"1257":{"position":[[1160,16]]}}}],["target_direction：mapp",{"_index":1805,"t":{"1031":{"position":[[1185,23]]},"1257":{"position":[[1186,23]]}}}],["target_embed",{"_index":1745,"t":{"1025":{"position":[[1005,16]]},"1251":{"position":[[1005,16]]}}}],["target_ld",{"_index":1253,"t":{"895":{"position":[[1050,9]]}}}],["target_prompt",{"_index":1715,"t":{"1023":{"position":[[115,14]]},"1249":{"position":[[115,14]]}}}],["target_prompts]).to(devic",{"_index":1733,"t":{"1025":{"position":[[369,27]]},"1251":{"position":[[369,27]]}}}],["target_tokenized_prompt",{"_index":1732,"t":{"1025":{"position":[[305,24],[784,24]]},"1251":{"position":[[305,24],[784,24]]}}}],["task",{"_index":2016,"t":{"1084":{"position":[[337,11]]},"1088":{"position":[[909,6]]}}}],["teacher",{"_index":1618,"t":{"1000":{"position":[[146,11]]},"1002":{"position":[[429,19]]},"1234":{"position":[[146,11]]},"1236":{"position":[[429,19]]}}}],["techniqu",{"_index":2249,"t":{"1129":{"position":[[29,9]]}}}],["tell",{"_index":1276,"t":{"897":{"position":[[130,4]]}}}],["temp",{"_index":2868,"t":{"1319":{"position":[[158,4],[210,4],[253,13],[270,5],[377,4],[516,5]]},"1321":{"position":[[245,4],[297,4],[340,13],[357,5],[464,4],[603,5]]}}}],["templat",{"_index":2714,"t":{"1267":{"position":[[103,10],[617,9],[669,9],[735,9]]}}}],["tensor",{"_index":2773,"t":{"1294":{"position":[[637,10]]}}}],["tensor(0.2684",{"_index":2242,"t":{"1126":{"position":[[1695,14],[1881,14]]}}}],["tensor(1",{"_index":2512,"t":{"1181":{"position":[[1134,11]]}}}],["tensor(2",{"_index":2514,"t":{"1181":{"position":[[1157,11]]}}}],["tensor(3",{"_index":2516,"t":{"1181":{"position":[[1180,11]]}}}],["tensor(4",{"_index":2513,"t":{"1181":{"position":[[1146,10]]}}}],["tensor(5",{"_index":2515,"t":{"1181":{"position":[[1169,10]]}}}],["tensor(6",{"_index":2517,"t":{"1181":{"position":[[1192,10]]}}}],["tensor([1",{"_index":2507,"t":{"1181":{"position":[[947,10],[965,10],[1328,11]]}}}],["tensor([3",{"_index":2520,"t":{"1181":{"position":[[1367,11]]}}}],["tensor([4",{"_index":2519,"t":{"1181":{"position":[[1348,10]]}}}],["tensor([6",{"_index":2521,"t":{"1181":{"position":[[1387,10]]}}}],["tensor([[9",{"_index":2489,"t":{"1181":{"position":[[558,11]]}}}],["tensor([[[0",{"_index":2769,"t":{"1294":{"position":[[426,14],[541,13]]}}}],["tensorflow框架，可以使用tensorboard",{"_index":2719,"t":{"1271":{"position":[[4,36]]}}}],["tensor的*乘法是对tensor",{"_index":2486,"t":{"1181":{"position":[[454,28]]}}}],["term",{"_index":1882,"t":{"1051":{"position":[[110,6]]}}}],["terminal_proxy.sh",{"_index":2848,"t":{"1309":{"position":[[0,23]]}}}],["test",{"_index":334,"t":{"826":{"position":[[29,4],[101,5],[232,4]]},"1129":{"position":[[224,4],[277,7]]},"1131":{"position":[[82,4],[240,4]]},"1133":{"position":[[95,4],[115,5]]},"1150":{"position":[[1771,5],[2519,4]]}}}],["test.first",{"_index":337,"t":{"826":{"position":[[107,10]]}}}],["test.four",{"_index":343,"t":{"826":{"position":[[176,9]]}}}],["test.second",{"_index":338,"t":{"826":{"position":[[125,11]]}}}],["test.third",{"_index":340,"t":{"826":{"position":[[149,10]]}}}],["test_acc",{"_index":2416,"t":{"1150":{"position":[[2367,8],[2453,10]]}}}],["test_acc:.3f",{"_index":2420,"t":{"1150":{"position":[[2528,16]]}}}],["test_it",{"_index":2373,"t":{"1150":{"position":[[1391,10],[2405,10],[2668,9],[2787,10]]}}}],["testdata.json",{"_index":2709,"t":{"1211":{"position":[[557,13]]}}}],["text",{"_index":1439,"t":{"965":{"position":[[78,4],[597,4],[748,4],[837,4]]},"1121":{"position":[[130,7]]},"1305":{"position":[[80,4]]}}}],["text_direct",{"_index":2717,"t":{"1267":{"position":[[601,15]]}}}],["text_featur",{"_index":1806,"t":{"1031":{"position":[[1229,13]]},"1039":{"position":[[22,13],[66,13]]},"1257":{"position":[[1230,13]]},"1267":{"position":[[228,13]]}}}],["textual",{"_index":2040,"t":{"1088":{"position":[[455,7],[522,7]]}}}],["text{subject",{"_index":2082,"t":{"1098":{"position":[[58,13]]}}}],["theta",{"_index":2086,"t":{"1098":{"position":[[106,6],[192,23]]}}}],["third",{"_index":331,"t":{"824":{"position":[[52,6]]}}}],["third：\"method",{"_index":346,"t":{"826":{"position":[[258,13]]}}}],["thpf",{"_index":1393,"t":{"928":{"position":[[522,14]]}}}],["thread",{"_index":1080,"t":{"879":{"position":[[556,8],[565,6],[2169,6],[2238,8],[2247,6],[2324,6]]}}}],["three",{"_index":347,"t":{"826":{"position":[[272,7]]}}}],["time",{"_index":2116,"t":{"1102":{"position":[[94,6]]},"1104":{"position":[[135,6],[144,6],[153,6]]},"1106":{"position":[[70,6],[79,6],[86,6]]},"1108":{"position":[[7,6],[80,6],[89,6],[98,6]]},"1129":{"position":[[243,6],[290,5]]},"1131":{"position":[[187,6]]},"1143":{"position":[[67,6],[98,6]]},"1145":{"position":[[13,6],[22,6],[55,6],[66,6],[77,6],[115,6],[148,6],[158,6],[424,6],[435,6],[444,6],[453,6],[463,6]]},"1349":{"position":[[143,6]]},"1354":{"position":[[167,6]]},"1356":{"position":[[68,6]]},"1366":{"position":[[134,6]]},"1368":{"position":[[70,6],[89,6],[115,6]]}}}],["time.h",{"_index":253,"t":{"815":{"position":[[227,6]]}}}],["timer",{"_index":2392,"t":{"1150":{"position":[[1784,6]]}}}],["timer.start",{"_index":2402,"t":{"1150":{"position":[[1950,13]]}}}],["timer.stop",{"_index":2411,"t":{"1150":{"position":[[2142,12]]}}}],["timer.sum():.1f",{"_index":2422,"t":{"1150":{"position":[[2579,16]]}}}],["tip",{"_index":0,"t":{"703":{"position":[[0,3]]},"709":{"position":[[0,3]]},"715":{"position":[[0,3]]},"767":{"position":[[74,3],[247,3],[409,3]]},"774":{"position":[[0,3]]},"776":{"position":[[0,3]]},"779":{"position":[[0,3]]},"786":{"position":[[38,3]]},"798":{"position":[[135,3]]},"806":{"position":[[0,3]]},"897":{"position":[[0,3]]},"918":{"position":[[271,3]]},"926":{"position":[[33,3]]},"950":{"position":[[0,3]]},"973":{"position":[[126,3]]},"994":{"position":[[1335,3]]},"1004":{"position":[[0,3]]},"1048":{"position":[[282,3]]},"1078":{"position":[[0,3]]},"1094":{"position":[[0,3]]},"1102":{"position":[[0,3]]},"1108":{"position":[[133,3]]},"1188":{"position":[[809,4]]},"1228":{"position":[[1335,3]]},"1271":{"position":[[0,3]]},"1286":{"position":[[0,3]]},"1315":{"position":[[0,3]]},"1321":{"position":[[15,3]]},"1329":{"position":[[736,3]]},"1337":{"position":[[244,3],[382,3]]},"1339":{"position":[[736,3]]},"1345":{"position":[[16,3],[136,3]]},"1354":{"position":[[0,3],[519,3],[721,3]]},"1358":{"position":[[154,3]]},"1360":{"position":[[0,3]]},"1383":{"position":[[0,3]]},"1398":{"position":[[0,3]]},"1402":{"position":[[116,3],[254,3]]}}}],["titile(if",{"_index":2829,"t":{"1305":{"position":[[66,9]]}}}],["titl",{"_index":2823,"t":{"1303":{"position":[[321,7]]},"1305":{"position":[[100,5]]}}}],["title/window",{"_index":2828,"t":{"1305":{"position":[[53,12]]}}}],["title文字不能垂直居中，可以更换为window",{"_index":2822,"t":{"1303":{"position":[[295,25]]}}}],["tlpf",{"_index":1373,"t":{"926":{"position":[[946,14]]}}}],["tmp",{"_index":882,"t":{"868":{"position":[[1435,5],[1545,5],[2882,5]]}}}],["tmp[0",{"_index":885,"t":{"868":{"position":[[1555,7],[2915,8],[3051,7]]}}}],["tmp[2",{"_index":887,"t":{"868":{"position":[[1567,7]]}}}],["tmp[20",{"_index":940,"t":{"868":{"position":[[2832,8]]}}}],["tmp[3",{"_index":943,"t":{"868":{"position":[[2944,8],[3059,8]]}}}],["tmp[max_vertex_num",{"_index":875,"t":{"868":{"position":[[1156,20]]}}}],["toc",{"_index":224,"t":{"810":{"position":[[19,5]]}}}],["todo(\"start",{"_index":1143,"t":{"879":{"position":[[2148,11]]}}}],["token",{"_index":1717,"t":{"1025":{"position":[[20,9],[577,8]]},"1027":{"position":[[44,8],[179,8]]},"1251":{"position":[[20,9],[577,8]]},"1253":{"position":[[44,8],[179,8]]}}}],["tokenize后为tensor",{"_index":1724,"t":{"1025":{"position":[[161,19],[433,19]]},"1251":{"position":[[161,19],[433,19]]}}}],["token或random",{"_index":2018,"t":{"1086":{"position":[[92,12]]}}}],["token所对应的输出向量，随机初始化两个相同维度的向量，分别与输出向量做dot",{"_index":2064,"t":{"1088":{"position":[[1264,57]]}}}],["token进行遮挡后，喂入encoder中。对于每个被mask掉的词汇，bert",{"_index":2019,"t":{"1086":{"position":[[105,68]]}}}],["top",{"_index":84,"t":{"726":{"position":[[134,6],[163,6]]}}}],["topologicalsort",{"_index":801,"t":{"866":{"position":[[1758,30]]}}}],["torch",{"_index":1971,"t":{"1055":{"position":[[3060,5]]},"1119":{"position":[[299,5]]},"1121":{"position":[[288,5]]},"1150":{"position":[[7,5],[37,5],[112,5]]},"1294":{"position":[[285,5]]}}}],["torch.cat([clip.tokenize(p",{"_index":1719,"t":{"1025":{"position":[[57,27],[332,27]]},"1251":{"position":[[57,27],[332,27]]}}}],["torch.concat((a",{"_index":2479,"t":{"1181":{"position":[[295,16]]}}}],["torch.linspac",{"_index":2155,"t":{"1119":{"position":[[309,15]]},"1121":{"position":[[298,15]]}}}],["torch.log",{"_index":2232,"t":{"1126":{"position":[[1444,9]]}}}],["torch.log(torch.softmax(predict",{"_index":2238,"t":{"1126":{"position":[[1590,32]]}}}],["torch.nn",{"_index":2153,"t":{"1119":{"position":[[260,8]]},"1121":{"position":[[249,8]]},"1126":{"position":[[1481,8]]},"1150":{"position":[[64,8]]}}}],["torch.nn.crossentropyloss",{"_index":2385,"t":{"1150":{"position":[[1630,27]]}}}],["torch.nn.crossentropyloss相当于torch.softmax",{"_index":2231,"t":{"1126":{"position":[[1400,41]]}}}],["torch.nn.funct",{"_index":1972,"t":{"1055":{"position":[[3073,19]]}}}],["torch.nn.modul",{"_index":2356,"t":{"1150":{"position":[[971,17]]}}}],["torch.nn.nllloss",{"_index":2233,"t":{"1126":{"position":[[1456,17]]}}}],["torch.nn.sequenti",{"_index":2335,"t":{"1150":{"position":[[505,20]]}}}],["torch.optim.sgd(net.paramet",{"_index":2383,"t":{"1150":{"position":[[1582,33]]}}}],["torch.rand(4",{"_index":2471,"t":{"1181":{"position":[[104,13],[143,13]]}}}],["torch.reshape(x",{"_index":2765,"t":{"1294":{"position":[[347,16]]}}}],["torch.size([2",{"_index":2478,"t":{"1181":{"position":[[269,14]]}}}],["torch.size([4",{"_index":2483,"t":{"1181":{"position":[[390,14]]}}}],["torch.stack((a",{"_index":2474,"t":{"1181":{"position":[[182,15]]}}}],["torch.sum(y_hat.argmax(dim=1",{"_index":2370,"t":{"1150":{"position":[[1328,29]]}}}],["torch.tensor([1",{"_index":2240,"t":{"1126":{"position":[[1640,16],[1823,16]]},"1181":{"position":[[1043,16]]}}}],["torch.tensor([4",{"_index":2509,"t":{"1181":{"position":[[1071,16]]}}}],["torch.tensor([[0",{"_index":1915,"t":{"1055":{"position":[[781,17],[961,17],[3365,17],[3545,17]]}}}],["torch.tensor([[0.1",{"_index":2496,"t":{"1181":{"position":[[777,19]]}}}],["torch.tensor([[1",{"_index":1917,"t":{"1055":{"position":[[871,17],[3455,17]]},"1181":{"position":[[1211,17]]}}}],["torch.tensor([[2",{"_index":2237,"t":{"1126":{"position":[[1543,17],[1778,17]]}}}],["torch.tensor([[3",{"_index":2487,"t":{"1181":{"position":[[487,17]]}}}],["torch.tensor([[4",{"_index":2518,"t":{"1181":{"position":[[1252,17]]}}}],["torch.tensor(input",{"_index":1894,"t":{"1055":{"position":[[214,20],[3261,20]]}}}],["torch.tensor(np.arange(9",{"_index":2764,"t":{"1294":{"position":[[295,26]]}}}],["torchaudio",{"_index":1696,"t":{"1017":{"position":[[74,10]]},"1243":{"position":[[74,10]]}}}],["torchvis",{"_index":1695,"t":{"1017":{"position":[[62,11]]},"1243":{"position":[[62,11]]}}}],["tqdm",{"_index":1701,"t":{"1017":{"position":[[147,4]]},"1243":{"position":[[147,4]]}}}],["train",{"_index":1490,"t":{"967":{"position":[[987,12]]},"1031":{"position":[[334,5]]},"1055":{"position":[[654,9]]},"1129":{"position":[[214,5]]},"1131":{"position":[[144,8]]},"1133":{"position":[[0,5],[14,5]]},"1150":{"position":[[1758,6],[2492,5]]},"1188":{"position":[[799,9]]},"1211":{"position":[[340,9]]},"1257":{"position":[[334,5]]}}}],["train(lenet",{"_index":2430,"t":{"1150":{"position":[[2762,12]]}}}],["train(net",{"_index":2371,"t":{"1150":{"position":[[1368,10]]}}}],["train_acc",{"_index":2414,"t":{"1150":{"position":[[2187,9],[2349,10]]}}}],["train_acc:.3f",{"_index":2419,"t":{"1150":{"position":[[2502,16]]}}}],["train_it",{"_index":2372,"t":{"1150":{"position":[[1379,11],[2656,11],[2775,11]]}}}],["train_l",{"_index":2412,"t":{"1150":{"position":[[2155,7],[2339,9]]}}}],["train_l:.3f",{"_index":2418,"t":{"1150":{"position":[[2477,14]]}}}],["train_lay",{"_index":1787,"t":{"1031":{"position":[[280,12],[379,12],[394,14]]},"1257":{"position":[[280,12],[379,12],[394,14]]}}}],["trained的cnn，该cnn通常使用预训练的incept",{"_index":1479,"t":{"967":{"position":[[89,33]]}}}],["training&fin",{"_index":2060,"t":{"1088":{"position":[[1030,13]]}}}],["tran",{"_index":2580,"t":{"1188":{"position":[[691,5],[707,5]]}}}],["transform",{"_index":477,"t":{"841":{"position":[[1413,9]]},"957":{"position":[[0,11]]},"981":{"position":[[20,23]]},"986":{"position":[[0,11]]},"998":{"position":[[2,11],[104,11],[486,18],[609,11]]},"1090":{"position":[[412,11]]},"1207":{"position":[[56,12]]},"1209":{"position":[[57,11],[101,12]]},"1215":{"position":[[20,23]]},"1220":{"position":[[0,11]]},"1232":{"position":[[2,11],[104,11],[486,18],[609,11]]}}}],["transformers）本身是一种预训练的模型架构，通常是在大规模无标签数据上进行预训练，然后在特定任务上进行微调。bert",{"_index":2013,"t":{"1084":{"position":[[98,92]]}}}],["transformer实战练习，代码见github",{"_index":2676,"t":{"1207":{"position":[[5,28]]}}}],["transformer是sequ",{"_index":1543,"t":{"981":{"position":[[70,20]]},"1215":{"position":[[70,20]]}}}],["transformer由encoder和decoder组成，编码器和解码器都包含6个block",{"_index":1546,"t":{"983":{"position":[[0,58]]},"1217":{"position":[[0,58]]}}}],["transformer的推理阶段，自回归类型的decoder根据分词方式的不同，一个词汇一个词汇的输出，将当前时间步之前生成的所有词汇作为输入load进入decoder中。但在训练时如果遵从同样的生成范式会大大降低效率，并且面临则一步错步步错的风险（error",{"_index":1616,"t":{"1000":{"position":[[0,131]]},"1234":{"position":[[0,131]]}}}],["transformer训练时采取的teach",{"_index":1598,"t":{"994":{"position":[[826,33]]},"1228":{"position":[[826,33]]}}}],["treat",{"_index":1219,"t":{"895":{"position":[[336,7]]}}}],["treebank",{"_index":2055,"t":{"1088":{"position":[[747,33]]}}}],["true",{"_index":374,"t":{"826":{"position":[[834,5]]},"853":{"position":[[231,11]]},"857":{"position":[[198,16]]},"864":{"position":[[698,5],[1559,5]]},"866":{"position":[[1047,5],[1108,6]]},"868":{"position":[[71,4]]}}}],["true;//加入拓扑排序的顶点为n",{"_index":817,"t":{"866":{"position":[[2214,30]]}}}],["truncat",{"_index":1739,"t":{"1025":{"position":[[725,19]]},"1251":{"position":[[725,19]]}}}],["trung",{"_index":2579,"t":{"1188":{"position":[[685,5],[730,5]]}}}],["truth",{"_index":1510,"t":{"969":{"position":[[755,6]]},"1086":{"position":[[248,21]]}}}],["truth一次性喂到decod",{"_index":1620,"t":{"1000":{"position":[[176,38]]},"1234":{"position":[[176,38]]}}}],["truth做bc",{"_index":2923,"t":{"1347":{"position":[[64,9]]}}}],["truth做cross",{"_index":2072,"t":{"1092":{"position":[[119,11]]}}}],["truth对nois",{"_index":1540,"t":{"979":{"position":[[556,11]]}}}],["truth就是sampl",{"_index":1503,"t":{"969":{"position":[[437,18]]}}}],["truth就是第3步中sample出的噪声ϵ\\epsilon",{"_index":1667,"t":{"1008":{"position":[[783,32]]}}}],["truth的bc",{"_index":2926,"t":{"1347":{"position":[[119,9]]}}}],["truth的策略，但是还额外需要一个encoder来产生lat",{"_index":1505,"t":{"969":{"position":[[553,34]]}}}],["tsinghua",{"_index":1706,"t":{"1019":{"position":[[30,8]]},"1245":{"position":[[30,8]]}}}],["ttt从t,…,1t,\\ldots,1t,…,1范围循环ttt",{"_index":1670,"t":{"1010":{"position":[[54,33]]}}}],["ttt是从1,…,t1,\\ldots,t1,…,t范围中sample出的一个integ",{"_index":1657,"t":{"1008":{"position":[[50,46]]}}}],["ttt计数的循环，若t>1t>1t>1，则从normal",{"_index":1671,"t":{"1010":{"position":[[88,34]]}}}],["tune",{"_index":1615,"t":{"998":{"position":[[580,28]]},"1084":{"position":[[267,13]]},"1188":{"position":[[139,10],[158,54],[459,6]]},"1232":{"position":[[580,28]]},"1269":{"position":[[295,9]]}}}],["tuning范式与scratch范式的训练效果做了对比，其中scratch范式即使用传统的随机初始化的方式从头训练整个分类网络。可以看到预训练&微调的训练范式可以加速模型的收敛（converg",{"_index":2061,"t":{"1088":{"position":[[1044,109]]}}}],["two",{"_index":342,"t":{"826":{"position":[[170,5]]}}}],["tx0+1−αˉtϵ,t)∥2(1)\\nabla_{\\theta}\\left\\|\\boldsymbol{\\epsilon",{"_index":1660,"t":{"1008":{"position":[[196,71]]}}}],["type(m",{"_index":2376,"t":{"1150":{"position":[[1451,7],[1475,7]]}}}],["typedef",{"_index":349,"t":{"826":{"position":[[323,7],[540,7]]},"828":{"position":[[0,7]]},"864":{"position":[[126,7],[274,7]]},"866":{"position":[[198,7],[415,7]]},"868":{"position":[[165,7],[185,7],[357,7],[390,7],[489,7],[585,7]]},"871":{"position":[[100,7]]},"873":{"position":[[100,7]]},"875":{"position":[[186,7]]}}}],["u",{"_index":234,"t":{"812":{"position":[[198,1],[218,1],[239,1]]},"868":{"position":[[1992,2],[2264,3],[2310,6],[2512,9]]},"965":{"position":[[638,1],[696,1],[810,1]]},"1305":{"position":[[347,1]]},"1345":{"position":[[0,4],[125,1]]}}}],["u,int",{"_index":904,"t":{"868":{"position":[[2247,5]]}}}],["u==v",{"_index":910,"t":{"868":{"position":[[2361,6]]}}}],["u=q.front();//取队首顶点u",{"_index":807,"t":{"866":{"position":[[1926,20]]}}}],["udg",{"_index":846,"t":{"868":{"position":[[374,4]]}}}],["ull",{"_index":293,"t":{"821":{"position":[[381,3],[588,3]]}}}],["uncertainti",{"_index":2185,"t":{"1126":{"position":[[139,12]]}}}],["unchang",{"_index":2459,"t":{"1175":{"position":[[322,9]]}}}],["uncom",{"_index":1183,"t":{"881":{"position":[[851,9]]},"895":{"position":[[1907,9]]}}}],["uncondit",{"_index":1993,"t":{"1072":{"position":[[145,13],[171,13]]}}}],["undefin",{"_index":1256,"t":{"895":{"position":[[1101,9]]}}}],["understand",{"_index":1472,"t":{"965":{"position":[[887,13]]},"1088":{"position":[[125,13]]}}}],["unfreez",{"_index":1783,"t":{"1031":{"position":[[161,8],[271,8],[507,8]]},"1257":{"position":[[161,8],[271,8],[507,8]]}}}],["unfreeze，然后对更新哪些层做出选择，承担选择任务的功能函数：model.zssgan.zssgan.determine_opt_lay",{"_index":1781,"t":{"1031":{"position":[[70,77]]},"1257":{"position":[[70,77]]}}}],["unifi",{"_index":1653,"t":{"1006":{"position":[[833,7]]}}}],["uniqu",{"_index":478,"t":{"841":{"position":[[1448,6],[1520,9]]}}}],["unique_copi",{"_index":479,"t":{"841":{"position":[[1491,11]]}}}],["unordered_map",{"_index":92,"t":{"726":{"position":[[255,14]]},"744":{"position":[[136,14]]}}}],["unordered_multimap",{"_index":94,"t":{"726":{"position":[[290,22]]}}}],["unordered_multimap的操作和set或者map等的操作基本一致，唯一的区别就是不支持类似lower_bound",{"_index":153,"t":{"744":{"position":[[171,69]]}}}],["unordered_multiset",{"_index":93,"t":{"726":{"position":[[270,19]]},"744":{"position":[[151,19]]}}}],["unordered_set",{"_index":91,"t":{"726":{"position":[[240,14]]},"744":{"position":[[121,14]]}}}],["unset",{"_index":2855,"t":{"1309":{"position":[[222,5],[238,5],[255,5]]}}}],["unsign",{"_index":294,"t":{"821":{"position":[[385,8]]},"861":{"position":[[1001,8]]}}}],["until",{"_index":2288,"t":{"1138":{"position":[[646,5]]}}}],["unzipped_list",{"_index":2803,"t":{"1298":{"position":[[389,14],[448,15]]}}}],["updat",{"_index":2272,"t":{"1133":{"position":[[47,6]]}}}],["update='append",{"_index":2730,"t":{"1278":{"position":[[261,16],[336,16]]},"1280":{"position":[[227,16]]}}}],["upper_bound",{"_index":496,"t":{"841":{"position":[[2014,11]]}}}],["us",{"_index":9,"t":{"705":{"position":[[25,5]]},"711":{"position":[[25,5]]},"717":{"position":[[25,5]]},"817":{"position":[[0,5]]},"819":{"position":[[250,5]]},"843":{"position":[[1481,5]]},"864":{"position":[[53,5]]},"866":{"position":[[119,5]]},"871":{"position":[[79,5]]},"873":{"position":[[79,5]]},"875":{"position":[[165,5]]},"879":{"position":[[931,4]]},"881":{"position":[[969,6]]},"895":{"position":[[760,4],[1206,4],[2025,6]]},"1055":{"position":[[524,5],[2477,3]]},"1129":{"position":[[39,4],[250,5]]},"1131":{"position":[[70,4],[132,4],[215,4]]},"1133":{"position":[[126,4]]},"1209":{"position":[[53,3]]},"1321":{"position":[[66,5]]}}}],["user",{"_index":429,"t":{"839":{"position":[[839,5]]}}}],["usual",{"_index":1900,"t":{"1055":{"position":[[480,7]]}}}],["util",{"_index":616,"t":{"849":{"position":[[0,11]]}}}],["utils/text_templates.pi",{"_index":2713,"t":{"1267":{"position":[[76,23],[752,23]]}}}],["utkarsh",{"_index":2563,"t":{"1188":{"position":[[497,12]]}}}],["uttr",{"_index":2703,"t":{"1211":{"position":[[410,4],[575,4]]}}}],["ux+vy)}dudv\\tag{8}f(x,y)=∫−∞∞​∫−∞∞​f(u,v)ej2π(ux+vy)dudv(8",{"_index":1327,"t":{"908":{"position":[[812,60]]}}}],["ux+vy)}dxdy\\tag{7}f(u,v)=∫−∞∞​∫−∞∞​f(x,y)e−j2π(ux+vy)dxdy(7",{"_index":1324,"t":{"908":{"position":[[632,61]]}}}],["ux}du\\tag{6}f(x)=∫−∞∞​f(u)ej2πuxdu(6",{"_index":1320,"t":{"908":{"position":[[475,37]]}}}],["ux}dx\\tag{5}f(u)=∫−∞+∞​f(x)e−j2πuxdx(5",{"_index":1317,"t":{"908":{"position":[[359,39]]}}}],["ux}{n}}\\tag{10}f(x)=n1​u=0∑n−1​f(u)ejn2πux​(10",{"_index":1334,"t":{"908":{"position":[[1095,47]]}}}],["ux}{n}}\\tag{9}f(u)=x=0∑n−1​f(x)e−jn2πux​(9",{"_index":1331,"t":{"908":{"position":[[960,43]]}}}],["v",{"_index":898,"t":{"868":{"position":[[1995,8],[2612,2]]},"871":{"position":[[1118,2]]},"873":{"position":[[820,2]]}}}],["v,int",{"_index":905,"t":{"868":{"position":[[2253,5]]}}}],["v.push_back(w",{"_index":990,"t":{"871":{"position":[[1179,15]]},"873":{"position":[[881,15]]}}}],["v1",{"_index":2932,"t":{"1354":{"position":[[22,12]]}}}],["v3",{"_index":1811,"t":{"1033":{"position":[[76,2],[1223,2],[1252,2]]},"1259":{"position":[[76,2],[1220,2],[1249,2]]}}}],["v3模型。在计算fid时，生成图像和真实图像分别输入到预训练的cnn中，提取出各自的特征表示向量（representation）。这两个represent",{"_index":1480,"t":{"967":{"position":[[123,105]]}}}],["v=g.vertexs[u].connectors[i];//u的后继节点v",{"_index":809,"t":{"866":{"position":[[2011,38]]}}}],["v_n",{"_index":169,"t":{"757":{"position":[[137,6]]},"761":{"position":[[171,4],[203,6]]}}}],["v_t",{"_index":167,"t":{"757":{"position":[[127,4]]},"759":{"position":[[53,5]]},"761":{"position":[[193,4]]}}}],["vae、gan以及diffus",{"_index":1427,"t":{"961":{"position":[[0,18]]}}}],["vae在训练过程中，期待ecoder输入多张图片后，输出的向量在一起符合某个随机分布（e.g",{"_index":1527,"t":{"973":{"position":[[130,47]]}}}],["vae的数学原理，从vae到diffus",{"_index":1651,"t":{"1006":{"position":[[735,38]]}}}],["vae）与diffus",{"_index":1647,"t":{"1006":{"position":[[591,14]]}}}],["vae）的训练策略是使用encoder将输入图像对应（嵌入）到一个符合某随机分布的向量，再将该向量作为decoder的输入，加上文字prompt",{"_index":1526,"t":{"973":{"position":[[39,86]]}}}],["val",{"_index":532,"t":{"843":{"position":[[677,4],[722,6],[1038,4]]},"845":{"position":[[497,4],[698,4],[743,6],[982,4]]}}}],["valid",{"_index":2248,"t":{"1129":{"position":[[13,10],[139,10]]},"1131":{"position":[[34,11]]},"1133":{"position":[[54,10]]},"1211":{"position":[[474,5]]}}}],["valu",{"_index":632,"t":{"851":{"position":[[361,6],[510,8]]},"1055":{"position":[[766,6],[1089,6],[1145,6],[1260,7],[1812,18],[1972,6],[2008,6],[2074,9],[3350,6],[3653,6],[3709,6],[3824,7],[4131,6],[4167,6],[4233,9]]}}}],["value^{n",{"_index":1982,"t":{"1057":{"position":[[262,8]]}}}],["var",{"_index":2751,"t":{"1290":{"position":[[260,4],[294,4],[333,4],[373,4]]}}}],["variat",{"_index":1524,"t":{"973":{"position":[[0,18]]},"1006":{"position":[[545,25]]}}}],["vc++6.0中指针初始化为0xcccccccc",{"_index":869,"t":{"868":{"position":[[873,26]]}}}],["vc++6.0中指针初始化为0xcccccccc，如果不将指针初始化为null",{"_index":878,"t":{"868":{"position":[[1221,45]]}}}],["vec",{"_index":2874,"t":{"1321":{"position":[[820,4]]}}}],["vec.empti",{"_index":2879,"t":{"1321":{"position":[[971,13]]}}}],["vec.push_back(remaind",{"_index":2877,"t":{"1321":{"position":[[904,25]]}}}],["vec.rbegin",{"_index":2880,"t":{"1321":{"position":[[1024,13]]}}}],["vec.rend",{"_index":2881,"t":{"1321":{"position":[[1044,11]]}}}],["vector",{"_index":76,"t":{"726":{"position":[[19,17]]},"728":{"position":[[94,19],[224,12]]},"817":{"position":[[68,6]]},"843":{"position":[[0,10],[149,81],[231,27],[433,12],[1301,33],[1338,55],[1472,8]]},"864":{"position":[[29,8]]},"866":{"position":[[50,8]]},"1031":{"position":[[845,10]]},"1257":{"position":[[845,10]]}}}],["vector<int",{"_index":52,"t":{"717":{"position":[[59,11]]},"728":{"position":[[0,11],[237,11]]},"826":{"position":[[374,11]]},"843":{"position":[[259,11],[305,11],[349,11],[1515,11]]},"864":{"position":[[158,11],[715,11],[762,11],[1094,11],[1141,11],[1931,11],[2239,11]]},"866":{"position":[[149,11],[249,11]]},"871":{"position":[[1106,11]]},"873":{"position":[[808,11]]},"1321":{"position":[[808,11]]}}}],["vector<vertex",{"_index":359,"t":{"826":{"position":[[563,14]]},"864":{"position":[[297,14]]},"866":{"position":[[438,14]]}}}],["vector<vertex>::iter",{"_index":783,"t":{"866":{"position":[[1177,24]]}}}],["vector为底层容器，堆heap",{"_index":416,"t":{"839":{"position":[[448,41]]}}}],["vector对象，存储的是int",{"_index":520,"t":{"843":{"position":[[277,27]]}}}],["vector对象，并从由迭代器first和last定义的序列[first",{"_index":525,"t":{"843":{"position":[[380,41]]}}}],["vector的s",{"_index":99,"t":{"728":{"position":[[61,18]]}}}],["ver",{"_index":858,"t":{"868":{"position":[[644,5]]}}}],["veri",{"_index":1190,"t":{"881":{"position":[[962,4]]},"895":{"position":[[2018,4]]},"1055":{"position":[[2756,4]]}}}],["vernum",{"_index":864,"t":{"868":{"position":[[798,7],[1339,7],[1456,8]]}}}],["vernum,arcnum",{"_index":856,"t":{"868":{"position":[[621,14]]}}}],["vers[a].firstarc",{"_index":895,"t":{"868":{"position":[[1752,18],[1793,18],[1875,17]]}}}],["vers[i].data=tmp[i",{"_index":884,"t":{"868":{"position":[[1473,21]]}}}],["vers[i].firstarc",{"_index":867,"t":{"868":{"position":[[847,17]]}}}],["version/src/project0/build目录下执行mak",{"_index":1213,"t":{"895":{"position":[[43,35]]}}}],["version/src/projecti/build",{"_index":1199,"t":{"885":{"position":[[287,33]]},"889":{"position":[[114,29]]}}}],["version/src/projecti/build文件夹下进行，即要在终端中通过cd",{"_index":1149,"t":{"881":{"position":[[17,49]]}}}],["version/src/projecti/build目录下创建.bochsrc",{"_index":1266,"t":{"895":{"position":[[1379,41]]}}}],["version/src/projecti/build目录下的makefi",{"_index":1226,"t":{"895":{"position":[[593,39],[1158,39]]}}}],["version/src/projecti/build目录下的makefie文件(由于每个project下都存在一个对应的makefil",{"_index":1220,"t":{"895":{"position":[[369,71]]}}}],["version/src/projecti/src/geeko",{"_index":1198,"t":{"885":{"position":[[232,37]]}}}],["version/src/projecti/src/geekos/main.c",{"_index":1057,"t":{"879":{"position":[[9,40]]}}}],["version/src/目录下会存在project0",{"_index":1195,"t":{"885":{"position":[[131,26]]}}}],["vert",{"_index":2083,"t":{"1098":{"position":[[83,5]]},"1100":{"position":[[92,5],[273,5]]}}}],["vert^2_1",{"_index":2084,"t":{"1098":{"position":[[91,9]]},"1100":{"position":[[100,9],[281,9]]}}}],["vert_2",{"_index":2174,"t":{"1124":{"position":[[181,7]]}}}],["vertex",{"_index":350,"t":{"826":{"position":[[338,6],[414,8],[516,7],[578,8]]},"864":{"position":[[141,6],[198,8],[250,7],[312,8]]},"866":{"position":[[213,6],[289,8],[391,7],[453,8]]}}}],["vertex(int",{"_index":355,"t":{"826":{"position":[[460,10]]},"864":{"position":[[219,10]]},"866":{"position":[[335,10]]}}}],["vertexs.resize(1",{"_index":370,"t":{"826":{"position":[[752,18]]},"866":{"position":[[627,18]]}}}],["vertexs.resize(n",{"_index":367,"t":{"826":{"position":[[697,18]]},"864":{"position":[[431,18]]},"866":{"position":[[572,18]]}}}],["vertexs.s",{"_index":719,"t":{"864":{"position":[[516,16]]},"866":{"position":[[712,16]]}}}],["vertexs[id1].connectors.push_back(id2",{"_index":720,"t":{"864":{"position":[[560,39],[609,39]]},"866":{"position":[[756,39],[856,39]]}}}],["vertexs[id1].indegre",{"_index":773,"t":{"866":{"position":[[962,24]]}}}],["vertexs[id1].outdegre",{"_index":771,"t":{"866":{"position":[[796,25],[936,25]]}}}],["vertexs[id2].connectors.push_back(id1",{"_index":721,"t":{"864":{"position":[[649,39]]},"866":{"position":[[896,39]]}}}],["vertexs[id2].indegre",{"_index":772,"t":{"866":{"position":[[822,24],[1013,24]]}}}],["vertexs[id2].outdegre",{"_index":774,"t":{"866":{"position":[[987,25]]}}}],["vertexs[id].connectors.s",{"_index":733,"t":{"864":{"position":[[920,30],[1353,30]]}}}],["vertexs[id].connectors[i",{"_index":734,"t":{"864":{"position":[[968,26],[1401,26]]}}}],["vertextyp",{"_index":838,"t":{"868":{"position":[[218,10],[511,10],[941,10],[2108,10]]}}}],["vertic",{"_index":2832,"t":{"1305":{"position":[[124,11]]}}}],["vga_update_interv",{"_index":1177,"t":{"881":{"position":[[749,20]]},"895":{"position":[[1805,20]]}}}],["vgaromimag",{"_index":1160,"t":{"881":{"position":[[453,12]]},"895":{"position":[[1509,12]]}}}],["vi",{"_index":2723,"t":{"1278":{"position":[[26,3]]},"1280":{"position":[[26,3]]}}}],["via",{"_index":2528,"t":{"1183":{"position":[[110,3]]},"1188":{"position":[[627,3]]}}}],["viet",{"_index":2581,"t":{"1188":{"position":[[697,4]]}}}],["vis.line([0",{"_index":2725,"t":{"1278":{"position":[[116,14]]}}}],["vis.line([[0",{"_index":2733,"t":{"1280":{"position":[[41,14]]}}}],["vis.line([loss.item",{"_index":2731,"t":{"1278":{"position":[[289,23]]}}}],["visdom",{"_index":2721,"t":{"1273":{"position":[[12,6]]},"1276":{"position":[[0,28],[37,6]]},"1278":{"position":[[5,6],[19,6],[32,8]]},"1280":{"position":[[5,6],[19,6],[32,8]]}}}],["visdom.serv",{"_index":2722,"t":{"1276":{"position":[[54,13]]}}}],["visit",{"_index":724,"t":{"864":{"position":[[753,8],[1132,8]]}}}],["visit(vertextyp",{"_index":841,"t":{"868":{"position":[[290,16]]}}}],["visit[cnt]=0",{"_index":946,"t":{"868":{"position":[[2992,13]]}}}],["visit[max_vertex_num",{"_index":899,"t":{"868":{"position":[[2077,22]]}}}],["visit[p",{"_index":919,"t":{"868":{"position":[[2568,8]]}}}],["visit[u]=0",{"_index":923,"t":{"868":{"position":[[2679,11]]}}}],["visit[u]=1",{"_index":907,"t":{"868":{"position":[[2298,11]]}}}],["visited.count(id1",{"_index":735,"t":{"864":{"position":[[998,19],[1431,19]]}}}],["visited.insert(id1",{"_index":737,"t":{"864":{"position":[[1044,20],[1497,20]]}}}],["visited.insert(start",{"_index":728,"t":{"864":{"position":[[802,22],[1216,22]]}}}],["viz.line([[y1",{"_index":2737,"t":{"1280":{"position":[[177,14]]}}}],["viz.line([real_y_data",{"_index":2728,"t":{"1278":{"position":[[208,23]]}}}],["vnode",{"_index":852,"t":{"868":{"position":[[504,6],[547,7]]}}}],["vnv_nvn",{"_index":207,"t":{"793":{"position":[[68,21]]}}}],["voc1voc_1voc1​词汇向量输入时，在decoder中，voc1voc_1voc1",{"_index":1627,"t":{"1002":{"position":[[177,87]]},"1236":{"position":[[177,87]]}}}],["vocabulari",{"_index":1584,"t":{"994":{"position":[[6,16]]},"1228":{"position":[[6,16]]}}}],["vocabulary）是一个包含了在特定语言或任务中所有可能出现的所有单词或标记的集合。在自然语言处理（nlp",{"_index":1585,"t":{"994":{"position":[[23,95]]},"1228":{"position":[[23,95]]}}}],["voc中，类别种类为20类，因此在预测阶段输出的[7",{"_index":2949,"t":{"1354":{"position":[[423,27]]}}}],["void",{"_index":775,"t":{"866":{"position":[[1073,4]]},"868":{"position":[[285,4],[2215,4]]},"871":{"position":[[1073,4],[1360,4],[1475,4],[1590,4]]},"873":{"position":[[775,4],[1041,4],[1148,4],[1255,4]]},"875":{"position":[[539,4]]},"879":{"position":[[82,4],[1294,4],[1833,4]]}}}],["voxceleb1",{"_index":2684,"t":{"1211":{"position":[[24,10],[72,10]]}}}],["vrtype",{"_index":839,"t":{"868":{"position":[[248,6],[433,6]]}}}],["vtv_tvt",{"_index":206,"t":{"793":{"position":[[47,20]]}}}],["vt​∪vn​)∗(1",{"_index":171,"t":{"757":{"position":[[157,15]]}}}],["vt​∪vn​)∗(3",{"_index":184,"t":{"761":{"position":[[229,15]]}}}],["vt∗(2)",{"_index":172,"t":{"759":{"position":[[6,9]]}}}],["vt∗​(2",{"_index":176,"t":{"759":{"position":[[72,9]]}}}],["vt∪vn)∗(1)",{"_index":164,"t":{"757":{"position":[[73,14]]}}}],["vt∪vn)∗(3)\\alpha",{"_index":181,"t":{"761":{"position":[[115,19]]}}}],["v当前是第k",{"_index":906,"t":{"868":{"position":[[2268,10]]}}}],["v的入度减1",{"_index":811,"t":{"866":{"position":[[2067,9]]}}}],["w",{"_index":1761,"t":{"1029":{"position":[[185,1],[200,36],[390,1],[407,3],[411,1],[452,3],[764,1],[802,1],[812,1],[847,1],[881,1],[891,1]]},"1031":{"position":[[533,1],[585,1],[664,1],[737,6],[896,15],[951,1]]},"1036":{"position":[[68,1],[342,1],[612,1]]},"1041":{"position":[[13,1]]},"1098":{"position":[[89,1]]},"1100":{"position":[[98,1],[237,2],[279,1],[332,2],[345,1]]},"1138":{"position":[[564,1],[608,1],[612,1]]},"1145":{"position":[[451,1]]},"1255":{"position":[[185,1],[200,36],[390,1],[407,3],[411,1],[452,3],[765,1],[803,1],[813,1],[848,1],[882,1],[892,1]]},"1257":{"position":[[533,1],[585,1],[664,1],[737,6],[896,15],[951,1]]},"1262":{"position":[[68,1],[342,1],[612,1]]},"1265":{"position":[[13,1]]},"1300":{"position":[[170,3]]},"1354":{"position":[[308,2]]}}}],["w')o(co​×ci​×h×w×h′×w",{"_index":2312,"t":{"1145":{"position":[[470,23]]}}}],["w'co​×h′×w",{"_index":2305,"t":{"1145":{"position":[[165,11]]}}}],["w(l(w,b)+λ2∥w∥12)=∂l(w,b)∂w+λw(3)\\frac{\\partial}{\\parti",{"_index":2096,"t":{"1100":{"position":[[177,59]]}}}],["w=q.front",{"_index":989,"t":{"871":{"position":[[1157,12]]},"873":{"position":[[859,12]]}}}],["w][b,1,h,w]的tensor",{"_index":2974,"t":{"1362":{"position":[[196,46]]}}}],["w][b,1,h,w]的tensor，再将二者concat后通过7×77",{"_index":2978,"t":{"1366":{"position":[[97,36]]}}}],["w][b,c,h,w]分别经过最大池化和平均池化来压缩空间维度、学习通道之间的特征，得到[b,c,1,1][b",{"_index":2975,"t":{"1364":{"position":[[24,56]]}}}],["w][b,c,h,w]分别经过最大池化和平均池化（通过torch.max和torch.mean函数实现）得到[b,1,h,w][b",{"_index":2977,"t":{"1366":{"position":[[24,66]]}}}],["w][b,c,h,w]的特征图通过池化挤压宽高维度，得到[b,c,1,1][b",{"_index":2989,"t":{"1372":{"position":[[56,40]]}}}],["w][b,c,h,w]经过空间注意力机制算法得到[b,1,h,w][b",{"_index":2973,"t":{"1362":{"position":[[153,36]]}}}],["w][b,c,h,w]经过通道注意力机制算法得到[b,c,1,1][b",{"_index":2971,"t":{"1362":{"position":[[30,36]]}}}],["w_2\\\\1&d(u,v",{"_index":1404,"t":{"930":{"position":[[525,14]]}}}],["w_2\\end{cases}\\tag{24}h(u,v)=⎩⎨⎧​101​d(u,v)<w1​w1​⩽d(u,v)≤w2​d(u,v)>w2​​(24",{"_index":1405,"t":{"930":{"position":[[540,76]]}}}],["w_code",{"_index":1853,"t":{"1036":{"position":[[139,20]]},"1262":{"position":[[139,20]]}}}],["w_encod",{"_index":1856,"t":{"1036":{"position":[[288,9]]},"1262":{"position":[[288,9]]}}}],["w_key",{"_index":1914,"t":{"1055":{"position":[[773,5],[1112,5],[3357,5],[3676,5]]}}}],["w_queri",{"_index":1916,"t":{"1055":{"position":[[861,7],[1137,7],[3445,7],[3701,7]]}}}],["w_t",{"_index":2107,"t":{"1100":{"position":[[496,4]]}}}],["w_valu",{"_index":1918,"t":{"1055":{"position":[[951,7],[1163,7],[3535,7],[3727,7]]}}}],["wall",{"_index":1262,"t":{"895":{"position":[[1266,4],[1315,4]]}}}],["warn",{"_index":1217,"t":{"895":{"position":[[321,8]]}}}],["waveform",{"_index":2687,"t":{"1211":{"position":[[107,9]]}}}],["wci​×h×w",{"_index":2298,"t":{"1145":{"position":[[29,8]]}}}],["weight",{"_index":850,"t":{"868":{"position":[[440,7]]},"1055":{"position":[[468,7],[736,7],[1963,8],[3320,7],[4122,8]]},"1175":{"position":[[336,7]]},"1290":{"position":[[420,7]]}}}],["weighted_valu",{"_index":1944,"t":{"1055":{"position":[[2056,15],[2149,16],[4215,15],[4308,16]]}}}],["weighted_values.sum(dim=0",{"_index":1949,"t":{"1055":{"position":[[2395,26],[4353,26]]}}}],["welcom",{"_index":2743,"t":{"1290":{"position":[[101,8]]}}}],["well",{"_index":1955,"t":{"1055":{"position":[[2531,4]]}}}],["werror",{"_index":1224,"t":{"895":{"position":[[507,6]]}}}],["while(!q.empti",{"_index":806,"t":{"866":{"position":[[1903,18]]},"871":{"position":[[1133,17]]},"873":{"position":[[835,17]]}}}],["while(1",{"_index":1065,"t":{"879":{"position":[[150,8],[1362,8]]}}}],["while(cin",{"_index":548,"t":{"843":{"position":[[1537,9]]}}}],["while(g.s",{"_index":729,"t":{"864":{"position":[[825,14],[1273,14]]}}}],["while(in[p1]!=pre[rt",{"_index":1040,"t":{"875":{"position":[[398,22]]}}}],["while(it!=g.vertexs.end",{"_index":785,"t":{"866":{"position":[[1226,27]]}}}],["while(m",{"_index":780,"t":{"866":{"position":[[1128,7]]}}}],["while(mid[p1]!=rt",{"_index":973,"t":{"871":{"position":[[431,18],[774,18]]},"873":{"position":[[315,18],[544,18]]}}}],["while(~scanf(\"%d\",&n",{"_index":1010,"t":{"871":{"position":[[1720,22]]},"873":{"position":[[1385,22]]}}}],["win='win_id",{"_index":2726,"t":{"1278":{"position":[[137,13],[247,13],[322,13]]},"1280":{"position":[[68,13],[213,13]]}}}],["window",{"_index":2882,"t":{"1324":{"position":[[0,20]]}}}],["winograd",{"_index":2058,"t":{"1088":{"position":[[812,8]]}}}],["wise",{"_index":1564,"t":{"988":{"position":[[1087,10]]},"1029":{"position":[[1068,4]]},"1031":{"position":[[1129,4],[1252,15]]},"1039":{"position":[[184,4]]},"1222":{"position":[[1087,10]]},"1255":{"position":[[1069,4]]},"1257":{"position":[[1129,4],[1253,15]]},"1267":{"position":[[426,4],[584,4]]},"1349":{"position":[[73,7]]}}}],["wise）以及逐点（point",{"_index":2928,"t":{"1349":{"position":[[57,15]]}}}],["wl",{"_index":2998,"t":{"1390":{"position":[[321,65]]}}}],["wl/wait",{"_index":2997,"t":{"1390":{"position":[[305,10]]}}}],["wnli（winograd",{"_index":2056,"t":{"1088":{"position":[[781,13]]}}}],["word",{"_index":1567,"t":{"990":{"position":[[0,9]]},"1090":{"position":[[186,4]]},"1224":{"position":[[0,9]]}}}],["work",{"_index":1232,"t":{"895":{"position":[[681,5]]},"1282":{"position":[[102,14]]}}}],["work.109",{"_index":1252,"t":{"895":{"position":[[1040,9]]}}}],["workshop",{"_index":2561,"t":{"1188":{"position":[[480,10]]}}}],["worship",{"_index":1272,"t":{"897":{"position":[[78,7]]}}}],["write",{"_index":1184,"t":{"881":{"position":[[869,5]]},"895":{"position":[[1925,5]]}}}],["wt+1=(1−ηλ)wt+η∂l(wt,bt)∂wt(4)w_{t+1}=(1",{"_index":2102,"t":{"1100":{"position":[[394,40]]}}}],["www和偏置项bbb",{"_index":2284,"t":{"1138":{"position":[[458,39]]}}}],["w∥12​≤θ(1",{"_index":2088,"t":{"1098":{"position":[[142,11]]}}}],["w∥12≤θ(1)min",{"_index":2080,"t":{"1098":{"position":[[22,13]]}}}],["w为bbox的宽高，c为该bbox是否存在object",{"_index":2947,"t":{"1354":{"position":[[338,30]]}}}],["w归约为文法开始符号",{"_index":220,"t":{"798":{"position":[[103,31]]}}}],["x",{"_index":43,"t":{"711":{"position":[[100,1],[124,2],[147,1],[155,1]]},"713":{"position":[[91,2],[114,1],[131,1]]},"736":{"position":[[118,3]]},"742":{"position":[[241,12],[274,10]]},"821":{"position":[[41,3],[69,5],[84,3]]},"831":{"position":[[4,2]]},"843":{"position":[[525,8],[1534,2],[1550,2]]},"845":{"position":[[290,8],[317,8]]},"902":{"position":[[308,1],[414,1]]},"1119":{"position":[[43,3],[305,1]]},"1121":{"position":[[42,1],[50,1],[54,1],[178,1],[190,1],[294,1]]},"1150":{"position":[[382,3],[873,3],[1092,2],[1135,1],[1157,1],[1162,2],[1171,1],[1917,3],[1986,2]]},"1294":{"position":[[291,1],[343,1],[386,4],[504,4]]},"1298":{"position":[[142,5],[278,4],[506,5]]}}}],["x)%mod",{"_index":281,"t":{"821":{"position":[[115,9]]}}}],["x)=11+e−x(1)\\sigma(x",{"_index":2142,"t":{"1119":{"position":[[0,23]]}}}],["x)>(i",{"_index":278,"t":{"821":{"position":[[28,10]]}}}],["x,y)(x",{"_index":1287,"t":{"900":{"position":[[0,41],[90,15]]}}}],["x.reshap",{"_index":2330,"t":{"1150":{"position":[[393,10]]}}}],["x.shape[0",{"_index":2410,"t":{"1150":{"position":[[2099,11]]}}}],["x.to(devic",{"_index":2362,"t":{"1150":{"position":[[1139,13],[1175,12],[1993,13]]}}}],["x0\\mathbf{x}_0x0​和ϵ\\epsilonϵ根据权重αˉ1,αˉ2,...αˉt\\bar{\\alpha}_1,\\bar{\\alpha}_2,...\\bar{\\alpha}_tαˉ1​,αˉ2​,...αˉt​做weight",{"_index":1663,"t":{"1008":{"position":[[445,122]]}}}],["x1",{"_index":2767,"t":{"1294":{"position":[[381,2],[611,2]]}}}],["x1[0",{"_index":2793,"t":{"1294":{"position":[[1195,21],[1232,20]]}}}],["x1[0,:,:]+x2[0,:,:](1)x1[0",{"_index":2778,"t":{"1294":{"position":[[846,27]]}}}],["x1[1,:,:]+x2[1,:,:](2)x1[1",{"_index":2781,"t":{"1294":{"position":[[924,27]]}}}],["x1[2,:,:]+x2[2,:,:](3)x1[2",{"_index":2784,"t":{"1294":{"position":[[1002,27]]}}}],["x1与x2在第0维度上维度相同，所以python",{"_index":2777,"t":{"1294":{"position":[[798,47]]}}}],["x2",{"_index":2770,"t":{"1294":{"position":[[499,2],[616,2]]}}}],["x2[0",{"_index":2779,"t":{"1294":{"position":[[882,5],[1220,8]]}}}],["x2[0,0",{"_index":2794,"t":{"1294":{"position":[[1256,15]]}}}],["x2[1",{"_index":2782,"t":{"1294":{"position":[[960,5]]}}}],["x2[2",{"_index":2785,"t":{"1294":{"position":[[1038,5]]}}}],["x86",{"_index":1193,"t":{"885":{"position":[[89,12]]},"895":{"position":[[835,5]]}}}],["x86/elf",{"_index":1240,"t":{"895":{"position":[[854,7]]}}}],["x86_64与i386",{"_index":1225,"t":{"895":{"position":[[561,16]]}}}],["x=σ∗z+μx=\\sigma",{"_index":2674,"t":{"1205":{"position":[[106,15]]}}}],["xavier",{"_index":1908,"t":{"1055":{"position":[[580,6]]}}}],["xavier和kaim",{"_index":1912,"t":{"1055":{"position":[[664,58]]}}}],["xi",{"_index":2287,"t":{"1138":{"position":[[621,2]]}}}],["xlim=[1",{"_index":2389,"t":{"1150":{"position":[[1714,8]]}}}],["xor异或等非线性问题，导致第一次ai",{"_index":2292,"t":{"1140":{"position":[[43,35]]}}}],["xt\\mathbf{x}_txt​代表上一步骤中输出的降噪后的图像，xt−1\\mathbf{x}_{t",{"_index":1678,"t":{"1010":{"position":[[484,54]]}}}],["xt−1=1αt(xt−1−αt1−αˉtϵθ(xt,t))+σtz(2)\\mathbf{x}_{t",{"_index":1673,"t":{"1010":{"position":[[203,50]]}}}],["xxx",{"_index":1810,"t":{"1033":{"position":[[59,3]]},"1259":{"position":[[59,3]]}}}],["xxx.plasmoid",{"_index":2847,"t":{"1305":{"position":[[349,12]]}}}],["xxx的可能取值为x=x1,x2,...,xnx=x_1,x_2,...,x_nx=x1​,x2​,...,xn​，而取值事件xix_ixi​发生的概率为pip_ipi",{"_index":2186,"t":{"1126":{"position":[[152,106]]}}}],["x为100时，sigmoid(x)就接近于0",{"_index":2157,"t":{"1119":{"position":[[354,24]]}}}],["x和i",{"_index":1291,"t":{"900":{"position":[[124,26]]}}}],["x方向和i",{"_index":1343,"t":{"913":{"position":[[17,24]]}}}],["x，输出所有x",{"_index":143,"t":{"742":{"position":[[174,13]]}}}],["y",{"_index":45,"t":{"711":{"position":[[111,1],[134,1],[138,1],[175,2]]},"713":{"position":[[101,1],[105,1]]},"821":{"position":[[47,4],[77,4],[90,4]]},"902":{"position":[[323,1],[429,1]]},"1124":{"position":[[172,1]]},"1150":{"position":[[1095,1],[1188,1],[1237,3],[1317,3],[1361,2],[1921,2],[1989,1],[2051,2],[2127,3]]},"1298":{"position":[[148,4],[292,4],[512,4]]},"1354":{"position":[[302,2]]}}}],["y)(x,i",{"_index":1290,"t":{"900":{"position":[[106,17]]}}}],["y)(x,y)方向上以及亮度函数f(x,y)f(x",{"_index":1288,"t":{"900":{"position":[[42,26]]}}}],["y)(x,y)，点qqq的坐标为(s,t)(s,t)(s,t",{"_index":1295,"t":{"902":{"position":[[138,32]]}}}],["y)f(x,i",{"_index":1289,"t":{"900":{"position":[[69,16]]}}}],["y*z",{"_index":2281,"t":{"1138":{"position":[[401,4]]}}}],["y.numel",{"_index":2365,"t":{"1150":{"position":[[1241,10],[2131,10]]}}}],["y.to(devic",{"_index":2363,"t":{"1150":{"position":[[1192,12],[2007,12]]}}}],["y2",{"_index":2738,"t":{"1280":{"position":[[192,5]]}}}],["y_hat",{"_index":2404,"t":{"1150":{"position":[[2020,5]]}}}],["yay",{"_index":1212,"t":{"893":{"position":[[87,3]]},"1326":{"position":[[28,3]]}}}],["ye",{"_index":108,"t":{"728":{"position":[[282,6]]}}}],["yi",{"_index":2285,"t":{"1138":{"position":[[590,2],[616,2],[636,2]]}}}],["yi,j=∑a,bva,b∗xi+a,j+b=∑a=−δδ∑b=−δδva,b∗xia,j+b(4)y_{i,j}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b}}=\\sum_{a",{"_index":2443,"t":{"1159":{"position":[[32,98]]}}}],["yi,j=∑a,bvi,j,a,b∗xi+a,j+b=∑a,bva,b∗xi+a,j+b(3)y_{i,j}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b}}=\\sum_{a,b}{v_{a,b}*x_{i+a,j+b",{"_index":2440,"t":{"1157":{"position":[[513,122]]}}}],["yi,j=∑h,wwi,j,h,w∗xh,w(1)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w",{"_index":2434,"t":{"1157":{"position":[[77,64]]}}}],["yi,j=∑h,wwi,j,h,w∗xh,w=∑a,bvi,j,a,b∗xi+a,j+b(2)y_{i,j}=\\sum_{h,w}{w_{i,j,h,w}*x_{h,w}}=\\sum_{a,b}{v_{i,j,a,b}*x_{i+a,j+b",{"_index":2437,"t":{"1157":{"position":[[241,122]]}}}],["yijun",{"_index":2565,"t":{"1188":{"position":[[516,5]]}}}],["yiy_{i}yi",{"_index":2024,"t":{"1086":{"position":[[383,20]]}}}],["yolov1",{"_index":2933,"t":{"1354":{"position":[[43,14],[58,14],[523,25]]}}}],["yolov2引入了anchor机制代替bbox，将图像划分为13×1313",{"_index":2960,"t":{"1356":{"position":[[30,37]]}}}],["yolov5使用cspnet实现特征融合，csp",{"_index":2966,"t":{"1358":{"position":[[9,52]]}}}],["yolo损失函数分为分类损失以及回归损失，可以在分类损失中引入foc",{"_index":2985,"t":{"1370":{"position":[[50,36]]}}}],["yong",{"_index":2570,"t":{"1188":{"position":[[554,4]]}}}],["yyi",{"_index":1812,"t":{"1033":{"position":[[96,71]]},"1259":{"position":[[96,71]]}}}],["yyy是样本的真实标签，zzz",{"_index":2283,"t":{"1138":{"position":[[435,22]]}}}],["y−f(x)∥2=∑[y−f(x)]22(6)\\vert",{"_index":2172,"t":{"1124":{"position":[[142,29]]}}}],["y为bbox左上角坐标，h",{"_index":2946,"t":{"1354":{"position":[[323,14]]}}}],["y轴数据、x轴数据，win参数是窗口的唯一标识，opt可选字典中可以给出窗口的title和legend",{"_index":2724,"t":{"1278":{"position":[[49,66]]}}}],["z",{"_index":1760,"t":{"1029":{"position":[[179,1],[243,1],[254,1],[272,3],[276,1],[323,3],[349,1],[428,1],[758,1],[794,1],[831,1],[877,1]]},"1205":{"position":[[124,1]]},"1255":{"position":[[179,1],[243,1],[254,1],[272,3],[276,1],[323,3],[349,1],[428,1],[759,1],[795,1],[832,1],[878,1]]},"1298":{"position":[[153,4],[306,4],[517,4]]}}}],["z(k)z(k)z(k",{"_index":1351,"t":{"920":{"position":[[396,33]]}}}],["z=w∗x+bz=w*x+bz=w∗x+b",{"_index":2278,"t":{"1138":{"position":[[217,60]]}}}],["zero",{"_index":1683,"t":{"1012":{"position":[[31,4]]},"1188":{"position":[[820,4]]},"1238":{"position":[[31,4]]}}}],["zhang",{"_index":2547,"t":{"1188":{"position":[[229,6],[243,6],[595,6]]}}}],["zhou等人首先在图像分类任务中采用上下文优化，在词嵌入空间中对具有连续向量的上下文词进行建模。随后prompt",{"_index":2598,"t":{"1190":{"position":[[185,56]]}}}],["zi",{"_index":2286,"t":{"1138":{"position":[[595,2]]}}}],["zip",{"_index":2508,"t":{"1181":{"position":[[993,5],[999,39]]},"1298":{"position":[[0,68],[83,8],[160,15],[522,36]]}}}],["zip(*zipped_list",{"_index":2804,"t":{"1298":{"position":[[406,18]]}}}],["zip(a",{"_index":2510,"t":{"1181":{"position":[[1099,6],[1293,6]]}}}],["zip(list1",{"_index":2799,"t":{"1298":{"position":[[191,10]]}}}],["zipped_list",{"_index":2798,"t":{"1298":{"position":[[176,12],[239,13]]}}}],["zip将list1、list2和list3",{"_index":2802,"t":{"1298":{"position":[[311,42]]}}}],["zizhao",{"_index":2548,"t":{"1188":{"position":[[236,6]]}}}],["zsh的配置文件：~/.zshrc",{"_index":2860,"t":{"1311":{"position":[[37,17]]}}}],["zzz带入阈值函数，如符号函数sign(z)sign(z)sign(z",{"_index":2279,"t":{"1138":{"position":[[278,56]]}}}],["z空间与w",{"_index":1751,"t":{"1029":{"position":[[0,8]]},"1255":{"position":[[0,8]]}}}],["z空间到w",{"_index":1752,"t":{"1029":{"position":[[11,10]]},"1255":{"position":[[11,10]]}}}]],"pipeline":["stemmer"]}}]