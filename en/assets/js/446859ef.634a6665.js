"use strict";(self.webpackChunknpy_notebook=self.webpackChunknpy_notebook||[]).push([[1459],{3905:(t,n,e)=>{e.d(n,{Zo:()=>u,kt:()=>g});var a=e(7294);function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,a)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function p(t,n){if(null==t)return{};var e,a,r=function(t,n){if(null==t)return{};var e,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)e=l[a],n.indexOf(e)>=0||(r[e]=t[e]);return r}(t,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)e=l[a],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(r[e]=t[e])}return r}var d=a.createContext({}),s=function(t){var n=a.useContext(d),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},u=function(t){var n=s(t.components);return a.createElement(d.Provider,{value:n},t.children)},m="mdxType",o={inlineCode:"code",wrapper:function(t){var n=t.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(t,n){var e=t.components,r=t.mdxType,l=t.originalType,d=t.parentName,u=p(t,["components","mdxType","originalType","parentName"]),m=s(e),k=r,g=m["".concat(d,".").concat(k)]||m[k]||o[k]||l;return e?a.createElement(g,i(i({ref:n},u),{},{components:e})):a.createElement(g,i({ref:n},u))}));function g(t,n){var e=arguments,r=n&&n.mdxType;if("string"==typeof t||r){var l=e.length,i=new Array(l);i[0]=k;var p={};for(var d in n)hasOwnProperty.call(n,d)&&(p[d]=n[d]);p.originalType=t,p[m]="string"==typeof t?t:r,i[1]=p;for(var s=2;s<l;s++)i[s]=e[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,e)}k.displayName="MDXCreateElement"},8739:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>o,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var a=e(7462),r=(e(7294),e(3905));const l={},i="\u673a\u8bd5\u6280\u5de7\u4e0eSTL",p={unversionedId:"Algorithms/\u673a\u8bd5\u6280\u5de7\u4e0eSTL",id:"Algorithms/\u673a\u8bd5\u6280\u5de7\u4e0eSTL",title:"\u673a\u8bd5\u6280\u5de7\u4e0eSTL",description:"\u8f6c\u8f7d\u81eaSonder\u7684\u7b14\u8bb0\u672c",source:"@site/docs/Algorithms/3-\u673a\u8bd5\u6280\u5de7\u4e0eSTL.md",sourceDirName:"Algorithms",slug:"/Algorithms/\u673a\u8bd5\u6280\u5de7\u4e0eSTL",permalink:"/en/docs/Algorithms/\u673a\u8bd5\u6280\u5de7\u4e0eSTL",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"algorithms",previous:{title:"STL\u6a21\u677f",permalink:"/en/docs/Algorithms/STL\u6a21\u677f"},next:{title:"\u4e00\u7ef4\u524d\u7f00\u548c\uff08\u5237\u51fa\u4e00\u9053\u5899\uff09",permalink:"/en/docs/Algorithms/\u9898\u89e3/\u4e00\u7ef4\u524d\u7f00\u548c\uff08\u5237\u51fa\u4e00\u9053\u5899\uff09"}},d={},s=[{value:"vs2018 \u5feb\u6377\u952e",id:"vs2018-\u5feb\u6377\u952e",level:2},{value:"\u5934\u6587\u4ef6",id:"\u5934\u6587\u4ef6",level:2},{value:"\u6807\u51c6c\u5e93",id:"\u6807\u51c6c\u5e93",level:3},{value:"c++ STL",id:"c-stl",level:3},{value:"\u5e38\u7528\u5934",id:"\u5e38\u7528\u5934",level:3},{value:"\u5e38\u7528\u5b8f\u5b9a\u4e49",id:"\u5e38\u7528\u5b8f\u5b9a\u4e49",level:2},{value:"\u7ed3\u6784\u4f53",id:"\u7ed3\u6784\u4f53",level:2},{value:"\u5b9a\u4e49",id:"\u5b9a\u4e49",level:3},{value:"\u521d\u59cb\u5316",id:"\u521d\u59cb\u5316",level:3},{value:"\u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c",id:"\u65b9\u6cd5\u4e00\u5b9a\u4e49\u65f6\u8d4b\u503c",level:4},{value:"\u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c",id:"\u65b9\u6cd5\u4e8c\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c",level:4},{value:"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09",id:"\u65b9\u6cd5\u4e09\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503cc\u98ce\u683c",level:4},{value:"\u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570",id:"\u65b9\u6cd5\u56db\u6784\u9020\u51fd\u6570",level:4},{value:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d",level:3},{value:"c++new\u7684\u4f7f\u7528",id:"cnew\u7684\u4f7f\u7528",level:2},{value:"\u5e38\u89c4",id:"\u5e38\u89c4",level:3},{value:"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4",id:"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4",level:3},{value:"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4",id:"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4",level:3},{value:"\u5e38\u7528STL",id:"\u5e38\u7528stl",level:2},{value:"\u7b80\u8ff0",id:"\u7b80\u8ff0",level:3},{value:"STL\u5e95\u5c42\u8bf4\u660e",id:"stl\u5e95\u5c42\u8bf4\u660e",level:4},{value:"CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09",id:"ccf-\u7f16\u8bd1\u51fa\u9519\u539f\u56e0-\u4e0d\u5141\u8bb8cstl\u5bb9\u5668\u5d4c\u5957\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f",level:4},{value:"algorithm",id:"algorithm",level:3},{value:"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c",id:"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c",level:4},{value:"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c",id:"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c",level:4},{value:"\u5212\u5206\u64cd\u4f5c",id:"\u5212\u5206\u64cd\u4f5c",level:4},{value:"\u6392\u5e8f\u64cd\u4f5c",id:"\u6392\u5e8f\u64cd\u4f5c",level:4},{value:"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c",id:"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c",level:4},{value:"\u96c6\u5408\u64cd\u4f5c",id:"\u96c6\u5408\u64cd\u4f5c",level:4},{value:"\u5806\u64cd\u4f5c",id:"\u5806\u64cd\u4f5c",level:4},{value:"\u6700\u5927/\u6700\u5c0f\u64cd\u4f5c",id:"\u6700\u5927\u6700\u5c0f\u64cd\u4f5c",level:4},{value:"vector",id:"vector",level:3},{value:"list",id:"list",level:3},{value:"string",id:"string",level:3},{value:"pair",id:"pair",level:3},{value:"map",id:"map",level:3},{value:"stack",id:"stack",level:3},{value:"queue",id:"queue",level:3},{value:"set",id:"set",level:3},{value:"multiset",id:"multiset",level:3},{value:"bitset",id:"bitset",level:3},{value:"\u56fe\u6a21\u677f",id:"\u56fe\u6a21\u677f",level:2},{value:"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f",id:"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f",level:3},{value:"\u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898)",id:"\u5e26\u51fa\u5165\u5ea6\u7684-2019\u63a8\u514d\u8bd5\u9898",level:3},{value:"\u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868",id:"\u56fe\u7b97\u6cd5\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868",level:3},{value:"\u6811\u6a21\u677f",id:"\u6811\u6a21\u677f",level:2},{value:"\u6ce8\u91ca\u7248",id:"\u6ce8\u91ca\u7248",level:3},{value:"\u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281~N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09",id:"\u7b80\u5316\u7248val-as-index\u82e5\u6570\u636e\u4e0d\u57281n\u5185\u5219\u53ef\u80fd\u8d8a\u754c",level:3},{value:"\u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09",id:"\u7b80\u5316\u7248val-not-as-index\u53ef\u4ee5\u5b58\u4efb\u610f\u7684-val",level:3}],u={toc:s},m="wrapper";function o(t){let{components:n,...e}=t;return(0,r.kt)(m,(0,a.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"\u673a\u8bd5\u6280\u5de7\u4e0estl"},"\u673a\u8bd5\u6280\u5de7\u4e0eSTL"),(0,r.kt)("admonition",{type:"important"},(0,r.kt)("p",{parentName:"admonition"},"\u8f6c\u8f7d\u81ea",(0,r.kt)("a",{parentName:"p",href:"https://space.keter.top/"},"Sonder\u7684\u7b14\u8bb0\u672c"))),(0,r.kt)("p",null,"[TOC]"),(0,r.kt)("h2",{id:"vs2018-\u5feb\u6377\u952e"},"vs2018 \u5feb\u6377\u952e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CTRL + J                  \u5217\u51fa\u6210\u5458 \nCtrl+E,D                  \u683c\u5f0f\u5316\u5168\u90e8\u4ee3\u7801 \nCtrl+K,F                  \u683c\u5f0f\u5316\u9009\u4e2d\u7684\u4ee3\u7801 \nCTRL + SHIFT + E          \u663e\u793a\u8d44\u6e90\u89c6\u56fe \nF12                       \u8f6c\u5230\u5b9a\u4e49 \nCTRL + F12                \u8f6c\u5230\u58f0\u660e \nCTRL + ALT + J            \u5bf9\u8c61\u6d4f\u89c8 \nCTRL + ALT + F1           \u5e2e\u52a9\u76ee\u5f55 \nCTRL + F1                 \u52a8\u6001\u5e2e\u52a9 \nCTRL + K, CTRL + C        \u6ce8\u91ca\u9009\u62e9\u7684\u4ee3\u7801 \nCTRL + K, CTRL + U        \u53d6\u6d88\u5bf9\u9009\u62e9\u4ee3\u7801\u7684\u6ce8\u91ca \nCTRL + U                  \u8f6c\u5c0f\u5199 \nCTRL + SHIFT + U          \u8f6c\u5927\u5199 \nF5                        \u8fd0\u884c\u8c03\u8bd5 \nCTRL + F5                 \u8fd0\u884c\u4e0d\u8c03\u8bd5 \nF10                       \u8de8\u8fc7\u7a0b\u5e8f\u6267\u884c \nF11                       \u5355\u6b65\u9010\u53e5\u6267\u884c \n")),(0,r.kt)("h2",{id:"\u5934\u6587\u4ef6"},"\u5934\u6587\u4ef6"),(0,r.kt)("h3",{id:"\u6807\u51c6c\u5e93"},"\u6807\u51c6c\u5e93"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"assert.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u65ad\u8a00\u76f8\u5173"),(0,r.kt)("td",{parentName:"tr",align:null},"ctype.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b57\u7b26\u7c7b\u578b\u5224\u65ad"),(0,r.kt)("td",{parentName:"tr",align:null},"errno.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6807\u51c6\u9519\u8bef\u673a\u5236")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"float.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6d6e\u70b9\u9650\u5236"),(0,r.kt)("td",{parentName:"tr",align:null},"limits.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6574\u5f62\u9650\u5236"),(0,r.kt)("td",{parentName:"tr",align:null},"locale.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u672c\u5730\u5316\u63a5\u53e3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"math.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6570\u5b66\u51fd\u6570"),(0,r.kt)("td",{parentName:"tr",align:null},"setjmp.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u975e\u672c\u5730\u8df3\u8f6c"),(0,r.kt)("td",{parentName:"tr",align:null},"signal.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4fe1\u53f7\u76f8\u5173")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stdarg.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53ef\u53d8\u53c2\u6570\u5904\u7406"),(0,r.kt)("td",{parentName:"tr",align:null},"stddef.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b8f\u548c\u7c7b\u578b\u5b9a\u4e49"),(0,r.kt)("td",{parentName:"tr",align:null},"stdio.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6807\u51c6I/O")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stdlib.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6807\u51c6\u5de5\u5177\u5e93"),(0,r.kt)("td",{parentName:"tr",align:null},"string.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b57\u7b26\u4e32\u548c\u5185\u5b58\u5904\u7406"),(0,r.kt)("td",{parentName:"tr",align:null},"time.h"),(0,r.kt)("td",{parentName:"tr",align:null},"\u65f6\u95f4\u76f8\u5173")))),(0,r.kt)("h3",{id:"c-stl"},"c++ STL"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"using namespace std;")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"),(0,r.kt)("th",{parentName:"tr",align:null},"\u5934\u6587\u4ef6"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"algorithm"),(0,r.kt)("td",{parentName:"tr",align:null},"\u901a\u7528\u7b97\u6cd5"),(0,r.kt)("td",{parentName:"tr",align:null},"deque"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53cc\u7aef\u961f\u5217"),(0,r.kt)("td",{parentName:"tr",align:null},"vector"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5411\u91cf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"iterator"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fed\u4ee3\u5668"),(0,r.kt)("td",{parentName:"tr",align:null},"stack"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6808"),(0,r.kt)("td",{parentName:"tr",align:null},"map"),(0,r.kt)("td",{parentName:"tr",align:null},"\u56fe\uff08\u952e\u503c\u5bf9\uff09")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5217\u8868"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b57\u7b26\u4e32"),(0,r.kt)("td",{parentName:"tr",align:null},"set"),(0,r.kt)("td",{parentName:"tr",align:null},"\u96c6\u5408")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"queue"),(0,r.kt)("td",{parentName:"tr",align:null},"\u961f\u5217"),(0,r.kt)("td",{parentName:"tr",align:null},"bitset"),(0,r.kt)("td",{parentName:"tr",align:null},"bit\u7c7b"),(0,r.kt)("td",{parentName:"tr",align:null},"numeric"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6570\u503c\u7b97\u6cd5")))),(0,r.kt)("h3",{id:"\u5e38\u7528\u5934"},"\u5e38\u7528\u5934"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"#include<cstdio>  \n#include<cstring>  \n#include<algorithm>  \n#include<iostream>  \n#include<string>  \n#include<vector>  \n#include<stack>  \n#include<bitset>  \n#include<cstdlib>  \n#include<cmath>  \n#include<set>  \n#include<list>  \n#include<deque>  \n#include<map>  \n#include<queue>\nusing namespace std;\n")),(0,r.kt)("h2",{id:"\u5e38\u7528\u5b8f\u5b9a\u4e49"},"\u5e38\u7528\u5b8f\u5b9a\u4e49"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"//\u6c42\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n#define  MAX(x,y) (((x)>(y)) ? (x) : (y))\n#define  MIN(x,y) (((x) < (y)) ? (x) : (y))\n\n//\u53d6\u4f59\n#define  mod(x) ((x)%MOD)\n\n//for\u5faa\u73af\n#define  FOR(i,f_start,f_end) for(int i=f_start;i<=f_end;++i) \n\n//\u8fd4\u56de\u6570\u7ec4\u5143\u7d20\u7684\u4e2a\u6570\n#define  ARR_SIZE(a)  (sizeof((a))/sizeof((a[0])))\n\n//\u521d\u59cb\u5316\u6570\u7ec4\n#define MT(x,i) memset(x,i,sizeof(x))\n#define MEM(a,b) memset((a),(b),sizeof(a))\n\n//\u7b26\u53f7\u91cd\u5b9a\u4e49\n#define LL long long\n#define ull unsigned long long\n#define pii pair<int,int>\n\n//\u5e38\u89c1\u5e38\u6570\n#define PI acos(-1.0)\n#define eps 1e-12\n#define INF 0x3f3f3f3f //int\u6700\u5927\u503c\nconst int INF_INT = 2147483647;\nconst ll INF_LL = 9223372036854775807LL;\nconst ull INF_ULL = 18446744073709551615Ull;\nconst ll P = 92540646808111039LL;\nconst ll maxn = 1e5 + 10, MOD = 1e9 + 7;\nconst int Move[4][2] = {-1,0,1,0,0,1,0,-1};\nconst int Move_[8][2] = {-1,-1,-1,0,-1,1,0,-1,0,1,1,-1,1,0,1,1};\n\n")),(0,r.kt)("h2",{id:"\u7ed3\u6784\u4f53"},"\u7ed3\u6784\u4f53"),(0,r.kt)("h3",{id:"\u5b9a\u4e49"},"\u5b9a\u4e49"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"struct InitMember\n{\n    int first\uff1b\n    double second\uff1b\n    char* third\uff1b\n    float four;\n};\n")),(0,r.kt)("h3",{id:"\u521d\u59cb\u5316"},"\u521d\u59cb\u5316"),(0,r.kt)("h4",{id:"\u65b9\u6cd5\u4e00\u5b9a\u4e49\u65f6\u8d4b\u503c"},"\u65b9\u6cd5\u4e00\uff1a\u5b9a\u4e49\u65f6\u8d4b\u503c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'struct InitMember test = {-10,3.141590\uff0c"method one"\uff0c0.25}\uff1b\n')),(0,r.kt)("h4",{id:"\u65b9\u6cd5\u4e8c\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c"},"\u65b9\u6cd5\u4e8c\uff1a\u5b9a\u4e49\u540e\u9010\u4e2a\u8d4b\u503c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'struct InitMember test\uff1b\n\ntest.first = -10;\ntest.second = 3.141590;\ntest.third = "method two";\ntest.four = 0.25;\n')),(0,r.kt)("h4",{id:"\u65b9\u6cd5\u4e09\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503cc\u98ce\u683c"},"\u65b9\u6cd5\u4e09\uff1a\u5b9a\u4e49\u65f6\u4e71\u5e8f\u8d4b\u503c\uff08C++\u98ce\u683c\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'struct InitMember test = {\n    second\uff1a3.141590,\n    third\uff1a"method three",\n    first\uff1a-10,\n    four\uff1a0.25\n};\n')),(0,r.kt)("h4",{id:"\u65b9\u6cd5\u56db\u6784\u9020\u51fd\u6570"},"\u65b9\u6cd5\u56db\uff1a\u6784\u9020\u51fd\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"//\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9\ntypedef struct Vertex {\n    int id,inDegree,outDegree;\n    vector<int> connectors;    //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7\n    Vertex() : id(-1),inDegree(0),outDegree(0) {}\n    Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {}\n} Vertex;\n \n//\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a\ntypedef struct Graph {\n    vector<Vertex> vertexs;   //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f\n    int nVertexs;             //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570\n    bool isDAG;               //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417\n \n    Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); }\n    Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); }\n    //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9\n    bool addEdge(int id1, int id2) {\n            ...\n            ...\n            ...\n        return true;\n    }\n} Graph;\n\nGraph g(8, false);\n")),(0,r.kt)("h3",{id:"\u8fd0\u7b97\u7b26\u91cd\u8f7d"},"\u8fd0\u7b97\u7b26\u91cd\u8f7d"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"typedef struct{int id;int h;} node;\nbool operator <(const node& a,const node & b){return (a.h)<(b.h);}\n")),(0,r.kt)("h2",{id:"cnew\u7684\u4f7f\u7528"},"c++new\u7684\u4f7f\u7528"),(0,r.kt)("h3",{id:"\u5e38\u89c4"},"\u5e38\u89c4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"int *x = new int;       //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740(\u5373\u6307\u9488)\nint *a = new int(100);  //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u6574\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u6574\u6570\u7684\u521d\u503c\u4e3a100\uff0c\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u8be5\u5b58\u50a8\u7a7a\u95f4\u7684\u5730\u5740\nchar *b = new char[10]; //\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5b57\u7b26\u6570\u7ec4(\u5305\u62ec10\u4e2a\u5143\u7d20)\u7684\u7a7a\u95f4\uff0c\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5730\u5740\nfloat *p=new float (3.14159);//\u5f00\u8f9f\u4e00\u4e2a\u5b58\u653e\u5355\u7cbe\u5ea6\u6570\u7684\u7a7a\u95f4\uff0c\u5e76\u6307\u5b9a\u8be5\u5b9e\u6570\u7684\u521d\u503c\u4e3a//3.14159\uff0c\u5c06\u8fd4\u56de\u7684\u8be5\u7a7a\u95f4\u7684\u5730\u5740\u8d4b\u7ed9\u6307\u9488\u53d8\u91cfp\n")),(0,r.kt)("h3",{id:"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},"\u52a8\u6001\u7533\u8bf7\u5217\u5927\u5c0f\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"//\u5217\u503c\u56fa\u5b9a\nconst int MAXCOL = 3;\ncin>>row;\n//\u7533\u8bf7\u4e00\u7ef4\u6570\u636e\u5e76\u5c06\u5176\u8f6c\u6210\u4e8c\u7ef4\u6570\u7ec4\u6307\u9488\nint *pp_arr = new int[nRow * MAXCOL];\nint (*p)[MAXCOL] = (int(*)[MAXCOL])pp_arr;\n//\u6b64\u65f6p[i][j]\u5c31\u53ef\u6b63\u5e38\u4f7f\u7528\n")),(0,r.kt)("h3",{id:"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"},"\u52a8\u6001\u7533\u8bf7\u5927\u5c0f\u4e0d\u56fa\u5b9a\u7684\u4e8c\u7ef4\u6570\u7ec4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"\ncin>>row>>col;\nint **p = new int*[row];\nfor (int i = 0; i < row; i ++)\n{\n    p[i] = new int[col];\n}\n")),(0,r.kt)("h2",{id:"\u5e38\u7528stl"},"\u5e38\u7528STL"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u53c2\u8003\uff1a")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://blog.csdn.net/f_zyj/article/details/51594851"},"https://blog.csdn.net/f_zyj/article/details/51594851"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("a",{parentName:"p",href:"https://download.csdn.net/download/f_zyj/9988653"},"https://download.csdn.net/download/f_zyj/9988653")),(0,r.kt)("h3",{id:"\u7b80\u8ff0"},"\u7b80\u8ff0"),(0,r.kt)("h4",{id:"stl\u5e95\u5c42\u8bf4\u660e"},"STL\u5e95\u5c42\u8bf4\u660e"),(0,r.kt)("p",null,"C++ STL \u7684\u5b9e\u73b0\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"1.vector      \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u6570\u7ec4 \uff0c\u652f\u6301\u5feb\u901f\u968f\u673a\u8bbf\u95ee\n\n2.list            \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u53cc\u5411\u94fe\u8868\uff0c\u652f\u6301\u5feb\u901f\u589e\u5220\n\n3.deque       \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u4e00\u4e2a\u4e2d\u592e\u63a7\u5236\u5668\u548c\u591a\u4e2a\u7f13\u51b2\u533a\uff0c\u8be6\u7ec6\u89c1STL\u6e90\u7801\u5256\u6790P146\uff0c\u652f\u6301\u9996\u5c3e\uff08\u4e2d\u95f4\u4e0d\u80fd\uff09\u5feb\u901f\u589e\u5220\uff0c\u4e5f\u652f\u6301\u968f\u673a\u8bbf\u95ee\ndeque\u662f\u4e00\u4e2a\u53cc\u7aef\u961f\u5217(double-ended queue)\uff0c\u4e5f\u662f\u5728\u5806\u4e2d\u4fdd\u5b58\u5185\u5bb9\u7684.\u5b83\u7684\u4fdd\u5b58\u5f62\u5f0f\u5982\u4e0b:\n[\u58061] --\x3e [\u58062] --\x3e[\u58063] --\x3e ...\n\u6bcf\u4e2a\u5806\u4fdd\u5b58\u597d\u51e0\u4e2a\u5143\u7d20,\u7136\u540e\u5806\u548c\u5806\u4e4b\u95f4\u6709\u6307\u9488\u6307\u5411,\u770b\u8d77\u6765\u50cf\u662flist\u548cvector\u7684\u7ed3\u5408\u54c1.\n\n4.stack        \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\n\n5.queue     \u5e95\u5c42\u4e00\u822c\u7528list\u6216deque\u5b9e\u73b0\uff0c\u5c01\u95ed\u5934\u90e8\u5373\u53ef\uff0c\u4e0d\u7528vector\u7684\u539f\u56e0\u5e94\u8be5\u662f\u5bb9\u91cf\u5927\u5c0f\u6709\u9650\u5236\uff0c\u6269\u5bb9\u8017\u65f6\n\n\uff08stack\u548cqueue\u5176\u5b9e\u662f\u9002\u914d\u5668,\u800c\u4e0d\u53eb\u5bb9\u5668\uff0c\u56e0\u4e3a\u662f\u5bf9\u5bb9\u5668\u7684\u518d\u5c01\u88c5\uff09\n\n6.priority_queue     \u7684\u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e00\u822c\u4e3avector\u4e3a\u5e95\u5c42\u5bb9\u5668\uff0c\u5806heap\u4e3a\u5904\u7406\u89c4\u5219\u6765\u7ba1\u7406\u5e95\u5c42\u5bb9\u5668\u5b9e\u73b0\n\n7.set                   \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d\n\n8.multiset         \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d \n\n9.map                \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u4e0d\u91cd\u590d\n\n10.multimap    \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3a\u7ea2\u9ed1\u6811\uff0c\u6709\u5e8f\uff0c\u53ef\u91cd\u590d\n\n11.hash_set     \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d\n\n12.hash_multiset \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d \n\n13.hash_map    \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u4e0d\u91cd\u590d\n\n14.hash_multimap \u5e95\u5c42\u6570\u636e\u7ed3\u6784\u4e3ahash\u8868\uff0c\u65e0\u5e8f\uff0c\u53ef\u91cd\u590d \n")),(0,r.kt)("h4",{id:"ccf-\u7f16\u8bd1\u51fa\u9519\u539f\u56e0-\u4e0d\u5141\u8bb8cstl\u5bb9\u5668\u5d4c\u5957\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f"},"CCF \u7f16\u8bd1\u51fa\u9519\u539f\u56e0\uff1a \u4e0d\u5141\u8bb8C++STL\u5bb9\u5668\u5d4c\u5957\uff08\u9700\u8981\u6ee1\u8db3\u76f8\u5e94\u7684\u683c\u5f0f\uff09"),(0,r.kt)("p",null,"\u5c31\u662f\u8981\u5728\u540e\u9762\u7684\u201c>\u201d\u4e4b\u95f4\uff0c\u5fc5\u987b\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\uff0c\u5982\u679c\u6709\u591a\u5c42\uff0c\u90a3\u6bcf\u5c42\u90fd\u5f97\u6709\u4e00\u4e2a\u7a7a\u683c\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"map<string,list<string> > user;\n")),(0,r.kt)("h3",{id:"algorithm"},"algorithm"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1algorithm")),(0,r.kt)("p",null,"\u51fd\u6570\u53c2\u6570\uff0c\u8fd4\u56de\u503c\u4ee5\u53ca\u5177\u4f53\u7684\u4f7f\u7528\u65b9\u6cd5\u8bf7\u81ea\u884c\u53bb\u5934\u6587\u4ef6\u627e\u5b9a\u4e49\uff01\uff01\uff01"),(0,r.kt)("h4",{id:"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},"\u4e0d\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"adjacent_find"),(0,r.kt)("td",{parentName:"tr",align:null},"\u67e5\u627e\u4e24\u4e2a\u76f8\u90bb\uff08Adjacent\uff09\u7684\u7b49\u4ef7\uff08Identical\uff09\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"all_ofC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u6240\u6709\u5143\u7d20\u90fd\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"any_ofC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u4e2a\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"count_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u7684\u4e2a\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"equal"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u662f\u5426\u76f8\u7b49")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find_end"),(0,r.kt)("td",{parentName:"tr",align:null},"\u67e5\u627e\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"A"),"\u4e2d\u4e0e\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"B"),"\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u6700\u540e\u51fa\u73b0\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find_first_of"),(0,r.kt)("td",{parentName:"tr",align:null},"\u67e5\u627e\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"A"),"\u4e2d\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"B"),"\u4e2d\u4efb\u4e00\u5143\u7d20\u7b49\u4ef7\u7684\u5143\u7d20\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"find_if_notC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7b2c\u4e00\u4e2a\u503c\u4e0d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"for_each"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5bf9\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u6307\u5b9a\u51fd\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"mismatch"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u4e24\u4e2a\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e0d\u7b49\u4ef7\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"none_ofC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u662f\u5426\u4e0d\u5b58\u5728\u5143\u7d20\u6ee1\u8db3\u7ed9\u5b9a\u7684\u6761\u4ef6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"search"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5728\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"A"),"\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0e\u8303\u56f4",(0,r.kt)("em",{parentName:"td"},"B"),"\u7b49\u4ef7\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"search_n"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5728\u7ed9\u5b9a\u8303\u56f4\u4e2d\u67e5\u627e\u7b2c\u4e00\u4e2a\u8fde\u7eed",(0,r.kt)("em",{parentName:"td"},"n"),"\u4e2a\u5143\u7d20\u90fd\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5b50\u8303\u56f4\u7684\u4f4d\u7f6e")))),(0,r.kt)("h4",{id:"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"},"\u4fee\u6539\u5185\u5bb9\u7684\u5e8f\u5217\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copy_backward"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copy_ifC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u62f7\u8d1d\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copy_nC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d n \u4e2a\u5143\u7d20\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fill"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fill_n"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u67d0\u4e2a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u8d4b\u503c\u4e3a\u7ed9\u5b9a\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generate"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u8303\u56f4\u7684\u5143\u7d20\u4e2d\uff0c\u7528\u4e8e\u6279\u91cf\u8d4b\u503c\u8303\u56f4\u4e2d\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generate_n"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u7ed3\u679c\u4fdd\u5b58\u5230\u6307\u5b9a\u4f4d\u7f6e\u5f00\u59cb\u7684 n \u4e2a\u5143\u7d20\u4e2d")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"iter_swap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ea4\u6362\u4e24\u4e2a\u8fed\u4ee3\u5668\uff08Iterator\uff09\u6307\u5411\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"moveC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"move_backwardC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u6309\u9006\u5e8f\u79fb\u52a8\u5230\u65b0\u7684\u4f4d\u7f6e\u5904")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"random_shuffle"),(0,r.kt)("td",{parentName:"tr",align:null},"\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"remove"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"remove_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"remove_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u5220\u9664")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"remove_copy_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u5220\u9664")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace_copy_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u4e00\u4e2a\u8303\u56f4\u7684\u5143\u7d20\uff0c\u5c06\u5176\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace_if"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u4e00\u4e2a\u8303\u56f4\u4e2d\u503c\u6ee1\u8db3\u7ed9\u5b9a\u6761\u4ef6\u7684\u5143\u7d20\u8d4b\u503c\u4e3a\u65b0\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reverse"),(0,r.kt)("td",{parentName:"tr",align:null},"\u53cd\u8f6c\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reverse_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u53cd\u8f6c\u6392\u5e8f\u7ed3\u679c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rotate"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5faa\u73af\u79fb\u52a8\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rotate_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5faa\u73af\u79fb\u52a8\u7ed3\u679c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"shuffleC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7528\u6307\u5b9a\u7684\u968f\u673a\u6570\u5f15\u64ce\u968f\u673a\u6253\u4e71\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7684\u4f4d\u7f6e")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"swap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ea4\u6362\u4e24\u4e2a\u5bf9\u8c61\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"swap_ranges"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ea4\u6362\u4e24\u4e2a\u8303\u56f4\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"transform"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5bf9\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u8c03\u7528\u67d0\u4e2a\u51fd\u6570\u4ee5\u6539\u53d8\u5143\u7d20\u7684\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5220\u9664\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u6240\u6709\u8fde\u7eed\u91cd\u590d\u5143\u7d20\uff0c\u4ec5\u4ec5\u7559\u4e0b\u6bcf\u7ec4\u7b49\u503c\u5143\u7d20\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u552f\u4e00\u5316\uff08\u53c2\u8003\u4e0a\u8ff0\u7684 unique\uff09\u7ed3\u679c")))),(0,r.kt)("h4",{id:"\u5212\u5206\u64cd\u4f5c"},"\u5212\u5206\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_partitionedC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u67d0\u4e2a\u8303\u56f4\u662f\u5426\u6309\u6307\u5b9a\u8c13\u8bcd\uff08Predicate\uff09\u5212\u5206\u8fc7")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partition"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u67d0\u4e2a\u8303\u56f4\u5212\u5206\u4e3a\u4e24\u7ec4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partition_copyC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u6307\u5b9a\u8303\u56f4\u7684\u5212\u5206\u7ed3\u679c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partition_pointC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u88ab\u5212\u5206\u8303\u56f4\u7684\u5212\u5206\u70b9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stable_partition"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a\u5212\u5206\uff0c\u4e24\u7ec4\u5143\u7d20\u5404\u7ef4\u6301\u76f8\u5bf9\u987a\u5e8f")))),(0,r.kt)("h4",{id:"\u6392\u5e8f\u64cd\u4f5c"},"\u6392\u5e8f\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_sortedC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u6307\u5b9a\u8303\u56f4\u662f\u5426\u5df2\u6392\u5e8f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_sorted_untilC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6700\u5927\u5df2\u6392\u5e8f\u5b50\u8303\u56f4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"nth_element \u90e8\u4efd\u6392\u5e8f\u6307\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u8303\u56f4\u6309\u7ed9\u5b9a\u4f4d\u7f6e\u5904\u7684\u5143\u7d20\u5212\u5206"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partial_sort"),(0,r.kt)("td",{parentName:"tr",align:null},"\u90e8\u4efd\u6392\u5e8f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"partial_sort_copy"),(0,r.kt)("td",{parentName:"tr",align:null},"\u62f7\u8d1d\u90e8\u5206\u6392\u5e8f\u7684\u7ed3\u679c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sort"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6392\u5e8f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"stable_sort"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7a33\u5b9a\u6392\u5e8f")))),(0,r.kt)("h4",{id:"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c"},"\u4e8c\u5206\u6cd5\u67e5\u627e\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"binary_search"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5224\u65ad\u8303\u56f4\u4e2d\u662f\u5426\u5b58\u5728\u503c\u7b49\u4ef7\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"equal_range"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u8303\u56f4\u4e2d\u503c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7ec4\u6210\u7684\u5b50\u8303\u56f4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lower_bound"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u6216\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"upper_bound"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u6307\u5411\u8303\u56f4\u4e2d\u7b2c\u4e00\u4e2a\u503c\u5927\u4e8e\u7ed9\u5b9a\u503c\u7684\u5143\u7d20\u7684\u8fed\u4ee3\u5668")))),(0,r.kt)("h4",{id:"\u96c6\u5408\u64cd\u4f5c"},"\u96c6\u5408\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"includes"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5224\u65ad\u4e00\u4e2a\u96c6\u5408\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u96c6\u5408\u7684\u5b50\u96c6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"inplace_merge"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c31\u7eea\u5408\u5e76")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"merge   \u5408\u5e76"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"set_difference"),(0,r.kt)("td",{parentName:"tr",align:null},"\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5dee\u96c6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"set_intersection"),(0,r.kt)("td",{parentName:"tr",align:null},"\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"set_symmetric_difference"),(0,r.kt)("td",{parentName:"tr",align:null},"\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5bf9\u79f0\u5dee")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"set_union"),(0,r.kt)("td",{parentName:"tr",align:null},"\u83b7\u5f97\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6")))),(0,r.kt)("h4",{id:"\u5806\u64cd\u4f5c"},"\u5806\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_heap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u662f\u5426\u6ee1\u8db3\u5806\u7ed3\u6784")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_heap_untilC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u68c0\u6d4b\u7ed9\u5b9a\u8303\u56f4\u4e2d\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u6700\u5927\u5b50\u8303\u56f4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"make_heap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u7528\u7ed9\u5b9a\u8303\u56f4\u6784\u9020\u51fa\u4e00\u4e2a\u5806")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"pop_heap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ece\u4e00\u4e2a\u5806\u4e2d\u5220\u9664\u6700\u5927\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"push_heap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5411\u5806\u4e2d\u589e\u52a0\u4e00\u4e2a\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sort_heap"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u6ee1\u8db3\u5806\u7ed3\u6784\u7684\u8303\u56f4\u6392\u5e8f")))),(0,r.kt)("h4",{id:"\u6700\u5927\u6700\u5c0f\u64cd\u4f5c"},"\u6700\u5927/\u6700\u5c0f\u64cd\u4f5c"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u8bf4\u660e"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is_permutationC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5224\u65ad\u4e00\u4e2a\u5e8f\u5217\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u5e8f\u5217\u7684\u4e00\u79cd\u6392\u5e8f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"lexicographical_compare"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u7684\u5b57\u5178\u5e8f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max_element"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_element"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5c0f\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minmaxC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u4e24\u4e2a\u5143\u7d20\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"minmax_elementC++11"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u503c\u6700\u5927\u53ca\u6700\u5c0f\u7684\u5143\u7d20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"next_permutation"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0b\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"prev_permutation"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u7ed9\u5b9a\u8303\u56f4\u4e2d\u7684\u5143\u7d20\u7ec4\u6210\u7684\u4e0a\u4e00\u4e2a\u6309\u5b57\u5178\u5e8f\u7684\u6392\u5217")))),(0,r.kt)("h3",{id:"vector"},"vector"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1avector")),(0,r.kt)("p",null,"\u5728STL\u7684vector\u5934\u6587\u4ef6\u4e2d\u5b9a\u4e49\u4e86vector\uff08\u5411\u91cf\u5bb9\u5668\u6a21\u7248\u7c7b\uff09\uff0cvector\u5bb9\u5668\u4ee5\u8fde\u7eed\u6570\u7ec4\u7684\u65b9\u5f0f\u5b58\u50a8\u5143\u7d20\u5e8f\u5217\uff0c\u53ef\u4ee5\u5c06vector\u770b\u4f5c\u662f\u4ee5\u987a\u5e8f\u7ed3\u6784\u5b9e\u73b0\u7684\u7ebf\u6027\u8868\u3002\u5f53\u6211\u4eec\u5728\u7a0b\u5e8f\u4e2d\u9700\u8981\u4f7f\u7528\u52a8\u6001\u6570\u7ec4\u65f6\uff0cvector\u5c06\u4f1a\u662f\u7406\u60f3\u7684\u9009\u62e9\uff0cvector\u53ef\u4ee5\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u52a8\u6001\u5730\u589e\u957f\u5b58\u50a8\u7a7a\u95f4\u3002\nvector\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u5b58\u50a8\u5206\u914d\u5668\u7684\u7c7b\u578b\uff0c\u5176\u4e2d\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u53ef\u9009\u7684\uff0c\u5982\u679c\u4e0d\u7ed9\u51fa\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff0c\u5c06\u4f7f\u7528\u9ed8\u8ba4\u7684\u5206\u914d\u5668"),(0,r.kt)("p",null,"\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49vector\u5411\u91cf\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"\nvector<int> s;      \n//  \u5b9a\u4e49\u4e00\u4e2a\u7a7a\u7684vector\u5bf9\u8c61\uff0c\u5b58\u50a8\u7684\u662fint\u7c7b\u578b\u7684\u5143\u7d20\nvector<int> s(n);   \n//  \u5b9a\u4e49\u4e00\u4e2a\u542b\u6709n\u4e2aint\u5143\u7d20\u7684vector\u5bf9\u8c61\nvector<int> s(first, last); \n//  \u5b9a\u4e49\u4e00\u4e2avector\u5bf9\u8c61\uff0c\u5e76\u4ece\u7531\u8fed\u4ee3\u5668first\u548clast\u5b9a\u4e49\u7684\u5e8f\u5217[first, last)\u4e2d\u590d\u5236\u521d\u503c\n\n")),(0,r.kt)("p",null,"vector\u7684\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'\ns[i]                //  \u76f4\u63a5\u4ee5\u4e0b\u6807\u65b9\u5f0f\u8bbf\u95ee\u5bb9\u5668\u4e2d\u7684\u5143\u7d20\ns.front()           //  \u8fd4\u56de\u9996\u5143\u7d20\ns.back()            //  \u8fd4\u56de\u5c3e\u5143\u7d20\ns.push_back(x)      //  \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x\ns.size()            //  \u8fd4\u56de\u8868\u957f\ns.empty()           //  \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047\ns.pop_back()        //  \u5220\u9664\u8868\u5c3e\u5143\u7d20\ns.begin()           //  \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\ns.end()             //  \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\ns.insert(it, val)   //  \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val\ns.insert(it, n, val)//  \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val\ns.insert(it, first, last)   \n//  \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762\ns.erase(it)         //  \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20\ns.erase(first, last)//  \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\ns.reserve(n)        //  \u9884\u5206\u914d\u7f13\u51b2\u7a7a\u95f4\uff0c\u4f7f\u5b58\u50a8\u7a7a\u95f4\u81f3\u5c11\u53ef\u5bb9\u7eb3n\u4e2a\u5143\u7d20\ns.resize(n)         //  \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4\ns.resize(n, val)    //  \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4\ns.clear()           //  \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20\ns.swap(v)           //  \u5c06s\u4e0e\u53e6\u4e00\u4e2avector\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362\ns.assign(first, last)\n//  \u5c06\u5e8f\u5217\u66ff\u6362\u6210\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\uff0c[first, last)\u4e0d\u80fd\u662f\u539f\u5e8f\u5217\u4e2d\u7684\u4e00\u90e8\u5206\n\n//  \u8981\u6ce8\u610f\u7684\u662f\uff0cresize\u64cd\u4f5c\u548cclear\u64cd\u4f5c\u90fd\u662f\u5bf9\u8868\u7684\u6709\u6548\u5143\u7d20\u8fdb\u884c\u7684\u64cd\u4f5c\uff0c\u4f46\u5e76\u4e0d\u4e00\u5b9a\u4f1a\u6539\u53d8\u7f13\u51b2\u7a7a\u95f4\u7684\u5927\u5c0f\n//  \u53e6\u5916\uff0cvector\u8fd8\u6709\u5176\u4ed6\u7684\u4e00\u4e9b\u64cd\u4f5c\uff0c\u5982\u53cd\u8f6c\u3001\u53d6\u53cd\u7b49\uff0c\u4e0d\u518d\u4e00\u4e00\u5217\u4e3e\n//  vector\u4e0a\u8fd8\u5b9a\u4e49\u4e86\u5e8f\u5217\u4e4b\u95f4\u7684\u6bd4\u8f83\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff08>\u3001<\u3001>=\u3001<=\u3001==\u3001!=\uff09\uff0c\u53ef\u4ee5\u6309\u7167\u5b57\u5178\u5e8f\u6bd4\u8f83\u4e24\u4e2a\u5e8f\u5217\u3002\n//  \u8fd8\u662f\u6765\u770b\u4e00\u4e9b\u793a\u4f8b\u4ee3\u7801\u5427\u2026\u2026\n\n/*\n * \u8f93\u5165\u4e2a\u6570\u4e0d\u5b9a\u7684\u4e00\u7ec4\u6574\u6570\uff0c\u518d\u5c06\u8fd9\u7ec4\u6574\u6570\u6309\u5012\u5e8f\u8f93\u51fa\n */\n\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main()\n{\n    vector<int> L;\n    int x;\n    while(cin >> x)\n    {\n        L.push_back(x);\n    }\n    for (int i = L.size() - 1; i >= 0; i--)\n    {\n        cout << L[i] << " ";\n    }\n    cout << endl;\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"list"},"list"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1alist")),(0,r.kt)("p",null,"\u4e0b\u9762\u7ed9\u51fa\u51e0\u4e2a\u5e38\u7528\u7684\u5b9a\u4e49list\u5bf9\u8c61\u7684\u65b9\u6cd5\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"\nlist<int>a{1,2,3}\nlist<int>a(n)    //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f0\nlist<int>a(n, m)  //\u58f0\u660e\u4e00\u4e2an\u4e2a\u5143\u7d20\u7684\u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662fm\nlist<int>a(first, last)  //\u58f0\u660e\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u5143\u7d20\u7684\u521d\u59cb\u503c\u6765\u6e90\u4e8e\u7531\u533a\u95f4\u6240\u6307\u5b9a\u7684\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\uff0cfirst\u548clast\u662f\u8fed\u4ee3\u5668\n\n")),(0,r.kt)("p",null,"list\u7684\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"\na.begin()           //  \u8fd4\u56de\u6307\u5411\u9996\u5143\u7d20\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\na.end()             //  \u8fd4\u56de\u6307\u5411\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u7684\u968f\u673a\u5b58\u53d6\u8fed\u4ee3\u5668\na.push_front(x)     //  \u5411\u8868\u5934\u63d2\u5165\u5143\u7d20x\na.push_back(x)      //  \u5411\u8868\u5c3e\u63d2\u5165\u5143\u7d20x\na.pop_back()        //  \u5220\u9664\u8868\u5c3e\u5143\u7d20\na.pop_front()       //  \u5220\u9664\u8868\u5934\u5143\u7d20\na.size()            //  \u8fd4\u56de\u8868\u957f\na.empty()           //  \u8868\u4e3a\u7a7a\u65f6\uff0c\u8fd4\u56de\u771f\uff0c\u5426\u5219\u8fd4\u56de\u5047\na.resize(n)         //  \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0c\u5143\u7d20\u9ed8\u8ba4\u503c\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4\na.resize(n, val)    //  \u6539\u53d8\u5e8f\u5217\u957f\u5ea6\uff0c\u8d85\u51fa\u7684\u5143\u7d20\u5c06\u4f1a\u5168\u90e8\u88ab\u5220\u9664\uff0c\u5982\u679c\u5e8f\u5217\u9700\u8981\u6269\u5c55\uff08\u539f\u7a7a\u95f4\u5c0f\u4e8en\uff09\uff0cval\u5c06\u586b\u6ee1\u6269\u5c55\u51fa\u7684\u7a7a\u95f4\na.clear()           //  \u5220\u9664\u5bb9\u5668\u4e2d\u7684\u6240\u6709\u5143\u7d20\na.front()           //  \u8fd4\u56de\u9996\u5143\u7d20\na.back()            //  \u8fd4\u56de\u5c3e\u5143\u7d20\na.swap(v)           //  \u5c06a\u4e0e\u53e6\u4e00\u4e2alist\u5bf9\u8c61\u8fdb\u884c\u4ea4\u6362\na.merge(b)          //  \u8c03\u7528\u7ed3\u675f\u540eb\u53d8\u4e3a\u7a7a\uff0ca\u4e2d\u5143\u7d20\u5305\u542b\u539f\u6765a\u548cb\u7684\u5143\u7d20\na.insert(it, val)   //  \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165\u65b0\u5143\u7d20val\na.insert(it, n, val)//  \u5411\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u63d2\u5165n\u4e2a\u65b0\u5143\u7d20val\na.insert(it, first, last)   \n//  \u5c06\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\u63d2\u5165\u5230\u8fed\u4ee3\u5668it\u6307\u5411\u7684\u5143\u7d20\u524d\u9762\na.erase(it)         //  \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5411\u7684\u5143\u7d20\na.erase(first, last)//  \u5220\u9664\u7531\u8fed\u4ee3\u5668first\u548clast\u6240\u6307\u5b9a\u7684\u5e8f\u5217[first, last)\na.remove(x)         //  \u5220\u9664\u4e86a\u4e2d\u6240\u6709\u503c\u4e3ax\u7684\u5143\u7d20\na.assign(n, val)    // \u5c06a\u4e2d\u7684\u6240\u6709\u5143\u7d20\u66ff\u6362\u6210n\u4e2aval\u5143\u7d20\na.assign(b.begin(), b.end())\n//\u5c06a\u53d8\u6210b\n\n")),(0,r.kt)("h3",{id:"string"},"string"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1astring")),(0,r.kt)("p",null,"string\u662fSTL\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u901a\u5e38\u7528\u6765\u8868\u793a\u5b57\u7b26\u4e32\u3002\u800c\u5728\u4f7f\u7528string\u4e4b\u524d\uff0c\u5b57\u7b26\u4e32\u901a\u5e38\u662f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u8868\u793a\u7684\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","string\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u7684\u533a\u522b",(0,r.kt)("br",{parentName:"p"}),"\n","string\u662f\u4e00\u4e2a\u7c7b, ",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u662f\u4e00\u4e2a\u6307\u5411\u5b57\u7b26\u7684\u6307\u9488\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","string\u5c01\u88c5\u4e86",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\uff0c\u7ba1\u7406\u8fd9\u4e2a\u5b57\u7b26\u4e32\uff0c\u662f\u4e00\u4e2a",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u578b\u7684\u5bb9\u5668\u3002\u4e5f\u5c31\u662f\u8bf4string\u662f\u4e00\u4e2a\u5bb9\u5668\uff0c\u91cc\u9762\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","string\u4e0d\u7528\u8003\u8651\u5185\u5b58\u91ca\u653e\u548c\u8d8a\u754c\u3002",(0,r.kt)("br",{parentName:"p"}),"\n","string\u7ba1\u7406",(0,r.kt)("inlineCode",{parentName:"p"},"char*"),"\u6240\u5206\u914d\u7684\u5185\u5b58\u3002\u6bcf\u4e00\u6b21string\u7684\u590d\u5236\uff0c\u53d6\u503c\u90fd\u7531string\u7c7b\u8d1f\u8d23\u7ef4\u62a4\uff0c\u4e0d\u7528\u62c5\u5fc3\u590d\u5236\u8d8a\u754c\u548c\u53d6\u503c\u8d8a\u754c\u7b49\u3002  string\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u51fd\u6570",(0,r.kt)("br",{parentName:"p"}),"\n","\u67e5\u627efind\uff0c\u62f7\u8d1dcopy\uff0c\u5220\u9664erase\uff0c\u66ff\u6362replace\uff0c\u63d2\u5165insert. "),(0,r.kt)("p",null,"\u6784\u9020\u548c\u6790\u6784\u51fd\u6570:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u8868\u8fbe\u5f0f"),(0,r.kt)("th",{parentName:"tr",align:null},"\u6548\u679c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s"),(0,r.kt)("td",{parentName:"tr",align:null},"\u751f\u6210\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(str)"),(0,r.kt)("td",{parentName:"tr",align:null},"copy\u6784\u9020\u51fd\u6570\uff0c\u751f\u6210\u4e00\u4e2astr\u7684\u590d\u5236\u54c1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(str,idx)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(str,idx,len)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06string\u5185\u59cb\u4e8e\u4f4d\u7f6eidx\u4e14\u957f\u5ea6\u6700\u591a\u4e3alen\u7684\u90e8\u5206\u5f53\u4f5c\u5b57\u7b26\u4e32s\u7684\u521d\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(cstr)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ee5C-string\u5b57\u7b26\u4e32cstr\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(cstr\uff0clen)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ee5C-string\u5b57\u7b26\u4e32cstr\u7684\u524dlen\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(num\uff0cc)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u751f\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5305\u542bnum\u4e2a\u5b57\u7b26c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"string s(beg\uff0cend)"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ee5\u533a\u95f4","[beg,end]","\u5185\u6240\u6709\u5b57\u7b26\u4f5c\u4e3a\u5b57\u7b26\u4e32s\u7684\u521d\u503c")))),(0,r.kt)("p",null,"\u64cd\u4f5c\u51fd\u6570:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"\u64cd\u4f5c\u51fd\u6570"),(0,r.kt)("th",{parentName:"tr",align:null},"\u6548\u679c"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"=\uff0cassign()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8d4b\u4ee5\u65b0\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"swap()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ea4\u6362\u4e24\u4e2a\u5b57\u7b26\u4e32\u7684\u5185\u5bb9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+=, append(),push_back()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6dfb\u52a0\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"insert()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63d2\u5165\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"erase()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5220\u9664\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clear()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u79fb\u9664\u5168\u90e8\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"resize()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6539\u53d8\u5b57\u7b26\u6570\u91cf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u66ff\u6362\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"+"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4e32\u8054\u5b57\u7b26\u4e32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"==\uff0c!=\uff0c<\uff0c<=\uff0c>\uff0c>=\uff0ccompare()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u6bd4\u8f83\u5b57\u7b26\u4e32\u5185\u5bb9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"size(),length()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u5b57\u7b26\u6570\u91cf,\u7b49\u6548\u51fd\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max_size()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u5b57\u7b26\u7684\u6700\u5927\u53ef\u80fd\u4e2a\u6570")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"empty()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"capacity()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u91cd\u65b0\u5206\u914d\u4e4b\u524d\u7684\u5b57\u7b26\u5bb9\u91cf")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"reserve()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4fdd\u7559\u4e00\u5b9a\u91cf\u5185\u5b58\u4ee5\u5bb9\u7eb3\u4e00\u5b9a\u6570\u91cf\u7684\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"[ ]","\uff0cat()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5b58\u53d6\u5355\u4e00\u5b57\u7b26")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},">>\uff0cgetline()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u4ecestream\u4e2d\u8bfb\u53d6\u67d0\u503c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"<<"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u67d0\u503c\u5199\u5165stream")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"copy()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u590d\u5236\u4e3a\u4e00\u4e2aC-string")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"c_str()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u4ee5C-string\u5f62\u5f0f\u8fd4\u56de")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"data()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u5c06\u5185\u5bb9\u4ee5\u5b57\u7b26\u6570\u7ec4\u5f62\u5f0f\u8fd4\u56de")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"substr()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u8fd4\u56de\u67d0\u4e2a\u5b50\u5b57\u7b26\u4e32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"begin()\uff0cend()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63d0\u4f9b\u6b63\u5e38\u7684\u8fed\u4ee3\u5668\u652f\u6301")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"rbegin()\uff0crend()"),(0,r.kt)("td",{parentName:"tr",align:null},"\u63d0\u4f9b\u9006\u5411\u8fed\u4ee3\u5668\u652f\u6301")))),(0,r.kt)("h3",{id:"pair"},"pair"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1autility")),(0,r.kt)("p",null,"STL\u7684utility\u5934\u6587\u4ef6\u4e2d\u63cf\u8ff0\u4e86\u4e00\u4e2a\u770b\u4e0a\u53bb\u975e\u5e38\u7b80\u5355\u7684\u6a21\u7248\u7c7bpair\uff0c\u7528\u6765\u8868\u793a\u4e00\u4e2a\u4e8c\u5143\u7ec4\u6216\u5143\u7d20\u5bf9\uff0c\u5e76\u63d0\u4f9b\u4e86\u6309\u7167\u5b57\u5178\u5e8f\u5bf9\u5143\u7d20\u5bf9\u8fdb\u884c\u5927\u5c0f\u6bd4\u8f83\u8fd0\u7b97\u7b26\u6a21\u7248\u51fd\u6570\u3002\nExample\uff0c\u60f3\u8981\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u70b9\uff0c\u5219\u53ef\u4ee5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"pair<double, double> p;\ncin >> p.first >> p.second;\n")),(0,r.kt)("p",null,"pair\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff1a\u9996\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u548c\u5c3e\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u3002pair\u6a21\u7248\u7c7b\u5bf9\u8c61\u6709\u4e24\u4e2a\u6210\u5458\uff1afirst\u548csecond\uff0c\u5206\u522b\u8868\u793a\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002\n\u5728\u5176\u4e2d\u5df2\u7ecf\u5b9a\u4e49\u4e86pair\u4e0a\u7684\u516d\u4e2a\u6bd4\u8f83\u8fd0\u7b97\u7b26\uff1a<\u3001>\u3001<=\u3001>=\u3001==\u3001!=\uff0c\u5176\u89c4\u5219\u662f\u5148\u6bd4\u8f83first\uff0cfirst\u76f8\u7b49\u65f6\u518d\u6bd4\u8f83second\uff0c\u8fd9\u7b26\u5408\u5927\u591a\u6570\u5e94\u7528\u7684\u903b\u8f91\u3002\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u91cd\u8f7d\u8fd9\u51e0\u4e2a\u8fd0\u7b97\u7b26\u6765\u91cd\u65b0\u6307\u5b9a\u81ea\u5df1\u7684\u6bd4\u8f83\u903b\u8f91\u3002\n\u9664\u4e86\u76f4\u63a5\u5b9a\u4e49\u4e00\u4e2apair\u5bf9\u8c61\u5916\uff0c\u5982\u679c\u9700\u8981\u5373\u65f6\u751f\u6210\u4e00\u4e2apair\u5bf9\u8c61\uff0c\u4e5f\u53ef\u4ee5\u8c03\u7528\u5728\u5176\u4e2d\u5b9a\u4e49\u7684\u4e00\u4e2a\u6a21\u7248\u51fd\u6570\uff1amake_pair\u3002make_pair\u9700\u8981\u4e24\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u4e3a\u5143\u7d20\u5bf9\u7684\u9996\u5143\u7d20\u548c\u5c3e\u5143\u7d20\u3002"),(0,r.kt)("h3",{id:"map"},"map"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1amap")),(0,r.kt)("p",null,"\u5728STL\u7684\u5934\u6587\u4ef6\u4e2dmap\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7bmap\u548cmultimap\uff0c\u7528\u6709\u5e8f\u4e8c\u53c9\u6811\u8868\u5b58\u50a8\u7c7b\u578b\u4e3a",(0,r.kt)("inlineCode",{parentName:"p"},"pair<const Key, T>"),"\u7684\u5143\u7d20\u5bf9\u5e8f\u5217\u3002\u5e8f\u5217\u4e2d\u7684\u5143\u7d20\u4ee5const Key\u90e8\u5206\u4f5c\u4e3a\u6807\u8bc6\uff0cmap\u4e2d\u6240\u6709\u5143\u7d20\u7684Key\u503c\u5fc5\u987b\u662f\u552f\u4e00\u7684\uff0cmultimap\u5219\u5141\u8bb8\u6709\u91cd\u590d\u7684Key\u503c\u3002"),(0,r.kt)("p",null,"\u53ef\u4ee5\u5c06map\u770b\u4f5c\u662f\u7531Key\u6807\u8bc6\u5143\u7d20\u7684\u5143\u7d20\u96c6\u5408\uff0c\u8fd9\u7c7b\u5bb9\u5668\u4e5f\u88ab\u79f0\u4e3a\u201c\u5173\u8054\u5bb9\u5668\u201d\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e2aKey\u503c\u6765\u5feb\u901f\u51b3\u5b9a\u4e00\u4e2a\u5143\u7d20\uff0c\u56e0\u6b64\u975e\u5e38\u9002\u5408\u4e8e\u9700\u8981\u6309\u7167Key\u503c\u67e5\u627e\u5143\u7d20\u7684\u5bb9\u5668\u3002\nmap\u6a21\u7248\u7c7b\u9700\u8981\u56db\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7b2c\u4e00\u4e2a\u662f\u952e\u503c\u7c7b\u578b\uff0c\u7b2c\u4e8c\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u7b2c\u4e09\u4e2a\u662f\u6bd4\u8f83\u7b97\u5b50\uff0c\u7b2c\u56db\u4e2a\u662f\u5206\u914d\u5668\u7c7b\u578b\u3002\u5176\u4e2d\u952e\u503c\u7c7b\u578b\u548c\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49map\u5bf9\u8c61\u7684\u4ee3\u7801\u793a\u4f8b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"map<string, int> m;\n")),(0,r.kt)("p",null,"map\u7684\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"/*  \u5411map\u4e2d\u63d2\u5165\u5143\u7d20  */\nm[key] = value; //  [key]\u64cd\u4f5c\u662fmap\u5f88\u6709\u7279\u8272\u7684\u64cd\u4f5c,\u5982\u679c\u5728map\u4e2d\u5b58\u5728\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9, \u5219\u8fd4\u56de\u8be5\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206,\u5426\u5219\u5c06\u4f1a\u521b\u5efa\u4e00\u4e2a\u952e\u503c\u4e3akey\u7684\u5143\u7d20\u5bf9,\u503c\u57df\u4e3a\u9ed8\u8ba4\u503c\u3002\u6240\u4ee5\u53ef\u4ee5\u7528\u8be5\u64cd\u4f5c\u5411map\u4e2d\u63d2\u5165\u5143\u7d20\u5bf9\u6216\u4fee\u6539\u5df2\u7ecf\u5b58\u5728\u7684\u5143\u7d20\u5bf9\u7684\u503c\u57df\u90e8\u5206\u3002\nm.insert(make_pair(key, value));    //  \u4e5f\u53ef\u4ee5\u76f4\u63a5\u8c03\u7528insert\u65b9\u6cd5\u63d2\u5165\u5143\u7d20\u5bf9,insert\u64cd\u4f5c\u4f1a\u8fd4\u56de\u4e00\u4e2apair,\u5f53map\u4e2d\u6ca1\u6709\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u63d2\u5165\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5176second\u4e3atrue;\u82e5map\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e0ekey\u76f8\u7b49\u7684\u952e\u503c\u65f6,\u5176first\u662f\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,second\u4e3afalse\u3002\n\n/*  \u67e5\u627e\u5143\u7d20  */\nint i = m[key]; //  \u8981\u6ce8\u610f\u7684\u662f,\u5f53\u4e0e\u8be5\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9\u4e0d\u5b58\u5728\u65f6,\u4f1a\u521b\u5efa\u952e\u503c\u4e3akey\uff08\u5f53\u53e6\u4e00\u4e2a\u5143\u7d20\u662f\u6574\u5f62\u65f6\uff0cm[key]=0\uff09\u7684\u5143\u7d20\u5bf9\u3002\nmap<string, int>::iterator it = m.find(key);    //  \u5982\u679cmap\u4e2d\u5b58\u5728\u4e0ekey\u76f8\u5339\u914d\u7684\u952e\u503c\u65f6,find\u64cd\u4f5c\u5c06\u8fd4\u56de\u6307\u5411\u8be5\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668,\u5426\u5219,\u8fd4\u56de\u7684\u8fed\u4ee3\u5668\u7b49\u4e8emap\u7684end()(\u53c2\u89c1vector\u4e2d\u63d0\u5230\u7684begin()\u548cend()\u64cd\u4f5c)\u3002\n\n/*  \u5220\u9664\u5143\u7d20  */\nm.erase(key);   //  \u5220\u9664\u4e0e\u6307\u5b9akey\u952e\u503c\u76f8\u5339\u914d\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u88ab\u5220\u9664\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002\nm.erase(it);    //  \u5220\u9664\u7531\u8fed\u4ee3\u5668it\u6240\u6307\u5b9a\u7684\u5143\u7d20\u5bf9,\u5e76\u8fd4\u56de\u6307\u5411\u4e0b\u4e00\u4e2a\u5143\u7d20\u5bf9\u7684\u8fed\u4ee3\u5668\u3002\n\n/*  \u5176\u4ed6\u64cd\u4f5c  */\nm.size();       //  \u8fd4\u56de\u5143\u7d20\u4e2a\u6570\nm.empty();      //  \u5224\u65ad\u662f\u5426\u4e3a\u7a7a\nm.clear();      //  \u6e05\u7a7a\u6240\u6709\u5143\u7d20\n")),(0,r.kt)("h3",{id:"stack"},"stack"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1astack")),(0,r.kt)("p",null,"stack\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728stack\u5934\u6587\u4ef6\u4e2d\u3002\nstack\u6a21\u7248\u7c7b\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u662f\u5143\u7d20\u7c7b\u578b\uff0c\u53e6\u4e00\u4e2a\u662f\u5bb9\u5668\u7c7b\u578b\uff0c\u4f46\u662f\u53ea\u6709\u5143\u7d20\u7c7b\u578b\u662f\u5fc5\u8981\u7684\uff0c\u5728\u4e0d\u6307\u5b9a\u5bb9\u5668\u7c7b\u578b\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u7684\u7c7b\u578b\u4e3adeque\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49stack\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"stack<int> s;\nstack<string> ss;\n")),(0,r.kt)("p",null,"stack\u7684\u57fa\u672c\u64cd\u4f5c\u6709\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"s.push(x);  //  \u5165\u6808\ns.pop();    //  \u51fa\u6808\ns.top();    //  \u8bbf\u95ee\u6808\u9876\ns.empty();  //  \u5f53\u6808\u7a7a\u65f6\uff0c\u8fd4\u56detrue\ns.size();   //  \u8bbf\u95ee\u6808\u4e2d\u5143\u7d20\u4e2a\u6570\n")),(0,r.kt)("h3",{id:"queue"},"queue"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1aqueue")),(0,r.kt)("p",null,"queue\u6a21\u7248\u7c7b\u7684\u5b9a\u4e49\u5728queue\u5934\u6587\u4ef6\u4e2d\u3002\nqueue\u4e0estack\u76f8\u4f3c\uff0cqueue\u6a21\u7248\u7c7b\u4e5f\u9700\u8981\u4e24\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\uff0c\u4e00\u4e2a\u5bb9\u5668\u7c7b\u578b\uff0c\u5143\u7d20\u7c7b\u578b\u65f6\u5fc5\u987b\u7684\uff0c\u5bb9\u5668\u7c7b\u578b\u65f6\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u4e3adeque\u7c7b\u578b\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49queue\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5fc5\u987b\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"queue<int> q;\nqueue<double> qq;\n")),(0,r.kt)("p",null,"queue\u7684\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"q.push(x);  //  \u5165\u961f\u5217\nq.pop();    //  \u51fa\u961f\u5217\nq.front();  //  \u8bbf\u95ee\u961f\u9996\u5143\u7d20\nq.back();   //  \u8bbf\u95ee\u961f\u5c3e\u5143\u7d20\nq.empty();  //  \u5224\u65ad\u961f\u5217\u662f\u5426\u4e3a\u7a7a\nq.size();   //  \u8bbf\u95ee\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\n")),(0,r.kt)("h3",{id:"set"},"set"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1aset")),(0,r.kt)("p",null,"set\u662f\u4e0e\u96c6\u5408\u76f8\u5173\u7684\u5bb9\u5668\uff0cSTL\u4e3a\u6211\u4eec\u63d0\u4f9b\u4e86set\u7684\u5b9e\u73b0\uff0c\u5728\u7f16\u7a0b\u9898\u4e2d\u9047\u89c1\u96c6\u5408\u95ee\u9898\u76f4\u63a5\u8c03\u7528\u662f\u5341\u5206\u65b9\u4fbf\u7684\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49set\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"set<int> s;\nset<double> ss;\n")),(0,r.kt)("p",null,"set\u7684\u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"s.begin()       //  \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\ns.clear()       //  \u6e05\u9664\u6240\u6709\u5143\u7d20\ns.count()       //  \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570\ns.empty()       //  \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue(\u771f\uff09\ns.end()         //  \u8fd4\u56de\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e4b\u540e\u7684\u8fed\u4ee3\u5668\uff0c\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u5143\u7d20\ns.equal_range() //  \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0e\u7ed9\u5b9a\u503c\u76f8\u7b49\u7684\u4e0a\u4e0b\u9650\u7684\u4e24\u4e2a\u8fed\u4ee3\u5668\ns.erase()       //  \u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20\ns.find()        //  \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u88ab\u67e5\u627e\u5230\u5143\u7d20\u7684\u8fed\u4ee3\u5668\ns.get_allocator()   //  \u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668\ns.insert()      //  \u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20\ns.lower_bound() //  \u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\ns.key_comp()    //  \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570\ns.max_size()    //  \u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c\ns.rbegin()      //  \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\ns.rend()        //  \u8fd4\u56de\u6307\u5411\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u53cd\u5411\u8fed\u4ee3\u5668\ns.size()        //  \u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee\ns.swap()        //  \u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf\ns.upper_bound() //  \u8fd4\u56de\u5927\u4e8e\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u8fed\u4ee3\u5668\ns.value_comp()  //  \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570\n")),(0,r.kt)("h3",{id:"multiset"},"multiset"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1aset")),(0,r.kt)("p",null,"\u5728set\u5934\u6587\u4ef6\u4e2d\uff0c\u8fd8\u5b9a\u4e49\u4e86\u53e6\u4e00\u4e2a\u975e\u5e38\u5b9e\u7528\u7684\u6a21\u7248\u7c7bmultiset\uff08\u591a\u91cd\u96c6\u5408\uff09\u3002\u591a\u91cd\u96c6\u5408\u4e0e\u96c6\u5408\u7684\u533a\u522b\u5728\u4e8e\u96c6\u5408\u4e2d\u4e0d\u80fd\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u800c\u591a\u91cd\u96c6\u5408\u4e2d\u53ef\u4ee5\u5b58\u5728\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49multiset\u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"multiset<int> s;\nmultiset<double> ss;\n")),(0,r.kt)("p",null,"multiset\u548cset\u7684\u57fa\u672c\u64cd\u4f5c\u76f8\u4f3c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u96c6\u5408\u7684count()\u80fd\u8fd4\u56de0\uff08\u65e0\uff09\u6216\u80051\uff08\u6709\uff09\uff0c\u800c\u591a\u91cd\u96c6\u5408\u662f\u6709\u591a\u5c11\u4e2a\u8fd4\u56de\u591a\u5c11\u4e2a\u3002"),(0,r.kt)("h3",{id:"bitset"},"bitset"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"\u5934\u6587\u4ef6\uff1abitset")),(0,r.kt)("p",null,"\u5728 STLSTL \u7684\u5934\u6587\u4ef6\u4e2d bitset\u4e2d\u5b9a\u4e49\u4e86\u6a21\u7248\u7c7b bitsetbitset\uff0c\u7528\u6765\u65b9\u4fbf\u5730\u7ba1\u7406\u4e00\u7cfb\u5217\u7684 bitbit \u4f4d\u7684\u7c7b\u3002bitsetbitset \u9664\u4e86\u53ef\u4ee5\u8bbf\u95ee\u6307\u5b9a\u4e0b\u6807\u7684 bitbit \u4f4d\u4ee5\u5916\uff0c\u8fd8\u53ef\u4ee5\u628a\u5b83\u4eec\u4f5c\u4e3a\u4e00\u4e2a\u6574\u6570\u6765\u8fdb\u884c\u67d0\u4e9b\u7edf\u8ba1\u3002"),(0,r.kt)("p",null,"bitsetbitset \u6a21\u677f\u7c7b\u9700\u8981\u4e00\u4e2a\u6a21\u7248\u53c2\u6570\uff0c\u7528\u6765\u660e\u786e\u6307\u5b9a\u542b\u6709\u591a\u5c11\u4f4d\u3002"),(0,r.kt)("p",null,"\u5b9a\u4e49 bitsetbitset \u5bf9\u8c61\u7684\u793a\u4f8b\u4ee3\u7801\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'const int MAXN = 32;\nbitset<MAXN> bt;            //  bt \u5305\u62ec MAXN \u4f4d\uff0c\u4e0b\u6807 0 ~ MAXN - 1\uff0c\u9ed8\u8ba4\u521d\u59cb\u5316\u4e3a 0\nbitset<MAXN> bt1(0xf);      //  0xf \u8868\u793a\u5341\u516d\u8fdb\u5236\u6570 f\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1111\uff0c\u5c06 bt1 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1\nbitset<MAXN> bt2(012);      //  012 \u8868\u793a\u516b\u8fdb\u5236\u6570 12\uff0c\u5bf9\u5e94\u4e8c\u8fdb\u5236 1010\uff0c\u5373\u5c06 bt2 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010\nbitset<MAXN> bt3("1010");   //  \u5c06 bt3 \u4f4e 4 \u4f4d\u521d\u59cb\u5316\u4e3a 1010\nbitset<MAXN> bt4(s, pos, n);//  \u5c06 01 \u5b57\u7b26\u4e32 s \u7684 pos \u4f4d\u5f00\u59cb\u7684 n \u4f4d\u521d\u59cb\u5316 bt4\n')),(0,r.kt)("p",null,"bitsetbitset \u57fa\u672c\u64cd\u4f5c\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"bt.any()        //  bt \u4e2d\u662f\u5426\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\uff1f\nbt.none()       //  bt \u4e2d\u4e0d\u5b58\u5728\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u5417\uff1f\nbt.count()      //  bt \u4e2d\u7f6e\u4e3a 1 \u7684\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570\nbt.size()       //  bt \u4e2d\u4e8c\u8fdb\u5236\u4f4d\u7684\u4e2a\u6570\nbt[pos]         //  \u8bbf\u95ee bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\nbt.test(pos)    //  bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u662f\u5426\u4e3a 1\nbt.set()        //  \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 1\nbt.set(pos)     //  \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a 1\nbt.reset()      //  \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u90fd\u7f6e\u4e3a 0\nbt.reset(pos)   //  \u628a bt \u4e2d\u5728pos\u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u7f6e\u4e3a0\nbt.flip()       //  \u628a bt \u4e2d\u6240\u6709\u4e8c\u8fdb\u5236\u4f4d\u9010\u4f4d\u53d6\u53cd\nbt.flip(pos)    //  \u628a bt \u4e2d\u5728 pos \u5904\u7684\u4e8c\u8fdb\u5236\u4f4d\u53d6\u53cd\nbt[pos].flip()  //  \u540c\u4e0a\nbt.to_ulong()   //  \u7528 bt \u4e2d\u540c\u6837\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fd4\u56de\u4e00\u4e2a unsigned long \u503c\nos << bt        //  \u628a bt \u4e2d\u7684\u4f4d\u96c6\u8f93\u51fa\u5230 os \u6d41\n")),(0,r.kt)("h2",{id:"\u56fe\u6a21\u677f"},"\u56fe\u6a21\u677f"),(0,r.kt)("h3",{id:"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f"},"\u4e0d\u5e26\u51fa\u5165\u5ea6\u7684\u6700\u7b80\u6a21\u677f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <iostream>\n#include <vector>\n#include <set>\n \nusing namespace std;\n \n#define MAX(a, b) ((a) > (b) ? (a) : (b) )\n \n//\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9\ntypedef struct Vertex {\n    int id;\n    vector<int> connectors;    //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7\n    Vertex() : id(-1) {}\n    Vertex(int nid) : id(nid) {}\n} Vertex;\n \n//\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a\ntypedef struct Graph {\n    vector<Vertex> vertexs;   //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f\n    int nVertexs;             //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570\n    bool isDAG;               //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417\n \n    Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); }\n \n    //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9\n    bool addEdge(int id1, int id2) {\n        if (!(MAX(id1, id2) < vertexs.size())) return false;\n \n        if (isDAG) {\n            vertexs[id1].connectors.push_back(id2);\n        }\n        else {\n            vertexs[id1].connectors.push_back(id2);\n            vertexs[id2].connectors.push_back(id1);\n        }\n        return true;\n    }\n \n    //\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\n    vector<int> BFS(int start) {\n        set<int> visited;\n        vector<int> g, rst;\n        g.push_back(start);\n        visited.insert(start);\n        while(g.size() > 0) {\n            int id = g[0];          \n            g.erase(g.begin());\n            rst.push_back(id);\n            for(int i = 0; i < vertexs[id].connectors.size(); i++) {\n                int id1 = vertexs[id].connectors[i];\n                if (visited.count(id1) == 0) {\n                    g.push_back(id1);\n                    visited.insert(id1);\n                }\n            }\n        }\n        return rst;\n    }\n \n    //\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n    vector<int> DFS(int start) {\n        set<int> visited;\n        vector<int> g, rst;\n        g.push_back(start);\n        //cout << "push " << start << " ";\n        visited.insert(start);\n        rst.push_back(start);\n        bool found;\n        while(g.size() > 0) {\n            int id = g[g.size()-1];         \n            found = false;\n            for(int i = 0; i < vertexs[id].connectors.size(); i++) {\n                int id1 = vertexs[id].connectors[i];\n                if (visited.count(id1) == 0) {\n                    g.push_back(id1);\n                    rst.push_back(id1);\n                    visited.insert(id1);\n                    //cout << "push " << id1 << " ";\n                    found = true;\n                    break;\n                }\n            }\n            if (!found) {\n                int id2 = g[g.size()-1];\n                rst.push_back(-1 * id2);\n                //cout << "pop " << id2 << " ";\n                g.pop_back();\n            }\n        }\n        //cout << endl;\n        return rst;\n    }\n} Graph;\n \nint main() {\n    Graph g(8, false);\n    g.addEdge(0, 1);\n    g.addEdge(0, 3);\n    g.addEdge(1, 2);\n    g.addEdge(3, 4);\n    g.addEdge(3, 5);\n    g.addEdge(4, 5);\n    g.addEdge(4, 6);    \n    g.addEdge(5, 6);\n    g.addEdge(5, 7);    \n    g.addEdge(6, 7);\n    vector<int> bv = g.BFS(0);\n    cout << "\u5bbd\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a";\n    for(int j = 0; j < bv.size(); j++)\n        cout << bv[j] << " ";\n    cout << endl;\n \n    cout << "\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u8282\u70b9\u987a\u5e8f\uff1a";\n    Graph g1(6, false);\n    g1.addEdge(0, 1);\n    g1.addEdge(0, 4);\n    g1.addEdge(0, 5);\n    g1.addEdge(1, 5);\n    g1.addEdge(4, 5);\n    g1.addEdge(5, 2);\n    g1.addEdge(5, 3);\n    g1.addEdge(2, 3);\n    vector<int> route = g1.DFS(0);\n    for(int i = 0; i < route.size(); i++)\n        cout << route[i] << " ";\n    cout << endl;\n \n    char ch;\n    cin >> ch;\n    return 0;\n}\n\n\n')),(0,r.kt)("h3",{id:"\u5e26\u51fa\u5165\u5ea6\u7684-2019\u63a8\u514d\u8bd5\u9898"},"\u5e26\u51fa\u5165\u5ea6\u7684 (2019\u63a8\u514d\u8bd5\u9898)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <queue>\n#define MAX(a, b) ((a) > (b) ? (a) : (b) )\nusing namespace std;\nint n,m;\nvector<int> inDegreelist,outDegreelist;\n \n//\u5b9a\u4e49\u56fe\u7684\u5b9a\u70b9\ntypedef struct Vertex {\n    int id,inDegree,outDegree;\n    vector<int> connectors;    //\u5b58\u50a8\u8282\u70b9\u7684\u540e\u7eed\u8fde\u63a5\u9876\u70b9\u7f16\u53f7\n    Vertex() : id(-1),inDegree(0),outDegree(0) {}\n    Vertex(int nid) : id(nid),inDegree(0),outDegree(0) {}\n} Vertex;\n \n//\u5b9a\u4e49Graph\u7684\u90bb\u63a5\u8868\u8868\u793a\ntypedef struct Graph {\n    vector<Vertex> vertexs;   //\u5b58\u50a8\u5b9a\u70b9\u4fe1\u606f\n    int nVertexs;             //\u8ba1\u6570\uff1a\u90bb\u63a5\u6570\n    bool isDAG;               //\u6807\u5fd7\uff1a\u662f\u6709\u5411\u56fe\u5417\n \n    Graph(int n, bool isDAG) : nVertexs(n), isDAG(isDAG) { vertexs.resize(n); }\n    Graph() : nVertexs(1), isDAG(1) { vertexs.resize(1); }\n    //\u5411\u56fe\u4e2d\u6dfb\u52a0\u8fb9\n    bool addEdge(int id1, int id2) {\n        if (!(MAX(id1, id2) < vertexs.size())) return false;\n \n        if (isDAG) {\n            vertexs[id1].connectors.push_back(id2);\n            vertexs[id1].outDegree++;\n            vertexs[id2].inDegree++;\n        }\n        else {\n            vertexs[id1].connectors.push_back(id2);\n            vertexs[id2].connectors.push_back(id1);\n\n            vertexs[id1].outDegree++;\n            vertexs[id1].inDegree++;\n\n            vertexs[id2].outDegree++;\n            vertexs[id2].inDegree++;\n\n        }\n        return true;\n    }\n} Graph;\n\nGraph g;\n\nvoid init(){\n    cin>>n>>m;\n    g=Graph(n, true);\n    int src,dst;\n    while(m--){\n        cin>>src>>dst;\n        g.addEdge(src,dst);\n    }\n    vector<Vertex>::iterator it = g.vertexs.begin();\n    while(it!=g.vertexs.end()){\n        inDegreelist.push_back(it->inDegree);\n        outDegreelist.push_back(it->outDegree);\n        it++;\n    }\n}\nint countin(int n){\n    return count(inDegreelist.begin(),inDegreelist.end(),n);\n}\nint countout(int n){\n    return count(outDegreelist.begin(),outDegreelist.end(),n);\n}\n\nbool Is_List(){\n    //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u548c\u4e00\u4e2aoutDegree\u4e3a0\u7684\u5c3e\uff0c\u4e14\u5176\u4f59\u8282\u70b9\u5165\u5ea6\u4e0e\u51fa\u5ea6\u90fd\u4e3a1;\n    return (countin(0)==1)&&(countout(0)==1)&&(countin(1)==n-1)&&(countout(1)==n-1);\n}\n\nbool Is_Tree(){\n    //\u6709\u4e00\u4e2ainDegree\u4e3a0\u7684\u5934\u4e14\u5176\u4f59\u8282\u70b9inDegree\u5747\u4e3a1\uff0c\u4e14\u4e0d\u662f\u94fe\u8868;\n    return (countin(0)==1)&&(countin(1)==n-1);\n}\n\nbool topologicalSort(){//\u62d3\u6251\u6392\u5e8f\u5224\u65ad\u6709\u73af\u65e0\u73af\n    int num=0;//\u8bb0\u5f55\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\n    queue<int> q;\n    for(int i=0;i<n;i++){\n        if(inDegreelist[i]==0){\n            q.push(i);//\u5c06\u6240\u6709\u5165\u5ea6\u4e3a0\u7684\u9876\u70b9\u5165\u961f\n        }\n    }\n\n    while(!q.empty()){\n        int u=q.front();//\u53d6\u961f\u9996\u9876\u70b9u\n        q.pop();\n        for(int i=0;i<g.vertexs[u].connectors.size();i++){\n            int v=g.vertexs[u].connectors[i];//u\u7684\u540e\u7ee7\u8282\u70b9v\n            inDegreelist[v]--;//v\u7684\u5165\u5ea6\u51cf1\n            if(inDegreelist[v]==0){//\u9876\u70b9v\u7684\u5165\u5ea6\u51cf\u4e3a0\u5219\u5165\u961f\n                q.push(v);\n            }\n        }\n        g.vertexs[u].connectors.clear();//\u6e05\u7a7au\u7684\u6240\u6709\u51fa\u8fb9\n        num++;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u6570\u52a01\n    }\n    if(num==n) return true;//\u52a0\u5165\u62d3\u6251\u6392\u5e8f\u7684\u9876\u70b9\u4e3an\uff0c\u5219\u62d3\u6251\u6392\u5e8f\u6210\u529f\uff0c\u56fe\u65e0\u73af\n    else return false;//\u5426\u5219\u62d3\u6251\u6392\u5e8f\u5931\u8d25\uff0c\u56fe\u6709\u73af\n}\n\n\nint main(){\n    init();\n    if(n==0||m==0){\n        cout<<"error"<<endl;\n    }\n    if(Is_List()){\n        cout<<"list"<<endl;\n    }\n    \n    else if(Is_Tree()){\n        cout<<"tree"<<endl;\n    }\n    else if(topologicalSort()){\n        cout<<"no ring"<<endl;\n    }\n    else{\n    cout<<"have ring"<<endl;\n    }\n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u56fe\u7b97\u6cd5\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868"},"\u56fe\u7b97\u6cd5\uff1a\u627e\u51fau\u5230v\u7684\u6240\u6709\u8def\u5f84-\u90bb\u63a5\u8868"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include<stdio.h>\n#include<stdlib.h>\n\n#ifndef BASE\n#define BASE\n#define TRUE 1\n#define FALSE 0\n#define OK 1\n#define ERROR 0\n#define INFEASIBLE -1\n#define OVERFLOW -2\ntypedef int Status;\ntypedef int bool;\n#endif\n\n#define VertexType char //\u70b9\u7c7b\u578b\n#define VRType int //\u8fb9\u7c7b\u578b\n#define maxSize 100\nvoid Visit(VertexType e) {\n    printf("%c", e);\n}\n\n#define MAX_VERTEX_NUM 20\ntypedef enum{DG, UDG} GraphKind;\ntypedef struct ArcNode{\n    int adjV; //\u8fb9\u6307\u5411\u7684\u9876\u70b9\n    VRType weight; //\u6743\u91cd\n    struct ArcNode *next;\n}ArcNode; //\u8fb9\ntypedef struct VNode{\n    VertexType data;\n    ArcNode *firstarc;\n}VNode, AdjList[MAX_VERTEX_NUM]; //\u9876\u70b9\ntypedef struct{\n    GraphKind kind;\n    int vernum,arcnum;\n    AdjList vers; \n}ALGraph;\n\n\n/*------------------------\n |7.14 \u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868|\n ------------------------*/\nStatus InitGraph_AL(ALGraph *pG) { //\u521d\u59cb\u5316\n    int i;\n    pG->arcnum = 0;\n    pG->vernum = 0;\n    for (i=0; i<MAX_VERTEX_NUM; ++i)\n        pG->vers[i].firstarc = NULL; //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\n    return OK;\n}\nint LocateVex_AL(ALGraph G, VertexType e) { //\u5b9a\u4f4d\u503c\u4e3ae\u7684\u5143\u7d20\u4e0b\u6807\n    int i;\n    for (i=0; i<G.vernum; ++i) {\n        if (G.vers[i].data == e) {\n            return i;\n        }\n    }\n    return -1;\n}\nStatus CreateDG_AL(ALGraph *pG) { //\u521b\u5efa\u6709\u5411\u56fe\u7684\u90bb\u63a5\u8868\n    //\u8f93\u5165\u89c4\u5219\uff1a\u9876\u70b9\u6570\u76ee->\u5f27\u7684\u6570\u76ee->\u5404\u9876\u70b9\u7684\u4fe1\u606f->\u5404\u6761\u5f27\u7684\u4fe1\u606f\n    int i,a,b;\n    char tmp[MAX_VERTEX_NUM];\n    char h,t;\n    ArcNode *p, *q;\n\n    InitGraph_AL(pG); //VC++6.0\u4e2d\u6307\u9488\u521d\u59cb\u5316\u4e3a0xcccccccc\uff0c\u5982\u679c\u4e0d\u5c06\u6307\u9488\u521d\u59cb\u5316\u4e3aNULL\uff0c\u4f1a\u51fa\u9519\n    //\u56fe\u7684\u7c7b\u578b\n    pG->kind = DG;\n    //\u9876\u70b9\u6570\u76ee\n    scanf("%d", &i); if (i<0) return ERROR;\n    pG->vernum = i;\n    //\u5f27\u7684\u6570\u76ee\n    scanf("%d", &i); if (i<0) return ERROR;\n    pG->arcnum = i;\n    //\u5404\u9876\u70b9\u4fe1\u606f\n    scanf("%s", tmp);\n    for (i=0; i<pG->vernum; ++i) pG->vers[i].data=tmp[i];\n    //\u5f27\u7684\u4fe1\u606f\n    for (i=0; i<pG->arcnum; ++i) {\n        scanf("%s", tmp);\n        h = tmp[0]; t = tmp[2];\n        a = LocateVex_AL(*pG, h);\n        b = LocateVex_AL(*pG, t);\n        if (a<0 || b<0) return ERROR;\n        p = (ArcNode *)malloc(sizeof(ArcNode)); if (!p) exit(OVERFLOW);\n        p->adjV=b;p->next=NULL;\n        if (pG->vers[a].firstarc) { //\u5df2\u7ecf\u6709\u8fb9\u4e86\n            for (q = pG->vers[a].firstarc; q->next; q=q->next) ; //\u627e\u5230\u6700\u540e\u4e00\u6761\n            q->next = p;\n        } else { //\u7b2c\u4e00\u6761\u8fb9\n            pG->vers[a].firstarc = p;\n        }\n    }\n    return OK;\n}\n\n/*----------------------------------------------------------------\n |7.28 \u6709\u5411\u56fe-\u4eceu-v\u7684\u6240\u6709\u7b80\u5355\u8def\u5f84                                |\n ----------------------------------------------------------------*/\nint visit[MAX_VERTEX_NUM]; //\u524d\u9762\u5b9a\u4e49\u4e86\nVertexType paths[maxSize][MAX_VERTEX_NUM]; //\u5b58\u653e\u8def\u5f84\nint path[MAX_VERTEX_NUM]; //\u8def\u5f84\nint pathnum=0; //\u5f53\u524d\u662f\u7b2c\u51e0\u6761\u8def\u5f84\nvoid FindAllPath(ALGraph G, int u,int v,int k) { //u->v\u5f53\u524d\u662f\u7b2ck\u4e2a\u4f4d\u7f6e\n    int i;\n    ArcNode *p;\n    visit[u]=1; //\u8d70\u5230\u4e86u\n    path[k]=u; //\u6dfb\u52a0\u5230\u8def\u5f84->\u4e0b\u6807\u4f4d\u7f6e\u4e3ak\u7684\u7ed3\u70b9\u662fu\uff08\u7b2ck+1\u4e2a\u662fu\uff09\n    if (u==v) { //\u627e\u5230\u4e86\n        for (i=0; i<=k; i++) {//\u590d\u5236\u5230paths\n            paths[pathnum][i] = G.vers[path[i]].data;\n        }\n        paths[pathnum][i]=\'\\0\'; //\u7ed3\u675f\u7b26\n        pathnum++; //\u627e\u4e0b\u4e00\u6761\u8def\u5f84\n    } else {\n        //u\u7684\u90bb\u8fb9\u5f00\u59cb\u627e\n        for (p=G.vers[u].firstarc; p; p=p->next) {\n            if (visit[p->adjV]==0)\n                FindAllPath(G, p->adjV, v, k+1); //\u53bb\u8fd9\u4e2a\u90bb\u63a5\u70b9\u627e\n        }\n    }\n    // \u56de\u6eaf\u5230\u4e0a\u4e00\u4e2a\u7ed3\u70b9\n    // \u6ce8\u610f\uff1a\u56de\u6eaf\u5e94\u8be5\u5199\u5728\u5916\u9762--\x3e\u4e5f\u5c31\u662f\u4e0d\u7ba1\u6709\u6ca1\u6709\u627e\u5230\u90fd\u8981\u56de\u6eaf\n    visit[u]=0;\n    path[k]=0;\n}\n\n\nint main() {\n/*7.28\n6\n11\nABCDEF\nB,A\nB,D\nC,B\nC,F\nD,C\nD,E\nD,F\nE,A\nF,A\nF,B\nF,E\nB->A\nA->B\nD->A\n*/\n    int i,j;\n    int cnt;\n    ALGraph G;\n    char tmp[20];\n\n    CreateDG_AL(&G);\n\n    while (1) {\n        scanf("%s", tmp); //A->B\n        i = LocateVex_AL(G, tmp[0]);\n        j = LocateVex_AL(G, tmp[3]);\n        for (cnt=0; cnt<MAX_VERTEX_NUM; cnt++) visit[cnt]=0;\n        pathnum=0;\n        printf("7.28 \u8f93\u51fa\u6240\u6709 %c \u5230 %c \u7684\u8def\u5f84\\n", tmp[0], tmp[3]);\n        FindAllPath(G, i, j, 0);\n        if (pathnum==0) {\n            printf("\\t- \u8d70\u4e0d\u901a\\n");\n        }\n        for (i=0; i<pathnum; i++) {\n            printf("\\t%d %s\\n", i+1, paths[i]);\n        }\n    }\n    return 0;\n}\n\n')),(0,r.kt)("h2",{id:"\u6811\u6a21\u677f"},"\u6811\u6a21\u677f"),(0,r.kt)("h3",{id:"\u6ce8\u91ca\u7248"},"\u6ce8\u91ca\u7248"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include<bits/stdc++.h>\n#include<cmath>\n \n#define mem(a,b) memset(a,b,sizeof a);\n \nusing namespace std;\n \ntypedef long long ll;\n \nconst int maxn=50;\nint mid[maxn],po[maxn],pr[maxn];\nint first;\n \nstruct node\n{\n    int l,r;\n}T[maxn];\n \n// \u4e2d\u5e8f+\u5148\u5e8f=>\u4e8c\u53c9\u6811\nint mid_pr_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386  lb,rb\uff1a\u8868\u793a\u5148\u5e8f\u904d\u5386\n{\n\xa0\xa0\xa0\xa0// \u8fd9\u91cc\u4e0d\u80fd\u7b49\u4e8e\uff0c\u56e0\u4e3a\u5047\u8bbe\uff1alen==1\uff0c\u5219la==ra\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u662f\u6709\u4e00\u4e2a rt \u7684\uff0c\u5374\u6ca1\u88ab\u5efa\u7acb\n    if(la>ra) return 0; \n    int rt=pr[lb]; // \u56e0\u4e3a\u5148\u5e8f\u904d\u5386\u7b2c\u4e00\u4e2a\u662f\u6839\u8282\u70b9\n    int p1=la,p2;\n \n    while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\n    p2=p1-la;\n    T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09\n    T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09\n \n    return rt;\n}\n \n// \u4e2d\u5e8f+\u540e\u5e8f=>\u4e8c\u53c9\u6811\nint mid_po_build(int la,int ra,int lb,int rb) // la,ra\uff1a\u8868\u793a\u4e2d\u5e8f\u904d\u5386  lb,rb\uff1a\u8868\u793a\u540e\u5e8f\u904d\u5386\n{\n    if(la>ra) return 0;\n    int rt=po[rb]; // \u56e0\u4e3a\u540e\u5e8f\u904d\u5386\u6700\u540e\u4e00\u4e2a\u662f\u6839\u8282\u70b9\n    int p1=la,p2;\n \n    while(mid[p1]!=rt) p1++; // \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u6839\u8282\u70b9\n    p2=p1-la;\n    T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1); // \u5de6\u5b50\u6811\uff08\u9501\u5b9a\u5de6\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09\n    T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1); // \u53f3\u5b50\u6811\uff08\u9501\u5b9a\u53f3\u5b50\u6811\u8303\u56f4\u7684\u4e0b\u6807\uff09\n \n    return rt;\n}\n \n// \u6c42\u6811\u9ad8\nint getHeight(int rt)\n{\n\xa0 \xa0 if(rt==0) return 0;\n\xa0 \xa0 return 1+max(getHeight(T[rt].l),getHeight(T[rt].r));\n}\n \n// \u5c42\u5e8f\u904d\u5386\nvoid bfs(int rt)\n{\n    queue<int> q;\n    vector<int> v;\n    q.push(rt);\n \n    while(!q.empty())\n    {\n        int w=q.front();\n        q.pop();\n        v.push_back(w);\n        if(T[w].l!=0) q.push(T[w].l);\n        if(T[w].r!=0) q.push(T[w].r);\n    }\n \n    int len=v.size();\n    for(int i=0;i<len;i++)\n        printf("%d%c",v[i],i==len-1?\'\\n\':\' \'); // \u63a8\u8350\u8fd9\u79cd\u5199\u6cd5\uff0c\u7b80\u6d01\n}\n \n// \u5148\u5e8f\u904d\u5386\nvoid preT(int rt)\n{\n    if(rt==0) return;\n    printf(first?first=0,"%d":" %d",rt);\n    preT(T[rt].l);\n    preT(T[rt].r);\n}\n \n// \u4e2d\u5e8f\u904d\u5386\nvoid midT(int rt)\n{\n    if(rt==0) return;\n    midT(T[rt].l);\n    printf(first?first=0,"%d":" %d",rt);\n    midT(T[rt].r);\n}\n \n// \u540e\u5e8f\u904d\u5386\nvoid postT(int rt)\n{\n    if(rt==0) return;\n    postT(T[rt].l);\n    postT(T[rt].r);\n    printf(first?first=0,"%d":" %d",rt);\n}\n \nint main()\n{\n    int n;\n    while(~scanf("%d",&n))\n    {\n        first=1;\n        for(int i=0;i<n;i++) scanf("%d",&po[i]); // \u540e\u5e8f\u7ed3\u70b9\n//        for(int i=0;i<n;i++) scanf("%d",&pr[i]); // \u5148\u5e8f\u7ed3\u70b9\n        for(int i=0;i<n;i++) scanf("%d",&mid[i]); // \u4e2d\u5e8f\u7ed3\u70b9\n \n        int rt=mid_po_build(0,n-1,0,n-1); // \u4e2d+\u540e\uff0c\u8fd4\u56de\u6839\u8282\u70b9\n//        int rt=mid_pr_build(0,n-1,0,n-1); // \u4e2d+\u5148\uff0c\u8fd4\u56de\u6839\u8282\u70b9\n \n        bfs(rt); // \u5c42\u5e8f\u904d\u5386\n//        preT(rt); // \u5148\u5e8f\u904d\u5386\n//        puts("");\n//        postT(rt); // \u540e\u5e8f\u904d\u5386\n//        puts("");\n//        midT(rt); // \u4e2d\u5e8f\u904d\u5386\n//        puts("");\n    }\n \n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u7b80\u5316\u7248val-as-index\u82e5\u6570\u636e\u4e0d\u57281n\u5185\u5219\u53ef\u80fd\u8d8a\u754c"},"\u7b80\u5316\u7248\uff08Val As Index\uff0c\u82e5\u6570\u636e\u4e0d\u57281~N\u5185\uff0c\u5219\u53ef\u80fd\u8d8a\u754c\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include<bits/stdc++.h>\n#include<cmath>\n \n#define mem(a,b) memset(a,b,sizeof a);\n \nusing namespace std;\n \ntypedef long long ll;\n \nconst int maxn=50;\nint mid[maxn],po[maxn],pr[maxn];\nint first;\n \nstruct node\n{\n    int l,r;\n}T[maxn];\n \nint mid_pr_build(int la,int ra,int lb,int rb)\n{\n    if(la>ra) return 0;\n    int rt=pr[lb];\n    int p1=la,p2;\n \n    while(mid[p1]!=rt) p1++;\n    p2=p1-la;\n    T[rt].l=mid_pr_build(la,p1-1,lb+1,lb+p2);\n    T[rt].r=mid_pr_build(p1+1,ra,lb+p2+1,rb);\n \n    return rt;\n}\n \nint mid_po_build(int la,int ra,int lb,int rb)\n{\n    if(la>ra) return 0;\n    int rt=po[rb];\n    int p1=la,p2;\n \n    while(mid[p1]!=rt) p1++;\n    p2=p1-la;\n    T[rt].l=mid_po_build(la,p1-1,lb,lb+p2-1);\n    T[rt].r=mid_po_build(p1+1,ra,lb+p2,rb-1);\n \n    return rt;\n}\n \nint getHeight(int rt)\n{\n\xa0 \xa0 if(rt==0) return 0;\n\xa0 \xa0 return 1+max(getHeight(T[rt].l),getHeight(T[rt].r));\n}\n \nvoid bfs(int rt)\n{\n    queue<int> q;\n    vector<int> v;\n    q.push(rt);\n \n    while(!q.empty())\n    {\n        int w=q.front();\n        q.pop();\n        v.push_back(w);\n        if(T[w].l!=0) q.push(T[w].l);\n        if(T[w].r!=0) q.push(T[w].r);\n    }\n \n    int len=v.size();\n    for(int i=0;i<len;i++)\n        printf("%d%c",v[i],i==len-1?\'\\n\':\' \');\n}\n \nvoid preT(int rt)\n{\n    if(rt==0) return;\n    printf(first?first=0,"%d":" %d",rt);\n    preT(T[rt].l);\n    preT(T[rt].r);\n}\n \nvoid midT(int rt)\n{\n    if(rt==0) return;\n    midT(T[rt].l);\n    printf(first?first=0,"%d":" %d",rt);\n    midT(T[rt].r);\n}\n \nvoid postT(int rt)\n{\n    if(rt==0) return;\n    postT(T[rt].l);\n    postT(T[rt].r);\n    printf(first?first=0,"%d":" %d",rt);\n}\n \nint main()\n{\n    int n;\n    while(~scanf("%d",&n))\n    {\n        first=1;\n        for(int i=0;i<n;i++) scanf("%d",&po[i]);\n//        for(int i=0;i<n;i++) scanf("%d",&pr[i]);\n        for(int i=0;i<n;i++) scanf("%d",&mid[i]);\n \n        int rt=mid_po_build(0,n-1,0,n-1);\n//        int rt=mid_pr_build(0,n-1,0,n-1);\n \n        bfs(rt);\n//        preT(rt);\n//        postT(rt);\n//        midT(rt);\n    }\n \n    return 0;\n}\n')),(0,r.kt)("h3",{id:"\u7b80\u5316\u7248val-not-as-index\u53ef\u4ee5\u5b58\u4efb\u610f\u7684-val"},"\u7b80\u5316\u7248\uff08Val Not As Index\uff0c\u53ef\u4ee5\u5b58\u4efb\u610f\u7684 Val\uff09"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},'#include<bits/stdc++.h>\n#include<cmath>\n \n#define mem(a,b) memset(a,b,sizeof a)\n#define ssclr(ss) ss.clear(), ss.str("")\n#define INF 0x3f3f3f3f\n#define MOD 1000000007\n \nusing namespace std;\n \ntypedef long long ll;\n \nconst int maxn=5e4+1000;\n \nint f;\nint pre[maxn], in[maxn];\n \nstruct node\n{\n    int l,r,d;\n}T[maxn];\n \nint create(int l1,int r1,int l2,int r2) // in pre\n{\n    if(l2>r2) return -1;\n    int rt=l2;\n    int p1=l1,p2;\n \n    while(in[p1]!=pre[rt]) p1++;\n    p2=p1-l1;\n \n    T[rt].d=pre[rt];\n    T[rt].l=create(l1,p1-1,l2+1,l2+p2);\n    T[rt].r=create(p1+1,r1,l2+p2+1,r2);\n \n    return rt;\n}\n \nvoid postT(int rt)\n{\n    if(rt==-1 || !f) return;\n    postT(T[rt].l);\n    postT(T[rt].r);\n    if(f) f=0, printf("%d\\n",T[rt].d);\n}\n \nint main()\n{\n    int n;\n    scanf("%d",&n);\n    for(int i=0;i<n;i++) scanf("%d",&pre[i]);\n    for(int i=0;i<n;i++) scanf("%d",&in[i]);\n    int rt=create(0,n-1,0,n-1);\n    f=1, postT(rt);\n \n    return 0;\n}\n')))}o.isMDXComponent=!0}}]);