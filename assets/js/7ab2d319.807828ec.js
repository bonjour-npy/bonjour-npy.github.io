"use strict";(self.webpackChunknpy_notebook=self.webpackChunknpy_notebook||[]).push([[5736],{8734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(5893),i=t(1151);const a={},o="LeNet",s={id:"Deep-Learning/\u57fa\u7840\u77e5\u8bc6/LeNet",title:"LeNet",description:"\u80cc\u666f",source:"@site/docs/Deep-Learning/3-\u57fa\u7840\u77e5\u8bc6/LeNet.md",sourceDirName:"Deep-Learning/3-\u57fa\u7840\u77e5\u8bc6",slug:"/Deep-Learning/\u57fa\u7840\u77e5\u8bc6/LeNet",permalink:"/docs/Deep-Learning/\u57fa\u7840\u77e5\u8bc6/LeNet",draft:!1,unlisted:!1,editUrl:"https://github.com/bonjour-npy/bonjour-npy.github.io/tree/master/docs/Deep-Learning/3-\u57fa\u7840\u77e5\u8bc6/LeNet.md",tags:[],version:"current",frontMatter:{},sidebar:"deep_learning",previous:{title:"K-fold cross-validation",permalink:"/docs/Deep-Learning/\u57fa\u7840\u77e5\u8bc6/K-foldCross-validation"},next:{title:"\u5173\u4e8eLogistic Regression",permalink:"/docs/Deep-Learning/\u57fa\u7840\u77e5\u8bc6/LogisticRegression"}},c={},l=[{value:"\u80cc\u666f",id:"\u80cc\u666f",level:2},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",level:2},{value:"\u95ee\u9898",id:"\u95ee\u9898",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"lenet",children:"LeNet"})}),"\n",(0,r.jsx)(n.h2,{id:"\u80cc\u666f",children:"\u80cc\u666f"}),"\n",(0,r.jsx)(n.p,{children:"LeNet\u662f\u7531Yann LeCun\u7b49\u4eba\u4e8e1998\u5e74\u63d0\u51fa\u7684\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\uff0c\u8be5\u7ed3\u6784\u7531\u5377\u79ef\u5c42\u3001\u6c60\u5316\u5c42\u548c\u5168\u8fde\u63a5\u5c42\u7ec4\u6210\uff0c\u53ef\u4ee5\u9ad8\u6548\u5730\u5904\u7406\u624b\u5199\u6570\u5b57\u56fe\u50cf\uff0c\u5e76\u5728MNIST\u6570\u636e\u96c6\u4e0a\u53d6\u5f97\u4e86\u5f88\u597d\u7684\u6027\u80fd\u3002"}),"\n",(0,r.jsx)(n.p,{children:"LeNet-5\u7684\u6210\u529f\u6807\u5fd7\u7740\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u5728\u8ba1\u7b97\u673a\u89c6\u89c9\u9886\u57df\u4e2d\u7684\u5d1b\u8d77\uff0c\u5e76\u4fc3\u8fdb\u4e86\u6df1\u5ea6\u5b66\u4e60\u7684\u5feb\u901f\u53d1\u5c55\u3002"}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\u4ee3\u7801\u5b9e\u73b0",children:"\u4ee3\u7801\u5b9e\u73b0"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import torch\nimport numpy as np\nfrom torch import nn as nn\nfrom torch.nn import functional as F\nfrom d2l import torch as d2l\nfrom matplotlib import pyplot as plt\nimport os\n\nos.environ['http_proxy'] = 'http://127.0.0.1:7890'\nos.environ['https_proxy'] = 'https://127.0.0.1:7890'\n\n\nclass LeNetReshape(nn.Module):\n    def __init__(self):\n        super(LeNetReshape, self).__init__()\n\n    def forward(self, x):\n        return x.reshape(-1, 1, 28, 28)\n\n\nclass LeNet5(nn.Module):\n    def __init__(self):\n        super(LeNet5, self).__init__()\n        self.net = torch.nn.Sequential(\n            LeNetReshape(),\n            # \u6fc0\u6d3b\u51fd\u6570\u5e94\u4e3aSigmoid\n            nn.Conv2d(1, 6, kernel_size=5, padding=2), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2),\n            nn.Conv2d(6, 16, kernel_size=5), nn.LeakyReLU(), nn.AvgPool2d(kernel_size=2, stride=2),\n            nn.Flatten(),\n            nn.Linear(16 * 5 * 5, 120), nn.LeakyReLU(),\n            nn.Linear(120, 84), nn.Sigmoid(),\n            nn.Linear(84, 10))\n\n    def forward(self, x):\n        return self.net(x)\n\n\ndef evaluate_accuracy_gpu(net, data_iter, device=None):\n    if isinstance(net, torch.nn.Module):\n        net.eval()\n        if not device:\n            device = next(iter(net.parameters())).device\n    metric = d2l.Accumulator(2)\n    for X, y in data_iter:\n        if isinstance(X, list):\n            X = [x.to(device) for x in X]\n        else:\n            X = X.to(device)\n        y = y.to(device)\n        metric.add(d2l.accuracy(net(X), y), y.numel())  # \u6b64\u5904accuracy\u662f\u7edf\u8ba1\n    return metric[0] / metric[1]\n\n\ndef accuracy(y_hat, y):\n    return torch.sum(y_hat.argmax(dim=1) == y)\n\n\ndef train(net, train_iter, test_iter, num_epochs, lr, device):\n    def init_weights(m):\n        if type(m) == nn.Linear or type(m) == nn.Conv2d:\n            nn.init.xavier_uniform_(m.weight)\n\n    net.apply(init_weights)\n    net.to(device)\n    optimizer = torch.optim.SGD(net.parameters(), lr=lr)\n    loss = torch.nn.CrossEntropyLoss()\n    loss.to(device)\n    animator = d2l.Animator(xlabel='epoch', xlim=[1, num_epochs],\n                            legend=['train loss', 'train acc', 'test acc'])\n    timer, num_batches = d2l.Timer(), len(train_iter)\n    metric = d2l.Accumulator(3)\n    net.train()\n    for epoch in range(num_epochs):\n        for batch, (X, y) in enumerate(train_iter):\n            timer.start()\n            optimizer.zero_grad()\n            X, y = X.to(device), y.to(device)\n            y_hat = net(X)\n            l = loss(y_hat, y)\n            l.backward()\n            optimizer.step()\n            metric.add(l * X.shape[0], accuracy(y_hat, y), y.numel())\n            timer.stop()\n            train_l = metric[0] / metric[2]\n            train_acc = metric[1] / metric[2]\n            if (batch + 1) % (num_batches // 5) == 0 or batch == num_batches - 1:\n                animator.add(epoch + (batch + 1) / num_batches, (train_l, train_acc, None))\n        test_acc = evaluate_accuracy_gpu(net, test_iter)\n        animator.add(epoch + 1, (None, None, test_acc))\n    print(f'loss {train_l:.3f}, train acc {train_acc:.3f}, test acc {test_acc:.3f}')\n    print(f'{metric[2] * num_epochs / timer.sum():.1f} examples/sec on {str(device)}')\n    plt.show()\n\nbatch_size = 256\ntrain_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)\nlr, num_epochs = 0.9, 10\nlenet = LeNet5()\ntrain(lenet, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"\u95ee\u9898",children:"\u95ee\u9898"}),"\n",(0,r.jsxs)(n.p,{children:["\u5728\u5206\u7c7b\u6a21\u578b\u4e2d\uff0c\u6700\u540e\u4e24\u4e2a\u5168\u8fde\u63a5\u5c42\u4e4b\u95f4",(0,r.jsx)(n.strong,{children:"\u4e0d\u8981\u4f7f\u7528ReLU"}),"\u6fc0\u6d3b\u51fd\u6570\u3002\u56e0\u4e3aReLU\u7684\u8303\u56f4\u662f[0, +\u221e)\uff0c\u5b83\u4f1a\u5c06\u6240\u6709\u8d1f\u6570\u90fd\u53d8\u62100\u3002\u800c\u6700\u540e\u4e00\u5c42\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u4e86\u7c7b\u522b\u4fe1\u606f\uff0c\u5012\u6570\u7b2c\u4e8c\u5c42\u7684\u8f93\u51fa\u503c\u5305\u542b\u7740\u975e\u5e38\u91cd\u8981\u7684\u7c7b\u522b\u4fe1\u606f\uff0c\u6b64\u65f6\u4f7f\u7528\u6fc0\u6d3b\u51fd\u6570\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4fe1\u606f\u4e22\u5931\u3002"]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(7294);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);